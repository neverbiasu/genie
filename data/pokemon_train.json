[
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Absol\",\n  \"types\": [\n    \"Dark\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Super Luck\": \"This Pokemon's moves have an increased critical hit ratio.\"\n  },\n  \"moves\": {\n    \"Night Slash\": {\n      \"power\": 70,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Dark\",\n      \"effect\": \"The ratio for critical hit +1.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Thunder Punch\": {\n      \"power\": 75,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Electric\",\n      \"effect\": \"Has a 10% chance to paralyze the target.\",\n      \"property\": [\n        \"contact\"\n      ]\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass Absol(PokemonBase):\n    _species='Absol'\n    _types=['Dark']\n    _gender='Male'\n    _ability=['Super Luck']\n    _move_1=('Night Slash',70,100,'Physical','Dark',0,['contact'])\n    _move_2=('Thunder Punch',75,100,'Physical','Electric',0,['contact'])\n    def __init__(self):\n        super().__init__()\n\n    def get_crit(self):\n        crit_mult=[0,24,8,2,1]\n        crit_ratio=self['boosts']['crit']\n        crit_ratio=min(3,crit_ratio+1)\n        if self['act']['id']=='Night Slash':\n            crit_ratio=min(3,crit_ratio+1)\n        crit=False\n        if rnd()*crit_mult[crit_ratio+1]<1:\n            crit=True\n        return crit\n\n    def move_1(self): # Night Slash\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n\n    def move_2(self): # Thunder Punch\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<10/100:\n                self.target.set_status('PAR')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Aerodactyl\",\n  \"types\": [\n    \"Rock\",\n    \"Flying\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Tough Claws\": \"This Pokemon's contact moves have their power multiplied by 1.3.\"\n  },\n  \"moves\": {\n    \"Rock Slide\": {\n      \"power\": 75,\n      \"accuracy\": 90,\n      \"category\": \"Physical\",\n      \"type\": \"Rock\",\n      \"effect\": \"Has a 30% chance to make the target flinch.\"\n    },\n    \"Dual Wingbeat\": {\n      \"power\": 40,\n      \"accuracy\": 90,\n      \"category\": \"Physical\",\n      \"type\": \"Flying\",\n      \"effect\": \"Hits twice.\",\n      \"property\": [\n        \"contact\"\n      ]\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass Aerodactyl(PokemonBase):\n    _species='Aerodactyl'\n    _types=['Rock','Flying']\n    _gender='Male'\n    _ability=['Tough Claws']\n    _move_1=('Rock Slide',75,90,'Physical','Rock',0,[])\n    _move_2=('Dual Wingbeat',40,90,'Physical','Flying',0,['contact'])\n    def __init__(self):\n        super().__init__()\n\n    def get_power(self):        \n        power=self['act']['power']\n        if 'property' in self['act'] and 'contact' in self['act']['property']:\n            power*=1.3\n        return int(power*self.get_weather_power_mult())\n    \n    def move_1(self): # Rock Slide\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100:\n                self.target.set_condition('FLINCH',counter=0)\n\n    def move_2(self): # Dual Wingbeat\n        hit=True; i=0\n        while hit and i<2:\n            damage_ret=self.get_damage()\n            if damage_ret['miss']: break\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            i+=1; hit=False if self.target.isfaint() else True\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Aerodactyl\",\n  \"types\": [\n    \"Rock\",\n    \"Flying\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Momentum Claws\": \"This Pokemon's moves with claws gain 10 power for each time any single move with claws has been used.\"\n  },\n  \"moves\": {\n    \"Rock Claw\": {\n      \"power\": 80,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Rock\",\n      \"effect\": \"No additional effect.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Dual Wingbeat\": {\n      \"power\": 40,\n      \"accuracy\": 90,\n      \"category\": \"Physical\",\n      \"type\": \"Flying\",\n      \"effect\": \"Hits twice.\",\n      \"property\": [\n        \"contact\"\n      ]\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass Aerodactyl(PokemonBase):\n    _species='Aerodactyl'\n    _types=['Rock','Flying']\n    _gender='Male'\n    _ability=['Momentum Claws']\n    _move_1=('Rock Claw',80,100,'Physical','Rock',0,['contact'])\n    _move_2=('Dual Wingbeat',40,90,'Physical','Flying',0,['contact'])\n    def __init__(self):\n        super().__init__()\n\n    def onswitch(self):\n        self.set_condition('MOMENTUM_CLAWS',counter=0)\n\n    def get_power(self):\n        power=self['act']['power']\n        if self['act']['id']=='Rock Claw':\n            power+=10*self['conditions']['MOMENTUM_CLAWS']['counter']\n        return int(power*self.get_weather_power_mult())\n\n    def move_1(self): # Rock Claw\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n        self['conditions']['MOMENTUM_CLAWS']['counter']+=1\n\n    def move_2(self): # Dual Wingbeat\n        hit=True; i=0\n        while hit and i<2:\n            damage_ret=self.get_damage()\n            if damage_ret['miss']:break\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            i+=1; hit=False if self.target.isfaint() else True\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Aerodactyl\",\n  \"types\": [\n    \"Rock\",\n    \"Flying\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Momentum Claws\": \"This Pokemon's moves with claws gain 10 power for each time any single move with claws has been used.\"\n  },\n  \"moves\": {\n    \"Rock Claw\": {\n      \"power\": 80,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Rock\",\n      \"effect\": \"No additional effect.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Dual Wingbeat\": {\n      \"power\": 40,\n      \"accuracy\": 90,\n      \"category\": \"Physical\",\n      \"type\": \"Flying\",\n      \"effect\": \"Hits twice.\",\n      \"property\": [\n        \"contact\"\n      ]\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Aerodactyl(PokemonBase):\n    _species='Aerodactyl'\n    _types=['Rock','Flying']\n    _gender='Male'\n    _ability=['Momentum Claws']\n    _move_1=('Rock Claw',80,100,'Physical','Rock',0,['contact'])\n    _move_2=('Dual Wingbeat',40,90,'Physical','Flying',0,['contact'])\n    def __init__(self):\n        super().__init__()\n\n    def onswitch(self):\n        self.set_condition('MOMENTUM_CLAWS',counter=0)\n\n    def get_power(self):\n        power=self['act']['power']\n        if self['act']['id']=='Rock Claw':\n            power+=10*self['conditions']['MOMENTUM_CLAWS']['counter']\n        return int(power*self.get_weather_power_mult())\n\n    def move_1(self): # Rock Claw\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n        self['conditions']['MOMENTUM_CLAWS']['counter']+=1\n\n    def move_2(self): # Dual Wingbeat\n        hit=True; i=0\n        while hit and i<2:\n            damage_ret=self.get_damage()\n            if damage_ret['miss']:break\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            i+=1; hit=False if self.target.isfaint() else True\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Air Slash\": {\n    \"power\": 75,\n    \"accuracy\": 95,\n    \"category\": \"Special\",\n    \"type\": \"Flying\",\n    \"effect\": \"Has a 30% chance to make the target flinch.\"\n  }\n}\n```",
        "response": "```python\n@Increment(Aerodactyl,'_move_3')\ndef value():\n    return ('Air Slash',75,95,'Special','Flying',0,[])\n\n@Increment(Aerodactyl)\ndef move_3(self): # Air Slash\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if rnd()<30/100:\n            self.target.set_condition('FLINCH',counter=0)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Aerodactyl\",\n  \"types\": [\n    \"Rock\",\n    \"Flying\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Momentum Claws\": \"This Pokemon's moves with claws gain 10 power for each time any single move with claws has been used.\"\n  },\n  \"moves\": {\n    \"Rock Claw\": {\n      \"power\": 80,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Rock\",\n      \"effect\": \"No additional effect.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Dual Wingbeat\": {\n      \"power\": 40,\n      \"accuracy\": 90,\n      \"category\": \"Physical\",\n      \"type\": \"Flying\",\n      \"effect\": \"Hits twice.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Air Slash\": {\n      \"power\": 75,\n      \"accuracy\": 95,\n      \"category\": \"Special\",\n      \"type\": \"Flying\",\n      \"effect\": \"Has a 30% chance to make the target flinch.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Aerodactyl(PokemonBase):\n    _species='Aerodactyl'\n    _types=['Rock','Flying']\n    _gender='Male'\n    _ability=['Momentum Claws']\n    _move_1=('Rock Claw',80,100,'Physical','Rock',0,['contact'])\n    _move_2=('Dual Wingbeat',40,90,'Physical','Flying',0,['contact'])\n    def __init__(self):\n        super().__init__()\n\n    def onswitch(self):\n        self.set_condition('MOMENTUM_CLAWS',counter=0)\n\n    def get_power(self):\n        power=self['act']['power']\n        if self['act']['id']=='Rock Claw':\n            power+=10*self['conditions']['MOMENTUM_CLAWS']['counter']\n        return int(power*self.get_weather_power_mult())\n\n    def move_1(self): # Rock Claw\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n        self['conditions']['MOMENTUM_CLAWS']['counter']+=1\n\n    def move_2(self): # Dual Wingbeat\n        hit=True; i=0\n        while hit and i<2:\n            damage_ret=self.get_damage()\n            if damage_ret['miss']:break\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            i+=1; hit=False if self.target.isfaint() else True\n\n@Increment(Aerodactyl,'_move_3')\ndef value():\n    return ('Air Slash',75,95,'Special','Flying',0,[])\n\n@Increment(Aerodactyl)\ndef move_3(self): # Air Slash\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if rnd()<30/100:\n            self.target.set_condition('FLINCH',counter=0)\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Dragon Claw\": {\n    \"power\": 80,\n    \"accuracy\": 100,\n    \"category\": \"Physical\",\n    \"type\": \"Dragon\",\n    \"effect\": \"No additional effect.\",\n    \"property\": [\n      \"contact\"\n    ]\n  }\n}\n```",
        "response": "```python\n@Increment(Aerodactyl,'_move_4')\ndef value():\n    return ('Dragon Claw',80,100,'Physical','Dragon',0,['contact'])\n\n@Increment(Aerodactyl)\ndef move_4(self): # Dragon Claw\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n    self['conditions']['MOMENTUM_CLAWS']['counter']+=1\n\n@Increment(Aerodactyl)\ndef get_power(self):\n    power=self['act']['power']\n    if self['act']['id'] in ['Rock Claw','Dragon Claw']:\n        power+=10*self['conditions']['MOMENTUM_CLAWS']['counter']\n    return int(power*self.get_weather_power_mult())\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Aerodactyl\",\n  \"types\": [\n    \"Rock\",\n    \"Flying\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Momentum Claws\": \"This Pokemon's moves with claws gain 10 power for each time any single move with claws has been used.\"\n  },\n  \"moves\": {\n    \"Rock Claw\": {\n      \"power\": 80,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Rock\",\n      \"effect\": \"No additional effect.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Dual Wingbeat\": {\n      \"power\": 40,\n      \"accuracy\": 90,\n      \"category\": \"Physical\",\n      \"type\": \"Flying\",\n      \"effect\": \"Hits twice.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Air Slash\": {\n      \"power\": 75,\n      \"accuracy\": 95,\n      \"category\": \"Special\",\n      \"type\": \"Flying\",\n      \"effect\": \"Has a 30% chance to make the target flinch.\"\n    },\n    \"Dragon Claw\": {\n      \"power\": 80,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Dragon\",\n      \"effect\": \"No additional effect.\",\n      \"property\": [\n        \"contact\"\n      ]\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Aerodactyl(PokemonBase):\n    _species='Aerodactyl'\n    _types=['Rock','Flying']\n    _gender='Male'\n    _ability=['Momentum Claws']\n    _move_1=('Rock Claw',80,100,'Physical','Rock',0,['contact'])\n    _move_2=('Dual Wingbeat',40,90,'Physical','Flying',0,['contact'])\n    def __init__(self):\n        super().__init__()\n\n    def onswitch(self):\n        self.set_condition('MOMENTUM_CLAWS',counter=0)\n\n    def get_power(self):\n        power=self['act']['power']\n        if self['act']['id']=='Rock Claw':\n            power+=10*self['conditions']['MOMENTUM_CLAWS']['counter']\n        return int(power*self.get_weather_power_mult())\n\n    def move_1(self): # Rock Claw\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n        self['conditions']['MOMENTUM_CLAWS']['counter']+=1\n\n    def move_2(self): # Dual Wingbeat\n        hit=True; i=0\n        while hit and i<2:\n            damage_ret=self.get_damage()\n            if damage_ret['miss']:break\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            i+=1; hit=False if self.target.isfaint() else True\n\n@Increment(Aerodactyl,'_move_3')\ndef value():\n    return ('Air Slash',75,95,'Special','Flying',0,[])\n\n@Increment(Aerodactyl)\ndef move_3(self): # Air Slash\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if rnd()<30/100:\n            self.target.set_condition('FLINCH',counter=0)\n\n@Increment(Aerodactyl,'_move_4')\ndef value():\n    return ('Dragon Claw',80,100,'Physical','Dragon',0,['contact'])\n\n@Increment(Aerodactyl)\ndef move_4(self): # Dragon Claw\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n    self['conditions']['MOMENTUM_CLAWS']['counter']+=1\n\n@Increment(Aerodactyl)\ndef get_power(self):\n    power=self['act']['power']\n    if self['act']['id'] in ['Rock Claw','Dragon Claw']:\n        power+=10*self['conditions']['MOMENTUM_CLAWS']['counter']\n    return int(power*self.get_weather_power_mult())\n```\n\nThis role is gonna learn a new ability:\n```json\n{\n  \"Wind Rider\": \"This Pokemon's Speed is raised 2 stages if it uses a Flying-type move.\"\n}\n```",
        "response": "```python\n@Increment(Aerodactyl,'_ability')\ndef value():\n    return ['Momentum Claws','Wind Rider']\n\n@Increment(Aerodactyl)\ndef move_2(self): # Dual Wingbeat\n    hit=True; i=0\n    while hit and i<2:\n        damage_ret=self.get_damage()\n        if damage_ret['miss']:break\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        i+=1; hit=False if self.target.isfaint() else True\n    self.set_boost('spe',2)\n\n@Increment(Aerodactyl)\ndef move_3(self): # Air Slash\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if rnd()<30/100:\n            self.target.set_condition('FLINCH',counter=0)\n    self.set_boost('spe',2)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Aerodactyl\",\n  \"types\": [\n    \"Rock\",\n    \"Flying\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Momentum Claws\": \"This Pokemon's moves with claws gain 10 power for each time any single move with claws has been used.\",\n    \"Wind Rider\": \"This Pokemon's Speed is raised 2 stages if it uses a Flying-type move.\"\n  },\n  \"moves\": {\n    \"Rock Claw\": {\n      \"power\": 80,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Rock\",\n      \"effect\": \"No additional effect.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Dual Wingbeat\": {\n      \"power\": 40,\n      \"accuracy\": 90,\n      \"category\": \"Physical\",\n      \"type\": \"Flying\",\n      \"effect\": \"Hits twice.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Air Slash\": {\n      \"power\": 75,\n      \"accuracy\": 95,\n      \"category\": \"Special\",\n      \"type\": \"Flying\",\n      \"effect\": \"Has a 30% chance to make the target flinch.\"\n    },\n    \"Dragon Claw\": {\n      \"power\": 80,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Dragon\",\n      \"effect\": \"No additional effect.\",\n      \"property\": [\n        \"contact\"\n      ]\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Aerodactyl(PokemonBase):\n    _species='Aerodactyl'\n    _types=['Rock','Flying']\n    _gender='Male'\n    _ability=['Momentum Claws']\n    _move_1=('Rock Claw',80,100,'Physical','Rock',0,['contact'])\n    _move_2=('Dual Wingbeat',40,90,'Physical','Flying',0,['contact'])\n    def __init__(self):\n        super().__init__()\n\n    def onswitch(self):\n        self.set_condition('MOMENTUM_CLAWS',counter=0)\n\n    def get_power(self):\n        power=self['act']['power']\n        if self['act']['id']=='Rock Claw':\n            power+=10*self['conditions']['MOMENTUM_CLAWS']['counter']\n        return int(power*self.get_weather_power_mult())\n\n    def move_1(self): # Rock Claw\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n        self['conditions']['MOMENTUM_CLAWS']['counter']+=1\n\n    def move_2(self): # Dual Wingbeat\n        hit=True; i=0\n        while hit and i<2:\n            damage_ret=self.get_damage()\n            if damage_ret['miss']:break\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            i+=1; hit=False if self.target.isfaint() else True\n\n@Increment(Aerodactyl,'_move_3')\ndef value():\n    return ('Air Slash',75,95,'Special','Flying',0,[])\n\n@Increment(Aerodactyl)\ndef move_3(self): # Air Slash\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if rnd()<30/100:\n            self.target.set_condition('FLINCH',counter=0)\n\n@Increment(Aerodactyl,'_move_4')\ndef value():\n    return ('Dragon Claw',80,100,'Physical','Dragon',0,['contact'])\n\n@Increment(Aerodactyl)\ndef move_4(self): # Dragon Claw\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n    self['conditions']['MOMENTUM_CLAWS']['counter']+=1\n\n@Increment(Aerodactyl)\ndef get_power(self):\n    power=self['act']['power']\n    if self['act']['id'] in ['Rock Claw','Dragon Claw']:\n        power+=10*self['conditions']['MOMENTUM_CLAWS']['counter']\n    return int(power*self.get_weather_power_mult())\n\n@Increment(Aerodactyl,'_ability')\ndef value():\n    return ['Momentum Claws','Wind Rider']\n\n@Increment(Aerodactyl)\ndef move_2(self): # Dual Wingbeat\n    hit=True; i=0\n    while hit and i<2:\n        damage_ret=self.get_damage()\n        if damage_ret['miss']:break\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        i+=1; hit=False if self.target.isfaint() else True\n    self.set_boost('spe',2)\n\n@Increment(Aerodactyl)\ndef move_3(self): # Air Slash\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if rnd()<30/100:\n            self.target.set_condition('FLINCH',counter=0)\n    self.set_boost('spe',2)\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Stone Edge\": {\n    \"power\": 100,\n    \"accuracy\": 80,\n    \"category\": \"Physical\",\n    \"type\": \"Rock\",\n    \"effect\": \"Has a higher chance for a critical hit.\",\n    \"property\": [\n      \"contact\"\n    ]\n  }\n}\n```",
        "response": "```python\n@Increment(Aerodactyl,'_move_5')\ndef value():\n    return ('Stone Edge',100,80,'Physical','Rock',0,['contact'])\n\n@Increment(Aerodactyl)\ndef get_crit(self):\n    crit_mult=[0,24,8,2,1]\n    crit_ratio=self['boosts']['crit']\n    if self['act']['id']=='Stone Edge':\n        crit_ratio=min(3,crit_ratio+1)\n    crit=False\n    if rnd()*crit_mult[crit_ratio+1]<1:\n        crit=True\n    return crit\n\n@Increment(Aerodactyl)\ndef move_5(self): # Stone Edge\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Aerodactyl\",\n  \"types\": [\n    \"Rock\",\n    \"Flying\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Rock Head\": \"This Pokemon does not receive recoil damage from its recoil moves.\"\n  },\n  \"moves\": {\n    \"Head Smash\": {\n      \"power\": 120,\n      \"accuracy\": 80,\n      \"category\": \"Physical\",\n      \"type\": \"Rock\",\n      \"effect\": \"If the user's HP is at 100%, the power is 180 instead of 120. The user takes 25% recoil damage.\",\n      \"property\": [\n        \"recoil\"\n      ]\n    },\n    \"Sky Attack\": {\n      \"power\": 140,\n      \"accuracy\": 90,\n      \"category\": \"Physical\",\n      \"type\": \"Flying\",\n      \"effect\": \"Raises the target's Defense by 1 stage before attacking. Has a 50% chance to make the target flinch if it hits.\"\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass Aerodactyl(PokemonBase):\n    _species='Aerodactyl'\n    _types=['Rock','Flying']\n    _gender='Male'\n    _ability=['Rock Head']\n    _move_1=('Head Smash',120,80,'Physical','Rock',0,['recoil'])\n    _move_2=('Sky Attack',140,90,'Physical','Flying',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def get_power(self):        \n        power=self['act']['power']\n        if self['act']['id']=='Head Smash' and self['hp']==self['max_hp']:\n            power*=1.5\n        return int(power*self.get_weather_power_mult())\n\n    def move_1(self): # Head Smash\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n\n    def move_2(self): # Sky Attack\n        self.target.set_boost('def',+1)\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<50/100:\n                self.target.set_condition('FLINCH',counter=0)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Aerodactyl\",\n  \"types\": [\n    \"Rock\",\n    \"Flying\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Rock Head\": \"This Pokemon does not receive recoil damage from its recoil moves.\"\n  },\n  \"moves\": {\n    \"Head Smash\": {\n      \"power\": 120,\n      \"accuracy\": 80,\n      \"category\": \"Physical\",\n      \"type\": \"Rock\",\n      \"effect\": \"If the user's HP is at 100%, the power is 180 instead of 120. The user takes 25% recoil damage.\",\n      \"property\": [\n        \"recoil\"\n      ]\n    },\n    \"Sky Attack\": {\n      \"power\": 140,\n      \"accuracy\": 90,\n      \"category\": \"Physical\",\n      \"type\": \"Flying\",\n      \"effect\": \"Raises the target's Defense by 1 stage before attacking. Has a 50% chance to make the target flinch if it hits.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Aerodactyl(PokemonBase):\n    _species='Aerodactyl'\n    _types=['Rock','Flying']\n    _gender='Male'\n    _ability=['Rock Head']\n    _move_1=('Head Smash',120,80,'Physical','Rock',0,['recoil'])\n    _move_2=('Sky Attack',140,90,'Physical','Flying',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def get_power(self):        \n        power=self['act']['power']\n        if self['act']['id']=='Head Smash' and self['hp']==self['max_hp']:\n            power*=1.5\n        return int(power*self.get_weather_power_mult())\n\n    def move_1(self): # Head Smash\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n\n    def move_2(self): # Sky Attack\n        self.target.set_boost('def',+1)\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<50/100:\n                self.target.set_condition('FLINCH',counter=0)\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Rock Slide\": {\n    \"power\": 75,\n    \"accuracy\": 90,\n    \"category\": \"Physical\",\n    \"type\": \"Rock\",\n    \"effect\": \"Has a 30% chance to make the target flinch.\",\n    \"property\": [\n      \"contact\"\n    ]\n  }\n}\n```",
        "response": "```python\n@Increment(Aerodactyl,'_move_3')\ndef value():\n    return ('Rock Slide',75,90,'Physical','Rock',0,['contact'])\n\n@Increment(Aerodactyl)\ndef move_3(self): # Rock Slide\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint() and rnd()<30/100:\n            self.target.set_condition('FLINCH',counter=0)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Aerodactyl\",\n  \"types\": [\n    \"Rock\",\n    \"Flying\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Rock Head\": \"This Pokemon does not receive recoil damage from its recoil moves.\"\n  },\n  \"moves\": {\n    \"Head Smash\": {\n      \"power\": 120,\n      \"accuracy\": 80,\n      \"category\": \"Physical\",\n      \"type\": \"Rock\",\n      \"effect\": \"If the user's HP is at 100%, the power is 180 instead of 120. The user takes 25% recoil damage.\",\n      \"property\": [\n        \"recoil\"\n      ]\n    },\n    \"Sky Attack\": {\n      \"power\": 140,\n      \"accuracy\": 90,\n      \"category\": \"Physical\",\n      \"type\": \"Flying\",\n      \"effect\": \"Raises the target's Defense by 1 stage before attacking. Has a 50% chance to make the target flinch if it hits.\"\n    },\n    \"Rock Slide\": {\n      \"power\": 75,\n      \"accuracy\": 90,\n      \"category\": \"Physical\",\n      \"type\": \"Rock\",\n      \"effect\": \"Has a 30% chance to make the target flinch.\",\n      \"property\": [\n        \"contact\"\n      ]\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Aerodactyl(PokemonBase):\n    _species='Aerodactyl'\n    _types=['Rock','Flying']\n    _gender='Male'\n    _ability=['Rock Head']\n    _move_1=('Head Smash',120,80,'Physical','Rock',0,['recoil'])\n    _move_2=('Sky Attack',140,90,'Physical','Flying',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def get_power(self):        \n        power=self['act']['power']\n        if self['act']['id']=='Head Smash' and self['hp']==self['max_hp']:\n            power*=1.5\n        return int(power*self.get_weather_power_mult())\n\n    def move_1(self): # Head Smash\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n\n    def move_2(self): # Sky Attack\n        self.target.set_boost('def',+1)\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<50/100:\n                self.target.set_condition('FLINCH',counter=0)\n\n@Increment(Aerodactyl,'_move_3')\ndef value():\n    return ('Rock Slide',75,90,'Physical','Rock',0,['contact'])\n\n@Increment(Aerodactyl)\ndef move_3(self): # Rock Slide\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint() and rnd()<30/100:\n            self.target.set_condition('FLINCH',counter=0)\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Aerial Ace\": {\n    \"power\": 60,\n    \"accuracy\": 1000000,\n    \"category\": \"Physical\",\n    \"type\": \"Flying\",\n    \"effect\": \"Never misses.\",\n    \"property\": [\n      \"contact\"\n    ]\n  }\n}\n```",
        "response": "```python\n@Increment(Aerodactyl,'_move_4')\ndef value():\n    return ('Aerial Ace',60,1000000,'Physical','Flying',0,['contact'])\n\n@Increment(Aerodactyl)\ndef move_4(self): # Aerial Ace\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Aerodactyl\",\n  \"types\": [\n    \"Rock\",\n    \"Flying\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Rock Head\": \"This Pokemon does not receive recoil damage from its recoil moves.\"\n  },\n  \"moves\": {\n    \"Head Smash\": {\n      \"power\": 120,\n      \"accuracy\": 80,\n      \"category\": \"Physical\",\n      \"type\": \"Rock\",\n      \"effect\": \"If the user's HP is at 100%, the power is 180 instead of 120. The user takes 25% recoil damage.\",\n      \"property\": [\n        \"recoil\"\n      ]\n    },\n    \"Sky Attack\": {\n      \"power\": 140,\n      \"accuracy\": 90,\n      \"category\": \"Physical\",\n      \"type\": \"Flying\",\n      \"effect\": \"Raises the target's Defense by 1 stage before attacking. Has a 50% chance to make the target flinch if it hits.\"\n    },\n    \"Rock Slide\": {\n      \"power\": 75,\n      \"accuracy\": 90,\n      \"category\": \"Physical\",\n      \"type\": \"Rock\",\n      \"effect\": \"Has a 30% chance to make the target flinch.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Aerial Ace\": {\n      \"power\": 60,\n      \"accuracy\": 1000000,\n      \"category\": \"Physical\",\n      \"type\": \"Flying\",\n      \"effect\": \"Never misses.\",\n      \"property\": [\n        \"contact\"\n      ]\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Aerodactyl(PokemonBase):\n    _species='Aerodactyl'\n    _types=['Rock','Flying']\n    _gender='Male'\n    _ability=['Rock Head']\n    _move_1=('Head Smash',120,80,'Physical','Rock',0,['recoil'])\n    _move_2=('Sky Attack',140,90,'Physical','Flying',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def get_power(self):        \n        power=self['act']['power']\n        if self['act']['id']=='Head Smash' and self['hp']==self['max_hp']:\n            power*=1.5\n        return int(power*self.get_weather_power_mult())\n\n    def move_1(self): # Head Smash\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n\n    def move_2(self): # Sky Attack\n        self.target.set_boost('def',+1)\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<50/100:\n                self.target.set_condition('FLINCH',counter=0)\n\n@Increment(Aerodactyl,'_move_3')\ndef value():\n    return ('Rock Slide',75,90,'Physical','Rock',0,['contact'])\n\n@Increment(Aerodactyl)\ndef move_3(self): # Rock Slide\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint() and rnd()<30/100:\n            self.target.set_condition('FLINCH',counter=0)\n\n@Increment(Aerodactyl,'_move_4')\ndef value():\n    return ('Aerial Ace',60,1000000,'Physical','Flying',0,['contact'])\n\n@Increment(Aerodactyl)\ndef move_4(self): # Aerial Ace\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n```\n\nThis role is gonna learn a new ability:\n```json\n{\n  \"Velocity Surge\": \"When the user's Speed is raised, the user's Attack is raised by 1 stage.\"\n}\n```",
        "response": "```python\n@Increment(Aerodactyl,'_ability')\ndef value():\n    return ['Rock Head','Velocity Surge']\n\n@Increment(Aerodactyl)\ndef set_boost(self,key,x,from_='target'):\n    bar=6 if key in ['atk','def','spa','spd','spe'] else 3\n    if x>0:\n        self['boosts'][key]=min(bar,self['boosts'][key]+x)\n    else:\n        self['boosts'][key]=max(-bar,self['boosts'][key]+x)\n    if key=='spe' and x>0:\n        self.set_boost('atk',1,'self')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Aerodactyl\",\n  \"types\": [\n    \"Rock\",\n    \"Flying\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Rock Head\": \"This Pokemon does not receive recoil damage from its recoil moves.\",\n    \"Velocity Surge\": \"When the user's Speed is raised, the user's Attack is raised by 1 stage.\"\n  },\n  \"moves\": {\n    \"Head Smash\": {\n      \"power\": 120,\n      \"accuracy\": 80,\n      \"category\": \"Physical\",\n      \"type\": \"Rock\",\n      \"effect\": \"If the user's HP is at 100%, the power is 180 instead of 120. The user takes 25% recoil damage.\",\n      \"property\": [\n        \"recoil\"\n      ]\n    },\n    \"Sky Attack\": {\n      \"power\": 140,\n      \"accuracy\": 90,\n      \"category\": \"Physical\",\n      \"type\": \"Flying\",\n      \"effect\": \"Raises the target's Defense by 1 stage before attacking. Has a 50% chance to make the target flinch if it hits.\"\n    },\n    \"Rock Slide\": {\n      \"power\": 75,\n      \"accuracy\": 90,\n      \"category\": \"Physical\",\n      \"type\": \"Rock\",\n      \"effect\": \"Has a 30% chance to make the target flinch.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Aerial Ace\": {\n      \"power\": 60,\n      \"accuracy\": 1000000,\n      \"category\": \"Physical\",\n      \"type\": \"Flying\",\n      \"effect\": \"Never misses.\",\n      \"property\": [\n        \"contact\"\n      ]\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Aerodactyl(PokemonBase):\n    _species='Aerodactyl'\n    _types=['Rock','Flying']\n    _gender='Male'\n    _ability=['Rock Head']\n    _move_1=('Head Smash',120,80,'Physical','Rock',0,['recoil'])\n    _move_2=('Sky Attack',140,90,'Physical','Flying',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def get_power(self):        \n        power=self['act']['power']\n        if self['act']['id']=='Head Smash' and self['hp']==self['max_hp']:\n            power*=1.5\n        return int(power*self.get_weather_power_mult())\n\n    def move_1(self): # Head Smash\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n\n    def move_2(self): # Sky Attack\n        self.target.set_boost('def',+1)\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<50/100:\n                self.target.set_condition('FLINCH',counter=0)\n\n@Increment(Aerodactyl,'_move_3')\ndef value():\n    return ('Rock Slide',75,90,'Physical','Rock',0,['contact'])\n\n@Increment(Aerodactyl)\ndef move_3(self): # Rock Slide\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint() and rnd()<30/100:\n            self.target.set_condition('FLINCH',counter=0)\n\n@Increment(Aerodactyl,'_move_4')\ndef value():\n    return ('Aerial Ace',60,1000000,'Physical','Flying',0,['contact'])\n\n@Increment(Aerodactyl)\ndef move_4(self): # Aerial Ace\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n\n@Increment(Aerodactyl,'_ability')\ndef value():\n    return ['Rock Head','Velocity Surge']\n\n@Increment(Aerodactyl)\ndef set_boost(self,key,x,from_='target'):\n    bar=6 if key in ['atk','def','spa','spd','spe'] else 3\n    if x>0:\n        self['boosts'][key]=min(bar,self['boosts'][key]+x)\n    else:\n        self['boosts'][key]=max(-bar,self['boosts'][key]+x)\n    if key=='spe' and x>0:\n        self.set_boost('atk',1,'self')\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Dragon Claw\": {\n    \"power\": 80,\n    \"accuracy\": 100,\n    \"category\": \"Physical\",\n    \"type\": \"Dragon\",\n    \"effect\": \"No additional effect.\",\n    \"property\": [\n      \"contact\"\n    ]\n  }\n}\n```",
        "response": "```python\n@Increment(Aerodactyl,'_move_5')\ndef value():\n    return ('Dragon Claw',80,100,'Physical','Dragon',0,['contact'])\n\n@Increment(Aerodactyl)\ndef move_5(self): # Dragon Claw\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Aeroscala\",\n  \"types\": [\n    \"Dragon\",\n    \"Flying\"\n  ],\n  \"gender\": \"Genderless\",\n  \"ability\": {\n    \"Cyclone Shield\": \"For the first 3 turns of the battle, creates a wind barrier that raises the user's Defense and Special Defense by 1 stage at the end of each turn.\"\n  },\n  \"moves\": {\n    \"Wind Vortex\": {\n      \"power\": 90,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Flying\",\n      \"effect\": \"Has a 30% chance to make the target dizzy for 3 turns. Each end of the turn, the target has a 50% chance to fall asleep. The dizzy condition is removed once it sleeps. This effect will not occur when the target is already in a status.\"\n    },\n    \"Metallic Scales\": {\n      \"power\": 0,\n      \"accuracy\": 100000,\n      \"category\": \"Status\",\n      \"type\": \"Dragon\",\n      \"effect\": \"Raises the user's Defense and Special Defense by 1 stage.\"\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass Aeroscala(PokemonBase):\n    _species='Aeroscala'\n    _types=['Dragon','Flying']\n    _gender='Genderless'\n    _ability=['Cyclone Shield']\n    _move_1=('Wind Vortex',90,100,'Special','Flying',0,[])\n    _move_2=('Metallic Scales',0,100000,'Status','Dragon',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def onswitch(self):\n        self.set_condition('CYCLONE_SHIELD',counter=0)\n\n    def endturn(self):\n        if self['conditions'].get('CYCLONE_SHIELD'):\n            self.set_boost('def',1,'self')\n            self.set_boost('spd',1,'self')\n            self['conditions']['CYCLONE_SHIELD']['counter']+=1\n            if self['conditions']['CYCLONE_SHIELD']['counter']==3:\n                del self['conditions']['CYCLONE_SHIELD']\n        if self.target['conditions'].get('DIZZY'):\n            if rnd()<50/100:\n                self.target.set_status('SLP')\n                del self.target['conditions']['DIZZY']\n            else:\n                self.target['conditions']['DIZZY']['counter']+=1\n                if self.target['conditions']['DIZZY']['counter']==3:\n                    del self.target['conditions']['DIZZY']\n\n    def move_1(self): # Wind Vortex\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100:\n                self.target.set_condition('DIZZY',counter=0)\n\n    def move_2(self): # Metallic Scales\n        self.set_boost('def',1,'self')\n        self.set_boost('spd',1,'self')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Aeroscala\",\n  \"types\": [\n    \"Dragon\",\n    \"Flying\"\n  ],\n  \"gender\": \"Genderless\",\n  \"ability\": {\n    \"Cyclone Shield\": \"For the first 3 turns of the battle, creates a wind barrier that raises the user's Defense and Special Defense by 1 stage at the end of each turn.\"\n  },\n  \"moves\": {\n    \"Wind Vortex\": {\n      \"power\": 90,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Flying\",\n      \"effect\": \"Has a 30% chance to make the target dizzy for 3 turns. Each end of the turn, the target has a 50% chance to fall asleep. The dizzy condition is removed once it sleeps. This effect will not occur when the target is already in a status.\"\n    },\n    \"Metallic Scales\": {\n      \"power\": 0,\n      \"accuracy\": 100000,\n      \"category\": \"Status\",\n      \"type\": \"Dragon\",\n      \"effect\": \"Raises the user's Defense and Special Defense by 1 stage.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Aeroscala(PokemonBase):\n    _species='Aeroscala'\n    _types=['Dragon','Flying']\n    _gender='Genderless'\n    _ability=['Cyclone Shield']\n    _move_1=('Wind Vortex',90,100,'Special','Flying',0,[])\n    _move_2=('Metallic Scales',0,100000,'Status','Dragon',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def onswitch(self):\n        self.set_condition('CYCLONE_SHIELD',counter=0)\n\n    def endturn(self):\n        if self['conditions'].get('CYCLONE_SHIELD'):\n            self.set_boost('def',1,'self')\n            self.set_boost('spd',1,'self')\n            self['conditions']['CYCLONE_SHIELD']['counter']+=1\n            if self['conditions']['CYCLONE_SHIELD']['counter']==3:\n                del self['conditions']['CYCLONE_SHIELD']\n        if self.target['conditions'].get('DIZZY'):\n            if rnd()<50/100:\n                self.target.set_status('SLP')\n                del self.target['conditions']['DIZZY']\n            else:\n                self.target['conditions']['DIZZY']['counter']+=1\n                if self.target['conditions']['DIZZY']['counter']==3:\n                    del self.target['conditions']['DIZZY']\n\n    def move_1(self): # Wind Vortex\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100:\n                self.target.set_condition('DIZZY',counter=0)\n\n    def move_2(self): # Metallic Scales\n        self.set_boost('def',1,'self')\n        self.set_boost('spd',1,'self')\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Gale Force\": {\n    \"power\": 110,\n    \"accuracy\": 75,\n    \"category\": \"Special\",\n    \"type\": \"Flying\",\n    \"effect\": \"This move has a high critical hit ratio.\"\n  }\n}\n```",
        "response": "```python\n@Increment(Aeroscala,'_move_3')\ndef value():\n    return ('Gale Force',110,75,'Special','Flying',0,[])\n\n@Increment(Aeroscala)\ndef move_3(self): # Gale Force\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n\n@Increment(Aeroscala)\ndef get_crit(self):\n    crit_mult=[0,24,8,2,1]\n    crit_ratio=self['boosts']['crit']\n    if self['act']['id']=='Gale Force':\n        crit_ratio=min(3,crit_ratio+1)\n    crit=True if rnd()*crit_mult[crit_ratio+1]<1 else False\n    return crit\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Aeroscala\",\n  \"types\": [\n    \"Dragon\",\n    \"Flying\"\n  ],\n  \"gender\": \"Genderless\",\n  \"ability\": {\n    \"Cyclone Shield\": \"For the first 3 turns of the battle, creates a wind barrier that raises the user's Defense and Special Defense by 1 stage at the end of each turn.\"\n  },\n  \"moves\": {\n    \"Wind Vortex\": {\n      \"power\": 90,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Flying\",\n      \"effect\": \"Has a 30% chance to make the target dizzy for 3 turns. Each end of the turn, the target has a 50% chance to fall asleep. The dizzy condition is removed once it sleeps. This effect will not occur when the target is already in a status.\"\n    },\n    \"Metallic Scales\": {\n      \"power\": 0,\n      \"accuracy\": 100000,\n      \"category\": \"Status\",\n      \"type\": \"Dragon\",\n      \"effect\": \"Raises the user's Defense and Special Defense by 1 stage.\"\n    },\n    \"Gale Force\": {\n      \"power\": 110,\n      \"accuracy\": 75,\n      \"category\": \"Special\",\n      \"type\": \"Flying\",\n      \"effect\": \"This move has a high critical hit ratio.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Aeroscala(PokemonBase):\n    _species='Aeroscala'\n    _types=['Dragon','Flying']\n    _gender='Genderless'\n    _ability=['Cyclone Shield']\n    _move_1=('Wind Vortex',90,100,'Special','Flying',0,[])\n    _move_2=('Metallic Scales',0,100000,'Status','Dragon',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def onswitch(self):\n        self.set_condition('CYCLONE_SHIELD',counter=0)\n\n    def endturn(self):\n        if self['conditions'].get('CYCLONE_SHIELD'):\n            self.set_boost('def',1,'self')\n            self.set_boost('spd',1,'self')\n            self['conditions']['CYCLONE_SHIELD']['counter']+=1\n            if self['conditions']['CYCLONE_SHIELD']['counter']==3:\n                del self['conditions']['CYCLONE_SHIELD']\n        if self.target['conditions'].get('DIZZY'):\n            if rnd()<50/100:\n                self.target.set_status('SLP')\n                del self.target['conditions']['DIZZY']\n            else:\n                self.target['conditions']['DIZZY']['counter']+=1\n                if self.target['conditions']['DIZZY']['counter']==3:\n                    del self.target['conditions']['DIZZY']\n\n    def move_1(self): # Wind Vortex\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100:\n                self.target.set_condition('DIZZY',counter=0)\n\n    def move_2(self): # Metallic Scales\n        self.set_boost('def',1,'self')\n        self.set_boost('spd',1,'self')\n\n@Increment(Aeroscala,'_move_3')\ndef value():\n    return ('Gale Force',110,75,'Special','Flying',0,[])\n\n@Increment(Aeroscala)\ndef move_3(self): # Gale Force\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n\n@Increment(Aeroscala)\ndef get_crit(self):\n    crit_mult=[0,24,8,2,1]\n    crit_ratio=self['boosts']['crit']\n    if self['act']['id']=='Gale Force':\n        crit_ratio=min(3,crit_ratio+1)\n    crit=True if rnd()*crit_mult[crit_ratio+1]<1 else False\n    return crit\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Ancient Wisdom\": {\n    \"power\": 0,\n    \"accuracy\": 100000,\n    \"category\": \"Status\",\n    \"type\": \"Dragon\",\n    \"effect\": \"Boosts the user's Special Attack and Special Defense by 1 stage each.\"\n  }\n}\n```",
        "response": "```python\n@Increment(Aeroscala,'_move_4')\ndef value():\n    return ('Ancient Wisdom',0,100000,'Status','Dragon',0,[])\n\n@Increment(Aeroscala)\ndef move_4(self): # Ancient Wisdom\n    self.set_boost('spa',1,'self')\n    self.set_boost('spd',1,'self')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Aeroscala\",\n  \"types\": [\n    \"Dragon\",\n    \"Flying\"\n  ],\n  \"gender\": \"Genderless\",\n  \"ability\": {\n    \"Cyclone Shield\": \"For the first 3 turns of the battle, creates a wind barrier that raises the user's Defense and Special Defense by 1 stage at the end of each turn.\"\n  },\n  \"moves\": {\n    \"Wind Vortex\": {\n      \"power\": 90,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Flying\",\n      \"effect\": \"Has a 30% chance to make the target dizzy for 3 turns. Each end of the turn, the target has a 50% chance to fall asleep. The dizzy condition is removed once it sleeps. This effect will not occur when the target is already in a status.\"\n    },\n    \"Metallic Scales\": {\n      \"power\": 0,\n      \"accuracy\": 100000,\n      \"category\": \"Status\",\n      \"type\": \"Dragon\",\n      \"effect\": \"Raises the user's Defense and Special Defense by 1 stage.\"\n    },\n    \"Gale Force\": {\n      \"power\": 110,\n      \"accuracy\": 75,\n      \"category\": \"Special\",\n      \"type\": \"Flying\",\n      \"effect\": \"This move has a high critical hit ratio.\"\n    },\n    \"Ancient Wisdom\": {\n      \"power\": 0,\n      \"accuracy\": 100000,\n      \"category\": \"Status\",\n      \"type\": \"Dragon\",\n      \"effect\": \"Boosts the user's Special Attack and Special Defense by 1 stage each.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Aeroscala(PokemonBase):\n    _species='Aeroscala'\n    _types=['Dragon','Flying']\n    _gender='Genderless'\n    _ability=['Cyclone Shield']\n    _move_1=('Wind Vortex',90,100,'Special','Flying',0,[])\n    _move_2=('Metallic Scales',0,100000,'Status','Dragon',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def onswitch(self):\n        self.set_condition('CYCLONE_SHIELD',counter=0)\n\n    def endturn(self):\n        if self['conditions'].get('CYCLONE_SHIELD'):\n            self.set_boost('def',1,'self')\n            self.set_boost('spd',1,'self')\n            self['conditions']['CYCLONE_SHIELD']['counter']+=1\n            if self['conditions']['CYCLONE_SHIELD']['counter']==3:\n                del self['conditions']['CYCLONE_SHIELD']\n        if self.target['conditions'].get('DIZZY'):\n            if rnd()<50/100:\n                self.target.set_status('SLP')\n                del self.target['conditions']['DIZZY']\n            else:\n                self.target['conditions']['DIZZY']['counter']+=1\n                if self.target['conditions']['DIZZY']['counter']==3:\n                    del self.target['conditions']['DIZZY']\n\n    def move_1(self): # Wind Vortex\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100:\n                self.target.set_condition('DIZZY',counter=0)\n\n    def move_2(self): # Metallic Scales\n        self.set_boost('def',1,'self')\n        self.set_boost('spd',1,'self')\n\n@Increment(Aeroscala,'_move_3')\ndef value():\n    return ('Gale Force',110,75,'Special','Flying',0,[])\n\n@Increment(Aeroscala)\ndef move_3(self): # Gale Force\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n\n@Increment(Aeroscala)\ndef get_crit(self):\n    crit_mult=[0,24,8,2,1]\n    crit_ratio=self['boosts']['crit']\n    if self['act']['id']=='Gale Force':\n        crit_ratio=min(3,crit_ratio+1)\n    crit=True if rnd()*crit_mult[crit_ratio+1]<1 else False\n    return crit\n\n@Increment(Aeroscala,'_move_4')\ndef value():\n    return ('Ancient Wisdom',0,100000,'Status','Dragon',0,[])\n\n@Increment(Aeroscala)\ndef move_4(self): # Ancient Wisdom\n    self.set_boost('spa',1,'self')\n    self.set_boost('spd',1,'self')\n```\n\nThis role is gonna learn a new ability:\n```json\n{\n  \"Tempest Fury\": \"Increases the power of Flying-type moves by 50% when HP is below 1/3.\"\n}\n```",
        "response": "```python\n@Increment(Aeroscala,'_ability')\ndef value():\n    return ['Cyclone Shield','Tempest Fury']\n\n@Increment(Aeroscala)\ndef get_power(self):\n    power=self['act']['power']\n    if self['act']['type']=='Flying' and self['hp']<self['max_hp']//3:\n        power*=1.5\n    return int(power*self.get_weather_power_mult())\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Alloraptor\",\n  \"types\": [\n    \"Dragon\",\n    \"Steel\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Prehistoric Fury\": \"This Pokemon's Dragon-type moves have their power multiplied by 1.5 when its HP is below half.\"\n  },\n  \"moves\": {\n    \"Iron Tail\": {\n      \"power\": 100,\n      \"accuracy\": 75,\n      \"category\": \"Physical\",\n      \"type\": \"Steel\",\n      \"effect\": \"Has a 20% chance to lower the target's Defense by 1 stage.\"\n    },\n    \"Fossil Fang\": {\n      \"power\": 90,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Dragon\",\n      \"effect\": \"Has a 30% chance to make the target flinch.\",\n      \"property\": [\n        \"contact\"\n      ]\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass Alloraptor(PokemonBase):\n    _species='Alloraptor'\n    _types=['Dragon','Steel']\n    _gender='Male'\n    _ability=['Prehistoric Fury']\n    _move_1=('Iron Tail',100,75,'Physical','Steel',0,[])\n    _move_2=('Fossil Fang',90,100,'Physical','Dragon',0,['contact'])\n    def __init__(self):\n        super().__init__()\n    \n    def get_power(self):\n        power=self['act']['power']\n        if self['act']['type']=='Dragon' and self['hp']<self['max_hp']//2:\n            power*=1.5\n        return int(power*self.get_weather_power_mult())\n\n    def move_1(self): # Iron Tail\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<20/100:\n                self.target.set_boost('def',-1)\n    \n    def move_2(self): # Fossil Fang\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100:\n                self.target.set_condition('FLINCH',counter=0)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Alloraptor\",\n  \"types\": [\n    \"Dragon\",\n    \"Steel\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Prehistoric Fury\": \"This Pokemon's Dragon-type moves have their power multiplied by 1.5 when its HP is below half.\"\n  },\n  \"moves\": {\n    \"Iron Tail\": {\n      \"power\": 100,\n      \"accuracy\": 75,\n      \"category\": \"Physical\",\n      \"type\": \"Steel\",\n      \"effect\": \"Has a 20% chance to lower the target's Defense by 1 stage.\"\n    },\n    \"Fossil Fang\": {\n      \"power\": 90,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Dragon\",\n      \"effect\": \"Has a 30% chance to make the target flinch.\",\n      \"property\": [\n        \"contact\"\n      ]\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Alloraptor(PokemonBase):\n    _species='Alloraptor'\n    _types=['Dragon','Steel']\n    _gender='Male'\n    _ability=['Prehistoric Fury']\n    _move_1=('Iron Tail',100,75,'Physical','Steel',0,[])\n    _move_2=('Fossil Fang',90,100,'Physical','Dragon',0,['contact'])\n    def __init__(self):\n        super().__init__()\n    \n    def get_power(self):\n        power=self['act']['power']\n        if self['act']['type']=='Dragon' and self['hp']<self['max_hp']//2:\n            power*=1.5\n        return int(power*self.get_weather_power_mult())\n\n    def move_1(self): # Iron Tail\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<20/100:\n                self.target.set_boost('def',-1)\n    \n    def move_2(self): # Fossil Fang\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100:\n                self.target.set_condition('FLINCH',counter=0)\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Ancient Roar\": {\n    \"power\": 0,\n    \"accuracy\": 100000,\n    \"category\": \"Status\",\n    \"type\": \"Dragon\",\n    \"effect\": \"Lowers the target's Attack and Special Attack by 1 stage.\"\n  }\n}\n```",
        "response": "```python\n@Increment(Alloraptor,'_move_3')\ndef value():\n    return ('Ancient Roar',0,100000,'Status','Dragon',0,[])\n\n@Increment(Alloraptor)\ndef move_3(self): # Ancient Roar\n    if not self.target.isfaint():\n        self.target.set_boost('atk',-1)\n        self.target.set_boost('spa',-1)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Alloraptor\",\n  \"types\": [\n    \"Dragon\",\n    \"Steel\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Prehistoric Fury\": \"This Pokemon's Dragon-type moves have their power multiplied by 1.5 when its HP is below half.\"\n  },\n  \"moves\": {\n    \"Iron Tail\": {\n      \"power\": 100,\n      \"accuracy\": 75,\n      \"category\": \"Physical\",\n      \"type\": \"Steel\",\n      \"effect\": \"Has a 20% chance to lower the target's Defense by 1 stage.\"\n    },\n    \"Fossil Fang\": {\n      \"power\": 90,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Dragon\",\n      \"effect\": \"Has a 30% chance to make the target flinch.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Ancient Roar\": {\n      \"power\": 0,\n      \"accuracy\": 100000,\n      \"category\": \"Status\",\n      \"type\": \"Dragon\",\n      \"effect\": \"Lowers the target's Attack and Special Attack by 1 stage.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Alloraptor(PokemonBase):\n    _species='Alloraptor'\n    _types=['Dragon','Steel']\n    _gender='Male'\n    _ability=['Prehistoric Fury']\n    _move_1=('Iron Tail',100,75,'Physical','Steel',0,[])\n    _move_2=('Fossil Fang',90,100,'Physical','Dragon',0,['contact'])\n    def __init__(self):\n        super().__init__()\n    \n    def get_power(self):\n        power=self['act']['power']\n        if self['act']['type']=='Dragon' and self['hp']<self['max_hp']//2:\n            power*=1.5\n        return int(power*self.get_weather_power_mult())\n\n    def move_1(self): # Iron Tail\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<20/100:\n                self.target.set_boost('def',-1)\n    \n    def move_2(self): # Fossil Fang\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100:\n                self.target.set_condition('FLINCH',counter=0)\n\n@Increment(Alloraptor,'_move_3')\ndef value():\n    return ('Ancient Roar',0,100000,'Status','Dragon',0,[])\n\n@Increment(Alloraptor)\ndef move_3(self): # Ancient Roar\n    if not self.target.isfaint():\n        self.target.set_boost('atk',-1)\n        self.target.set_boost('spa',-1)\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Steel Slash\": {\n    \"power\": 70,\n    \"accuracy\": 100,\n    \"category\": \"Physical\",\n    \"type\": \"Steel\",\n    \"effect\": \"Has a 10% chance to increase the user's Speed by 1 stage.\",\n    \"property\": [\n      \"contact\"\n    ]\n  }\n}\n```",
        "response": "```python\n@Increment(Alloraptor,'_move_4')\ndef value():\n    return ('Steel Slash',70,100,'Physical','Steel',0,['contact'])\n\n@Increment(Alloraptor)\ndef move_4(self): # Steel Slash\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint() and rnd()<10/100:\n            self.set_boost('spe',+1,'self')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Alloraptor\",\n  \"types\": [\n    \"Dragon\",\n    \"Steel\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Prehistoric Fury\": \"This Pokemon's Dragon-type moves have their power multiplied by 1.5 when its HP is below half.\"\n  },\n  \"moves\": {\n    \"Iron Tail\": {\n      \"power\": 100,\n      \"accuracy\": 75,\n      \"category\": \"Physical\",\n      \"type\": \"Steel\",\n      \"effect\": \"Has a 20% chance to lower the target's Defense by 1 stage.\"\n    },\n    \"Fossil Fang\": {\n      \"power\": 90,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Dragon\",\n      \"effect\": \"Has a 30% chance to make the target flinch.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Ancient Roar\": {\n      \"power\": 0,\n      \"accuracy\": 100000,\n      \"category\": \"Status\",\n      \"type\": \"Dragon\",\n      \"effect\": \"Lowers the target's Attack and Special Attack by 1 stage.\"\n    },\n    \"Steel Slash\": {\n      \"power\": 70,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Steel\",\n      \"effect\": \"Has a 10% chance to increase the user's Speed by 1 stage.\",\n      \"property\": [\n        \"contact\"\n      ]\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Alloraptor(PokemonBase):\n    _species='Alloraptor'\n    _types=['Dragon','Steel']\n    _gender='Male'\n    _ability=['Prehistoric Fury']\n    _move_1=('Iron Tail',100,75,'Physical','Steel',0,[])\n    _move_2=('Fossil Fang',90,100,'Physical','Dragon',0,['contact'])\n    def __init__(self):\n        super().__init__()\n    \n    def get_power(self):\n        power=self['act']['power']\n        if self['act']['type']=='Dragon' and self['hp']<self['max_hp']//2:\n            power*=1.5\n        return int(power*self.get_weather_power_mult())\n\n    def move_1(self): # Iron Tail\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<20/100:\n                self.target.set_boost('def',-1)\n    \n    def move_2(self): # Fossil Fang\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100:\n                self.target.set_condition('FLINCH',counter=0)\n\n@Increment(Alloraptor,'_move_3')\ndef value():\n    return ('Ancient Roar',0,100000,'Status','Dragon',0,[])\n\n@Increment(Alloraptor)\ndef move_3(self): # Ancient Roar\n    if not self.target.isfaint():\n        self.target.set_boost('atk',-1)\n        self.target.set_boost('spa',-1)\n\n@Increment(Alloraptor,'_move_4')\ndef value():\n    return ('Steel Slash',70,100,'Physical','Steel',0,['contact'])\n\n@Increment(Alloraptor)\ndef move_4(self): # Steel Slash\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint() and rnd()<10/100:\n            self.set_boost('spe',+1,'self')\n```\n\nThis role is gonna learn a new ability:\n```json\n{\n  \"Metallic Resilience\": \"This Pokemon is immune to status conditions while its HP is above half.\"\n}\n```",
        "response": "```python\n@Increment(Alloraptor,'_ability')\ndef value():\n    return ['Prehistoric Fury','Metallic Resilience']\n\n@Increment(Alloraptor)\ndef set_status(self,x):\n    if self['hp']>self['max_hp']//2:\n        return\n    if self['status'] or self.env.get('MISTY_TERRAIN'):\n        return\n    if x=='BRN':\n        if not self.istype('Fire'):\n            self.state['status']={x:{'counter':0}}\n    elif x=='PAR':\n        if not self.istype('Electric'):\n            self.state['status']={x:{'counter':0}}\n    elif x=='PSN':\n        if not self.istype('Poison') and not self.istype('Steel'):\n            self.state['status']={x:{'counter':0}}\n    elif x=='TOX':\n        if not self.istype('Poison') and not self.istype('Steel'):\n            self.state['status']={x:{'counter':0}}\n    elif x=='FRZ':\n        if not self.istype('Ice'):\n            self.state['status']={x:{'counter':0}}\n    elif x=='SLP':\n        self.state['status']={x:{'counter':0}}\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Alloraptor\",\n  \"types\": [\n    \"Dragon\",\n    \"Steel\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Prehistoric Fury\": \"This Pokemon's Dragon-type moves have their power multiplied by 1.5 when its HP is below half.\",\n    \"Metallic Resilience\": \"This Pokemon is immune to status conditions while its HP is above half.\"\n  },\n  \"moves\": {\n    \"Iron Tail\": {\n      \"power\": 100,\n      \"accuracy\": 75,\n      \"category\": \"Physical\",\n      \"type\": \"Steel\",\n      \"effect\": \"Has a 20% chance to lower the target's Defense by 1 stage.\"\n    },\n    \"Fossil Fang\": {\n      \"power\": 90,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Dragon\",\n      \"effect\": \"Has a 30% chance to make the target flinch.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Ancient Roar\": {\n      \"power\": 0,\n      \"accuracy\": 100000,\n      \"category\": \"Status\",\n      \"type\": \"Dragon\",\n      \"effect\": \"Lowers the target's Attack and Special Attack by 1 stage.\"\n    },\n    \"Steel Slash\": {\n      \"power\": 70,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Steel\",\n      \"effect\": \"Has a 10% chance to increase the user's Speed by 1 stage.\",\n      \"property\": [\n        \"contact\"\n      ]\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Alloraptor(PokemonBase):\n    _species='Alloraptor'\n    _types=['Dragon','Steel']\n    _gender='Male'\n    _ability=['Prehistoric Fury']\n    _move_1=('Iron Tail',100,75,'Physical','Steel',0,[])\n    _move_2=('Fossil Fang',90,100,'Physical','Dragon',0,['contact'])\n    def __init__(self):\n        super().__init__()\n    \n    def get_power(self):\n        power=self['act']['power']\n        if self['act']['type']=='Dragon' and self['hp']<self['max_hp']//2:\n            power*=1.5\n        return int(power*self.get_weather_power_mult())\n\n    def move_1(self): # Iron Tail\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<20/100:\n                self.target.set_boost('def',-1)\n    \n    def move_2(self): # Fossil Fang\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100:\n                self.target.set_condition('FLINCH',counter=0)\n\n@Increment(Alloraptor,'_move_3')\ndef value():\n    return ('Ancient Roar',0,100000,'Status','Dragon',0,[])\n\n@Increment(Alloraptor)\ndef move_3(self): # Ancient Roar\n    if not self.target.isfaint():\n        self.target.set_boost('atk',-1)\n        self.target.set_boost('spa',-1)\n\n@Increment(Alloraptor,'_move_4')\ndef value():\n    return ('Steel Slash',70,100,'Physical','Steel',0,['contact'])\n\n@Increment(Alloraptor)\ndef move_4(self): # Steel Slash\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint() and rnd()<10/100:\n            self.set_boost('spe',+1,'self')\n\n@Increment(Alloraptor,'_ability')\ndef value():\n    return ['Prehistoric Fury','Metallic Resilience']\n\n@Increment(Alloraptor)\ndef set_status(self,x):\n    if self['hp']>self['max_hp']//2:\n        return\n    if self['status'] or self.env.get('MISTY_TERRAIN'):\n        return\n    if x=='BRN':\n        if not self.istype('Fire'):\n            self.state['status']={x:{'counter':0}}\n    elif x=='PAR':\n        if not self.istype('Electric'):\n            self.state['status']={x:{'counter':0}}\n    elif x=='PSN':\n        if not self.istype('Poison') and not self.istype('Steel'):\n            self.state['status']={x:{'counter':0}}\n    elif x=='TOX':\n        if not self.istype('Poison') and not self.istype('Steel'):\n            self.state['status']={x:{'counter':0}}\n    elif x=='FRZ':\n        if not self.istype('Ice'):\n            self.state['status']={x:{'counter':0}}\n    elif x=='SLP':\n        self.state['status']={x:{'counter':0}}\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Dragon Claw\": {\n    \"power\": 80,\n    \"accuracy\": 100,\n    \"category\": \"Physical\",\n    \"type\": \"Dragon\",\n    \"effect\": \"No additional effect.\",\n    \"property\": [\n      \"contact\"\n    ]\n  }\n}\n```",
        "response": "```python\n@Increment(Alloraptor,'_move_5')\ndef value():\n    return ('Dragon Claw',80,100,'Physical','Dragon',0,['contact'])\n\n@Increment(Alloraptor)\ndef move_5(self): # Dragon Claw\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Almudron\",\n  \"types\": [\n    \"Ground\",\n    \"Water\"\n  ],\n  \"gender\": \"Female\",\n  \"ability\": {\n    \"Muddy Secretion\": \"Active Pokemon without this ability have their speed multiplied by 0.7.\"\n  },\n  \"moves\": {\n    \"Mud Wave\": {\n      \"power\": 85,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Ground\",\n      \"effect\": \"Has a 30% chance to lower the target's Speed by 1 stage.\"\n    },\n    \"Mud Wall\": {\n      \"power\": 0,\n      \"accuracy\": 100000,\n      \"category\": \"Status\",\n      \"type\": \"Ground\",\n      \"effect\": \"Creates a wall of mud that halves the damage of all Special moves for 5 turns.\"\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass Almudron(PokemonBase):\n    _species='Almudron'\n    _types=['Ground','Water']\n    _gender='Female'\n    _ability=['Muddy Secretion']\n    _move_1=('Mud Wave',85,100,'Special','Ground',0,[])\n    _move_2=('Mud Wall',0,100000,'Status','Ground',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def onswitch(self):\n        if 'Muddy Secretion' not in self.target._ability:\n            self.target.set_stat('spe',0.7)\n\n    def _take_damage_attack(self,x):\n        self.register_act_taken()\n        if self['side_conditions'].get('MUD_WALL'):\n            if self['act_taken']['category']=='Special':\n                x//=2\n        self.state['hp']=max(0,self['hp']-x)\n        if self['hp']==0:\n            self.state['status']='FNT'\n\n    def move_1(self): # Mud Wave\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100:\n                self.target.set_boost('spe',-1)\n\n    def move_2(self): # Mud Wall\n        self.set_side_condition('MUD_WALL',counter=0,max_count=5)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Almudron\",\n  \"types\": [\n    \"Ground\",\n    \"Water\"\n  ],\n  \"gender\": \"Female\",\n  \"ability\": {\n    \"Muddy Secretion\": \"Active Pokemon without this ability have their speed multiplied by 0.7.\"\n  },\n  \"moves\": {\n    \"Mud Wave\": {\n      \"power\": 85,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Ground\",\n      \"effect\": \"Has a 30% chance to lower the target's Speed by 1 stage.\"\n    },\n    \"Mud Wall\": {\n      \"power\": 0,\n      \"accuracy\": 100000,\n      \"category\": \"Status\",\n      \"type\": \"Ground\",\n      \"effect\": \"Creates a wall of mud that halves the damage of all Special moves for 5 turns.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Almudron(PokemonBase):\n    _species='Almudron'\n    _types=['Ground','Water']\n    _gender='Female'\n    _ability=['Muddy Secretion']\n    _move_1=('Mud Wave',85,100,'Special','Ground',0,[])\n    _move_2=('Mud Wall',0,100000,'Status','Ground',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def onswitch(self):\n        if 'Muddy Secretion' not in self.target._ability:\n            self.target.set_stat('spe',0.7)\n\n    def _take_damage_attack(self,x):\n        self.register_act_taken()\n        if self['side_conditions'].get('MUD_WALL'):\n            if self['act_taken']['category']=='Special':\n                x//=2\n        self.state['hp']=max(0,self['hp']-x)\n        if self['hp']==0:\n            self.state['status']='FNT'\n\n    def move_1(self): # Mud Wave\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100:\n                self.target.set_boost('spe',-1)\n\n    def move_2(self): # Mud Wall\n        self.set_side_condition('MUD_WALL',counter=0,max_count=5)\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Golden Mire\": {\n    \"power\": 90,\n    \"accuracy\": 100,\n    \"category\": \"Special\",\n    \"type\": \"Water\",\n    \"effect\": \"Has a 20% chance to trap the target in mud for 2-5 turns, dealing damage of 1/16 of its maximum HP each end of turn.\"\n  }\n}\n```",
        "response": "```python\n@Increment(Almudron,'_move_3')\ndef value():\n    return ('Golden Mire',90,100,'Special','Water',0,[])\n\n@Increment(Almudron)\ndef move_3(self): # Golden Mire\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint() and rnd()<20/100:\n            self.target.set_condition('TRAP',counter=0,max_count=rndc([2,3,4,5]))\n\n@Increment(Almudron)\ndef endturn(self):\n    if self.target['conditions'].get('TRAP'):\n        self.target.take_damage(self.target['max_hp']//16,'loss')\n        self.target['conditions']['TRAP']['counter']+=1\n        if self.target['conditions']['TRAP']['counter']==self.target['conditions']['TRAP']['max_count']:\n            del self.target['conditions']['TRAP']\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Almudron\",\n  \"types\": [\n    \"Ground\",\n    \"Water\"\n  ],\n  \"gender\": \"Female\",\n  \"ability\": {\n    \"Muddy Secretion\": \"Active Pokemon without this ability have their speed multiplied by 0.7.\"\n  },\n  \"moves\": {\n    \"Mud Wave\": {\n      \"power\": 85,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Ground\",\n      \"effect\": \"Has a 30% chance to lower the target's Speed by 1 stage.\"\n    },\n    \"Mud Wall\": {\n      \"power\": 0,\n      \"accuracy\": 100000,\n      \"category\": \"Status\",\n      \"type\": \"Ground\",\n      \"effect\": \"Creates a wall of mud that halves the damage of all Special moves for 5 turns.\"\n    },\n    \"Golden Mire\": {\n      \"power\": 90,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Water\",\n      \"effect\": \"Has a 20% chance to trap the target in mud for 2-5 turns, dealing damage of 1/16 of its maximum HP each end of turn.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Almudron(PokemonBase):\n    _species='Almudron'\n    _types=['Ground','Water']\n    _gender='Female'\n    _ability=['Muddy Secretion']\n    _move_1=('Mud Wave',85,100,'Special','Ground',0,[])\n    _move_2=('Mud Wall',0,100000,'Status','Ground',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def onswitch(self):\n        if 'Muddy Secretion' not in self.target._ability:\n            self.target.set_stat('spe',0.7)\n\n    def _take_damage_attack(self,x):\n        self.register_act_taken()\n        if self['side_conditions'].get('MUD_WALL'):\n            if self['act_taken']['category']=='Special':\n                x//=2\n        self.state['hp']=max(0,self['hp']-x)\n        if self['hp']==0:\n            self.state['status']='FNT'\n\n    def move_1(self): # Mud Wave\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100:\n                self.target.set_boost('spe',-1)\n\n    def move_2(self): # Mud Wall\n        self.set_side_condition('MUD_WALL',counter=0,max_count=5)\n\n@Increment(Almudron,'_move_3')\ndef value():\n    return ('Golden Mire',90,100,'Special','Water',0,[])\n\n@Increment(Almudron)\ndef move_3(self): # Golden Mire\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint() and rnd()<20/100:\n            self.target.set_condition('TRAP',counter=0,max_count=rndc([2,3,4,5]))\n\n@Increment(Almudron)\ndef endturn(self):\n    if self.target['conditions'].get('TRAP'):\n        self.target.take_damage(self.target['max_hp']//16,'loss')\n        self.target['conditions']['TRAP']['counter']+=1\n        if self.target['conditions']['TRAP']['counter']==self.target['conditions']['TRAP']['max_count']:\n            del self.target['conditions']['TRAP']\n```\n\nThis role is gonna learn a new ability:\n```json\n{\n  \"Soil Absorption\": \"This Pokemon recovers 1/8th of its maximum HP if it hits a foe with a Ground-type move.\"\n}\n```",
        "response": "```python\n@Increment(Almudron,'_ability')\ndef value():\n    return ['Muddy Secretion','Soil Absorption']\n\n@Increment(Almudron)\ndef move_1(self): # Mud Wave\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint() and rnd()<30/100:\n            self.target.set_boost('spe',-1)\n        self.restore(self['max_hp']//8,'heal')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Annihilape\",\n  \"types\": [\n    \"Fighting\",\n    \"Ghost\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Defiant\": \"This Pokemon's Attack is raised by 2 for each of its stats that is lowered by the target.\"\n  },\n  \"moves\": {\n    \"Rage Fist\": {\n      \"power\": 50,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Ghost\",\n      \"effect\": \"Power is equal to 50+(X*50), where X is the total number of times the user has been hit by a damaging attack during the battle. X cannot be greater than 6.\",\n      \"property\": [\n        \"contact\",\n        \"punch\"\n      ]\n    },\n    \"Close Combat\": {\n      \"power\": 120,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Fighting\",\n      \"effect\": \"Lowers the user's Defense and Special Defense by 1 stage.\",\n      \"property\": [\n        \"contact\"\n      ]\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass Annihilape(PokemonBase):\n    _species='Annihilape'\n    _types=['Fighting','Ghost']\n    _gender='Male'\n    _ability=['Defiant']\n    _move_1=('Rage Fist',50,100,'Physical','Ghost',0,['contact','punch'])\n    _move_2=('Close Combat',120,100,'Physical','Fighting',0,['contact'])\n    def __init__(self):\n        super().__init__()\n\n    def onswitch(self):\n        self.set_condition('RAGE_FIST',counter=0)\n\n    def set_boost(self,key,x,from_='target'):\n        bar=6 if key in ['atk','def','spa','spd','spe'] else 3\n        if x>0:\n            self['boosts'][key]=min(bar,self['boosts'][key]+x)\n        else:\n            self['boosts'][key]=max(-bar,self['boosts'][key]+x)\n            if from_=='target':\n                for _ in range(x):\n                    self.set_boost('spa',2,'self')\n    \n    def get_power(self):        \n        power=self['act']['power']\n        if self['act']['id']=='Rage Fist':\n            power=min(350,50+50*self['conditions']['RAGE_FIST']['counter'])\n        return int(power*self.get_weather_power_mult())\n    \n    def move_1(self): # Rage Fist\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            self['conditions']['RAGE_FIST']['counter']+=1\n\n    def move_2(self): # Close Combat\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            self.set_boost('def',-1,'self')\n            self.set_boost('spd',-1,'self')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Annihilape\",\n  \"types\": [\n    \"Fighting\",\n    \"Ghost\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Defiant\": \"This Pokemon's Attack is raised by 2 for each of its stats that is lowered by the target.\"\n  },\n  \"moves\": {\n    \"Rage Fist\": {\n      \"power\": 50,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Ghost\",\n      \"effect\": \"Power is equal to 50+(X*50), where X is the total number of times the user has been hit by a damaging attack during the battle. X cannot be greater than 6.\",\n      \"property\": [\n        \"contact\",\n        \"punch\"\n      ]\n    },\n    \"Close Combat\": {\n      \"power\": 120,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Fighting\",\n      \"effect\": \"Lowers the user's Defense and Special Defense by 1 stage.\",\n      \"property\": [\n        \"contact\"\n      ]\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Annihilape(PokemonBase):\n    _species='Annihilape'\n    _types=['Fighting','Ghost']\n    _gender='Male'\n    _ability=['Defiant']\n    _move_1=('Rage Fist',50,100,'Physical','Ghost',0,['contact','punch'])\n    _move_2=('Close Combat',120,100,'Physical','Fighting',0,['contact'])\n    def __init__(self):\n        super().__init__()\n\n    def onswitch(self):\n        self.set_condition('RAGE_FIST',counter=0)\n\n    def set_boost(self,key,x,from_='target'):\n        bar=6 if key in ['atk','def','spa','spd','spe'] else 3\n        if x>0:\n            self['boosts'][key]=min(bar,self['boosts'][key]+x)\n        else:\n            self['boosts'][key]=max(-bar,self['boosts'][key]+x)\n            if from_=='target':\n                for _ in range(x):\n                    self.set_boost('spa',2,'self')\n    \n    def get_power(self):        \n        power=self['act']['power']\n        if self['act']['id']=='Rage Fist':\n            power=min(350,50+50*self['conditions']['RAGE_FIST']['counter'])\n        return int(power*self.get_weather_power_mult())\n    \n    def move_1(self): # Rage Fist\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            self['conditions']['RAGE_FIST']['counter']+=1\n\n    def move_2(self): # Close Combat\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            self.set_boost('def',-1,'self')\n            self.set_boost('spd',-1,'self')\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Final Gambit\": {\n    \"power\": 0,\n    \"accuracy\": 100,\n    \"category\": \"Special\",\n    \"type\": \"Fighting\",\n    \"effect\": \"Deals damage to the target equal to the user's current HP. If this move is successful, the user faints.\"\n  }\n}\n```",
        "response": "```python\n@Increment(Annihilape,'_move_3')\ndef value():\n    return ('Final Gambit',0,100,'Special','Fighting',0,[])\n\n@Increment(Annihilape)\ndef move_3(self): # Final Gambit\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        self.target.take_damage(self['hp'])\n        self.take_damage(self['hp'],'loss')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Arceus\",\n  \"types\": [\n    \"Normal\"\n  ],\n  \"gender\": \"Neutral\",\n  \"ability\": {\n    \"Wonder Guard\": \"This Pokemon can only be damaged by supereffective moves and indirect damage.\"\n  },\n  \"moves\": {\n    \"Thousand Arrows\": {\n      \"power\": 90,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Ground\",\n      \"effect\": \"This move can hit airborne Pokemon, which includes Flying-type Pokemon.\"\n    },\n    \"Substitute\": {\n      \"power\": 0,\n      \"accuracy\": 100000,\n      \"category\": \"Status\",\n      \"priority\": 0,\n      \"type\": \"Normal\",\n      \"effect\": \"The user loses 1/4 of its maximum HP and sets a substitute with the same amount of HP to take damage from attacks for it. The substitute is removed once enough damage (1/4 of max HP) is inflicted. Fails if the user does not have enough HP remaining, or if it already has a substitute.\"\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass Arceus(PokemonBase):\n    _species='Arceus'\n    _types=['Normal']\n    _gender='Neutral'\n    _ability=['Wonder Guard']\n    _move_1=('Thousand Arrows',90,100,'Physical','Ground',0,[])\n    _move_2=('Substitute',0,100000,'Status','Normal',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def _take_damage_attack(self,x):\n        self.register_act_taken()\n        if not self['act_taken'].get('type_efc',0)>1:\n            return\n        if self['conditions'].get('SUBSTITUTE'):\n            self['conditions']['SUBSTITUTE']['hp']-=x\n            if self['conditions']['SUBSTITUTE']['hp']<1:\n                del self['conditions']['SUBSTITUTE']\n        else:\n            self.state['hp']=max(0,self['hp']-x)\n        if self['hp']==0:\n            self.state['status']='FNT'\n\n    def move_1(self): # Thousand Arrows\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n\n    def move_2(self): # Substitute\n        if self['hp']>self['max_hp']//4 and not self['conditions'].get('SUBSTITUTE'):\n            self.take_damage(self['max_hp']//4,'loss')\n            self.set_condition('SUBSTITUTE',hp=self['max_hp']//4)\n\n    def get_type_effect(self):\n        move_type=self['act']['type']\n        target_types=self.target['types']\n        effect=1\n        for tt in target_types:\n            if tt=='Flying' and self['act']['id']=='Thousand Arrows':\n                effect*=1\n            else:\n                effect*=TYPEEFFECTIVENESS[move_type][tt]\n        return effect\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Arceus\",\n  \"types\": [\n    \"Normal\"\n  ],\n  \"gender\": \"Neutral\",\n  \"ability\": {\n    \"Wonder Guard\": \"This Pokemon can only be damaged by supereffective moves and indirect damage.\"\n  },\n  \"moves\": {\n    \"Thousand Arrows\": {\n      \"power\": 90,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Ground\",\n      \"effect\": \"This move can hit airborne Pokemon, which includes Flying-type Pokemon.\"\n    },\n    \"Substitute\": {\n      \"power\": 0,\n      \"accuracy\": 100000,\n      \"category\": \"Status\",\n      \"priority\": 0,\n      \"type\": \"Normal\",\n      \"effect\": \"The user loses 1/4 of its maximum HP and sets a substitute with the same amount of HP to take damage from attacks for it. The substitute is removed once enough damage (1/4 of max HP) is inflicted. Fails if the user does not have enough HP remaining, or if it already has a substitute.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Arceus(PokemonBase):\n    _species='Arceus'\n    _types=['Normal']\n    _gender='Neutral'\n    _ability=['Wonder Guard']\n    _move_1=('Thousand Arrows',90,100,'Physical','Ground',0,[])\n    _move_2=('Substitute',0,100000,'Status','Normal',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def _take_damage_attack(self,x):\n        self.register_act_taken()\n        if not self['act_taken'].get('type_efc',0)>1:\n            return\n        if self['conditions'].get('SUBSTITUTE'):\n            self['conditions']['SUBSTITUTE']['hp']-=x\n            if self['conditions']['SUBSTITUTE']['hp']<1:\n                del self['conditions']['SUBSTITUTE']\n        else:\n            self.state['hp']=max(0,self['hp']-x)\n        if self['hp']==0:\n            self.state['status']='FNT'\n\n    def move_1(self): # Thousand Arrows\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n\n    def move_2(self): # Substitute\n        if self['hp']>self['max_hp']//4 and not self['conditions'].get('SUBSTITUTE'):\n            self.take_damage(self['max_hp']//4,'loss')\n            self.set_condition('SUBSTITUTE',hp=self['max_hp']//4)\n\n    def get_type_effect(self):\n        move_type=self['act']['type']\n        target_types=self.target['types']\n        effect=1\n        for tt in target_types:\n            if tt=='Flying' and self['act']['id']=='Thousand Arrows':\n                effect*=1\n            else:\n                effect*=TYPEEFFECTIVENESS[move_type][tt]\n        return effect\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Toxic\": {\n    \"power\": 0,\n    \"accuracy\": 90,\n    \"category\": \"Status\",\n    \"type\": \"Poison\",\n    \"effect\": \"Badly poisons the target.\"\n  }\n}\n```",
        "response": "```python\n@Increment(Arceus,'_move_3')\ndef value():\n    return ('Toxic',0,90,'Status','Poison',0,[])\n\n@Increment(Arceus)\ndef move_3(self): # Toxic\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        self.target.set_status('TOX')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Arceus\",\n  \"types\": [\n    \"Normal\"\n  ],\n  \"gender\": \"Neutral\",\n  \"ability\": {\n    \"Wonder Guard\": \"This Pokemon can only be damaged by supereffective moves and indirect damage.\"\n  },\n  \"moves\": {\n    \"Thousand Arrows\": {\n      \"power\": 90,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Ground\",\n      \"effect\": \"This move can hit airborne Pokemon, which includes Flying-type Pokemon.\"\n    },\n    \"Substitute\": {\n      \"power\": 0,\n      \"accuracy\": 100000,\n      \"category\": \"Status\",\n      \"priority\": 0,\n      \"type\": \"Normal\",\n      \"effect\": \"The user loses 1/4 of its maximum HP and sets a substitute with the same amount of HP to take damage from attacks for it. The substitute is removed once enough damage (1/4 of max HP) is inflicted. Fails if the user does not have enough HP remaining, or if it already has a substitute.\"\n    },\n    \"Toxic\": {\n      \"power\": 0,\n      \"accuracy\": 90,\n      \"category\": \"Status\",\n      \"type\": \"Poison\",\n      \"effect\": \"Badly poisons the target.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Arceus(PokemonBase):\n    _species='Arceus'\n    _types=['Normal']\n    _gender='Neutral'\n    _ability=['Wonder Guard']\n    _move_1=('Thousand Arrows',90,100,'Physical','Ground',0,[])\n    _move_2=('Substitute',0,100000,'Status','Normal',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def _take_damage_attack(self,x):\n        self.register_act_taken()\n        if not self['act_taken'].get('type_efc',0)>1:\n            return\n        if self['conditions'].get('SUBSTITUTE'):\n            self['conditions']['SUBSTITUTE']['hp']-=x\n            if self['conditions']['SUBSTITUTE']['hp']<1:\n                del self['conditions']['SUBSTITUTE']\n        else:\n            self.state['hp']=max(0,self['hp']-x)\n        if self['hp']==0:\n            self.state['status']='FNT'\n\n    def move_1(self): # Thousand Arrows\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n\n    def move_2(self): # Substitute\n        if self['hp']>self['max_hp']//4 and not self['conditions'].get('SUBSTITUTE'):\n            self.take_damage(self['max_hp']//4,'loss')\n            self.set_condition('SUBSTITUTE',hp=self['max_hp']//4)\n\n    def get_type_effect(self):\n        move_type=self['act']['type']\n        target_types=self.target['types']\n        effect=1\n        for tt in target_types:\n            if tt=='Flying' and self['act']['id']=='Thousand Arrows':\n                effect*=1\n            else:\n                effect*=TYPEEFFECTIVENESS[move_type][tt]\n        return effect\n\n@Increment(Arceus,'_move_3')\ndef value():\n    return ('Toxic',0,90,'Status','Poison',0,[])\n\n@Increment(Arceus)\ndef move_3(self): # Toxic\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        self.target.set_status('TOX')\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Protect\": {\n    \"power\": 0,\n    \"accuracy\": 100000,\n    \"category\": \"Status\",\n    \"priority\": 4,\n    \"type\": \"Normal\",\n    \"effect\": \"The user is protected from attacks made by other Pokemon during this turn. Fails if the user uses this move last turn.\"\n  }\n}\n```",
        "response": "```python\n@Increment(Arceus,'_move_4')\ndef value():\n    return ('Protect',0,100000,'Status','Normal',4,[])\n\n@Increment(Arceus)\ndef move_4(self): # Protect\n    if self['last_act'] and self['last_act']['id']=='Protect':\n        return\n    self.set_condition('PROTECT',counter=0)\n\n@Increment(Arceus)\ndef _take_damage_attack(self,x):\n    if self['conditions'].get('PROTECT'):\n        del self['conditions']['PROTECT']\n        return\n    self.register_act_taken()\n    if not self['act_taken'].get('type_efc',0)>1:\n        return\n    if self['conditions'].get('SUBSTITUTE'):\n        self['conditions']['SUBSTITUTE']['hp']-=x\n        if self['conditions']['SUBSTITUTE']['hp']<1:\n            del self['conditions']['SUBSTITUTE']\n    else:\n        self.state['hp']=max(0,self['hp']-x)\n    if self['hp']==0:\n        self.state['status']='FNT'\n\n@Increment(Arceus)\ndef endturn(self):\n    if self['conditions'].get('PROTECT'):\n        del self['conditions']['PROTECT']\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Arceus\",\n  \"types\": [\n    \"Normal\"\n  ],\n  \"gender\": \"Neutral\",\n  \"ability\": {\n    \"Wonder Guard\": \"This Pokemon can only be damaged by supereffective moves and indirect damage.\"\n  },\n  \"moves\": {\n    \"Thousand Arrows\": {\n      \"power\": 90,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Ground\",\n      \"effect\": \"This move can hit airborne Pokemon, which includes Flying-type Pokemon.\"\n    },\n    \"Substitute\": {\n      \"power\": 0,\n      \"accuracy\": 100000,\n      \"category\": \"Status\",\n      \"priority\": 0,\n      \"type\": \"Normal\",\n      \"effect\": \"The user loses 1/4 of its maximum HP and sets a substitute with the same amount of HP to take damage from attacks for it. The substitute is removed once enough damage (1/4 of max HP) is inflicted. Fails if the user does not have enough HP remaining, or if it already has a substitute.\"\n    },\n    \"Toxic\": {\n      \"power\": 0,\n      \"accuracy\": 90,\n      \"category\": \"Status\",\n      \"type\": \"Poison\",\n      \"effect\": \"Badly poisons the target.\"\n    },\n    \"Protect\": {\n      \"power\": 0,\n      \"accuracy\": 100000,\n      \"category\": \"Status\",\n      \"priority\": 4,\n      \"type\": \"Normal\",\n      \"effect\": \"The user is protected from attacks made by other Pokemon during this turn. Fails if the user uses this move last turn.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Arceus(PokemonBase):\n    _species='Arceus'\n    _types=['Normal']\n    _gender='Neutral'\n    _ability=['Wonder Guard']\n    _move_1=('Thousand Arrows',90,100,'Physical','Ground',0,[])\n    _move_2=('Substitute',0,100000,'Status','Normal',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def _take_damage_attack(self,x):\n        self.register_act_taken()\n        if not self['act_taken'].get('type_efc',0)>1:\n            return\n        if self['conditions'].get('SUBSTITUTE'):\n            self['conditions']['SUBSTITUTE']['hp']-=x\n            if self['conditions']['SUBSTITUTE']['hp']<1:\n                del self['conditions']['SUBSTITUTE']\n        else:\n            self.state['hp']=max(0,self['hp']-x)\n        if self['hp']==0:\n            self.state['status']='FNT'\n\n    def move_1(self): # Thousand Arrows\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n\n    def move_2(self): # Substitute\n        if self['hp']>self['max_hp']//4 and not self['conditions'].get('SUBSTITUTE'):\n            self.take_damage(self['max_hp']//4,'loss')\n            self.set_condition('SUBSTITUTE',hp=self['max_hp']//4)\n\n    def get_type_effect(self):\n        move_type=self['act']['type']\n        target_types=self.target['types']\n        effect=1\n        for tt in target_types:\n            if tt=='Flying' and self['act']['id']=='Thousand Arrows':\n                effect*=1\n            else:\n                effect*=TYPEEFFECTIVENESS[move_type][tt]\n        return effect\n\n@Increment(Arceus,'_move_3')\ndef value():\n    return ('Toxic',0,90,'Status','Poison',0,[])\n\n@Increment(Arceus)\ndef move_3(self): # Toxic\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        self.target.set_status('TOX')\n\n@Increment(Arceus,'_move_4')\ndef value():\n    return ('Protect',0,100000,'Status','Normal',4,[])\n\n@Increment(Arceus)\ndef move_4(self): # Protect\n    if self['last_act'] and self['last_act']['id']=='Protect':\n        return\n    self.set_condition('PROTECT',counter=0)\n\n@Increment(Arceus)\ndef _take_damage_attack(self,x):\n    if self['conditions'].get('PROTECT'):\n        del self['conditions']['PROTECT']\n        return\n    self.register_act_taken()\n    if not self['act_taken'].get('type_efc',0)>1:\n        return\n    if self['conditions'].get('SUBSTITUTE'):\n        self['conditions']['SUBSTITUTE']['hp']-=x\n        if self['conditions']['SUBSTITUTE']['hp']<1:\n            del self['conditions']['SUBSTITUTE']\n    else:\n        self.state['hp']=max(0,self['hp']-x)\n    if self['hp']==0:\n        self.state['status']='FNT'\n\n@Increment(Arceus)\ndef endturn(self):\n    if self['conditions'].get('PROTECT'):\n        del self['conditions']['PROTECT']\n```\n\nThis role is gonna learn a new ability:\n```json\n{\n  \"Corrosion\": \"This Pokemon can poison or badly poison a Pokemon regardless of its types.\"\n}\n```",
        "response": "```python\n@Increment(Arceus,'_ability')\ndef value():\n    return ['Wonder Guard','Corrosion']\n\n@Increment(Arceus)\ndef set_status(self,x):\n    if self['status'] or self.env.get('MISTY_TERRAIN'):\n        return\n    if x=='BRN':\n        if not self.istype('Fire'):\n            self.state['status']={x:{'counter':0}}\n    elif x=='PAR':\n        if not self.istype('Electric'):\n            self.state['status']={x:{'counter':0}}\n    elif x=='PSN':\n        self.state['status']={x:{'counter':0}}\n    elif x=='TOX':\n        self.state['status']={x:{'counter':0}}\n    elif x=='FRZ':\n        if not self.istype('Ice'):\n            self.state['status']={x:{'counter':0}}\n    elif x=='SLP':\n        self.state['status']={x:{'counter':0}}\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Aurorus\",\n  \"types\": [\n    \"Rock\",\n    \"Ice\"\n  ],\n  \"gender\": \"Female\",\n  \"ability\": {\n    \"Refrigerate\": \"This Pokemon's Normal-type moves become Ice type and their power is boosted by 30%.\"\n  },\n  \"moves\": {\n    \"Earth Power\": {\n      \"power\": 90,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Ground\",\n      \"effect\": \"Has a 10% chance to lower the target's Special Defense by 1 stage.\"\n    },\n    \"Hyper Beam\": {\n      \"power\": 150,\n      \"accuracy\": 90,\n      \"category\": \"Special\",\n      \"type\": \"Normal\",\n      \"effect\": \"User cannot move next turn.\"\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass Aurorus(PokemonBase):\n    _species='Aurorus'\n    _types=['Rock','Ice']\n    _gender='Female'\n    _ability=['Refrigerate']\n    _move_1=('Earth Power',90,100,'Special','Ground',0,[])\n    _move_2=('Hyper Beam',150,90,'Special','Normal',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def get_power(self):\n        power=self['act']['power']\n        if self['act']['type']=='Normal':\n            self['act']['type']='Ice'\n            power*=1.3\n        return int(power*self.get_weather_power_mult())\n\n    def endturn(self):\n        if self['conditions'].get('RECHARGE'):\n            if self['conditions']['RECHARGE']['counter']==0:\n                self['conditions']['RECHARGE']['counter']+=1\n            else:\n                del self['conditions']['RECHARGE']\n                self.state['canact']=True\n    \n    def move_1(self): # Earth Power\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<10/100:\n                self.target.set_boost('spd',-1)\n    \n    def move_2(self): # Hyper Beem\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n        if not self.target.isfaint():\n            self.set_condition('RECHARGE',counter=0)\n            self.state['canact']=False\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Baize\",\n  \"types\": [\n    \"Dragon\",\n    \"Fairy\"\n  ],\n  \"gender\": \"Genderless\",\n  \"ability\": {\n    \"Divine Insight\": \"This Pokemon's moves never miss.\"\n  },\n  \"moves\": {\n    \"Dragon Pulse\": {\n      \"power\": 85,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Dragon\",\n      \"effect\": \"No additional effect.\",\n      \"property\": []\n    },\n    \"Mystic Shield\": {\n      \"power\": 0,\n      \"accuracy\": 100000,\n      \"category\": \"Status\",\n      \"type\": \"Fairy\",\n      \"effect\": \"Raises the user's Defense and Special Defense by 1 stage each and lower its opponents' Attack by 1 stage.\",\n      \"property\": []\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass Baize(PokemonBase):\n    _species='Baize'\n    _types=['Dragon','Fairy']\n    _gender='Genderless'\n    _ability=['Divine Insight']\n    _move_1=('Dragon Pulse',85,100,'Special','Dragon',0,[])\n    _move_2=('Mystic Shield',0,100000,'Status','Fairy',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def get_accuracy(self):\n        acc=1e5\n        acc*=self.target.get_evasion()\n        return acc/100\n\n    def move_1(self): # Dragon Pulse\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n\n    def move_2(self): # Mystic Shield\n        self.set_boost('def',1,'self')\n        self.set_boost('spd',1,'self')\n        self.target.set_boost('atk',-1)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Baize\",\n  \"types\": [\n    \"Dragon\",\n    \"Fairy\"\n  ],\n  \"gender\": \"Genderless\",\n  \"ability\": {\n    \"Divine Insight\": \"This Pokemon's moves never miss.\"\n  },\n  \"moves\": {\n    \"Dragon Pulse\": {\n      \"power\": 85,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Dragon\",\n      \"effect\": \"No additional effect.\",\n      \"property\": []\n    },\n    \"Mystic Shield\": {\n      \"power\": 0,\n      \"accuracy\": 100000,\n      \"category\": \"Status\",\n      \"type\": \"Fairy\",\n      \"effect\": \"Raises the user's Defense and Special Defense by 1 stage each and lower its opponents' Attack by 1 stage.\",\n      \"property\": []\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Baize(PokemonBase):\n    _species='Baize'\n    _types=['Dragon','Fairy']\n    _gender='Genderless'\n    _ability=['Divine Insight']\n    _move_1=('Dragon Pulse',85,100,'Special','Dragon',0,[])\n    _move_2=('Mystic Shield',0,100000,'Status','Fairy',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def get_accuracy(self):\n        acc=1e5\n        acc*=self.target.get_evasion()\n        return acc/100\n\n    def move_1(self): # Dragon Pulse\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n\n    def move_2(self): # Mystic Shield\n        self.set_boost('def',1,'self')\n        self.set_boost('spd',1,'self')\n        self.target.set_boost('atk',-1)\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Celestial Voice\": {\n    \"power\": 70,\n    \"accuracy\": 100,\n    \"category\": \"Special\",\n    \"type\": \"Normal\",\n    \"effect\": \"Has a 30% chance to confuse the target.\",\n    \"property\": []\n  }\n}\n```",
        "response": "```python\n@Increment(Baize,'_move_3')\ndef value():\n    return ('Celestial Voice',70,100,'Special','Normal',0,[])\n\n@Increment(Baize)\ndef move_3(self): # Celestial Voice\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint() and rnd()<30/100:\n            self.target.set_condition('CONFUSION',counter=0)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Baize\",\n  \"types\": [\n    \"Dragon\",\n    \"Fairy\"\n  ],\n  \"gender\": \"Genderless\",\n  \"ability\": {\n    \"Divine Insight\": \"This Pokemon's moves never miss.\"\n  },\n  \"moves\": {\n    \"Dragon Pulse\": {\n      \"power\": 85,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Dragon\",\n      \"effect\": \"No additional effect.\",\n      \"property\": []\n    },\n    \"Mystic Shield\": {\n      \"power\": 0,\n      \"accuracy\": 100000,\n      \"category\": \"Status\",\n      \"type\": \"Fairy\",\n      \"effect\": \"Raises the user's Defense and Special Defense by 1 stage each and lower its opponents' Attack by 1 stage.\",\n      \"property\": []\n    },\n    \"Celestial Voice\": {\n      \"power\": 70,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Normal\",\n      \"effect\": \"Has a 30% chance to confuse the target.\",\n      \"property\": []\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Baize(PokemonBase):\n    _species='Baize'\n    _types=['Dragon','Fairy']\n    _gender='Genderless'\n    _ability=['Divine Insight']\n    _move_1=('Dragon Pulse',85,100,'Special','Dragon',0,[])\n    _move_2=('Mystic Shield',0,100000,'Status','Fairy',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def get_accuracy(self):\n        acc=1e5\n        acc*=self.target.get_evasion()\n        return acc/100\n\n    def move_1(self): # Dragon Pulse\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n\n    def move_2(self): # Mystic Shield\n        self.set_boost('def',1,'self')\n        self.set_boost('spd',1,'self')\n        self.target.set_boost('atk',-1)\n\n@Increment(Baize,'_move_3')\ndef value():\n    return ('Celestial Voice',70,100,'Special','Normal',0,[])\n\n@Increment(Baize)\ndef move_3(self): # Celestial Voice\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint() and rnd()<30/100:\n            self.target.set_condition('CONFUSION',counter=0)\n```\n\nThis role is gonna learn a new ability:\n```json\n{\n  \"Purifying Presence\": \"This Pokemon summons Pure Zone on switch-in for 3 turns. In Pure Zone, Baize makes itself not attacked.\"\n}\n```",
        "response": "```python\n@Increment(Baize,'_ability')\ndef value():\n    return ['Divine Insight','Purifying Presence']\n\n@Increment(Baize)\ndef onswitch(self):\n    self.set_condition('PURE_ZONE',counter=0)\n\n@Increment(Baize)\ndef _take_damage_attack(self,x):\n    if self['conditions'].get('PURE_ZONE'):\n        return\n    self.register_act_taken()\n    self.state['hp']=max(0,self['hp']-x)\n    if self['hp']==0:\n        self.state['status']='FNT'\n\n@Increment(Baize)\ndef endturn(self):\n    if self['conditions'].get('PURE_ZONE'):\n        self['conditions']['PURE_ZONE']['counter']+=1\n        if self['conditions']['PURE_ZONE']['counter']==3:\n            del self['conditions']['PURE_ZONE']\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Basarios\",\n  \"types\": [\n    \"Rock\",\n    \"Fire\"\n  ],\n  \"gender\": \"Female\",\n  \"ability\": {\n    \"Heat Vent\": \"This Pokemon takes 50% less damage from Water and Grass type moves.\"\n  },\n  \"moves\": {\n    \"Lava Beam\": {\n      \"power\": 100,\n      \"accuracy\": 90,\n      \"category\": \"Special\",\n      \"type\": \"Fire\",\n      \"effect\": \"Has a 20% chance to burn the target.\"\n    },\n    \"Earthquake\": {\n      \"power\": 100,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Ground\",\n      \"effect\": \"No additional effect.\"\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass Basarios(PokemonBase):\n    _species='Basarios'\n    _types=['Rock','Fire']\n    _gender='Female'\n    _ability=['Heat Vent','Lava Storm']\n    _move_1=('Lava Beam',100,90,'Special','Fire',0,[])\n    _move_2=('Earthquake',100,100,'Physical','Ground',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def _take_damage_attack(self,x):\n        self.register_act_taken()\n        if self['act_taken']['type'] in ['Water','Grass']:\n            x=int(x*0.5)\n        self.state['hp']=max(0,self['hp']-x)\n        if self['hp']==0:\n            self.state['status']='FNT'\n\n    def move_1(self): # Lava Beam\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<20/100: self.target.set_status('BRN')\n    \n    def move_2(self): # Earthquake\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Basarios\",\n  \"types\": [\n    \"Rock\",\n    \"Fire\"\n  ],\n  \"gender\": \"Female\",\n  \"ability\": {\n    \"Heat Vent\": \"This Pokemon takes 50% less damage from Water and Grass type moves.\"\n  },\n  \"moves\": {\n    \"Lava Beam\": {\n      \"power\": 100,\n      \"accuracy\": 90,\n      \"category\": \"Special\",\n      \"type\": \"Fire\",\n      \"effect\": \"Has a 20% chance to burn the target.\"\n    },\n    \"Earthquake\": {\n      \"power\": 100,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Ground\",\n      \"effect\": \"No additional effect.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Basarios(PokemonBase):\n    _species='Basarios'\n    _types=['Rock','Fire']\n    _gender='Female'\n    _ability=['Heat Vent','Lava Storm']\n    _move_1=('Lava Beam',100,90,'Special','Fire',0,[])\n    _move_2=('Earthquake',100,100,'Physical','Ground',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def _take_damage_attack(self,x):\n        self.register_act_taken()\n        if self['act_taken']['type'] in ['Water','Grass']:\n            x=int(x*0.5)\n        self.state['hp']=max(0,self['hp']-x)\n        if self['hp']==0:\n            self.state['status']='FNT'\n\n    def move_1(self): # Lava Beam\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<20/100: self.target.set_status('BRN')\n    \n    def move_2(self): # Earthquake\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Poison Cloud\": {\n    \"power\": 0,\n    \"accuracy\": 100,\n    \"category\": \"Status\",\n    \"type\": \"Poison\",\n    \"effect\": \"Poisons all adjacent opponents.\"\n  }\n}\n```",
        "response": "```python\n@Increment(Basarios,'_move_3')\ndef value():\n    return ('Poison Cloud',0,100,'Status','Poison',0,[])\n\n@Increment(Basarios)\ndef move_3(self): # Poison Cloud\n    self.target.set_status('PSN')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Basarios\",\n  \"types\": [\n    \"Rock\",\n    \"Fire\"\n  ],\n  \"gender\": \"Female\",\n  \"ability\": {\n    \"Heat Vent\": \"This Pokemon takes 50% less damage from Water and Grass type moves.\"\n  },\n  \"moves\": {\n    \"Lava Beam\": {\n      \"power\": 100,\n      \"accuracy\": 90,\n      \"category\": \"Special\",\n      \"type\": \"Fire\",\n      \"effect\": \"Has a 20% chance to burn the target.\"\n    },\n    \"Earthquake\": {\n      \"power\": 100,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Ground\",\n      \"effect\": \"No additional effect.\"\n    },\n    \"Poison Cloud\": {\n      \"power\": 0,\n      \"accuracy\": 100,\n      \"category\": \"Status\",\n      \"type\": \"Poison\",\n      \"effect\": \"Poisons all adjacent opponents.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Basarios(PokemonBase):\n    _species='Basarios'\n    _types=['Rock','Fire']\n    _gender='Female'\n    _ability=['Heat Vent','Lava Storm']\n    _move_1=('Lava Beam',100,90,'Special','Fire',0,[])\n    _move_2=('Earthquake',100,100,'Physical','Ground',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def _take_damage_attack(self,x):\n        self.register_act_taken()\n        if self['act_taken']['type'] in ['Water','Grass']:\n            x=int(x*0.5)\n        self.state['hp']=max(0,self['hp']-x)\n        if self['hp']==0:\n            self.state['status']='FNT'\n\n    def move_1(self): # Lava Beam\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<20/100: self.target.set_status('BRN')\n    \n    def move_2(self): # Earthquake\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n\n@Increment(Basarios,'_move_3')\ndef value():\n    return ('Poison Cloud',0,100,'Status','Poison',0,[])\n\n@Increment(Basarios)\ndef move_3(self): # Poison Cloud\n    self.target.set_status('PSN')\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Rock Slide\": {\n    \"power\": 75,\n    \"accuracy\": 90,\n    \"category\": \"Physical\",\n    \"type\": \"Rock\",\n    \"effect\": \"Has a 30% chance to make the target flinch.\"\n  }\n}\n```",
        "response": "```python\n@Increment(Basarios,'_move_4')\ndef value():\n    return ('Rock Slide',75,90,'Physical','Rock',0,[])\n\n@Increment(Basarios)\ndef move_4(self): # Rock Slide\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint() and rnd()<30/100:\n            self.target.set_condition('FLINCH',counter=0)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Basarios\",\n  \"types\": [\n    \"Rock\",\n    \"Fire\"\n  ],\n  \"gender\": \"Female\",\n  \"ability\": {\n    \"Heat Vent\": \"This Pokemon takes 50% less damage from Water and Grass type moves.\"\n  },\n  \"moves\": {\n    \"Lava Beam\": {\n      \"power\": 100,\n      \"accuracy\": 90,\n      \"category\": \"Special\",\n      \"type\": \"Fire\",\n      \"effect\": \"Has a 20% chance to burn the target.\"\n    },\n    \"Earthquake\": {\n      \"power\": 100,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Ground\",\n      \"effect\": \"No additional effect.\"\n    },\n    \"Poison Cloud\": {\n      \"power\": 0,\n      \"accuracy\": 100,\n      \"category\": \"Status\",\n      \"type\": \"Poison\",\n      \"effect\": \"Poisons all adjacent opponents.\"\n    },\n    \"Rock Slide\": {\n      \"power\": 75,\n      \"accuracy\": 90,\n      \"category\": \"Physical\",\n      \"type\": \"Rock\",\n      \"effect\": \"Has a 30% chance to make the target flinch.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Basarios(PokemonBase):\n    _species='Basarios'\n    _types=['Rock','Fire']\n    _gender='Female'\n    _ability=['Heat Vent','Lava Storm']\n    _move_1=('Lava Beam',100,90,'Special','Fire',0,[])\n    _move_2=('Earthquake',100,100,'Physical','Ground',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def _take_damage_attack(self,x):\n        self.register_act_taken()\n        if self['act_taken']['type'] in ['Water','Grass']:\n            x=int(x*0.5)\n        self.state['hp']=max(0,self['hp']-x)\n        if self['hp']==0:\n            self.state['status']='FNT'\n\n    def move_1(self): # Lava Beam\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<20/100: self.target.set_status('BRN')\n    \n    def move_2(self): # Earthquake\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n\n@Increment(Basarios,'_move_3')\ndef value():\n    return ('Poison Cloud',0,100,'Status','Poison',0,[])\n\n@Increment(Basarios)\ndef move_3(self): # Poison Cloud\n    self.target.set_status('PSN')\n\n@Increment(Basarios,'_move_4')\ndef value():\n    return ('Rock Slide',75,90,'Physical','Rock',0,[])\n\n@Increment(Basarios)\ndef move_4(self): # Rock Slide\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint() and rnd()<30/100:\n            self.target.set_condition('FLINCH',counter=0)\n```\n\nThis role is gonna learn a new ability:\n```json\n{\n  \"Lava Storm\": \"This Pokemon releases either a Sleeping Gas, Poison Gas, or Burning Gas after using a Fire-type move. Each gas has a 30% chance to force the target into sleep, poison, or burn status.\"\n}\n```",
        "response": "```python\n@Increment(Basarios,'_ability')\ndef value():\n    return ['Heat Vent','Lava Storm']\n\n@Increment(Basarios)\ndef release_gas(self):\n    def sleeping_gas():\n        if rnd()<1/3:\n            self.target.set_status('SLP')\n    def poison_gas():\n        if rnd()<1/3:\n            self.target.set_status('PSN')\n    def burning_gas():\n        if rnd()<1/3:\n            self.target.set_status('BRN')\n    rndc([sleeping_gas,poison_gas,burning_gas])()\n\n@Increment(Basarios)\ndef move_1(self): # Lava Beam\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint() and rnd()<20/100: self.target.set_status('BRN')\n        self.release_gas()\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Bazelgeuse\",\n  \"types\": [\n    \"Fire\",\n    \"Dragon\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Explosive Scales\": \"Pokemon attacking this Pokemon will attach an explosive scale, exploding at the end of the turn. Each scale deals damage equal to 1/10 of maximum HP.\"\n  },\n  \"moves\": {\n    \"Scale Burst\": {\n      \"power\": 0,\n      \"accuracy\": 100,\n      \"category\": \"Status\",\n      \"type\": \"Fire\",\n      \"effect\": \"Drops explosive scales to the opponents.\"\n    },\n    \"Inferno Blast\": {\n      \"power\": 100,\n      \"accuracy\": 70,\n      \"category\": \"Special\",\n      \"type\": \"Fire\",\n      \"effect\": \"Has a 50% chance to burn the target.\"\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass Bazelgeuse(PokemonBase):\n    _species='Bazelgeuse'\n    _types=['Fire','Dragon']\n    _gender='Male'\n    _ability=['Explosive Scales']\n    _move_1=('Scale Burst',0,100,'Status','Fire',0,[])\n    _move_2=('Inferno Blast',100,70,'Special','Fire',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def drop_scales(self):\n        if not self.target['conditions'].get('EXPLOSIVE_SCALES'):\n            self.target.set_condition('EXPLOSIVE_SCALES',counter=0)\n        self.target['conditions']['EXPLOSIVE_SCALES']['counter']+=1\n\n    def explode_scales(self):\n        if not self.target['conditions'].get('EXPLOSIVE_SCALES'):\n            return\n        for _ in range(self.target['conditions']['EXPLOSIVE_SCALES']['counter']):\n            self.target.take_damage(self.target['max_hp']//10,'loss')\n        del self.target['conditions']['EXPLOSIVE_SCALES']\n\n    def _take_damage_attack(self,x):\n        self.register_act_taken()\n        self.state['hp']=max(0,self['hp']-x)\n        self.drop_scales()\n        if self['hp']==0:\n            self.state['status']='FNT'\n\n    def endturn(self):\n        self.explode_scales()\n\n    def move_1(self): # Scale Burst\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            self.drop_scales()\n    \n    def move_2(self): # Inferno Blast\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if rnd()<50/100: self.target.set_status('BRN')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Bazelgeuse\",\n  \"types\": [\n    \"Fire\",\n    \"Dragon\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Explosive Scales\": \"Pokemon attacking this Pokemon will attach an explosive scale, exploding at the end of the turn. Each scale deals damage equal to 1/10 of maximum HP.\"\n  },\n  \"moves\": {\n    \"Scale Burst\": {\n      \"power\": 0,\n      \"accuracy\": 100,\n      \"category\": \"Status\",\n      \"type\": \"Fire\",\n      \"effect\": \"Drops explosive scales to the opponents.\"\n    },\n    \"Inferno Blast\": {\n      \"power\": 100,\n      \"accuracy\": 70,\n      \"category\": \"Special\",\n      \"type\": \"Fire\",\n      \"effect\": \"Has a 50% chance to burn the target.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Bazelgeuse(PokemonBase):\n    _species='Bazelgeuse'\n    _types=['Fire','Dragon']\n    _gender='Male'\n    _ability=['Explosive Scales']\n    _move_1=('Scale Burst',0,100,'Status','Fire',0,[])\n    _move_2=('Inferno Blast',100,70,'Special','Fire',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def drop_scales(self):\n        if not self.target['conditions'].get('EXPLOSIVE_SCALES'):\n            self.target.set_condition('EXPLOSIVE_SCALES',counter=0)\n        self.target['conditions']['EXPLOSIVE_SCALES']['counter']+=1\n\n    def explode_scales(self):\n        if not self.target['conditions'].get('EXPLOSIVE_SCALES'):\n            return\n        for _ in range(self.target['conditions']['EXPLOSIVE_SCALES']['counter']):\n            self.target.take_damage(self.target['max_hp']//10,'loss')\n        del self.target['conditions']['EXPLOSIVE_SCALES']\n\n    def _take_damage_attack(self,x):\n        self.register_act_taken()\n        self.state['hp']=max(0,self['hp']-x)\n        self.drop_scales()\n        if self['hp']==0:\n            self.state['status']='FNT'\n\n    def endturn(self):\n        self.explode_scales()\n\n    def move_1(self): # Scale Burst\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            self.drop_scales()\n    \n    def move_2(self): # Inferno Blast\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if rnd()<50/100: self.target.set_status('BRN')\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Draco Meteor\": {\n    \"power\": 130,\n    \"accuracy\": 90,\n    \"category\": \"Special\",\n    \"type\": \"Dragon\",\n    \"effect\": \"Lowers the user's Special Attack by 2 stages.\"\n  }\n}\n```",
        "response": "```python\n@Increment(Bazelgeuse,'_move_3')\ndef value():\n    return ('Draco Meteor',130,90,'Special','Dragon',0,[])\n\n@Increment(Bazelgeuse)\ndef move_3(self): # Draco Meteor\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        self.set_boost('spa',-2,'self')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Bazelgeuse\",\n  \"types\": [\n    \"Fire\",\n    \"Dragon\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Explosive Scales\": \"Pokemon attacking this Pokemon will attach an explosive scale, exploding at the end of the turn. Each scale deals damage equal to 1/10 of maximum HP.\"\n  },\n  \"moves\": {\n    \"Scale Burst\": {\n      \"power\": 0,\n      \"accuracy\": 100,\n      \"category\": \"Status\",\n      \"type\": \"Fire\",\n      \"effect\": \"Drops explosive scales to the opponents.\"\n    },\n    \"Inferno Blast\": {\n      \"power\": 100,\n      \"accuracy\": 70,\n      \"category\": \"Special\",\n      \"type\": \"Fire\",\n      \"effect\": \"Has a 50% chance to burn the target.\"\n    },\n    \"Draco Meteor\": {\n      \"power\": 130,\n      \"accuracy\": 90,\n      \"category\": \"Special\",\n      \"type\": \"Dragon\",\n      \"effect\": \"Lowers the user's Special Attack by 2 stages.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Bazelgeuse(PokemonBase):\n    _species='Bazelgeuse'\n    _types=['Fire','Dragon']\n    _gender='Male'\n    _ability=['Explosive Scales']\n    _move_1=('Scale Burst',0,100,'Status','Fire',0,[])\n    _move_2=('Inferno Blast',100,70,'Special','Fire',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def drop_scales(self):\n        if not self.target['conditions'].get('EXPLOSIVE_SCALES'):\n            self.target.set_condition('EXPLOSIVE_SCALES',counter=0)\n        self.target['conditions']['EXPLOSIVE_SCALES']['counter']+=1\n\n    def explode_scales(self):\n        if not self.target['conditions'].get('EXPLOSIVE_SCALES'):\n            return\n        for _ in range(self.target['conditions']['EXPLOSIVE_SCALES']['counter']):\n            self.target.take_damage(self.target['max_hp']//10,'loss')\n        del self.target['conditions']['EXPLOSIVE_SCALES']\n\n    def _take_damage_attack(self,x):\n        self.register_act_taken()\n        self.state['hp']=max(0,self['hp']-x)\n        self.drop_scales()\n        if self['hp']==0:\n            self.state['status']='FNT'\n\n    def endturn(self):\n        self.explode_scales()\n\n    def move_1(self): # Scale Burst\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            self.drop_scales()\n    \n    def move_2(self): # Inferno Blast\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if rnd()<50/100: self.target.set_status('BRN')\n\n@Increment(Bazelgeuse,'_move_3')\ndef value():\n    return ('Draco Meteor',130,90,'Special','Dragon',0,[])\n\n@Increment(Bazelgeuse)\ndef move_3(self): # Draco Meteor\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        self.set_boost('spa',-2,'self')\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Dragon Roar\": {\n    \"power\": 0,\n    \"accuracy\": 100,\n    \"category\": \"Status\",\n    \"type\": \"Dragon\",\n    \"effect\": \"Lowers the target's Attack and Special Attack by 1 stage.\"\n  }\n}\n```",
        "response": "```python\n@Increment(Bazelgeuse,'_move_4')\ndef value():\n    return ('Dragon Roar',0,100,'Status','Dragon',0,[])\n\n@Increment(Bazelgeuse)\ndef move_4(self): # Dragon Roar\n    self.target.set_boost('atk',-1)\n    self.target.set_boost('spa',-1)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Bazelgeuse\",\n  \"types\": [\n    \"Fire\",\n    \"Dragon\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Explosive Scales\": \"Pokemon attacking this Pokemon will attach an explosive scale, exploding at the end of the turn. Each scale deals damage equal to 1/10 of maximum HP.\"\n  },\n  \"moves\": {\n    \"Scale Burst\": {\n      \"power\": 0,\n      \"accuracy\": 100,\n      \"category\": \"Status\",\n      \"type\": \"Fire\",\n      \"effect\": \"Drops explosive scales to the opponents.\"\n    },\n    \"Inferno Blast\": {\n      \"power\": 100,\n      \"accuracy\": 70,\n      \"category\": \"Special\",\n      \"type\": \"Fire\",\n      \"effect\": \"Has a 50% chance to burn the target.\"\n    },\n    \"Draco Meteor\": {\n      \"power\": 130,\n      \"accuracy\": 90,\n      \"category\": \"Special\",\n      \"type\": \"Dragon\",\n      \"effect\": \"Lowers the user's Special Attack by 2 stages.\"\n    },\n    \"Dragon Roar\": {\n      \"power\": 0,\n      \"accuracy\": 100,\n      \"category\": \"Status\",\n      \"type\": \"Dragon\",\n      \"effect\": \"Lowers the target's Attack and Special Attack by 1 stage.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Bazelgeuse(PokemonBase):\n    _species='Bazelgeuse'\n    _types=['Fire','Dragon']\n    _gender='Male'\n    _ability=['Explosive Scales']\n    _move_1=('Scale Burst',0,100,'Status','Fire',0,[])\n    _move_2=('Inferno Blast',100,70,'Special','Fire',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def drop_scales(self):\n        if not self.target['conditions'].get('EXPLOSIVE_SCALES'):\n            self.target.set_condition('EXPLOSIVE_SCALES',counter=0)\n        self.target['conditions']['EXPLOSIVE_SCALES']['counter']+=1\n\n    def explode_scales(self):\n        if not self.target['conditions'].get('EXPLOSIVE_SCALES'):\n            return\n        for _ in range(self.target['conditions']['EXPLOSIVE_SCALES']['counter']):\n            self.target.take_damage(self.target['max_hp']//10,'loss')\n        del self.target['conditions']['EXPLOSIVE_SCALES']\n\n    def _take_damage_attack(self,x):\n        self.register_act_taken()\n        self.state['hp']=max(0,self['hp']-x)\n        self.drop_scales()\n        if self['hp']==0:\n            self.state['status']='FNT'\n\n    def endturn(self):\n        self.explode_scales()\n\n    def move_1(self): # Scale Burst\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            self.drop_scales()\n    \n    def move_2(self): # Inferno Blast\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if rnd()<50/100: self.target.set_status('BRN')\n\n@Increment(Bazelgeuse,'_move_3')\ndef value():\n    return ('Draco Meteor',130,90,'Special','Dragon',0,[])\n\n@Increment(Bazelgeuse)\ndef move_3(self): # Draco Meteor\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        self.set_boost('spa',-2,'self')\n\n@Increment(Bazelgeuse,'_move_4')\ndef value():\n    return ('Dragon Roar',0,100,'Status','Dragon',0,[])\n\n@Increment(Bazelgeuse)\ndef move_4(self): # Dragon Roar\n    self.target.set_boost('atk',-1)\n    self.target.set_boost('spa',-1)\n```\n\nThis role is gonna learn a new ability:\n```json\n{\n  \"Superheated State\": \"When HP is below 50%, each scale explodes twice, dealing damage equal to 1/5 of maximum HP.\"\n}\n```",
        "response": "```python\n@Increment(Bazelgeuse,'_ability')\ndef value():\n    return ['Explosive Scales','Superheated State']\n\n@Increment(Bazelgeuse)\ndef explode_scales(self):\n    if not self.target['conditions'].get('EXPLOSIVE_SCALES'):\n        return\n    for _ in range(self.target['conditions']['EXPLOSIVE_SCALES']['counter']):\n        self.target.take_damage(self.target['max_hp']//10,'loss')\n        if self['hp']<self['max_hp']//2:\n            self.target.take_damage(self.target['max_hp']//10,'loss')\n    del self.target['conditions']['EXPLOSIVE_SCALES']\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Bazelgeuse\",\n  \"types\": [\n    \"Fire\",\n    \"Dragon\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Explosive Scales\": \"Pokemon attacking this Pokemon will attach an explosive scale, exploding at the end of the turn. Each scale deals damage equal to 1/10 of maximum HP.\",\n    \"Superheated State\": \"When HP is below 50%, each scale explodes twice, dealing damage equal to 1/5 of maximum HP.\"\n  },\n  \"moves\": {\n    \"Scale Burst\": {\n      \"power\": 0,\n      \"accuracy\": 100,\n      \"category\": \"Status\",\n      \"type\": \"Fire\",\n      \"effect\": \"Drops explosive scales to the opponents.\"\n    },\n    \"Inferno Blast\": {\n      \"power\": 100,\n      \"accuracy\": 70,\n      \"category\": \"Special\",\n      \"type\": \"Fire\",\n      \"effect\": \"Has a 50% chance to burn the target.\"\n    },\n    \"Draco Meteor\": {\n      \"power\": 130,\n      \"accuracy\": 90,\n      \"category\": \"Special\",\n      \"type\": \"Dragon\",\n      \"effect\": \"Lowers the user's Special Attack by 2 stages.\"\n    },\n    \"Dragon Roar\": {\n      \"power\": 0,\n      \"accuracy\": 100,\n      \"category\": \"Status\",\n      \"type\": \"Dragon\",\n      \"effect\": \"Lowers the target's Attack and Special Attack by 1 stage.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Bazelgeuse(PokemonBase):\n    _species='Bazelgeuse'\n    _types=['Fire','Dragon']\n    _gender='Male'\n    _ability=['Explosive Scales']\n    _move_1=('Scale Burst',0,100,'Status','Fire',0,[])\n    _move_2=('Inferno Blast',100,70,'Special','Fire',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def drop_scales(self):\n        if not self.target['conditions'].get('EXPLOSIVE_SCALES'):\n            self.target.set_condition('EXPLOSIVE_SCALES',counter=0)\n        self.target['conditions']['EXPLOSIVE_SCALES']['counter']+=1\n\n    def explode_scales(self):\n        if not self.target['conditions'].get('EXPLOSIVE_SCALES'):\n            return\n        for _ in range(self.target['conditions']['EXPLOSIVE_SCALES']['counter']):\n            self.target.take_damage(self.target['max_hp']//10,'loss')\n        del self.target['conditions']['EXPLOSIVE_SCALES']\n\n    def _take_damage_attack(self,x):\n        self.register_act_taken()\n        self.state['hp']=max(0,self['hp']-x)\n        self.drop_scales()\n        if self['hp']==0:\n            self.state['status']='FNT'\n\n    def endturn(self):\n        self.explode_scales()\n\n    def move_1(self): # Scale Burst\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            self.drop_scales()\n    \n    def move_2(self): # Inferno Blast\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if rnd()<50/100: self.target.set_status('BRN')\n\n@Increment(Bazelgeuse,'_move_3')\ndef value():\n    return ('Draco Meteor',130,90,'Special','Dragon',0,[])\n\n@Increment(Bazelgeuse)\ndef move_3(self): # Draco Meteor\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        self.set_boost('spa',-2,'self')\n\n@Increment(Bazelgeuse,'_move_4')\ndef value():\n    return ('Dragon Roar',0,100,'Status','Dragon',0,[])\n\n@Increment(Bazelgeuse)\ndef move_4(self): # Dragon Roar\n    self.target.set_boost('atk',-1)\n    self.target.set_boost('spa',-1)\n\n@Increment(Bazelgeuse,'_ability')\ndef value():\n    return ['Explosive Scales','Superheated State']\n\n@Increment(Bazelgeuse)\ndef explode_scales(self):\n    if not self.target['conditions'].get('EXPLOSIVE_SCALES'):\n        return\n    for _ in range(self.target['conditions']['EXPLOSIVE_SCALES']['counter']):\n        self.target.take_damage(self.target['max_hp']//10,'loss')\n        if self['hp']<self['max_hp']//2:\n            self.target.take_damage(self.target['max_hp']//10,'loss')\n    del self.target['conditions']['EXPLOSIVE_SCALES']\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Earth Power\": {\n    \"power\": 90,\n    \"accuracy\": 100,\n    \"category\": \"Special\",\n    \"type\": \"Ground\",\n    \"effect\": \"Has a 10% chance to lower the target's Special Defense by 1 stage.\"\n  }\n}\n```",
        "response": "```python\n@Increment(Bazelgeuse,'_move_5')\ndef value():\n    return ('Earth Power',90,100,'Special','Ground',0,[])\n\n@Increment(Bazelgeuse)\ndef move_5(self): # Earth Power\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint() and rnd()<0.1:\n            self.target.set_boost('spd',-1)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Blackwing\",\n  \"types\": [\n    \"Dark\",\n    \"Flying\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Black Feather\": \"This Pokemon acquires 3 Black Feather around it when switch-in. When taken damage from moves, takes 50% damage at cost of one Black Feather. If Black Feather is available, this Pokemon loses 1/8 its max HP at the end of each turn.\"\n  },\n  \"moves\": {\n    \"Dark Tempest\": {\n      \"power\": 80,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Dark\",\n      \"effect\": \"Has a 20% chance to lower the target’s Defense by 1 stage.\"\n    },\n    \"Wing Beat\": {\n      \"power\": 85,\n      \"accuracy\": 90,\n      \"category\": \"Physical\",\n      \"type\": \"Flying\",\n      \"effect\": \"Has a 10% chance to flinch the target.\"\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass Blackwing(PokemonBase):\n    _species='Blackwing'\n    _types=['Dark','Flying']\n    _gender='Male'\n    _ability=['Black Feather']\n    _move_1=('Dark Tempest',80,100,'Special','Dark',0,[])\n    _move_2=('Wing Beat',85,90,'Physical','Flying',0,[])\n    def __init__(self):\n        super().__init__()\n    \n    def onswitch(self):\n        self.set_condition('BLACK_FEATHER',counter=3)\n    \n    def _take_damage_attack(self,x):\n        self.register_act_taken()\n        if self['conditions'].get('BLACK_FEATHER'):\n            x=int(x*0.5)\n            self['conditions']['BLACK_FEATHER']['counter']-=1\n            if self['conditions']['BLACK_FEATHER']['counter']==0:\n                del self['conditions']['BLACK_FEATHER']\n        self.state['hp']=max(0,self['hp']-x)\n        if self['hp']==0:\n            self.state['status']='FNT'\n    \n    def endturn(self):\n        if self['conditions'].get('BLACK_FEATHER'):\n            self.take_damage(self['max_hp']//8,'loss')\n    \n    def move_1(self): # Dark Tempest\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<20/100:\n                self.target.set_boost('def',-1)\n    \n    def move_2(self): # Wing Beat\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<10/100:\n                self.target.set_condition('FLINCH',counter=0)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Blackwing\",\n  \"types\": [\n    \"Dark\",\n    \"Flying\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Black Feather\": \"This Pokemon acquires 3 Black Feather around it when switch-in. When taken damage from moves, takes 50% damage at cost of one Black Feather. If Black Feather is available, this Pokemon loses 1/8 its max HP at the end of each turn.\"\n  },\n  \"moves\": {\n    \"Dark Tempest\": {\n      \"power\": 80,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Dark\",\n      \"effect\": \"Has a 20% chance to lower the target’s Defense by 1 stage.\"\n    },\n    \"Wing Beat\": {\n      \"power\": 85,\n      \"accuracy\": 90,\n      \"category\": \"Physical\",\n      \"type\": \"Flying\",\n      \"effect\": \"Has a 10% chance to flinch the target.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Blackwing(PokemonBase):\n    _species='Blackwing'\n    _types=['Dark','Flying']\n    _gender='Male'\n    _ability=['Black Feather']\n    _move_1=('Dark Tempest',80,100,'Special','Dark',0,[])\n    _move_2=('Wing Beat',85,90,'Physical','Flying',0,[])\n    def __init__(self):\n        super().__init__()\n    \n    def onswitch(self):\n        self.set_condition('BLACK_FEATHER',counter=3)\n    \n    def _take_damage_attack(self,x):\n        self.register_act_taken()\n        if self['conditions'].get('BLACK_FEATHER'):\n            x=int(x*0.5)\n            self['conditions']['BLACK_FEATHER']['counter']-=1\n            if self['conditions']['BLACK_FEATHER']['counter']==0:\n                del self['conditions']['BLACK_FEATHER']\n        self.state['hp']=max(0,self['hp']-x)\n        if self['hp']==0:\n            self.state['status']='FNT'\n    \n    def endturn(self):\n        if self['conditions'].get('BLACK_FEATHER'):\n            self.take_damage(self['max_hp']//8,'loss')\n    \n    def move_1(self): # Dark Tempest\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<20/100:\n                self.target.set_boost('def',-1)\n    \n    def move_2(self): # Wing Beat\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<10/100:\n                self.target.set_condition('FLINCH',counter=0)\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Shadow Claw\": {\n    \"power\": 70,\n    \"accuracy\": 100,\n    \"category\": \"Physical\",\n    \"type\": \"Dark\",\n    \"effect\": \"Has a higher critical hit ratio.\",\n    \"property\": [\n      \"contact\"\n    ]\n  }\n}\n```",
        "response": "```python\n@Increment(Blackwing,'_move_3')\ndef value():\n    return ('Shadow Claw',70,100,'Physical','Dark',0,['contact'])\n\n@Increment(Blackwing)\ndef move_3(self): # Shadow Claw\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n\n@Increment(Blackwing)\ndef get_crit(self):\n    crit_mult=[0,24,8,2,1]\n    crit_ratio=self['boosts']['crit']\n    if self['act']['id']=='Shadow Claw':\n        crit_ratio=min(3,crit_ratio+1)\n    crit=False\n    if rnd()*crit_mult[crit_ratio+1]<1:\n        crit=True\n    return crit\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Blackwing\",\n  \"types\": [\n    \"Dark\",\n    \"Flying\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Black Feather\": \"This Pokemon acquires 3 Black Feather around it when switch-in. When taken damage from moves, takes 50% damage at cost of one Black Feather. If Black Feather is available, this Pokemon loses 1/8 its max HP at the end of each turn.\"\n  },\n  \"moves\": {\n    \"Dark Tempest\": {\n      \"power\": 80,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Dark\",\n      \"effect\": \"Has a 20% chance to lower the target’s Defense by 1 stage.\"\n    },\n    \"Wing Beat\": {\n      \"power\": 85,\n      \"accuracy\": 90,\n      \"category\": \"Physical\",\n      \"type\": \"Flying\",\n      \"effect\": \"Has a 10% chance to flinch the target.\"\n    },\n    \"Shadow Claw\": {\n      \"power\": 70,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Dark\",\n      \"effect\": \"Has a higher critical hit ratio.\",\n      \"property\": [\n        \"contact\"\n      ]\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Blackwing(PokemonBase):\n    _species='Blackwing'\n    _types=['Dark','Flying']\n    _gender='Male'\n    _ability=['Black Feather']\n    _move_1=('Dark Tempest',80,100,'Special','Dark',0,[])\n    _move_2=('Wing Beat',85,90,'Physical','Flying',0,[])\n    def __init__(self):\n        super().__init__()\n    \n    def onswitch(self):\n        self.set_condition('BLACK_FEATHER',counter=3)\n    \n    def _take_damage_attack(self,x):\n        self.register_act_taken()\n        if self['conditions'].get('BLACK_FEATHER'):\n            x=int(x*0.5)\n            self['conditions']['BLACK_FEATHER']['counter']-=1\n            if self['conditions']['BLACK_FEATHER']['counter']==0:\n                del self['conditions']['BLACK_FEATHER']\n        self.state['hp']=max(0,self['hp']-x)\n        if self['hp']==0:\n            self.state['status']='FNT'\n    \n    def endturn(self):\n        if self['conditions'].get('BLACK_FEATHER'):\n            self.take_damage(self['max_hp']//8,'loss')\n    \n    def move_1(self): # Dark Tempest\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<20/100:\n                self.target.set_boost('def',-1)\n    \n    def move_2(self): # Wing Beat\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<10/100:\n                self.target.set_condition('FLINCH',counter=0)\n\n@Increment(Blackwing,'_move_3')\ndef value():\n    return ('Shadow Claw',70,100,'Physical','Dark',0,['contact'])\n\n@Increment(Blackwing)\ndef move_3(self): # Shadow Claw\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n\n@Increment(Blackwing)\ndef get_crit(self):\n    crit_mult=[0,24,8,2,1]\n    crit_ratio=self['boosts']['crit']\n    if self['act']['id']=='Shadow Claw':\n        crit_ratio=min(3,crit_ratio+1)\n    crit=False\n    if rnd()*crit_mult[crit_ratio+1]<1:\n        crit=True\n    return crit\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Feather Storm\": {\n    \"power\": 0,\n    \"accuracy\": 100000,\n    \"category\": \"Status\",\n    \"type\": \"Flying\",\n    \"effect\": \"Lowers the target's accuracy by 2 stages.\"\n  }\n}\n```",
        "response": "```python\n@Increment(Blackwing,'_move_4')\ndef value():\n    return ('Feather Storm',0,100000,'Status','Flying',0,[])\n\n@Increment(Blackwing)\ndef move_4(self): # Feather Storm\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        self.target.set_boost('accuracy',-2)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Blackwing\",\n  \"types\": [\n    \"Dark\",\n    \"Flying\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Black Feather\": \"This Pokemon acquires 3 Black Feather around it when switch-in. When taken damage from moves, takes 50% damage at cost of one Black Feather. If Black Feather is available, this Pokemon loses 1/8 its max HP at the end of each turn.\"\n  },\n  \"moves\": {\n    \"Dark Tempest\": {\n      \"power\": 80,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Dark\",\n      \"effect\": \"Has a 20% chance to lower the target’s Defense by 1 stage.\"\n    },\n    \"Wing Beat\": {\n      \"power\": 85,\n      \"accuracy\": 90,\n      \"category\": \"Physical\",\n      \"type\": \"Flying\",\n      \"effect\": \"Has a 10% chance to flinch the target.\"\n    },\n    \"Shadow Claw\": {\n      \"power\": 70,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Dark\",\n      \"effect\": \"Has a higher critical hit ratio.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Feather Storm\": {\n      \"power\": 0,\n      \"accuracy\": 100000,\n      \"category\": \"Status\",\n      \"type\": \"Flying\",\n      \"effect\": \"Lowers the target's accuracy by 2 stages.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Blackwing(PokemonBase):\n    _species='Blackwing'\n    _types=['Dark','Flying']\n    _gender='Male'\n    _ability=['Black Feather']\n    _move_1=('Dark Tempest',80,100,'Special','Dark',0,[])\n    _move_2=('Wing Beat',85,90,'Physical','Flying',0,[])\n    def __init__(self):\n        super().__init__()\n    \n    def onswitch(self):\n        self.set_condition('BLACK_FEATHER',counter=3)\n    \n    def _take_damage_attack(self,x):\n        self.register_act_taken()\n        if self['conditions'].get('BLACK_FEATHER'):\n            x=int(x*0.5)\n            self['conditions']['BLACK_FEATHER']['counter']-=1\n            if self['conditions']['BLACK_FEATHER']['counter']==0:\n                del self['conditions']['BLACK_FEATHER']\n        self.state['hp']=max(0,self['hp']-x)\n        if self['hp']==0:\n            self.state['status']='FNT'\n    \n    def endturn(self):\n        if self['conditions'].get('BLACK_FEATHER'):\n            self.take_damage(self['max_hp']//8,'loss')\n    \n    def move_1(self): # Dark Tempest\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<20/100:\n                self.target.set_boost('def',-1)\n    \n    def move_2(self): # Wing Beat\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<10/100:\n                self.target.set_condition('FLINCH',counter=0)\n\n@Increment(Blackwing,'_move_3')\ndef value():\n    return ('Shadow Claw',70,100,'Physical','Dark',0,['contact'])\n\n@Increment(Blackwing)\ndef move_3(self): # Shadow Claw\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n\n@Increment(Blackwing)\ndef get_crit(self):\n    crit_mult=[0,24,8,2,1]\n    crit_ratio=self['boosts']['crit']\n    if self['act']['id']=='Shadow Claw':\n        crit_ratio=min(3,crit_ratio+1)\n    crit=False\n    if rnd()*crit_mult[crit_ratio+1]<1:\n        crit=True\n    return crit\n\n@Increment(Blackwing,'_move_4')\ndef value():\n    return ('Feather Storm',0,100000,'Status','Flying',0,[])\n\n@Increment(Blackwing)\ndef move_4(self): # Feather Storm\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        self.target.set_boost('accuracy',-2)\n```\n\nThis role is gonna learn a new ability:\n```json\n{\n  \"Shadow Glide\": \"This Pokemon's Speed is raised by 2 stages if hit by a Physical move.\"\n}\n```",
        "response": "```python\n@Increment(Blackwing,'_ability')\ndef value():\n    return ['Black Feather','Shadow Glide']\n\n@Increment(Blackwing)\ndef _take_damage_attack(self,x):\n    self.register_act_taken()\n    if self['conditions'].get('BLACK_FEATHER'):\n        x=int(x*0.5)\n        self['conditions']['BLACK_FEATHER']['counter']-=1\n        if self['conditions']['BLACK_FEATHER']['counter']==0:\n            del self['conditions']['BLACK_FEATHER']\n    self.state['hp']=max(0,self['hp']-x)\n    if self['act_taken']['category']=='Physical':\n        self.set_boost('spe',+2)\n    if self['hp']==0:\n        self.state['status']='FNT'\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Blackwing\",\n  \"types\": [\n    \"Dark\",\n    \"Flying\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Black Feather\": \"This Pokemon acquires 3 Black Feather around it when switch-in. When taken damage from moves, takes 50% damage at cost of one Black Feather. If Black Feather is available, this Pokemon loses 1/8 its max HP at the end of each turn.\",\n    \"Shadow Glide\": \"This Pokemon's Speed is raised by 2 stages if hit by a Physical move.\"\n  },\n  \"moves\": {\n    \"Dark Tempest\": {\n      \"power\": 80,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Dark\",\n      \"effect\": \"Has a 20% chance to lower the target’s Defense by 1 stage.\"\n    },\n    \"Wing Beat\": {\n      \"power\": 85,\n      \"accuracy\": 90,\n      \"category\": \"Physical\",\n      \"type\": \"Flying\",\n      \"effect\": \"Has a 10% chance to flinch the target.\"\n    },\n    \"Shadow Claw\": {\n      \"power\": 70,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Dark\",\n      \"effect\": \"Has a higher critical hit ratio.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Feather Storm\": {\n      \"power\": 0,\n      \"accuracy\": 100000,\n      \"category\": \"Status\",\n      \"type\": \"Flying\",\n      \"effect\": \"Lowers the target's accuracy by 2 stages.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Blackwing(PokemonBase):\n    _species='Blackwing'\n    _types=['Dark','Flying']\n    _gender='Male'\n    _ability=['Black Feather']\n    _move_1=('Dark Tempest',80,100,'Special','Dark',0,[])\n    _move_2=('Wing Beat',85,90,'Physical','Flying',0,[])\n    def __init__(self):\n        super().__init__()\n    \n    def onswitch(self):\n        self.set_condition('BLACK_FEATHER',counter=3)\n    \n    def _take_damage_attack(self,x):\n        self.register_act_taken()\n        if self['conditions'].get('BLACK_FEATHER'):\n            x=int(x*0.5)\n            self['conditions']['BLACK_FEATHER']['counter']-=1\n            if self['conditions']['BLACK_FEATHER']['counter']==0:\n                del self['conditions']['BLACK_FEATHER']\n        self.state['hp']=max(0,self['hp']-x)\n        if self['hp']==0:\n            self.state['status']='FNT'\n    \n    def endturn(self):\n        if self['conditions'].get('BLACK_FEATHER'):\n            self.take_damage(self['max_hp']//8,'loss')\n    \n    def move_1(self): # Dark Tempest\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<20/100:\n                self.target.set_boost('def',-1)\n    \n    def move_2(self): # Wing Beat\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<10/100:\n                self.target.set_condition('FLINCH',counter=0)\n\n@Increment(Blackwing,'_move_3')\ndef value():\n    return ('Shadow Claw',70,100,'Physical','Dark',0,['contact'])\n\n@Increment(Blackwing)\ndef move_3(self): # Shadow Claw\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n\n@Increment(Blackwing)\ndef get_crit(self):\n    crit_mult=[0,24,8,2,1]\n    crit_ratio=self['boosts']['crit']\n    if self['act']['id']=='Shadow Claw':\n        crit_ratio=min(3,crit_ratio+1)\n    crit=False\n    if rnd()*crit_mult[crit_ratio+1]<1:\n        crit=True\n    return crit\n\n@Increment(Blackwing,'_move_4')\ndef value():\n    return ('Feather Storm',0,100000,'Status','Flying',0,[])\n\n@Increment(Blackwing)\ndef move_4(self): # Feather Storm\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        self.target.set_boost('accuracy',-2)\n\n@Increment(Blackwing,'_ability')\ndef value():\n    return ['Black Feather','Shadow Glide']\n\n@Increment(Blackwing)\ndef _take_damage_attack(self,x):\n    self.register_act_taken()\n    if self['conditions'].get('BLACK_FEATHER'):\n        x=int(x*0.5)\n        self['conditions']['BLACK_FEATHER']['counter']-=1\n        if self['conditions']['BLACK_FEATHER']['counter']==0:\n            del self['conditions']['BLACK_FEATHER']\n    self.state['hp']=max(0,self['hp']-x)\n    if self['act_taken']['category']=='Physical':\n        self.set_boost('spe',+2)\n    if self['hp']==0:\n        self.state['status']='FNT'\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Night Dive\": {\n    \"power\": 90,\n    \"accuracy\": 95,\n    \"category\": \"Physical\",\n    \"type\": \"Dark\",\n    \"effect\": \"The user recovers half the HP lost by the target.\",\n    \"property\": [\n      \"contact\"\n    ]\n  }\n}\n```",
        "response": "```python\n@Increment(Blackwing,'_move_5')\ndef value():\n    return ('Night Dive',90,95,'Physical','Dark',0,['contact'])\n\n@Increment(Blackwing)\ndef move_5(self): # Night Dive\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        self.restore(int(0.5*damage),'drain')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Bladecuga\",\n  \"types\": [\n    \"Dark\",\n    \"Flying\"\n  ],\n  \"gender\": \"Female\",\n  \"ability\": {\n    \"Razor Wings\": \"Boosts the power of Flying-type moves by 30% and increases accuracy by 1 stage.\"\n  },\n  \"moves\": {\n    \"Wing Slash\": {\n      \"power\": 85,\n      \"accuracy\": 95,\n      \"category\": \"Physical\",\n      \"type\": \"Flying\",\n      \"effect\": \"Has a 20% chance to cause the target to flinch.\"\n    },\n    \"Tail Spike\": {\n      \"power\": 100,\n      \"accuracy\": 90,\n      \"category\": \"Physical\",\n      \"type\": \"Dark\",\n      \"effect\": \"Has a 30% chance to cause the target to bleed, dealing damage of 1/16 of its max HP at the end of each turn for 3 turns.\"\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass Bladecuga(PokemonBase):\n    _species='Bladecuga'\n    _types=['Dark','Flying']\n    _gender='Female'\n    _ability=['Razor Wings']\n    _move_1=('Wing Slash',85,95,'Physical','Flying',0,[])\n    _move_2=('Tail Spike',100,90,'Physical','Dark',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def onswitch(self):\n        self.set_boost('accuracy',1,'self')\n\n    def get_power(self):\n        power=self['act']['power']\n        if self['act']['type']=='Flying':\n            power*=1.3\n        return int(power*self.get_weather_power_mult())\n\n    def endturn(self):\n        if self.target['conditions'].get('BLEED'):\n            self.target.take_damage(self.target['max_hp']//16,'loss')\n            self.target['conditions']['BLEED']['counter']+=1\n            if self.target['conditions']['BLEED']['counter']==3:\n                del self.target['conditions']['BLEED']\n\n    def move_1(self): # Wing Slash\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<20/100:\n                self.target.set_condition('FLINCH',counter=0)\n\n    def move_2(self): # Tail Spike\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100:\n                self.target.set_condition('BLEED',counter=0)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Bladecuga\",\n  \"types\": [\n    \"Dark\",\n    \"Flying\"\n  ],\n  \"gender\": \"Female\",\n  \"ability\": {\n    \"Razor Wings\": \"Boosts the power of Flying-type moves by 30% and increases accuracy by 1 stage.\"\n  },\n  \"moves\": {\n    \"Wing Slash\": {\n      \"power\": 85,\n      \"accuracy\": 95,\n      \"category\": \"Physical\",\n      \"type\": \"Flying\",\n      \"effect\": \"Has a 20% chance to cause the target to flinch.\"\n    },\n    \"Tail Spike\": {\n      \"power\": 100,\n      \"accuracy\": 90,\n      \"category\": \"Physical\",\n      \"type\": \"Dark\",\n      \"effect\": \"Has a 30% chance to cause the target to bleed, dealing damage of 1/16 of its max HP at the end of each turn for 3 turns.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Bladecuga(PokemonBase):\n    _species='Bladecuga'\n    _types=['Dark','Flying']\n    _gender='Female'\n    _ability=['Razor Wings']\n    _move_1=('Wing Slash',85,95,'Physical','Flying',0,[])\n    _move_2=('Tail Spike',100,90,'Physical','Dark',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def onswitch(self):\n        self.set_boost('accuracy',1,'self')\n\n    def get_power(self):\n        power=self['act']['power']\n        if self['act']['type']=='Flying':\n            power*=1.3\n        return int(power*self.get_weather_power_mult())\n\n    def endturn(self):\n        if self.target['conditions'].get('BLEED'):\n            self.target.take_damage(self.target['max_hp']//16,'loss')\n            self.target['conditions']['BLEED']['counter']+=1\n            if self.target['conditions']['BLEED']['counter']==3:\n                del self.target['conditions']['BLEED']\n\n    def move_1(self): # Wing Slash\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<20/100:\n                self.target.set_condition('FLINCH',counter=0)\n\n    def move_2(self): # Tail Spike\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100:\n                self.target.set_condition('BLEED',counter=0)\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Savage Bite\": {\n    \"power\": 75,\n    \"accuracy\": 100,\n    \"category\": \"Physical\",\n    \"type\": \"Dark\",\n    \"effect\": \"Has a 20% chance to lower the target's Defense by 1 stage.\"\n  }\n}\n```",
        "response": "```python\n@Increment(Bladecuga,'_move_3')\ndef value():\n    return ('Savage Bite',75,100,'Physical','Dark',0,[])\n\n@Increment(Bladecuga)\ndef move_3(self): # Savage Bite\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint() and rnd()<20/100:\n            self.target.set_boost('def',-1)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Bladecuga\",\n  \"types\": [\n    \"Dark\",\n    \"Flying\"\n  ],\n  \"gender\": \"Female\",\n  \"ability\": {\n    \"Razor Wings\": \"Boosts the power of Flying-type moves by 30% and increases accuracy by 1 stage.\"\n  },\n  \"moves\": {\n    \"Wing Slash\": {\n      \"power\": 85,\n      \"accuracy\": 95,\n      \"category\": \"Physical\",\n      \"type\": \"Flying\",\n      \"effect\": \"Has a 20% chance to cause the target to flinch.\"\n    },\n    \"Tail Spike\": {\n      \"power\": 100,\n      \"accuracy\": 90,\n      \"category\": \"Physical\",\n      \"type\": \"Dark\",\n      \"effect\": \"Has a 30% chance to cause the target to bleed, dealing damage of 1/16 of its max HP at the end of each turn for 3 turns.\"\n    },\n    \"Savage Bite\": {\n      \"power\": 75,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Dark\",\n      \"effect\": \"Has a 20% chance to lower the target's Defense by 1 stage.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Bladecuga(PokemonBase):\n    _species='Bladecuga'\n    _types=['Dark','Flying']\n    _gender='Female'\n    _ability=['Razor Wings']\n    _move_1=('Wing Slash',85,95,'Physical','Flying',0,[])\n    _move_2=('Tail Spike',100,90,'Physical','Dark',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def onswitch(self):\n        self.set_boost('accuracy',1,'self')\n\n    def get_power(self):\n        power=self['act']['power']\n        if self['act']['type']=='Flying':\n            power*=1.3\n        return int(power*self.get_weather_power_mult())\n\n    def endturn(self):\n        if self.target['conditions'].get('BLEED'):\n            self.target.take_damage(self.target['max_hp']//16,'loss')\n            self.target['conditions']['BLEED']['counter']+=1\n            if self.target['conditions']['BLEED']['counter']==3:\n                del self.target['conditions']['BLEED']\n\n    def move_1(self): # Wing Slash\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<20/100:\n                self.target.set_condition('FLINCH',counter=0)\n\n    def move_2(self): # Tail Spike\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100:\n                self.target.set_condition('BLEED',counter=0)\n\n@Increment(Bladecuga,'_move_3')\ndef value():\n    return ('Savage Bite',75,100,'Physical','Dark',0,[])\n\n@Increment(Bladecuga)\ndef move_3(self): # Savage Bite\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint() and rnd()<20/100:\n            self.target.set_boost('def',-1)\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Pounce\": {\n    \"power\": 60,\n    \"accuracy\": 100,\n    \"category\": \"Physical\",\n    \"type\": \"Normal\",\n    \"effect\": \"Increases the user's Speed by 1 stage.\"\n  }\n}\n```",
        "response": "```python\n@Increment(Bladecuga,'_move_4')\ndef value():\n    return ('Pounce',60,100,'Physical','Normal',0,[])\n\n@Increment(Bladecuga)\ndef move_4(self): # Pounce\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        self.set_boost('spe',+1,'self')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Bladecuga\",\n  \"types\": [\n    \"Dark\",\n    \"Flying\"\n  ],\n  \"gender\": \"Female\",\n  \"ability\": {\n    \"Razor Wings\": \"Boosts the power of Flying-type moves by 30% and increases accuracy by 1 stage.\"\n  },\n  \"moves\": {\n    \"Wing Slash\": {\n      \"power\": 85,\n      \"accuracy\": 95,\n      \"category\": \"Physical\",\n      \"type\": \"Flying\",\n      \"effect\": \"Has a 20% chance to cause the target to flinch.\"\n    },\n    \"Tail Spike\": {\n      \"power\": 100,\n      \"accuracy\": 90,\n      \"category\": \"Physical\",\n      \"type\": \"Dark\",\n      \"effect\": \"Has a 30% chance to cause the target to bleed, dealing damage of 1/16 of its max HP at the end of each turn for 3 turns.\"\n    },\n    \"Savage Bite\": {\n      \"power\": 75,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Dark\",\n      \"effect\": \"Has a 20% chance to lower the target's Defense by 1 stage.\"\n    },\n    \"Pounce\": {\n      \"power\": 60,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Normal\",\n      \"effect\": \"Increases the user's Speed by 1 stage.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Bladecuga(PokemonBase):\n    _species='Bladecuga'\n    _types=['Dark','Flying']\n    _gender='Female'\n    _ability=['Razor Wings']\n    _move_1=('Wing Slash',85,95,'Physical','Flying',0,[])\n    _move_2=('Tail Spike',100,90,'Physical','Dark',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def onswitch(self):\n        self.set_boost('accuracy',1,'self')\n\n    def get_power(self):\n        power=self['act']['power']\n        if self['act']['type']=='Flying':\n            power*=1.3\n        return int(power*self.get_weather_power_mult())\n\n    def endturn(self):\n        if self.target['conditions'].get('BLEED'):\n            self.target.take_damage(self.target['max_hp']//16,'loss')\n            self.target['conditions']['BLEED']['counter']+=1\n            if self.target['conditions']['BLEED']['counter']==3:\n                del self.target['conditions']['BLEED']\n\n    def move_1(self): # Wing Slash\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<20/100:\n                self.target.set_condition('FLINCH',counter=0)\n\n    def move_2(self): # Tail Spike\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100:\n                self.target.set_condition('BLEED',counter=0)\n\n@Increment(Bladecuga,'_move_3')\ndef value():\n    return ('Savage Bite',75,100,'Physical','Dark',0,[])\n\n@Increment(Bladecuga)\ndef move_3(self): # Savage Bite\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint() and rnd()<20/100:\n            self.target.set_boost('def',-1)\n\n@Increment(Bladecuga,'_move_4')\ndef value():\n    return ('Pounce',60,100,'Physical','Normal',0,[])\n\n@Increment(Bladecuga)\ndef move_4(self): # Pounce\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        self.set_boost('spe',+1,'self')\n```\n\nThis role is gonna learn a new ability:\n```json\n{\n  \"Spike Rage\": \"At 1/3 or less of its max HP, this Pokemon's Attack increases by 50% and it becomes immune to status conditions.\"\n}\n```",
        "response": "```python\n@Increment(Bladecuga,'_ability')\ndef value():\n    return ['Razor Wings','Spike Rage']\n\n@Increment(Bladecuga)\ndef get_stat(self,key,boost=None):\n    stat=self['stats'][key]\n    boost=self['boosts'][key] if not boost else boost\n    stat_ratio={0:1,1:1.5,2:2,3:2.5,4:3,5:3.5,6:4}[min(6,abs(boost))]\n    if boost<0:\n        stat_ratio=1/stat_ratio\n    stat_ratio*=self.get_weather_stat_mult(key)\n    if key=='spe' and self.isstatus('PAR'):\n        stat_ratio*=0.5\n    if key=='atk' and self['hp']<=self['max_hp']//3:\n        stat_ratio*=1.5\n    return int(stat*stat_ratio)\n\n@Increment(Bladecuga)\ndef set_status(self,x):\n    if self['hp']<=self['max_hp']//3:\n        return\n    if self['status'] or self.env.get('MISTY_TERRAIN'):\n        return\n    if x=='BRN':\n        if not self.istype('Fire'):\n            self.state['status']={x:{'counter':0}}\n    elif x=='PAR':\n        if not self.istype('Electric'):\n            self.state['status']={x:{'counter':0}}\n    elif x=='PSN':\n        if not self.istype('Poison') and not self.istype('Steel'):\n            self.state['status']={x:{'counter':0}}\n    elif x=='TOX':\n        if not self.istype('Poison') and not self.istype('Steel'):\n            self.state['status']={x:{'counter':0}}\n    elif x=='FRZ':\n        if not self.istype('Ice'):\n            self.state['status']={x:{'counter':0}}\n    elif x=='SLP':\n        self.state['status']={x:{'counter':0}}\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Blaziken\",\n  \"types\": [\n    \"Fire\",\n    \"Fighting\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Blaze\": \"At 1/3 or less of its max HP, this Pokemon's offensive stat is 1.5x with Fire attacks.\"\n  },\n  \"moves\": {\n    \"Blaze Kick\": {\n      \"power\": 85,\n      \"accuracy\": 90,\n      \"category\": \"Physical\",\n      \"type\": \"Fire\",\n      \"effect\": \"Has a 10% chance to burn the target and the ratio for critical hit +1.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Double Kick\": {\n      \"power\": 30,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Fighting\",\n      \"effect\": \"Hits twice.\",\n      \"property\": [\n        \"contact\"\n      ]\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass Blaziken(PokemonBase):\n    _species='Blaziken'\n    _types=['Fire','Fighting']\n    _gender='Male'\n    _ability=['Blaze']\n    _move_1=('Blaze Kick',85,90,'Physical','Fire',0,['contact'])\n    _move_2=('Double Kick',30,100,'Physical','Fighting',0,['contact'])\n    def __init__(self):\n        super().__init__()\n    \n    def get_stat(self,key,boost=None):\n        stat=self['stats'][key]\n        boost=self['boosts'][key] if not boost else boost\n        stat_ratio={0:1,1:1.5,2:2,3:2.5,4:3,5:3.5,6:4}[min(6,abs(boost))]\n        if boost<0:\n            stat_ratio=1/stat_ratio\n        stat_ratio*=self.get_weather_stat_mult(key)\n        if key=='spe' and self.isstatus('PAR'):\n            stat_ratio*=0.5\n        if (key=='atk' or key=='spa') and self['act'] and self['act']['type']=='Fire' and self['hp']<=self['max_hp']//3:\n            stat_ratio*=1.5\n        return int(stat*stat_ratio)\n    \n    def get_crit(self):\n        crit_mult=[0,24,8,2,1]\n        crit_ratio=self['boosts']['crit']\n        if self['act']['id']=='Blaze Kick':\n            crit_ratio=min(3,crit_ratio+1)\n        crit=False\n        if rnd()*crit_mult[crit_ratio+1]<1:\n            crit=True\n        return crit\n\n    def move_1(self): # Blaze Kick\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<10/100: self.target.set_status('BRN')\n\n    def move_2(self): # Double Kick\n        hit=True; i=0\n        while hit and i<2:\n            damage_ret=self.get_damage()\n            if damage_ret['miss']: break\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            i+=1; hit=False if self.target.isfaint() else True\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Blaziken\",\n  \"types\": [\n    \"Fire\",\n    \"Fighting\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Burn Brace\": \"This Pokemon cannot be frozen when its HP is 1/3 or less of its maximum HP.\"\n  },\n  \"moves\": {\n    \"Fire Blast\": {\n      \"power\": 120,\n      \"accuracy\": 85,\n      \"category\": \"Special\",\n      \"type\": \"Fire\",\n      \"effect\": \"Has a 30% chance to burn the target.\"\n    },\n    \"High Jump Kick\": {\n      \"power\": 130,\n      \"accuracy\": 90,\n      \"category\": \"Physical\",\n      \"type\": \"Fighting\",\n      \"effect\": \"If this attack misses the target, the user takes crash damage equal to half their maximum HP.\",\n      \"property\": [\n        \"contact\"\n      ]\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass Blaziken(PokemonBase):\n    _species='Blaziken'\n    _types=['Fire','Fighting']\n    _gender='Male'\n    _ability=['Burn Brace']\n    _move_1=('Fire Blast',120,85,'Special','Fire',0,[])\n    _move_2=('High Jump Kick',130,90,'Physical','Fighting',0,['contact'])\n    def __init__(self):\n        super().__init__()\n\n    def set_status(self,x):\n        if x=='FRZ' and self['hp']<=self['max_hp']//3:\n            return\n        if self['status'] or self.env.get('MISTY_TERRAIN'):\n            return\n        if x=='BRN':\n            if not self.istype('Fire'):\n                self.state['status']={x:{'counter':0}}\n        elif x=='PAR':\n            if not self.istype('Electric'):\n                self.state['status']={x:{'counter':0}}\n        elif x=='PSN':\n            if not self.istype('Poison') and not self.istype('Steel'):\n                self.state['status']={x:{'counter':0}}\n        elif x=='TOX':\n            if not self.istype('Poison') and not self.istype('Steel'):\n                self.state['status']={x:{'counter':0}}\n        elif x=='FRZ':\n            if not self.istype('Ice'):\n                self.state['status']={x:{'counter':0}}\n        elif x=='SLP':\n            self.state['status']={x:{'counter':0}}\n\n    def move_1(self): # Fire Blast\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100:\n                self.target.set_status('BRN')\n    \n    def move_2(self): # High Jump Kick\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n        else:\n            crash_damage=self['max_hp']//2\n            self.take_damage(crash_damage,'recoil')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Blaziken\",\n  \"types\": [\n    \"Fire\",\n    \"Fighting\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Blaze Rush\": \"If Sunny Day is active, this Pokemon's Attack is raised by 1 stage at the end of each turn.\"\n  },\n  \"moves\": {\n    \"Inferno Kick\": {\n      \"power\": 100,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Fire\",\n      \"effect\": \"Has a 30% chance to burn the target. Always results in a critical hit during Sunny Day, but cannot crit during Rain Dance.\"\n    },\n    \"Flaming Charge\": {\n      \"power\": 80,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Fire\",\n      \"effect\": \"Raises the user's Speed by 1 stage.\",\n      \"property\": [\n        \"contact\"\n      ]\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass Blaziken(PokemonBase):\n    _species='Blaziken'\n    _types=['Fire','Fighting']\n    _gender='Male'\n    _ability=['Blaze Rush']\n    _move_1=('Inferno Kick',100,100,'Physical','Fire',0,[])\n    _move_2=('Flaming Charge',80,100,'Physical','Fire',0,['contact'])\n    def __init__(self):\n        super().__init__()\n        \n    def endturn(self):\n        if self.env.get('SUNNYDAY'):\n            self.set_boost('atk',1,'self')\n\n    def get_crit(self):\n        if self['act']['id']=='Inferno Kick':\n            if self.env.get('SUNNYDAY'):\n                return True\n            elif self.env.get('RAINDANCE'):\n                return False\n        crit_mult=[0,24,8,2,1]\n        crit_ratio=self['boosts']['crit']\n        crit=False\n        if rnd()*crit_mult[crit_ratio+1]<1:\n            crit=True\n        return crit\n\n    def move_1(self): # Inferno Kick\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100:self.target.set_status('BRN')\n    \n    def move_2(self): # Flaming Charge\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            self.set_boost('spd',1,'self')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Blaziken\",\n  \"types\": [\n    \"Fire\",\n    \"Fighting\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Combustion\": \"At 1/2 or less of its max HP, this Pokemon's Attack stat is doubled.\"\n  },\n  \"moves\": {\n    \"Fire Blast\": {\n      \"power\": 110,\n      \"accuracy\": 85,\n      \"category\": \"Special\",\n      \"type\": \"Fire\",\n      \"effect\": \"Has a 30% chance to burn the target.\"\n    },\n    \"Sky Uppercut\": {\n      \"power\": 85,\n      \"accuracy\": 90,\n      \"category\": \"Physical\",\n      \"type\": \"Fighting\",\n      \"effect\": \"The ratio for critical hit +2 and has a 10% chance to make the target flinch.\",\n      \"property\": [\n        \"contact\"\n      ]\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass Blaziken(PokemonBase):\n    _species='Blaziken'\n    _types=['Fire','Fighting']\n    _gender='Male'\n    _ability=['Combustion']\n    _move_1=('Fire Blast',110,85,'Special','Fire',0,[])\n    _move_2=('Sky Uppercut',85,90,'Physical','Fighting',0,['contact'])\n    def __init__(self):\n        super().__init__()\n    \n    def get_stat(self,key,boost=None):\n        stat=self['stats'][key]\n        boost=self['boosts'][key] if not boost else boost\n        stat_ratio={0:1,1:1.5,2:2,3:2.5,4:3,5:3.5,6:4}[min(6,abs(boost))]\n        if boost<0:\n            stat_ratio=1/stat_ratio\n        stat_ratio*=self.get_weather_stat_mult(key)\n        if key=='spe' and self.isstatus('PAR'):\n            stat_ratio*=0.5\n        if key=='atk' and self['hp']<self['max_hp']//2:\n            stat_ratio*=2\n        return int(stat*stat_ratio)\n\n    def move_1(self): # Fire Blast\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100: self.target.set_status('BRN')\n\n    def move_2(self): # Sky Uppercut\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<10/100: self.target.set_condition('FLINCH',counter=0)\n\n    def get_crit(self):\n        crit_mult=[0,24,8,2,1]\n        crit_ratio=self['boosts']['crit']\n        if self['act']['id']=='Sky Uppercut':\n            crit_ratio=min(3,crit_ratio+2)\n        crit=False\n        if rnd()*crit_mult[crit_ratio+1]<1:\n            crit=True\n        return crit\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Blazorus\",\n  \"types\": [\n    \"Fire\",\n    \"Fighting\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Blaze Soul\": \"At 1/2 or less of its max HP, this Pokemon's offensive stats are 2x.\"\n  },\n  \"moves\": {\n    \"Inferno Fist\": {\n      \"power\": 90,\n      \"accuracy\": 85,\n      \"category\": \"Physical\",\n      \"type\": \"Fire\",\n      \"effect\": \"Has a 30% chance to burn the target and the ratio for critical hit +2.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Triple Strike\": {\n      \"power\": 25,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Fighting\",\n      \"effect\": \"Hits three times.\",\n      \"property\": [\n        \"contact\"\n      ]\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass Blazorus(PokemonBase):\n    _species='Blazorus'\n    _types=['Fire','Fighting']\n    _gender='Male'\n    _ability=['Blaze Soul']\n    _move_1=('Inferno Fist',90,85,'Physical','Fire',0,['contact'])\n    _move_2=('Triple Strike',25,100,'Physical','Fighting',0,['contact'])\n    def __init__(self):\n        super().__init__()\n\n    def get_stat(self,key,boost=None):\n        stat=self['stats'][key]\n        boost=self['boosts'][key] if not boost else boost\n        stat_ratio={0:1,1:1.5,2:2,3:2.5,4:3,5:3.5,6:4}[min(6,abs(boost))]\n        if boost<0:\n            stat_ratio=1/stat_ratio\n        stat_ratio*=self.get_weather_stat_mult(key)\n        if key=='spe' and self.isstatus('PAR'):\n            stat_ratio*=0.5\n        if key in['atk','spa'] and self['hp']<self['max_hp']//2:\n            stat_ratio*=2\n        return int(stat*stat_ratio)\n\n    def move_1(self): # Inferno Fist\n        self.set_boost('crit',+2)\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100:\n                self.target.set_status('BRN')\n        self.set_boost('crit',-2)\n\n    def move_2(self): # Triple Strike\n        hit=True; i=0\n        while hit and i<3:\n            damage_ret=self.get_damage()\n            if damage_ret['miss']: break\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            i+=1; hit=False if self.target.isfaint() else True\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Brontogon\",\n  \"types\": [\n    \"Grass\",\n    \"Rock\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Tail Whip\": \"When this Pokemon finishes an attack, it has a 50% chance to gain a random stat boost.\"\n  },\n  \"moves\": {\n    \"Herbivore Slam\": {\n      \"power\": 100,\n      \"accuracy\": 90,\n      \"category\": \"Physical\",\n      \"type\": \"Grass\",\n      \"effect\": \"Has a 20% chance to lower the target's Defense by 1 stage.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Rock Crush\": {\n      \"power\": 80,\n      \"accuracy\": 95,\n      \"category\": \"Physical\",\n      \"type\": \"Rock\",\n      \"effect\": \"Has a 25% chance to flinch the target.\",\n      \"property\": [\n        \"contact\"\n      ]\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass Brontogon(PokemonBase):\n    _species='Brontogon'\n    _types=['Grass','Rock']\n    _gender='Male'\n    _ability=['Tail Whip']\n    _move_1=('Herbivore Slam',100,90,'Physical','Grass',0,['contact'])\n    _move_2=('Rock Crush',80,95,'Physical','Rock',0,['contact'])\n    def __init__(self):\n        super().__init__()\n\n    def random_stat_boost(self):\n        if rnd()<50/100:\n            stat=rndc(['atk','def','spa','spd','spe'])\n            self.set_boost(stat,+1)\n\n    def move_1(self): # Herbivore Slam\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<20/100:\n                self.target.set_boost('def',-1)\n        self.random_stat_boost()\n\n    def move_2(self): # Rock Crush\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<25/100:\n                self.target.set_condition('FLINCH',counter=0)\n        self.random_stat_boost()\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Brontogon\",\n  \"types\": [\n    \"Grass\",\n    \"Rock\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Tail Whip\": \"When this Pokemon finishes an attack, it has a 50% chance to gain a random stat boost.\"\n  },\n  \"moves\": {\n    \"Herbivore Slam\": {\n      \"power\": 100,\n      \"accuracy\": 90,\n      \"category\": \"Physical\",\n      \"type\": \"Grass\",\n      \"effect\": \"Has a 20% chance to lower the target's Defense by 1 stage.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Rock Crush\": {\n      \"power\": 80,\n      \"accuracy\": 95,\n      \"category\": \"Physical\",\n      \"type\": \"Rock\",\n      \"effect\": \"Has a 25% chance to flinch the target.\",\n      \"property\": [\n        \"contact\"\n      ]\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Brontogon(PokemonBase):\n    _species='Brontogon'\n    _types=['Grass','Rock']\n    _gender='Male'\n    _ability=['Tail Whip']\n    _move_1=('Herbivore Slam',100,90,'Physical','Grass',0,['contact'])\n    _move_2=('Rock Crush',80,95,'Physical','Rock',0,['contact'])\n    def __init__(self):\n        super().__init__()\n\n    def random_stat_boost(self):\n        if rnd()<50/100:\n            stat=rndc(['atk','def','spa','spd','spe'])\n            self.set_boost(stat,+1)\n\n    def move_1(self): # Herbivore Slam\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<20/100:\n                self.target.set_boost('def',-1)\n        self.random_stat_boost()\n\n    def move_2(self): # Rock Crush\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<25/100:\n                self.target.set_condition('FLINCH',counter=0)\n        self.random_stat_boost()\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Tail Lash\": {\n    \"power\": 60,\n    \"accuracy\": 100,\n    \"category\": \"Physical\",\n    \"type\": \"Normal\",\n    \"effect\": \"Hits twice in one turn.\",\n    \"property\": [\n      \"contact\"\n    ]\n  }\n}\n```",
        "response": "```python\n@Increment(Brontogon,'_move_3')\ndef value():\n    return ('Tail Lash',60,100,'Physical','Normal',0,['contact'])\n\n@Increment(Brontogon)\ndef move_3(self): # Tail Lash\n    for _ in range(2):\n        damage_ret=self.get_damage()\n        if damage_ret['miss']:\n            break\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if self.target.isfaint():\n            break\n    self.random_stat_boost()\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Brontogon\",\n  \"types\": [\n    \"Grass\",\n    \"Rock\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Tail Whip\": \"When this Pokemon finishes an attack, it has a 50% chance to gain a random stat boost.\"\n  },\n  \"moves\": {\n    \"Herbivore Slam\": {\n      \"power\": 100,\n      \"accuracy\": 90,\n      \"category\": \"Physical\",\n      \"type\": \"Grass\",\n      \"effect\": \"Has a 20% chance to lower the target's Defense by 1 stage.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Rock Crush\": {\n      \"power\": 80,\n      \"accuracy\": 95,\n      \"category\": \"Physical\",\n      \"type\": \"Rock\",\n      \"effect\": \"Has a 25% chance to flinch the target.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Tail Lash\": {\n      \"power\": 60,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Normal\",\n      \"effect\": \"Hits twice in one turn.\",\n      \"property\": [\n        \"contact\"\n      ]\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Brontogon(PokemonBase):\n    _species='Brontogon'\n    _types=['Grass','Rock']\n    _gender='Male'\n    _ability=['Tail Whip']\n    _move_1=('Herbivore Slam',100,90,'Physical','Grass',0,['contact'])\n    _move_2=('Rock Crush',80,95,'Physical','Rock',0,['contact'])\n    def __init__(self):\n        super().__init__()\n\n    def random_stat_boost(self):\n        if rnd()<50/100:\n            stat=rndc(['atk','def','spa','spd','spe'])\n            self.set_boost(stat,+1)\n\n    def move_1(self): # Herbivore Slam\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<20/100:\n                self.target.set_boost('def',-1)\n        self.random_stat_boost()\n\n    def move_2(self): # Rock Crush\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<25/100:\n                self.target.set_condition('FLINCH',counter=0)\n        self.random_stat_boost()\n\n@Increment(Brontogon,'_move_3')\ndef value():\n    return ('Tail Lash',60,100,'Physical','Normal',0,['contact'])\n\n@Increment(Brontogon)\ndef move_3(self): # Tail Lash\n    for _ in range(2):\n        damage_ret=self.get_damage()\n        if damage_ret['miss']:\n            break\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if self.target.isfaint():\n            break\n    self.random_stat_boost()\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Stone Garden\": {\n    \"power\": 0,\n    \"accuracy\": 100000,\n    \"category\": \"Status\",\n    \"type\": \"Rock\",\n    \"effect\": \"Raises the user's Defense by 2 stages and restores 1/4 of its maximum HP.\"\n  }\n}\n```",
        "response": "```python\n@Increment(Brontogon,'_move_4')\ndef value():\n    return ('Stone Garden',0,100000,'Status','Rock',0,[])\n\n@Increment(Brontogon)\ndef move_4(self): # Stone Garden\n    self.set_boost('def',2,'self')\n    self.restore(self['max_hp']//4,'heal')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Brontogon\",\n  \"types\": [\n    \"Grass\",\n    \"Rock\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Tail Whip\": \"When this Pokemon finishes an attack, it has a 50% chance to gain a random stat boost.\"\n  },\n  \"moves\": {\n    \"Herbivore Slam\": {\n      \"power\": 100,\n      \"accuracy\": 90,\n      \"category\": \"Physical\",\n      \"type\": \"Grass\",\n      \"effect\": \"Has a 20% chance to lower the target's Defense by 1 stage.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Rock Crush\": {\n      \"power\": 80,\n      \"accuracy\": 95,\n      \"category\": \"Physical\",\n      \"type\": \"Rock\",\n      \"effect\": \"Has a 25% chance to flinch the target.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Tail Lash\": {\n      \"power\": 60,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Normal\",\n      \"effect\": \"Hits twice in one turn.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Stone Garden\": {\n      \"power\": 0,\n      \"accuracy\": 100000,\n      \"category\": \"Status\",\n      \"type\": \"Rock\",\n      \"effect\": \"Raises the user's Defense by 2 stages and restores 1/4 of its maximum HP.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Brontogon(PokemonBase):\n    _species='Brontogon'\n    _types=['Grass','Rock']\n    _gender='Male'\n    _ability=['Tail Whip']\n    _move_1=('Herbivore Slam',100,90,'Physical','Grass',0,['contact'])\n    _move_2=('Rock Crush',80,95,'Physical','Rock',0,['contact'])\n    def __init__(self):\n        super().__init__()\n\n    def random_stat_boost(self):\n        if rnd()<50/100:\n            stat=rndc(['atk','def','spa','spd','spe'])\n            self.set_boost(stat,+1)\n\n    def move_1(self): # Herbivore Slam\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<20/100:\n                self.target.set_boost('def',-1)\n        self.random_stat_boost()\n\n    def move_2(self): # Rock Crush\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<25/100:\n                self.target.set_condition('FLINCH',counter=0)\n        self.random_stat_boost()\n\n@Increment(Brontogon,'_move_3')\ndef value():\n    return ('Tail Lash',60,100,'Physical','Normal',0,['contact'])\n\n@Increment(Brontogon)\ndef move_3(self): # Tail Lash\n    for _ in range(2):\n        damage_ret=self.get_damage()\n        if damage_ret['miss']:\n            break\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if self.target.isfaint():\n            break\n    self.random_stat_boost()\n\n@Increment(Brontogon,'_move_4')\ndef value():\n    return ('Stone Garden',0,100000,'Status','Rock',0,[])\n\n@Increment(Brontogon)\ndef move_4(self): # Stone Garden\n    self.set_boost('def',2,'self')\n    self.restore(self['max_hp']//4,'heal')\n```\n\nThis role is gonna learn a new ability:\n```json\n{\n  \"Boulder Shield\": \"This Pokemon takes 1/3 less damage from Physical attacks.\"\n}\n```",
        "response": "```python\n@Increment(Brontogon,'_ability')\ndef value():\n    return ['Tail Whip','Boulder Shield']\n\n@Increment(Brontogon)\ndef _take_damage_attack(self,x):\n    self.register_act_taken()\n    if self['act_taken']['category']=='Physical':\n        x=int(x*(2/3))\n    self.state['hp']=max(0,self['hp']-x)\n    if self['hp']==0:\n        self.state['status']='FNT'\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Brontogon\",\n  \"types\": [\n    \"Grass\",\n    \"Rock\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Tail Whip\": \"When this Pokemon finishes an attack, it has a 50% chance to gain a random stat boost.\",\n    \"Boulder Shield\": \"This Pokemon takes 1/3 less damage from Physical attacks.\"\n  },\n  \"moves\": {\n    \"Herbivore Slam\": {\n      \"power\": 100,\n      \"accuracy\": 90,\n      \"category\": \"Physical\",\n      \"type\": \"Grass\",\n      \"effect\": \"Has a 20% chance to lower the target's Defense by 1 stage.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Rock Crush\": {\n      \"power\": 80,\n      \"accuracy\": 95,\n      \"category\": \"Physical\",\n      \"type\": \"Rock\",\n      \"effect\": \"Has a 25% chance to flinch the target.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Tail Lash\": {\n      \"power\": 60,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Normal\",\n      \"effect\": \"Hits twice in one turn.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Stone Garden\": {\n      \"power\": 0,\n      \"accuracy\": 100000,\n      \"category\": \"Status\",\n      \"type\": \"Rock\",\n      \"effect\": \"Raises the user's Defense by 2 stages and restores 1/4 of its maximum HP.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Brontogon(PokemonBase):\n    _species='Brontogon'\n    _types=['Grass','Rock']\n    _gender='Male'\n    _ability=['Tail Whip']\n    _move_1=('Herbivore Slam',100,90,'Physical','Grass',0,['contact'])\n    _move_2=('Rock Crush',80,95,'Physical','Rock',0,['contact'])\n    def __init__(self):\n        super().__init__()\n\n    def random_stat_boost(self):\n        if rnd()<50/100:\n            stat=rndc(['atk','def','spa','spd','spe'])\n            self.set_boost(stat,+1)\n\n    def move_1(self): # Herbivore Slam\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<20/100:\n                self.target.set_boost('def',-1)\n        self.random_stat_boost()\n\n    def move_2(self): # Rock Crush\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<25/100:\n                self.target.set_condition('FLINCH',counter=0)\n        self.random_stat_boost()\n\n@Increment(Brontogon,'_move_3')\ndef value():\n    return ('Tail Lash',60,100,'Physical','Normal',0,['contact'])\n\n@Increment(Brontogon)\ndef move_3(self): # Tail Lash\n    for _ in range(2):\n        damage_ret=self.get_damage()\n        if damage_ret['miss']:\n            break\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if self.target.isfaint():\n            break\n    self.random_stat_boost()\n\n@Increment(Brontogon,'_move_4')\ndef value():\n    return ('Stone Garden',0,100000,'Status','Rock',0,[])\n\n@Increment(Brontogon)\ndef move_4(self): # Stone Garden\n    self.set_boost('def',2,'self')\n    self.restore(self['max_hp']//4,'heal')\n\n@Increment(Brontogon,'_ability')\ndef value():\n    return ['Tail Whip','Boulder Shield']\n\n@Increment(Brontogon)\ndef _take_damage_attack(self,x):\n    self.register_act_taken()\n    if self['act_taken']['category']=='Physical':\n        x=int(x*(2/3))\n    self.state['hp']=max(0,self['hp']-x)\n    if self['hp']==0:\n        self.state['status']='FNT'\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Leaf Surge\": {\n    \"power\": 90,\n    \"accuracy\": 100,\n    \"category\": \"Special\",\n    \"type\": \"Grass\",\n    \"effect\": \"Has a 30% chance to paralyze the target.\"\n  }\n}\n```",
        "response": "```python\n@Increment(Brontogon,'_move_5')\ndef value():\n    return ('Leaf Surge',90,100,'Special','Grass',0,[])\n\n@Increment(Brontogon)\ndef move_5(self): # Leaf Surge\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint() and rnd()<30/100:\n            self.target.set_status('PAR')\n    self.random_stat_boost()\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Bubblifur\",\n  \"types\": [\n    \"Water\",\n    \"Fairy\"\n  ],\n  \"gender\": \"Female\",\n  \"ability\": {\n    \"Soapy Grace\": \"Contact moves have a 30% chance to lower the attacker's accuracy by 1 stage.\"\n  },\n  \"moves\": {\n    \"Bubble Slide\": {\n      \"power\": 75,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Water\",\n      \"effect\": \"Has a 20% chance to reduce the target's Speed by 1 stage.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Soothing Mist\": {\n      \"power\": 0,\n      \"accuracy\": 100000,\n      \"category\": \"Status\",\n      \"type\": \"Fairy\",\n      \"effect\": \"Heals the user by 50% of its maximum HP and cures any status conditions.\"\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass Bubblifur(PokemonBase):\n    _species='Bubblifur'\n    _types=['Water','Fairy']\n    _gender='Female'\n    _ability=['Soapy Grace']\n    _move_1=('Bubble Slide',75,100,'Physical','Water',0,['contact'])\n    _move_2=('Soothing Mist',0,100000,'Status','Fairy',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def move_1(self): # Bubble Slide\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<20/100:\n                self.target.set_boost('spe',-1)\n            if not self.target.isfaint() and rnd()<30/100:\n                self.target.set_boost('accuracy',-1)\n\n    def move_2(self): # Soothing Mist\n        self.restore(self['max_hp']//2,'heal')\n        self.state['status']=None\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Bubblifur\",\n  \"types\": [\n    \"Water\",\n    \"Fairy\"\n  ],\n  \"gender\": \"Female\",\n  \"ability\": {\n    \"Soapy Grace\": \"Contact moves have a 30% chance to lower the attacker's accuracy by 1 stage.\"\n  },\n  \"moves\": {\n    \"Bubble Slide\": {\n      \"power\": 75,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Water\",\n      \"effect\": \"Has a 20% chance to reduce the target's Speed by 1 stage.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Soothing Mist\": {\n      \"power\": 0,\n      \"accuracy\": 100000,\n      \"category\": \"Status\",\n      \"type\": \"Fairy\",\n      \"effect\": \"Heals the user by 50% of its maximum HP and cures any status conditions.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Bubblifur(PokemonBase):\n    _species='Bubblifur'\n    _types=['Water','Fairy']\n    _gender='Female'\n    _ability=['Soapy Grace']\n    _move_1=('Bubble Slide',75,100,'Physical','Water',0,['contact'])\n    _move_2=('Soothing Mist',0,100000,'Status','Fairy',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def move_1(self): # Bubble Slide\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<20/100:\n                self.target.set_boost('spe',-1)\n            if not self.target.isfaint() and rnd()<30/100:\n                self.target.set_boost('accuracy',-1)\n\n    def move_2(self): # Soothing Mist\n        self.restore(self['max_hp']//2,'heal')\n        self.state['status']=None\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Aqua Jet\": {\n    \"power\": 40,\n    \"accuracy\": 100,\n    \"category\": \"Physical\",\n    \"priority\": 1,\n    \"type\": \"Water\",\n    \"effect\": \"Always moves first.\",\n    \"property\": [\n      \"contact\"\n    ]\n  }\n}\n```",
        "response": "```python\n@Increment(Bubblifur,'_move_3')\ndef value():\n    return ('Aqua Jet',40,100,'Physical','Water',1,['contact'])\n\n@Increment(Bubblifur)\ndef move_3(self): # Aqua Jet\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint() and rnd()<30/100:\n            self.target.set_boost('accuracy',-1)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Bubblifur\",\n  \"types\": [\n    \"Water\",\n    \"Fairy\"\n  ],\n  \"gender\": \"Female\",\n  \"ability\": {\n    \"Soapy Grace\": \"Contact moves have a 30% chance to lower the attacker's accuracy by 1 stage.\"\n  },\n  \"moves\": {\n    \"Bubble Slide\": {\n      \"power\": 75,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Water\",\n      \"effect\": \"Has a 20% chance to reduce the target's Speed by 1 stage.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Soothing Mist\": {\n      \"power\": 0,\n      \"accuracy\": 100000,\n      \"category\": \"Status\",\n      \"type\": \"Fairy\",\n      \"effect\": \"Heals the user by 50% of its maximum HP and cures any status conditions.\"\n    },\n    \"Aqua Jet\": {\n      \"power\": 40,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"priority\": 1,\n      \"type\": \"Water\",\n      \"effect\": \"Always moves first.\",\n      \"property\": [\n        \"contact\"\n      ]\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Bubblifur(PokemonBase):\n    _species='Bubblifur'\n    _types=['Water','Fairy']\n    _gender='Female'\n    _ability=['Soapy Grace']\n    _move_1=('Bubble Slide',75,100,'Physical','Water',0,['contact'])\n    _move_2=('Soothing Mist',0,100000,'Status','Fairy',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def move_1(self): # Bubble Slide\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<20/100:\n                self.target.set_boost('spe',-1)\n            if not self.target.isfaint() and rnd()<30/100:\n                self.target.set_boost('accuracy',-1)\n\n    def move_2(self): # Soothing Mist\n        self.restore(self['max_hp']//2,'heal')\n        self.state['status']=None\n\n@Increment(Bubblifur,'_move_3')\ndef value():\n    return ('Aqua Jet',40,100,'Physical','Water',1,['contact'])\n\n@Increment(Bubblifur)\ndef move_3(self): # Aqua Jet\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint() and rnd()<30/100:\n            self.target.set_boost('accuracy',-1)\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Pressurized Jet\": {\n    \"power\": 110,\n    \"accuracy\": 85,\n    \"category\": \"Special\",\n    \"type\": \"Water\",\n    \"effect\": \"Has a 10% chance to confuse the target.\"\n  }\n}\n```",
        "response": "```python\n@Increment(Bubblifur,'_move_4')\ndef value():\n    return ('Pressurized Jet',110,85,'Special','Water',0,[])\n\n@Increment(Bubblifur)\ndef move_4(self): # Pressurized Jet\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if rnd()<10/100:\n            self.target.set_condition('CONFUSION',counter=0)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Bubblifur\",\n  \"types\": [\n    \"Water\",\n    \"Fairy\"\n  ],\n  \"gender\": \"Female\",\n  \"ability\": {\n    \"Soapy Grace\": \"Contact moves have a 30% chance to lower the attacker's accuracy by 1 stage.\"\n  },\n  \"moves\": {\n    \"Bubble Slide\": {\n      \"power\": 75,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Water\",\n      \"effect\": \"Has a 20% chance to reduce the target's Speed by 1 stage.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Soothing Mist\": {\n      \"power\": 0,\n      \"accuracy\": 100000,\n      \"category\": \"Status\",\n      \"type\": \"Fairy\",\n      \"effect\": \"Heals the user by 50% of its maximum HP and cures any status conditions.\"\n    },\n    \"Aqua Jet\": {\n      \"power\": 40,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"priority\": 1,\n      \"type\": \"Water\",\n      \"effect\": \"Always moves first.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Pressurized Jet\": {\n      \"power\": 110,\n      \"accuracy\": 85,\n      \"category\": \"Special\",\n      \"type\": \"Water\",\n      \"effect\": \"Has a 10% chance to confuse the target.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Bubblifur(PokemonBase):\n    _species='Bubblifur'\n    _types=['Water','Fairy']\n    _gender='Female'\n    _ability=['Soapy Grace']\n    _move_1=('Bubble Slide',75,100,'Physical','Water',0,['contact'])\n    _move_2=('Soothing Mist',0,100000,'Status','Fairy',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def move_1(self): # Bubble Slide\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<20/100:\n                self.target.set_boost('spe',-1)\n            if not self.target.isfaint() and rnd()<30/100:\n                self.target.set_boost('accuracy',-1)\n\n    def move_2(self): # Soothing Mist\n        self.restore(self['max_hp']//2,'heal')\n        self.state['status']=None\n\n@Increment(Bubblifur,'_move_3')\ndef value():\n    return ('Aqua Jet',40,100,'Physical','Water',1,['contact'])\n\n@Increment(Bubblifur)\ndef move_3(self): # Aqua Jet\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint() and rnd()<30/100:\n            self.target.set_boost('accuracy',-1)\n\n@Increment(Bubblifur,'_move_4')\ndef value():\n    return ('Pressurized Jet',110,85,'Special','Water',0,[])\n\n@Increment(Bubblifur)\ndef move_4(self): # Pressurized Jet\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if rnd()<10/100:\n            self.target.set_condition('CONFUSION',counter=0)\n```\n\nThis role is gonna learn a new ability:\n```json\n{\n  \"Bubble Cloak\": \"Reduces damage from Special moves by 25%. If hit by a Special move, has a 20% chance to reduce the target's Special Attack by 1 stage.\"\n}\n```",
        "response": "```python\n@Increment(Bubblifur,'_ability')\ndef value():\n    return ['Soapy Grace','Bubble Cloak']\n\n@Increment(Bubblifur)\ndef _take_damage_attack(self,x):\n    self.register_act_taken()\n    if 'contact' in self['act_taken']['property'] and rnd()<30/100:\n        self.target.set_boost('accuracy',-1)\n    if self['act_taken']['category']=='Special':\n        x=int(x*0.75)\n    self.state['hp']=max(0,self['hp']-x)\n    if rnd()<20/100:\n        self.target.set_boost('spa',-1)\n    if self['hp']==0:\n        self.state['status']='FNT'\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Celebi\",\n  \"types\": [\n    \"Psychic\",\n    \"Grass\"\n  ],\n  \"gender\": \"Neutral\",\n  \"ability\": {\n    \"Serene Grace\": \"This Pokemon's moves have their secondary effect chance doubled.\"\n  },\n  \"moves\": {\n    \"Leech Seed\": {\n      \"power\": 0,\n      \"accuracy\": 90,\n      \"category\": \"Status\",\n      \"type\": \"Grass\",\n      \"effect\": \"Plants a seed on the target. Each end of turn, the target loses 1/8 of its HP and the user drains that amount of HP.\"\n    },\n    \"Psychic\": {\n      \"power\": 90,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Psychic\",\n      \"effect\": \"Has a 10% chance to lower the target's Special Defense by 1 stage.\"\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass Celebi(PokemonBase):\n    _species='Celebi'\n    _types=['Psychic','Grass']\n    _gender='Neutral'\n    _ability=['Serene Grace']\n    _move_1=('Leech Seed',0,90,'Status','Grass',0,[])\n    _move_2=('Psychic',90,100,'Special','Psychic',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def get_effect_chance(self,effect):\n        return 2*effect if effect<=0.5 else 1\n\n    def endturn(self):\n        if self.target['conditions'].get('LEECH_SEED'):\n            self.target.take_damage(self.target['max_hp']//8,'loss')\n            self.take_damage(self.target['max_hp']//8,'drain')\n\n    def move_1(self): # Leech Seed\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            self.target.set_condition('LEECH_SEED',counter=0)\n\n    def move_2(self): # Psychic\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<self.get_effect_chance(10/100):\n                self.target.set_boost('spd',-1)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Celebi\",\n  \"types\": [\n    \"Psychic\",\n    \"Grass\"\n  ],\n  \"gender\": \"Neutral\",\n  \"ability\": {\n    \"Serene Grace\": \"This Pokemon's moves have their secondary effect chance doubled.\"\n  },\n  \"moves\": {\n    \"Leech Seed\": {\n      \"power\": 0,\n      \"accuracy\": 90,\n      \"category\": \"Status\",\n      \"type\": \"Grass\",\n      \"effect\": \"Plants a seed on the target. Each end of turn, the target loses 1/8 of its HP and the user drains that amount of HP.\"\n    },\n    \"Psychic\": {\n      \"power\": 90,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Psychic\",\n      \"effect\": \"Has a 10% chance to lower the target's Special Defense by 1 stage.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Celebi(PokemonBase):\n    _species='Celebi'\n    _types=['Psychic','Grass']\n    _gender='Neutral'\n    _ability=['Serene Grace']\n    _move_1=('Leech Seed',0,90,'Status','Grass',0,[])\n    _move_2=('Psychic',90,100,'Special','Psychic',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def get_effect_chance(self,effect):\n        return 2*effect if effect<=0.5 else 1\n\n    def endturn(self):\n        if self.target['conditions'].get('LEECH_SEED'):\n            self.target.take_damage(self.target['max_hp']//8,'loss')\n            self.take_damage(self.target['max_hp']//8,'drain')\n\n    def move_1(self): # Leech Seed\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            self.target.set_condition('LEECH_SEED',counter=0)\n\n    def move_2(self): # Psychic\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<self.get_effect_chance(10/100):\n                self.target.set_boost('spd',-1)\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Ancient Power\": {\n    \"power\": 60,\n    \"accuracy\": 100,\n    \"category\": \"Special\",\n    \"type\": \"Rock\",\n    \"effect\": \"Has a 10% chance to raise all the user's stats by 1 stage.\"\n  }\n}\n```",
        "response": "```python\n@Increment(Celebi,'_move_3')\ndef value():\n    return ('Ancient Power',60,100,'Special','Rock',0,[])\n\n@Increment(Celebi)\ndef move_3(self): # Ancient Power\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint() and rnd()<self.get_effect_chance(10/100):\n            for k in ['atk','def','spa','spd','spe']:\n                self.set_boost(k,1,'self')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Celebi\",\n  \"types\": [\n    \"Psychic\",\n    \"Grass\"\n  ],\n  \"gender\": \"Neutral\",\n  \"ability\": {\n    \"Serene Grace\": \"This Pokemon's moves have their secondary effect chance doubled.\"\n  },\n  \"moves\": {\n    \"Leech Seed\": {\n      \"power\": 0,\n      \"accuracy\": 90,\n      \"category\": \"Status\",\n      \"type\": \"Grass\",\n      \"effect\": \"Plants a seed on the target. Each end of turn, the target loses 1/8 of its HP and the user drains that amount of HP.\"\n    },\n    \"Psychic\": {\n      \"power\": 90,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Psychic\",\n      \"effect\": \"Has a 10% chance to lower the target's Special Defense by 1 stage.\"\n    },\n    \"Ancient Power\": {\n      \"power\": 60,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Rock\",\n      \"effect\": \"Has a 10% chance to raise all the user's stats by 1 stage.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Celebi(PokemonBase):\n    _species='Celebi'\n    _types=['Psychic','Grass']\n    _gender='Neutral'\n    _ability=['Serene Grace']\n    _move_1=('Leech Seed',0,90,'Status','Grass',0,[])\n    _move_2=('Psychic',90,100,'Special','Psychic',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def get_effect_chance(self,effect):\n        return 2*effect if effect<=0.5 else 1\n\n    def endturn(self):\n        if self.target['conditions'].get('LEECH_SEED'):\n            self.target.take_damage(self.target['max_hp']//8,'loss')\n            self.take_damage(self.target['max_hp']//8,'drain')\n\n    def move_1(self): # Leech Seed\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            self.target.set_condition('LEECH_SEED',counter=0)\n\n    def move_2(self): # Psychic\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<self.get_effect_chance(10/100):\n                self.target.set_boost('spd',-1)\n\n@Increment(Celebi,'_move_3')\ndef value():\n    return ('Ancient Power',60,100,'Special','Rock',0,[])\n\n@Increment(Celebi)\ndef move_3(self): # Ancient Power\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint() and rnd()<self.get_effect_chance(10/100):\n            for k in ['atk','def','spa','spd','spe']:\n                self.set_boost(k,1,'self')\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Giga Drain\": {\n    \"power\": 75,\n    \"accuracy\": 100,\n    \"category\": \"Special\",\n    \"type\": \"Grass\",\n    \"effect\": \"User recovers 50% of the damage dealt.\"\n  }\n}\n```",
        "response": "```python\n@Increment(Celebi,'_move_4')\ndef value():\n    return ('Giga Drain',75,100,'Special','Grass',0,[])\n\n@Increment(Celebi)\ndef move_4(self): # Giga Drain\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        self.restore(int(0.5*damage),'drain')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Celebi\",\n  \"types\": [\n    \"Psychic\",\n    \"Grass\"\n  ],\n  \"gender\": \"Neutral\",\n  \"ability\": {\n    \"Serene Grace\": \"This Pokemon's moves have their secondary effect chance doubled.\"\n  },\n  \"moves\": {\n    \"Leech Seed\": {\n      \"power\": 0,\n      \"accuracy\": 90,\n      \"category\": \"Status\",\n      \"type\": \"Grass\",\n      \"effect\": \"Plants a seed on the target. Each end of turn, the target loses 1/8 of its HP and the user drains that amount of HP.\"\n    },\n    \"Psychic\": {\n      \"power\": 90,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Psychic\",\n      \"effect\": \"Has a 10% chance to lower the target's Special Defense by 1 stage.\"\n    },\n    \"Ancient Power\": {\n      \"power\": 60,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Rock\",\n      \"effect\": \"Has a 10% chance to raise all the user's stats by 1 stage.\"\n    },\n    \"Giga Drain\": {\n      \"power\": 75,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Grass\",\n      \"effect\": \"User recovers 50% of the damage dealt.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Celebi(PokemonBase):\n    _species='Celebi'\n    _types=['Psychic','Grass']\n    _gender='Neutral'\n    _ability=['Serene Grace']\n    _move_1=('Leech Seed',0,90,'Status','Grass',0,[])\n    _move_2=('Psychic',90,100,'Special','Psychic',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def get_effect_chance(self,effect):\n        return 2*effect if effect<=0.5 else 1\n\n    def endturn(self):\n        if self.target['conditions'].get('LEECH_SEED'):\n            self.target.take_damage(self.target['max_hp']//8,'loss')\n            self.take_damage(self.target['max_hp']//8,'drain')\n\n    def move_1(self): # Leech Seed\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            self.target.set_condition('LEECH_SEED',counter=0)\n\n    def move_2(self): # Psychic\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<self.get_effect_chance(10/100):\n                self.target.set_boost('spd',-1)\n\n@Increment(Celebi,'_move_3')\ndef value():\n    return ('Ancient Power',60,100,'Special','Rock',0,[])\n\n@Increment(Celebi)\ndef move_3(self): # Ancient Power\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint() and rnd()<self.get_effect_chance(10/100):\n            for k in ['atk','def','spa','spd','spe']:\n                self.set_boost(k,1,'self')\n\n@Increment(Celebi,'_move_4')\ndef value():\n    return ('Giga Drain',75,100,'Special','Grass',0,[])\n\n@Increment(Celebi)\ndef move_4(self): # Giga Drain\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        self.restore(int(0.5*damage),'drain')\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Recover\": {\n    \"power\": 0,\n    \"accuracy\": 100000,\n    \"category\": \"Status\",\n    \"type\": \"Normal\",\n    \"effect\": \"Restores up to 50% of the user's maximum HP.\"\n  }\n}\n```",
        "response": "```python\n@Increment(Celebi,'_move_5')\ndef value():\n    return ('Recover',0,100000,'Status','Normal',0,[])\n\n@Increment(Celebi)\ndef move_5(self): # Recover\n    self.restore(int(0.5*self['max_hp']),'heal')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Ceruledge\",\n  \"types\": [\n    \"Fire\",\n    \"Ghost\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Weak Armor\": \"If a physical attack hits this Pokemon, Defense is lowered by 1, Speed is raised by 2.\"\n  },\n  \"moves\": {\n    \"Bitter Blade\": {\n      \"power\": 90,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Fire\",\n      \"effect\": \"The user recovers 1/2 the HP lost by the target.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Poltergeist\": {\n      \"power\": 70,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Ghost\",\n      \"effect\": \"The user recovers 1/2 the HP lost by the target.\",\n      \"property\": [\n        \"contact\"\n      ]\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass Ceruledge(PokemonBase):\n    _species='Ceruledge'\n    _types=['Fire','Ghost']\n    _gender='Male'\n    _ability=['Weak Armor']\n    _move_1=('Bitter Blade',90,100,'Physical','Fire',0,['contact'])\n    _move_2=('Poltergeist',70,100,'Physical','Ghost',0,['contact'])\n    def __init__(self):\n        super().__init__()\n\n    def _take_damage_attack(self,x):\n        self.register_act_taken()\n        self.state['hp']=max(0,self['hp']-x)\n        if self['hp']==0:\n            self.state['status']='FNT'\n            return\n        if self['act_taken'] and self['act_taken']['category']=='Physical':\n            self.set_boost('def',-1)\n            self.set_boost('spe',2)\n\n    def move_1(self): # Bitter Blade\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            self.restore(int(1/2*damage),'drain')\n    \n    def move_2(self): # Poltergeist\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            self.restore(int(1/2*damage),'drain')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Ceruledge\",\n  \"types\": [\n    \"Fire\",\n    \"Ghost\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Weak Armor\": \"If a physical attack hits this Pokemon, Defense is lowered by 1, Speed is raised by 2.\"\n  },\n  \"moves\": {\n    \"Bitter Blade\": {\n      \"power\": 90,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Fire\",\n      \"effect\": \"The user recovers 1/2 the HP lost by the target.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Poltergeist\": {\n      \"power\": 70,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Ghost\",\n      \"effect\": \"The user recovers 1/2 the HP lost by the target.\",\n      \"property\": [\n        \"contact\"\n      ]\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Ceruledge(PokemonBase):\n    _species='Ceruledge'\n    _types=['Fire','Ghost']\n    _gender='Male'\n    _ability=['Weak Armor']\n    _move_1=('Bitter Blade',90,100,'Physical','Fire',0,['contact'])\n    _move_2=('Poltergeist',70,100,'Physical','Ghost',0,['contact'])\n    def __init__(self):\n        super().__init__()\n\n    def _take_damage_attack(self,x):\n        self.register_act_taken()\n        self.state['hp']=max(0,self['hp']-x)\n        if self['hp']==0:\n            self.state['status']='FNT'\n            return\n        if self['act_taken'] and self['act_taken']['category']=='Physical':\n            self.set_boost('def',-1)\n            self.set_boost('spe',2)\n\n    def move_1(self): # Bitter Blade\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            self.restore(int(1/2*damage),'drain')\n    \n    def move_2(self): # Poltergeist\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            self.restore(int(1/2*damage),'drain')\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Play Rough\": {\n    \"power\": 90,\n    \"accuracy\": 90,\n    \"category\": \"Physical\",\n    \"type\": \"Fairy\",\n    \"effect\": \"Has a 10% chance to lower the target's Attack by 1 stage.\",\n    \"property\": [\n      \"contact\"\n    ]\n  }\n}\n```",
        "response": "```python\n@Increment(Ceruledge,'_move_3')\ndef value():\n    return ('Play Rough',90,90,'Physical','Fairy',0,['contact'])\n\n@Increment(Ceruledge)\ndef move_3(self): # Play Rough\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint() and rnd()<10/100: self.target.set_boost('atk',-1)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Ceruledge\",\n  \"types\": [\n    \"Fire\",\n    \"Ghost\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Weak Armor\": \"If a physical attack hits this Pokemon, Defense is lowered by 1, Speed is raised by 2.\"\n  },\n  \"moves\": {\n    \"Bitter Blade\": {\n      \"power\": 90,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Fire\",\n      \"effect\": \"The user recovers 1/2 the HP lost by the target.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Poltergeist\": {\n      \"power\": 70,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Ghost\",\n      \"effect\": \"The user recovers 1/2 the HP lost by the target.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Play Rough\": {\n      \"power\": 90,\n      \"accuracy\": 90,\n      \"category\": \"Physical\",\n      \"type\": \"Fairy\",\n      \"effect\": \"Has a 10% chance to lower the target's Attack by 1 stage.\",\n      \"property\": [\n        \"contact\"\n      ]\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Ceruledge(PokemonBase):\n    _species='Ceruledge'\n    _types=['Fire','Ghost']\n    _gender='Male'\n    _ability=['Weak Armor']\n    _move_1=('Bitter Blade',90,100,'Physical','Fire',0,['contact'])\n    _move_2=('Poltergeist',70,100,'Physical','Ghost',0,['contact'])\n    def __init__(self):\n        super().__init__()\n\n    def _take_damage_attack(self,x):\n        self.register_act_taken()\n        self.state['hp']=max(0,self['hp']-x)\n        if self['hp']==0:\n            self.state['status']='FNT'\n            return\n        if self['act_taken'] and self['act_taken']['category']=='Physical':\n            self.set_boost('def',-1)\n            self.set_boost('spe',2)\n\n    def move_1(self): # Bitter Blade\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            self.restore(int(1/2*damage),'drain')\n    \n    def move_2(self): # Poltergeist\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            self.restore(int(1/2*damage),'drain')\n\n@Increment(Ceruledge,'_move_3')\ndef value():\n    return ('Play Rough',90,90,'Physical','Fairy',0,['contact'])\n\n@Increment(Ceruledge)\ndef move_3(self): # Play Rough\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint() and rnd()<10/100: self.target.set_boost('atk',-1)\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Swords Dance\": {\n    \"power\": 0,\n    \"accuracy\": 100000,\n    \"category\": \"Status\",\n    \"type\": \"Normal\",\n    \"effect\": \"Raises the user's Attack by 2 stages.\"\n  }\n}\n```",
        "response": "```python\n@Increment(Ceruledge,'_move_4')\ndef value():\n    return ('Swords Dance',0,100000,'Status','Normal',0,[])\n\n@Increment(Ceruledge)\ndef move_4(self): # Swords Dance\n    self.set_boost('atk',+2,'self')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Ceruledge\",\n  \"types\": [\n    \"Fire\",\n    \"Ghost\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Weak Armor\": \"If a physical attack hits this Pokemon, Defense is lowered by 1, Speed is raised by 2.\"\n  },\n  \"moves\": {\n    \"Bitter Blade\": {\n      \"power\": 90,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Fire\",\n      \"effect\": \"The user recovers 1/2 the HP lost by the target.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Poltergeist\": {\n      \"power\": 70,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Ghost\",\n      \"effect\": \"The user recovers 1/2 the HP lost by the target.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Play Rough\": {\n      \"power\": 90,\n      \"accuracy\": 90,\n      \"category\": \"Physical\",\n      \"type\": \"Fairy\",\n      \"effect\": \"Has a 10% chance to lower the target's Attack by 1 stage.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Swords Dance\": {\n      \"power\": 0,\n      \"accuracy\": 100000,\n      \"category\": \"Status\",\n      \"type\": \"Normal\",\n      \"effect\": \"Raises the user's Attack by 2 stages.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Ceruledge(PokemonBase):\n    _species='Ceruledge'\n    _types=['Fire','Ghost']\n    _gender='Male'\n    _ability=['Weak Armor']\n    _move_1=('Bitter Blade',90,100,'Physical','Fire',0,['contact'])\n    _move_2=('Poltergeist',70,100,'Physical','Ghost',0,['contact'])\n    def __init__(self):\n        super().__init__()\n\n    def _take_damage_attack(self,x):\n        self.register_act_taken()\n        self.state['hp']=max(0,self['hp']-x)\n        if self['hp']==0:\n            self.state['status']='FNT'\n            return\n        if self['act_taken'] and self['act_taken']['category']=='Physical':\n            self.set_boost('def',-1)\n            self.set_boost('spe',2)\n\n    def move_1(self): # Bitter Blade\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            self.restore(int(1/2*damage),'drain')\n    \n    def move_2(self): # Poltergeist\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            self.restore(int(1/2*damage),'drain')\n\n@Increment(Ceruledge,'_move_3')\ndef value():\n    return ('Play Rough',90,90,'Physical','Fairy',0,['contact'])\n\n@Increment(Ceruledge)\ndef move_3(self): # Play Rough\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint() and rnd()<10/100: self.target.set_boost('atk',-1)\n\n@Increment(Ceruledge,'_move_4')\ndef value():\n    return ('Swords Dance',0,100000,'Status','Normal',0,[])\n\n@Increment(Ceruledge)\ndef move_4(self): # Swords Dance\n    self.set_boost('atk',+2,'self')\n```\n\nThis role is gonna learn a new ability:\n```json\n{\n  \"Sucking\": \"This Pokemon can restore 50% more from its moves.\"\n}\n```",
        "response": "```python\n@Increment(Ceruledge,'_ability')\ndef value():\n    return ['Weak Armor','Sucking']\n\n@Increment(Ceruledge)\ndef _restore_drain(self,x):\n    x=int(x*1.5)\n    self.state['hp']=min(self['max_hp'],self['hp']+x)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Ceruledge\",\n  \"types\": [\n    \"Fire\",\n    \"Ghost\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Weak Armor\": \"If a physical attack hits this Pokemon, Defense is lowered by 1, Speed is raised by 2.\",\n    \"Sucking\": \"This Pokemon can restore 50% more from its moves.\"\n  },\n  \"moves\": {\n    \"Bitter Blade\": {\n      \"power\": 90,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Fire\",\n      \"effect\": \"The user recovers 1/2 the HP lost by the target.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Poltergeist\": {\n      \"power\": 70,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Ghost\",\n      \"effect\": \"The user recovers 1/2 the HP lost by the target.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Play Rough\": {\n      \"power\": 90,\n      \"accuracy\": 90,\n      \"category\": \"Physical\",\n      \"type\": \"Fairy\",\n      \"effect\": \"Has a 10% chance to lower the target's Attack by 1 stage.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Swords Dance\": {\n      \"power\": 0,\n      \"accuracy\": 100000,\n      \"category\": \"Status\",\n      \"type\": \"Normal\",\n      \"effect\": \"Raises the user's Attack by 2 stages.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Ceruledge(PokemonBase):\n    _species='Ceruledge'\n    _types=['Fire','Ghost']\n    _gender='Male'\n    _ability=['Weak Armor']\n    _move_1=('Bitter Blade',90,100,'Physical','Fire',0,['contact'])\n    _move_2=('Poltergeist',70,100,'Physical','Ghost',0,['contact'])\n    def __init__(self):\n        super().__init__()\n\n    def _take_damage_attack(self,x):\n        self.register_act_taken()\n        self.state['hp']=max(0,self['hp']-x)\n        if self['hp']==0:\n            self.state['status']='FNT'\n            return\n        if self['act_taken'] and self['act_taken']['category']=='Physical':\n            self.set_boost('def',-1)\n            self.set_boost('spe',2)\n\n    def move_1(self): # Bitter Blade\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            self.restore(int(1/2*damage),'drain')\n    \n    def move_2(self): # Poltergeist\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            self.restore(int(1/2*damage),'drain')\n\n@Increment(Ceruledge,'_move_3')\ndef value():\n    return ('Play Rough',90,90,'Physical','Fairy',0,['contact'])\n\n@Increment(Ceruledge)\ndef move_3(self): # Play Rough\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint() and rnd()<10/100: self.target.set_boost('atk',-1)\n\n@Increment(Ceruledge,'_move_4')\ndef value():\n    return ('Swords Dance',0,100000,'Status','Normal',0,[])\n\n@Increment(Ceruledge)\ndef move_4(self): # Swords Dance\n    self.set_boost('atk',+2,'self')\n\n@Increment(Ceruledge,'_ability')\ndef value():\n    return ['Weak Armor','Sucking']\n\n@Increment(Ceruledge)\ndef _restore_drain(self,x):\n    x=int(x*1.5)\n    self.state['hp']=min(self['max_hp'],self['hp']+x)\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Close Combat\": {\n    \"power\": 120,\n    \"accuracy\": 100,\n    \"category\": \"Physical\",\n    \"type\": \"Fighting\",\n    \"effect\": \"Lowers the user's Defense and Special Defense by 1 stage.\",\n    \"property\": [\n      \"contact\"\n    ]\n  }\n}\n```",
        "response": "```python\n@Increment(Ceruledge,'_move_5')\ndef value():\n    return ('Close Combat',120,100,'Physical','Fighting',0,['contact'])\n\n@Increment(Ceruledge)\ndef move_5(self): # Close Combat\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        self.set_boost('def',-1,'self')\n        self.set_boost('spd',-1,'self')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Ceruledge\",\n  \"types\": [\n    \"Fire\",\n    \"Ghost\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Ghost Armor\": \"30% chance to gain Ghost Armor on switch-in. Ghost Armor can also be triggered by a Physical hit. Ghost Armor increases Defense by 1.5x and lasts for 2 turns. During the period, it cannot be triggered repeatedly.\"\n  },\n  \"moves\": {\n    \"Soul Stealer\": {\n      \"power\": 90,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Ghost\",\n      \"effect\": \"The user recovers 1/3 the HP lost by the target. The target loses 1/6 more HP.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Bitter Blade\": {\n      \"power\": 90,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Fire\",\n      \"effect\": \"The user recovers 1/2 the HP lost by the target.\",\n      \"property\": [\n        \"contact\"\n      ]\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass Ceruledge(PokemonBase):\n    _species='Ceruledge'\n    _types=['Fire','Ghost']\n    _gender='Male'\n    _ability=['Ghost Armor']\n    _move_1=('Soul Stealer',90,100,'Physical','Ghost',0,['contact'])\n    _move_2=('Bitter Blade',90,100,'Physical','Fire',0,['contact'])\n    def __init__(self):\n        super().__init__()\n\n    def _take_damage_attack(self,x):\n        self.register_act_taken()\n        self.state['hp']=max(0,self['hp']-x)\n        if self['hp']==0:\n            self.state['status']='FNT'\n            return\n        if self['act_taken'] and self['act_taken']['category']=='Physical':\n            self.set_condition('GHOST_ARMOR',counter=0)\n\n    def onswitch(self):\n        if rnd()<30/100: \n            self.set_condition('GHOST_ARMOR',counter=0)\n\n    def get_stat(self,key,boost=None):\n        stat=self['stats'][key]\n        boost=self['boosts'][key] if not boost else boost\n        stat_ratio={0:1,1:1.5,2:2,3:2.5,4:3,5:3.5,6:4}[min(6,abs(boost))]\n        if boost<0:\n            stat_ratio=1/stat_ratio\n        stat_ratio*=self.get_weather_stat_mult(key)\n        if key=='def' and self['conditions'].get('GHOST_ARMOR'):\n            stat_ratio*=1.5\n        return int(stat*stat_ratio)\n        \n    def endturn(self):\n        if self['conditions'].get('GHOST_ARMOR'):\n            self['conditions']['GHOST_ARMOR']['counter']+=1\n            if self['conditions']['GHOST_ARMOR']['counter']==2:\n                del self['conditions']['GHOST_ARMOR']\n\n    def move_1(self): # Soul Stealer  \n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if damage>0: \n                self.restore(int(1/3*damage),'drain')\n                self.target.take_damage(int(1/6*damage),'loss')\n    \n    def move_2(self): # Bitter Blade\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            self.restore(int(1/2*damage),'drain')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Ceruledge\",\n  \"types\": [\n    \"Fire\",\n    \"Ghost\"\n  ],\n  \"gender\": \"Female\",\n  \"ability\": {\n    \"Inverse Armor\": \"If a physical attack hits this Pokemon, the type effectiveness of the move is inversed.\"\n  },\n  \"moves\": {\n    \"Bitter Blade\": {\n      \"power\": 90,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Fire\",\n      \"effect\": \"The user recovers 1/2 the HP lost by the target.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Shadow Claw\": {\n      \"power\": 70,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Ghost\",\n      \"effect\": \"The ratio for critical hit +1.\",\n      \"property\": [\n        \"contact\"\n      ]\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass Ceruledge(PokemonBase):\n    _species='Ceruledge'\n    _types=['Fire','Ghost']\n    _gender='Female'\n    _ability=['Inverse Armor']\n    _move_1=('Bitter Blade',90,100,'Physical','Fire',0,['contact'])\n    _move_2=('Shadow Claw',70,100,'Physical','Ghost',0,['contact'])\n    def __init__(self):\n        super().__init__()\n\n    def get_type_effect(self):\n        move_type=self['act']['type']\n        target_types=self.target['types']\n        effect=1\n        for tt in target_types:\n            effect*=TYPEEFFECTIVENESS[move_type][tt]\n        if self['act']['category']=='Physical':\n            if effect!=0: effect=1/effect\n        return effect\n    \n    def get_crit(self):\n        crit_mult=[0,24,8,2,1]\n        crit_ratio=self['boosts']['crit']\n        if self['act']['id']=='Shadow Claw':\n            crit_ratio=min(3,crit_ratio+1)\n        crit=False\n        if rnd()*crit_mult[crit_ratio+1]<1:\n            crit=True\n        return crit\n\n    def move_1(self): # Bitter Blade\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            self.restore(int(1/2*damage),'drain')\n    \n    def move_2(self): # Shadow Claw\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Charizard\",\n  \"types\": [\n    \"Fire\",\n    \"Flying\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Solar Power\": \"If Sunny Day is active, this Pokemon's Sp. Atk is 1.5x and loses 1/8 max HP per end of turn.\"\n  },\n  \"moves\": {\n    \"Fire Blast\": {\n      \"power\": 110,\n      \"accuracy\": 85,\n      \"category\": \"Special\",\n      \"type\": \"Fire\",\n      \"effect\": \"Has a 10% chance to burn the target.\"\n    },\n    \"Hurricane\": {\n      \"power\": 110,\n      \"accuracy\": 70,\n      \"category\": \"Special\",\n      \"type\": \"Flying\",\n      \"effect\": \"Has a 30% chance to confuse the target. If the weather is Rain Dance, this move does not check accuracy. If the weather is Sunny Day, this move's accuracy is 50%.\"\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass Charizard(PokemonBase):\n    _species='Charizard'\n    _types=['Fire','Flying']\n    _gender='Male'\n    _ability=['Solar Power']\n    _move_1=('Fire Blast',110,85,'Special','Fire',0,[])\n    _move_2=('Hurricane',110,70,'Special','Flying',0,[])\n    def __init__(self):\n        super().__init__()\n    \n    def get_weather_stat_mult(self, key):\n        if self.env.get('SANDSTORM') and key=='spd' and 'Rock' in self['types']:\n            return 1.5\n        if self.env.get('SNOW') and key=='def' and 'Ice' in self['types']:\n            return 1.5\n        if self.env.get('SUNNYDAY') and key=='spa':\n            return 1.5\n        return 1.\n    \n    def endturn(self):\n        if self.env.get('SUNNYDAY'):\n            self.take_damage(self['max_hp']//8,'loss')\n    \n    def get_accuracy(self):\n        acc=self['act']['accuracy']\n        if self['act']['id']=='Hurricane':\n            if self.env.get('RAINDANCE'):\n                acc=1e5\n            elif self.env.get('SUNNYDAY'):\n                acc=50\n        acc_mult=[1.0,1.33,1.67,2.0]\n        if self['boosts']['accuracy']>=0:\n            acc*=acc_mult[self['boosts']['accuracy']]\n        else:\n            acc/=acc_mult[self['boosts']['accuracy']]\n        acc*=self.target.get_evasion()\n        return acc/100\n\n    def move_1(self): # Fire Blast\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<10/100: self.target.set_status('BRN')\n    \n    def move_2(self): # Hurricane\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100:\n                self.target.set_condition('CONFUSION',counter=0)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Charizard\",\n  \"types\": [\n    \"Fire\",\n    \"Flying\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Desolate Land\": \"If Sunny Day is active, this Pokemon's Sp. Atk is 1.5x, Fire moves burn the target, and loses 1/8 max HP per end of turn.\"\n  },\n  \"moves\": {\n    \"Flamethrower\": {\n      \"power\": 90,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Fire\",\n      \"effect\": \"Has a 10% chance to burn the target.\"\n    },\n    \"Air Slash\": {\n      \"power\": 75,\n      \"accuracy\": 95,\n      \"category\": \"Special\",\n      \"type\": \"Flying\",\n      \"effect\": \"Has a 30% chance to make the target flinch.\"\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass Charizard(PokemonBase):\n    _species='Charizard'\n    _types=['Fire','Flying']\n    _gender='Male'\n    _ability=['Desolate Land']\n    _move_1=('Flamethrower',90,100,'Special','Fire',0,[])\n    _move_2=('Air Slash',75,95,'Special','Flying',0,[])\n    def __init__(self):\n        super().__init__()\n        self.unlock_turn=None\n\n    def get_weather_stat_mult(self,key):\n        if self.env.get('SANDSTORM') and key=='spd' and 'Rock' in self['types']:\n            return 1.5\n        if self.env.get('SNOW') and key=='def' and 'Ice' in self['types']:\n            return 1.5\n        if self.env.get('SUNNYDAY') and key=='spa':\n            return 1.5\n        return 1.\n    \n    def endturn(self):\n        if self.env.get('SUNNYDAY'):\n            self.take_damage(self['max_hp']//8,'loss')\n    \n    def move_1(self): # Flamethrower\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint():\n                if self.env.get('SUNNYDAY') or rnd()<10/100:\n                    self.target.set_status('BRN')\n    \n    def move_2(self): # Air Slash\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100:\n                self.target.set_condition('FLINCH',counter=0)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Charizard\",\n  \"types\": [\n    \"Fire\",\n    \"Flying\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Solar Power\": \"If Sunny Day is active, this Pokemon's Sp. Atk is 1.5x and loses 1/8 max HP per end of turn.\"\n  },\n  \"moves\": {\n    \"Flare Blitz\": {\n      \"power\": 120,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Fire\",\n      \"effect\": \"Has a 20% chance to burn the target. User receives recoil damage equal to 1/3 the damage dealt to the target. If the weather is Sunny Day, this move does not check accuracy.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Air Slash\": {\n      \"power\": 75,\n      \"accuracy\": 95,\n      \"category\": \"Special\",\n      \"type\": \"Flying\",\n      \"effect\": \"Has a 30% chance to make the target flinch. If the weather is Rain Dance, this move has 50% accuracy.\"\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass Charizard(PokemonBase):\n    _species='Charizard'\n    _types=['Fire','Flying']\n    _gender='Male'\n    _ability=['Solar Power','Flame Aura']\n    _move_1=('Flare Blitz',120,100,'Physical','Fire',0,['contact'])\n    _move_2=('Air Slash',75,95,'Special','Flying',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def get_weather_stat_mult(self,key):\n        if self.env.get('SANDSTORM') and key=='spd' and 'Rock' in self['types']:\n            return 1.5\n        if self.env.get('SNOW') and key=='def' and 'Ice' in self['types']:\n            return 1.5\n        if self.env.get('SUNNYDAY') and key=='spa':\n            return 1.5\n        return 1.\n\n    def endturn(self):\n        if self.env.get('SUNNYDAY'):\n            self.take_damage(self['max_hp']//8,'loss')\n\n    def get_accuracy(self):\n        acc=self['act']['accuracy']\n        if self['act']['id']=='Flare Blitz':\n            if self.env.get('SUNNYDAY'):\n                acc=1e5\n        elif self['act']['id']=='Air Slash':\n            if self.env.get('RAINDANCE'):\n                acc=50\n        acc_mult=[1.0,1.33,1.67,2.0]\n        if self['boosts']['accuracy']>=0:\n            acc*=acc_mult[self['boosts']['accuracy']]\n        else:\n            acc/=acc_mult[self['boosts']['accuracy']]\n        acc*=self.target.get_evasion()\n        return acc/100\n\n    def move_1(self): # Flare Blitz\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            recoil_damage=int(damage//3)\n            self.take_damage(recoil_damage,'recoil')\n            if not self.target.isfaint() and rnd()<20/100: self.target.set_status('BRN')\n\n    def move_2(self): # Air Slash \n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100:\n                self.target.set_condition('FLINCH',counter=0)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Charizard\",\n  \"types\": [\n    \"Fire\",\n    \"Flying\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Solar Power\": \"If Sunny Day is active, this Pokemon's Sp. Atk is 1.5x and loses 1/8 max HP per end of turn.\"\n  },\n  \"moves\": {\n    \"Flare Blitz\": {\n      \"power\": 120,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Fire\",\n      \"effect\": \"Has a 20% chance to burn the target. User receives recoil damage equal to 1/3 the damage dealt to the target. If the weather is Sunny Day, this move does not check accuracy.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Air Slash\": {\n      \"power\": 75,\n      \"accuracy\": 95,\n      \"category\": \"Special\",\n      \"type\": \"Flying\",\n      \"effect\": \"Has a 30% chance to make the target flinch. If the weather is Rain Dance, this move has 50% accuracy.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Charizard(PokemonBase):\n    _species='Charizard'\n    _types=['Fire','Flying']\n    _gender='Male'\n    _ability=['Solar Power','Flame Aura']\n    _move_1=('Flare Blitz',120,100,'Physical','Fire',0,['contact'])\n    _move_2=('Air Slash',75,95,'Special','Flying',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def get_weather_stat_mult(self,key):\n        if self.env.get('SANDSTORM') and key=='spd' and 'Rock' in self['types']:\n            return 1.5\n        if self.env.get('SNOW') and key=='def' and 'Ice' in self['types']:\n            return 1.5\n        if self.env.get('SUNNYDAY') and key=='spa':\n            return 1.5\n        return 1.\n\n    def endturn(self):\n        if self.env.get('SUNNYDAY'):\n            self.take_damage(self['max_hp']//8,'loss')\n\n    def get_accuracy(self):\n        acc=self['act']['accuracy']\n        if self['act']['id']=='Flare Blitz':\n            if self.env.get('SUNNYDAY'):\n                acc=1e5\n        elif self['act']['id']=='Air Slash':\n            if self.env.get('RAINDANCE'):\n                acc=50\n        acc_mult=[1.0,1.33,1.67,2.0]\n        if self['boosts']['accuracy']>=0:\n            acc*=acc_mult[self['boosts']['accuracy']]\n        else:\n            acc/=acc_mult[self['boosts']['accuracy']]\n        acc*=self.target.get_evasion()\n        return acc/100\n\n    def move_1(self): # Flare Blitz\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            recoil_damage=int(damage//3)\n            self.take_damage(recoil_damage,'recoil')\n            if not self.target.isfaint() and rnd()<20/100: self.target.set_status('BRN')\n\n    def move_2(self): # Air Slash \n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100:\n                self.target.set_condition('FLINCH',counter=0)\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Inferno Cyclone\": {\n    \"power\": 90,\n    \"accuracy\": 85,\n    \"category\": \"Special\",\n    \"type\": \"Fire\",\n    \"effect\": \"Has a 50% chance to burn the target. If the weather is Sunny Day, this move always burns the target.\",\n    \"property\": [\n      \"ranged\"\n    ]\n  }\n}\n```",
        "response": "```python\n@Increment(Charizard,'_move_3')\ndef value():\n    return ('Inferno Cyclone',90,85,'Special','Fire',0,['ranged'])\n\n@Increment(Charizard)\ndef move_3(self): # Inferno Cyclone\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint():\n            if self.env.get('SUNNYDAY'):\n                self.target.set_status('BRN')\n            elif rnd()<50/100:\n                self.target.set_status('BRN')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Charizard\",\n  \"types\": [\n    \"Fire\",\n    \"Flying\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Solar Power\": \"If Sunny Day is active, this Pokemon's Sp. Atk is 1.5x and loses 1/8 max HP per end of turn.\"\n  },\n  \"moves\": {\n    \"Flare Blitz\": {\n      \"power\": 120,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Fire\",\n      \"effect\": \"Has a 20% chance to burn the target. User receives recoil damage equal to 1/3 the damage dealt to the target. If the weather is Sunny Day, this move does not check accuracy.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Air Slash\": {\n      \"power\": 75,\n      \"accuracy\": 95,\n      \"category\": \"Special\",\n      \"type\": \"Flying\",\n      \"effect\": \"Has a 30% chance to make the target flinch. If the weather is Rain Dance, this move has 50% accuracy.\"\n    },\n    \"Inferno Cyclone\": {\n      \"power\": 90,\n      \"accuracy\": 85,\n      \"category\": \"Special\",\n      \"type\": \"Fire\",\n      \"effect\": \"Has a 50% chance to burn the target. If the weather is Sunny Day, this move always burns the target.\",\n      \"property\": [\n        \"ranged\"\n      ]\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Charizard(PokemonBase):\n    _species='Charizard'\n    _types=['Fire','Flying']\n    _gender='Male'\n    _ability=['Solar Power','Flame Aura']\n    _move_1=('Flare Blitz',120,100,'Physical','Fire',0,['contact'])\n    _move_2=('Air Slash',75,95,'Special','Flying',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def get_weather_stat_mult(self,key):\n        if self.env.get('SANDSTORM') and key=='spd' and 'Rock' in self['types']:\n            return 1.5\n        if self.env.get('SNOW') and key=='def' and 'Ice' in self['types']:\n            return 1.5\n        if self.env.get('SUNNYDAY') and key=='spa':\n            return 1.5\n        return 1.\n\n    def endturn(self):\n        if self.env.get('SUNNYDAY'):\n            self.take_damage(self['max_hp']//8,'loss')\n\n    def get_accuracy(self):\n        acc=self['act']['accuracy']\n        if self['act']['id']=='Flare Blitz':\n            if self.env.get('SUNNYDAY'):\n                acc=1e5\n        elif self['act']['id']=='Air Slash':\n            if self.env.get('RAINDANCE'):\n                acc=50\n        acc_mult=[1.0,1.33,1.67,2.0]\n        if self['boosts']['accuracy']>=0:\n            acc*=acc_mult[self['boosts']['accuracy']]\n        else:\n            acc/=acc_mult[self['boosts']['accuracy']]\n        acc*=self.target.get_evasion()\n        return acc/100\n\n    def move_1(self): # Flare Blitz\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            recoil_damage=int(damage//3)\n            self.take_damage(recoil_damage,'recoil')\n            if not self.target.isfaint() and rnd()<20/100: self.target.set_status('BRN')\n\n    def move_2(self): # Air Slash \n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100:\n                self.target.set_condition('FLINCH',counter=0)\n\n@Increment(Charizard,'_move_3')\ndef value():\n    return ('Inferno Cyclone',90,85,'Special','Fire',0,['ranged'])\n\n@Increment(Charizard)\ndef move_3(self): # Inferno Cyclone\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint():\n            if self.env.get('SUNNYDAY'):\n                self.target.set_status('BRN')\n            elif rnd()<50/100:\n                self.target.set_status('BRN')\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Sky Blaze\": {\n    \"power\": 100,\n    \"accuracy\": 90,\n    \"category\": \"Physical\",\n    \"type\": \"Flying\",\n    \"effect\": \"Raises the user's Speed by 1 stage if this move knocks out the target.\",\n    \"property\": [\n      \"contact\"\n    ]\n  }\n}\n```",
        "response": "```python\n@Increment(Charizard,'_move_4')\ndef value():\n    return ('Sky Blaze',100,90,'Physical','Flying',0,['contact'])\n\n@Increment(Charizard)\ndef move_4(self): # Sky Blaze\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if self.target.isfaint():\n            self.set_boost('spe',+1,'self')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Charizard\",\n  \"types\": [\n    \"Fire\",\n    \"Flying\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Solar Power\": \"If Sunny Day is active, this Pokemon's Sp. Atk is 1.5x and loses 1/8 max HP per end of turn.\"\n  },\n  \"moves\": {\n    \"Flare Blitz\": {\n      \"power\": 120,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Fire\",\n      \"effect\": \"Has a 20% chance to burn the target. User receives recoil damage equal to 1/3 the damage dealt to the target. If the weather is Sunny Day, this move does not check accuracy.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Air Slash\": {\n      \"power\": 75,\n      \"accuracy\": 95,\n      \"category\": \"Special\",\n      \"type\": \"Flying\",\n      \"effect\": \"Has a 30% chance to make the target flinch. If the weather is Rain Dance, this move has 50% accuracy.\"\n    },\n    \"Inferno Cyclone\": {\n      \"power\": 90,\n      \"accuracy\": 85,\n      \"category\": \"Special\",\n      \"type\": \"Fire\",\n      \"effect\": \"Has a 50% chance to burn the target. If the weather is Sunny Day, this move always burns the target.\",\n      \"property\": [\n        \"ranged\"\n      ]\n    },\n    \"Sky Blaze\": {\n      \"power\": 100,\n      \"accuracy\": 90,\n      \"category\": \"Physical\",\n      \"type\": \"Flying\",\n      \"effect\": \"Raises the user's Speed by 1 stage if this move knocks out the target.\",\n      \"property\": [\n        \"contact\"\n      ]\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Charizard(PokemonBase):\n    _species='Charizard'\n    _types=['Fire','Flying']\n    _gender='Male'\n    _ability=['Solar Power','Flame Aura']\n    _move_1=('Flare Blitz',120,100,'Physical','Fire',0,['contact'])\n    _move_2=('Air Slash',75,95,'Special','Flying',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def get_weather_stat_mult(self,key):\n        if self.env.get('SANDSTORM') and key=='spd' and 'Rock' in self['types']:\n            return 1.5\n        if self.env.get('SNOW') and key=='def' and 'Ice' in self['types']:\n            return 1.5\n        if self.env.get('SUNNYDAY') and key=='spa':\n            return 1.5\n        return 1.\n\n    def endturn(self):\n        if self.env.get('SUNNYDAY'):\n            self.take_damage(self['max_hp']//8,'loss')\n\n    def get_accuracy(self):\n        acc=self['act']['accuracy']\n        if self['act']['id']=='Flare Blitz':\n            if self.env.get('SUNNYDAY'):\n                acc=1e5\n        elif self['act']['id']=='Air Slash':\n            if self.env.get('RAINDANCE'):\n                acc=50\n        acc_mult=[1.0,1.33,1.67,2.0]\n        if self['boosts']['accuracy']>=0:\n            acc*=acc_mult[self['boosts']['accuracy']]\n        else:\n            acc/=acc_mult[self['boosts']['accuracy']]\n        acc*=self.target.get_evasion()\n        return acc/100\n\n    def move_1(self): # Flare Blitz\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            recoil_damage=int(damage//3)\n            self.take_damage(recoil_damage,'recoil')\n            if not self.target.isfaint() and rnd()<20/100: self.target.set_status('BRN')\n\n    def move_2(self): # Air Slash \n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100:\n                self.target.set_condition('FLINCH',counter=0)\n\n@Increment(Charizard,'_move_3')\ndef value():\n    return ('Inferno Cyclone',90,85,'Special','Fire',0,['ranged'])\n\n@Increment(Charizard)\ndef move_3(self): # Inferno Cyclone\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint():\n            if self.env.get('SUNNYDAY'):\n                self.target.set_status('BRN')\n            elif rnd()<50/100:\n                self.target.set_status('BRN')\n\n@Increment(Charizard,'_move_4')\ndef value():\n    return ('Sky Blaze',100,90,'Physical','Flying',0,['contact'])\n\n@Increment(Charizard)\ndef move_4(self): # Sky Blaze\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if self.target.isfaint():\n            self.set_boost('spe',+1,'self')\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Heat Wave\": {\n    \"power\": 95,\n    \"accuracy\": 90,\n    \"category\": \"Special\",\n    \"type\": \"Fire\",\n    \"effect\": \"Hits all adjacent opponents and has a 10% chance to burn each.\",\n    \"property\": [\n      \"ranged\"\n    ]\n  }\n}\n```",
        "response": "```python\n@Increment(Charizard,'_move_5')\ndef value():\n    return ('Heat Wave',95,90,'Special','Fire',0,['ranged'])\n\n@Increment(Charizard)\ndef move_5(self): # Heat Wave\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if rnd()<10/100: self.target.set_status('BRN')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Chen-Loong\",\n  \"types\": [\n    \"Ice\",\n    \"Water\"\n  ],\n  \"gender\": \"Female\",\n  \"ability\": {\n    \"Tailwind\": \"On switch-in, this Pokemon summons Snow and sets up Aurora Veil, which halves both physical and special damage to the user for 5 turns.\"\n  },\n  \"moves\": {\n    \"Blizzard\": {\n      \"power\": 110,\n      \"accuracy\": 70,\n      \"category\": \"Special\",\n      \"type\": \"Ice\",\n      \"effect\": \"Has a 10% chance to freeze the target. If the weather is Snow, this move does not check accuracy.\"\n    },\n    \"Hydro Pump\": {\n      \"power\": 90,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Water\",\n      \"effect\": \"No additional effect.\"\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass ChenLoong(PokemonBase):\n    _species='Chen-Loong'\n    _types=['Ice','Water']\n    _gender='Female'\n    _ability=['Tailwind']\n    _move_1=('Blizzard',110,70,'Special','Ice',0,[])\n    _move_2=('Hydro Pump',90,100,'Special','Water',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def onswitch(self):\n        self.set_env('SNOW')\n        self.set_side_condition('AURORA_VEIL',counter=0,max_count=5)\n\n    def _take_damage_attack(self,x):\n        self.register_act_taken()\n        if self['side_conditions'].get('AURORA_VEIL'):\n            if self['act_taken']['category']=='Physical' or self['act_taken']['category']=='Special':\n                x//=2\n        self.state['hp']=max(0,self['hp']-x)\n        if self['hp']==0:\n            self.state['status']='FNT'\n\n    def get_accuracy(self):\n        acc=self['act']['accuracy']\n        if self['act']['id']=='Blizzard':\n            if self.env.get('SNOW'):\n                acc=1e5\n        acc_mult=[1.0,1.33,1.67,2.0]\n        if self['boosts']['accuracy']>=0:\n            acc*=acc_mult[self['boosts']['accuracy']]\n        else:\n            acc/=acc_mult[self['boosts']['accuracy']]\n        acc*=self.target.get_evasion()\n        return acc/100\n\n    def move_1(self): # Blizzard\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<10/100: self.target.set_status('FRZ')\n    \n    def move_2(self): # Surf\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            if self.target['conditions'].get('DIVE'):\n                damage*=2\n            self.target.take_damage(damage)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Chimeraon\",\n  \"types\": [\n    \"Fire\",\n    \"Dragon\"\n  ],\n  \"gender\": \"Neutral\",\n  \"ability\": {\n    \"Fiery Roar\": \"Increases the power of Fire-type moves by 50%. The Fire-type moves cause x2 effect to Water-type Pokemon instead of x0.5.\"\n  },\n  \"moves\": {\n    \"Blazing Breath\": {\n      \"power\": 100,\n      \"accuracy\": 90,\n      \"category\": \"Special\",\n      \"type\": \"Fire\",\n      \"effect\": \"Has a 30% chance to burn the target.\"\n    },\n    \"Dragon Fang\": {\n      \"power\": 85,\n      \"accuracy\": 95,\n      \"category\": \"Physical\",\n      \"type\": \"Dragon\",\n      \"effect\": \"Has a 20% chance to lower the target's Defense by 1 stage.\"\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass Chimeraon(PokemonBase):\n    _species='Chimeraon'\n    _types=['Fire','Dragon']\n    _gender='Neutral'\n    _ability=['Fiery Roar']\n    _move_1=('Blazing Breath',100,90,'Special','Fire',0,[])\n    _move_2=('Dragon Fang',85,95,'Physical','Dragon',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def get_type_effect(self):\n        move_type=self['act']['type']\n        target_types=self.target['types']\n        effect=1\n        for tt in target_types:\n            if move_type=='Fire' and tt=='Water':\n                effect*=2\n            else:\n                effect*=TYPEEFFECTIVENESS[move_type][tt]\n        return effect\n\n    def get_power(self):\n        power=self['act']['power']\n        if self['act']['type']=='Fire':\n            power*=1.5\n        return int(power*self.get_weather_power_mult())\n\n    def move_1(self): # Blazing Breath\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<0.3:\n                self.target.set_status('BRN')\n\n    def move_2(self): # Dragon Fang\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<0.2:\n                self.target.set_boost('def',-1)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Chimeraon\",\n  \"types\": [\n    \"Fire\",\n    \"Dragon\"\n  ],\n  \"gender\": \"Neutral\",\n  \"ability\": {\n    \"Fiery Roar\": \"Increases the power of Fire-type moves by 50%. The Fire-type moves cause x2 effect to Water-type Pokemon instead of x0.5.\"\n  },\n  \"moves\": {\n    \"Blazing Breath\": {\n      \"power\": 100,\n      \"accuracy\": 90,\n      \"category\": \"Special\",\n      \"type\": \"Fire\",\n      \"effect\": \"Has a 30% chance to burn the target.\"\n    },\n    \"Dragon Fang\": {\n      \"power\": 85,\n      \"accuracy\": 95,\n      \"category\": \"Physical\",\n      \"type\": \"Dragon\",\n      \"effect\": \"Has a 20% chance to lower the target's Defense by 1 stage.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Chimeraon(PokemonBase):\n    _species='Chimeraon'\n    _types=['Fire','Dragon']\n    _gender='Neutral'\n    _ability=['Fiery Roar']\n    _move_1=('Blazing Breath',100,90,'Special','Fire',0,[])\n    _move_2=('Dragon Fang',85,95,'Physical','Dragon',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def get_type_effect(self):\n        move_type=self['act']['type']\n        target_types=self.target['types']\n        effect=1\n        for tt in target_types:\n            if move_type=='Fire' and tt=='Water':\n                effect*=2\n            else:\n                effect*=TYPEEFFECTIVENESS[move_type][tt]\n        return effect\n\n    def get_power(self):\n        power=self['act']['power']\n        if self['act']['type']=='Fire':\n            power*=1.5\n        return int(power*self.get_weather_power_mult())\n\n    def move_1(self): # Blazing Breath\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<0.3:\n                self.target.set_status('BRN')\n\n    def move_2(self): # Dragon Fang\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<0.2:\n                self.target.set_boost('def',-1)\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Goat Rush\": {\n    \"power\": 90,\n    \"accuracy\": 100,\n    \"category\": \"Physical\",\n    \"type\": \"Normal\",\n    \"effect\": \"Increases the user's Speed by 1 stage after use.\"\n  }\n}\n```",
        "response": "```python\n@Increment(Chimeraon,'_move_3')\ndef value():\n    return ('Goat Rush',90,100,'Physical','Normal',0,[])\n\n@Increment(Chimeraon)\ndef move_3(self): # Goat Rush\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        self.set_boost('spe',+1,'self')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Chimeraon\",\n  \"types\": [\n    \"Fire\",\n    \"Dragon\"\n  ],\n  \"gender\": \"Neutral\",\n  \"ability\": {\n    \"Fiery Roar\": \"Increases the power of Fire-type moves by 50%. The Fire-type moves cause x2 effect to Water-type Pokemon instead of x0.5.\"\n  },\n  \"moves\": {\n    \"Blazing Breath\": {\n      \"power\": 100,\n      \"accuracy\": 90,\n      \"category\": \"Special\",\n      \"type\": \"Fire\",\n      \"effect\": \"Has a 30% chance to burn the target.\"\n    },\n    \"Dragon Fang\": {\n      \"power\": 85,\n      \"accuracy\": 95,\n      \"category\": \"Physical\",\n      \"type\": \"Dragon\",\n      \"effect\": \"Has a 20% chance to lower the target's Defense by 1 stage.\"\n    },\n    \"Goat Rush\": {\n      \"power\": 90,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Normal\",\n      \"effect\": \"Increases the user's Speed by 1 stage after use.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Chimeraon(PokemonBase):\n    _species='Chimeraon'\n    _types=['Fire','Dragon']\n    _gender='Neutral'\n    _ability=['Fiery Roar']\n    _move_1=('Blazing Breath',100,90,'Special','Fire',0,[])\n    _move_2=('Dragon Fang',85,95,'Physical','Dragon',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def get_type_effect(self):\n        move_type=self['act']['type']\n        target_types=self.target['types']\n        effect=1\n        for tt in target_types:\n            if move_type=='Fire' and tt=='Water':\n                effect*=2\n            else:\n                effect*=TYPEEFFECTIVENESS[move_type][tt]\n        return effect\n\n    def get_power(self):\n        power=self['act']['power']\n        if self['act']['type']=='Fire':\n            power*=1.5\n        return int(power*self.get_weather_power_mult())\n\n    def move_1(self): # Blazing Breath\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<0.3:\n                self.target.set_status('BRN')\n\n    def move_2(self): # Dragon Fang\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<0.2:\n                self.target.set_boost('def',-1)\n\n@Increment(Chimeraon,'_move_3')\ndef value():\n    return ('Goat Rush',90,100,'Physical','Normal',0,[])\n\n@Increment(Chimeraon)\ndef move_3(self): # Goat Rush\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        self.set_boost('spe',+1,'self')\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Serpent Venom\": {\n    \"power\": 70,\n    \"accuracy\": 100,\n    \"category\": \"Special\",\n    \"type\": \"Poison\",\n    \"effect\": \"Has a 50% chance to poison the target. If the target is already poisoned, deals double damage.\"\n  }\n}\n```",
        "response": "```python\n@Increment(Chimeraon,'_move_4')\ndef value():\n    return ('Serpent Venom',70,100,'Special','Poison',0,[])\n\n@Increment(Chimeraon)\ndef move_4(self): # Serpent Venom\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint():\n            if self.target.isstatus('PSN'):\n                damage*=2\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<0.5:\n                self.target.set_status('PSN')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Chimeraon\",\n  \"types\": [\n    \"Fire\",\n    \"Dragon\"\n  ],\n  \"gender\": \"Neutral\",\n  \"ability\": {\n    \"Fiery Roar\": \"Increases the power of Fire-type moves by 50%. The Fire-type moves cause x2 effect to Water-type Pokemon instead of x0.5.\"\n  },\n  \"moves\": {\n    \"Blazing Breath\": {\n      \"power\": 100,\n      \"accuracy\": 90,\n      \"category\": \"Special\",\n      \"type\": \"Fire\",\n      \"effect\": \"Has a 30% chance to burn the target.\"\n    },\n    \"Dragon Fang\": {\n      \"power\": 85,\n      \"accuracy\": 95,\n      \"category\": \"Physical\",\n      \"type\": \"Dragon\",\n      \"effect\": \"Has a 20% chance to lower the target's Defense by 1 stage.\"\n    },\n    \"Goat Rush\": {\n      \"power\": 90,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Normal\",\n      \"effect\": \"Increases the user's Speed by 1 stage after use.\"\n    },\n    \"Serpent Venom\": {\n      \"power\": 70,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Poison\",\n      \"effect\": \"Has a 50% chance to poison the target. If the target is already poisoned, deals double damage.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Chimeraon(PokemonBase):\n    _species='Chimeraon'\n    _types=['Fire','Dragon']\n    _gender='Neutral'\n    _ability=['Fiery Roar']\n    _move_1=('Blazing Breath',100,90,'Special','Fire',0,[])\n    _move_2=('Dragon Fang',85,95,'Physical','Dragon',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def get_type_effect(self):\n        move_type=self['act']['type']\n        target_types=self.target['types']\n        effect=1\n        for tt in target_types:\n            if move_type=='Fire' and tt=='Water':\n                effect*=2\n            else:\n                effect*=TYPEEFFECTIVENESS[move_type][tt]\n        return effect\n\n    def get_power(self):\n        power=self['act']['power']\n        if self['act']['type']=='Fire':\n            power*=1.5\n        return int(power*self.get_weather_power_mult())\n\n    def move_1(self): # Blazing Breath\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<0.3:\n                self.target.set_status('BRN')\n\n    def move_2(self): # Dragon Fang\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<0.2:\n                self.target.set_boost('def',-1)\n\n@Increment(Chimeraon,'_move_3')\ndef value():\n    return ('Goat Rush',90,100,'Physical','Normal',0,[])\n\n@Increment(Chimeraon)\ndef move_3(self): # Goat Rush\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        self.set_boost('spe',+1,'self')\n\n@Increment(Chimeraon,'_move_4')\ndef value():\n    return ('Serpent Venom',70,100,'Special','Poison',0,[])\n\n@Increment(Chimeraon)\ndef move_4(self): # Serpent Venom\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint():\n            if self.target.isstatus('PSN'):\n                damage*=2\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<0.5:\n                self.target.set_status('PSN')\n```\n\nThis role is gonna learn a new ability:\n```json\n{\n  \"Venomous Strike\": \"Has a 30% chance to poison the attacker when hit by a contact move.\"\n}\n```",
        "response": "```python\n@Increment(Chimeraon,'_ability')\ndef value():\n    return ['Fiery Roar','Venomous Strike']\n\n@Increment(Chimeraon)\ndef _take_damage_attack(self,x):\n    self.register_act_taken()\n    self.state['hp']=max(0,self['hp']-x)\n    if self['act_taken'] and 'contact' in self['act_taken']['property']:\n        if rnd()<0.3:\n            self.target.set_status('PSN')\n    if self['hp']==0:\n        self.state['status']='FNT'\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Chirona\",\n  \"types\": [\n    \"Psychic\",\n    \"Ground\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Wise Mentor\": \"Type effect of Psychic-type and Ground-type moves is always 1.\"\n  },\n  \"moves\": {\n    \"Healing Touch\": {\n      \"power\": 0,\n      \"accuracy\": 100,\n      \"category\": \"Status\",\n      \"type\": \"Psychic\",\n      \"effect\": \"Restores 10% of the target's max HP but removes the user's status conditions.\"\n    },\n    \"Nature Wrath\": {\n      \"power\": 100,\n      \"accuracy\": 85,\n      \"category\": \"Special\",\n      \"type\": \"Ground\",\n      \"effect\": \"Has a 30% chance to lower the target's Speed by 1 stage.\"\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass Chirona(PokemonBase):\n    _species='Chirona'\n    _types=['Psychic','Ground']\n    _gender='Male'\n    _ability=['Wise Mentor']\n    _move_1=('Healing Touch',0,100,'Status','Psychic',0,[])\n    _move_2=('Nature Wrath',100,85,'Special','Ground',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def get_type_effect(self):\n        if self['act']['type'] in ['Psychic','Ground']:\n            return 1\n        move_type=self['act']['type']\n        target_types=self.target['types']\n        effect=1\n        for tt in target_types:\n            effect*=TYPEEFFECTIVENESS[move_type][tt]\n        return effect\n\n    def move_1(self): # Healing Touch\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            self.target.restore(self.target['max_hp']//10,'heal')\n            self.state['status']=None\n\n    def move_2(self): # Nature Wrath\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100:\n                self.target.set_boost('spe',-1)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Chirona\",\n  \"types\": [\n    \"Psychic\",\n    \"Ground\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Wise Mentor\": \"Type effect of Psychic-type and Ground-type moves is always 1.\"\n  },\n  \"moves\": {\n    \"Healing Touch\": {\n      \"power\": 0,\n      \"accuracy\": 100,\n      \"category\": \"Status\",\n      \"type\": \"Psychic\",\n      \"effect\": \"Restores 10% of the target's max HP but removes the user's status conditions.\"\n    },\n    \"Nature Wrath\": {\n      \"power\": 100,\n      \"accuracy\": 85,\n      \"category\": \"Special\",\n      \"type\": \"Ground\",\n      \"effect\": \"Has a 30% chance to lower the target's Speed by 1 stage.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Chirona(PokemonBase):\n    _species='Chirona'\n    _types=['Psychic','Ground']\n    _gender='Male'\n    _ability=['Wise Mentor']\n    _move_1=('Healing Touch',0,100,'Status','Psychic',0,[])\n    _move_2=('Nature Wrath',100,85,'Special','Ground',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def get_type_effect(self):\n        if self['act']['type'] in ['Psychic','Ground']:\n            return 1\n        move_type=self['act']['type']\n        target_types=self.target['types']\n        effect=1\n        for tt in target_types:\n            effect*=TYPEEFFECTIVENESS[move_type][tt]\n        return effect\n\n    def move_1(self): # Healing Touch\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            self.target.restore(self.target['max_hp']//10,'heal')\n            self.state['status']=None\n\n    def move_2(self): # Nature Wrath\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100:\n                self.target.set_boost('spe',-1)\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Philosopher Strike\": {\n    \"power\": 90,\n    \"accuracy\": 100,\n    \"category\": \"Physical\",\n    \"type\": \"Psychic\",\n    \"effect\": \"The user's next move deals double damage if the opponent has a status condition.\"\n  }\n}\n```",
        "response": "```python\n@Increment(Chirona,'_move_3')\ndef value():\n    return ('Philosopher Strike',90,100,'Physical','Psychic',0,[])\n\n@Increment(Chirona)\ndef move_3(self): # Philosopher Strike\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if self.target['status']:\n            self.set_condition('DOUBLE_DAMAGE',counter=0)\n\n@Increment(Chirona)\ndef get_other_mult(self):\n    mult=1\n    if self.isstatus('BRN') and self['act']['category']=='Physical':\n        mult*=0.5\n    if self['conditions'].get('DOUBLE_DAMAGE'):\n        mult*=2\n    return mult\n\n@Increment(Chirona)\ndef endturn(self):\n    if self['conditions'].get('DOUBLE_DAMAGE'):\n        self['conditions']['DOUBLE_DAMAGE']['counter']+=1\n        if self['conditions']['DOUBLE_DAMAGE']['counter']==2:\n            del self['conditions']['DOUBLE_DAMAGE']\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Chirona\",\n  \"types\": [\n    \"Psychic\",\n    \"Ground\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Wise Mentor\": \"Type effect of Psychic-type and Ground-type moves is always 1.\"\n  },\n  \"moves\": {\n    \"Healing Touch\": {\n      \"power\": 0,\n      \"accuracy\": 100,\n      \"category\": \"Status\",\n      \"type\": \"Psychic\",\n      \"effect\": \"Restores 10% of the target's max HP but removes the user's status conditions.\"\n    },\n    \"Nature Wrath\": {\n      \"power\": 100,\n      \"accuracy\": 85,\n      \"category\": \"Special\",\n      \"type\": \"Ground\",\n      \"effect\": \"Has a 30% chance to lower the target's Speed by 1 stage.\"\n    },\n    \"Philosopher Strike\": {\n      \"power\": 90,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Psychic\",\n      \"effect\": \"The user's next move deals double damage if the opponent has a status condition.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Chirona(PokemonBase):\n    _species='Chirona'\n    _types=['Psychic','Ground']\n    _gender='Male'\n    _ability=['Wise Mentor']\n    _move_1=('Healing Touch',0,100,'Status','Psychic',0,[])\n    _move_2=('Nature Wrath',100,85,'Special','Ground',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def get_type_effect(self):\n        if self['act']['type'] in ['Psychic','Ground']:\n            return 1\n        move_type=self['act']['type']\n        target_types=self.target['types']\n        effect=1\n        for tt in target_types:\n            effect*=TYPEEFFECTIVENESS[move_type][tt]\n        return effect\n\n    def move_1(self): # Healing Touch\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            self.target.restore(self.target['max_hp']//10,'heal')\n            self.state['status']=None\n\n    def move_2(self): # Nature Wrath\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100:\n                self.target.set_boost('spe',-1)\n\n@Increment(Chirona,'_move_3')\ndef value():\n    return ('Philosopher Strike',90,100,'Physical','Psychic',0,[])\n\n@Increment(Chirona)\ndef move_3(self): # Philosopher Strike\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if self.target['status']:\n            self.set_condition('DOUBLE_DAMAGE',counter=0)\n\n@Increment(Chirona)\ndef get_other_mult(self):\n    mult=1\n    if self.isstatus('BRN') and self['act']['category']=='Physical':\n        mult*=0.5\n    if self['conditions'].get('DOUBLE_DAMAGE'):\n        mult*=2\n    return mult\n\n@Increment(Chirona)\ndef endturn(self):\n    if self['conditions'].get('DOUBLE_DAMAGE'):\n        self['conditions']['DOUBLE_DAMAGE']['counter']+=1\n        if self['conditions']['DOUBLE_DAMAGE']['counter']==2:\n            del self['conditions']['DOUBLE_DAMAGE']\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Cave Shield\": {\n    \"power\": 0,\n    \"accuracy\": 100000,\n    \"category\": \"Status\",\n    \"type\": \"Ground\",\n    \"effect\": \"Raises the user's Defense and Special Defense by 1 stage.\"\n  }\n}\n```",
        "response": "```python\n@Increment(Chirona,'_move_4')\ndef value():\n    return ('Cave Shield',0,100000,'Status','Ground',0,[])\n\n@Increment(Chirona)\ndef move_4(self): # Cave Shield\n    self.set_boost('def',+1,'self')\n    self.set_boost('spd',+1,'self')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Chirona\",\n  \"types\": [\n    \"Psychic\",\n    \"Ground\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Wise Mentor\": \"Type effect of Psychic-type and Ground-type moves is always 1.\"\n  },\n  \"moves\": {\n    \"Healing Touch\": {\n      \"power\": 0,\n      \"accuracy\": 100,\n      \"category\": \"Status\",\n      \"type\": \"Psychic\",\n      \"effect\": \"Restores 10% of the target's max HP but removes the user's status conditions.\"\n    },\n    \"Nature Wrath\": {\n      \"power\": 100,\n      \"accuracy\": 85,\n      \"category\": \"Special\",\n      \"type\": \"Ground\",\n      \"effect\": \"Has a 30% chance to lower the target's Speed by 1 stage.\"\n    },\n    \"Philosopher Strike\": {\n      \"power\": 90,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Psychic\",\n      \"effect\": \"The user's next move deals double damage if the opponent has a status condition.\"\n    },\n    \"Cave Shield\": {\n      \"power\": 0,\n      \"accuracy\": 100000,\n      \"category\": \"Status\",\n      \"type\": \"Ground\",\n      \"effect\": \"Raises the user's Defense and Special Defense by 1 stage.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Chirona(PokemonBase):\n    _species='Chirona'\n    _types=['Psychic','Ground']\n    _gender='Male'\n    _ability=['Wise Mentor']\n    _move_1=('Healing Touch',0,100,'Status','Psychic',0,[])\n    _move_2=('Nature Wrath',100,85,'Special','Ground',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def get_type_effect(self):\n        if self['act']['type'] in ['Psychic','Ground']:\n            return 1\n        move_type=self['act']['type']\n        target_types=self.target['types']\n        effect=1\n        for tt in target_types:\n            effect*=TYPEEFFECTIVENESS[move_type][tt]\n        return effect\n\n    def move_1(self): # Healing Touch\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            self.target.restore(self.target['max_hp']//10,'heal')\n            self.state['status']=None\n\n    def move_2(self): # Nature Wrath\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100:\n                self.target.set_boost('spe',-1)\n\n@Increment(Chirona,'_move_3')\ndef value():\n    return ('Philosopher Strike',90,100,'Physical','Psychic',0,[])\n\n@Increment(Chirona)\ndef move_3(self): # Philosopher Strike\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if self.target['status']:\n            self.set_condition('DOUBLE_DAMAGE',counter=0)\n\n@Increment(Chirona)\ndef get_other_mult(self):\n    mult=1\n    if self.isstatus('BRN') and self['act']['category']=='Physical':\n        mult*=0.5\n    if self['conditions'].get('DOUBLE_DAMAGE'):\n        mult*=2\n    return mult\n\n@Increment(Chirona)\ndef endturn(self):\n    if self['conditions'].get('DOUBLE_DAMAGE'):\n        self['conditions']['DOUBLE_DAMAGE']['counter']+=1\n        if self['conditions']['DOUBLE_DAMAGE']['counter']==2:\n            del self['conditions']['DOUBLE_DAMAGE']\n\n@Increment(Chirona,'_move_4')\ndef value():\n    return ('Cave Shield',0,100000,'Status','Ground',0,[])\n\n@Increment(Chirona)\ndef move_4(self): # Cave Shield\n    self.set_boost('def',+1,'self')\n    self.set_boost('spd',+1,'self')\n```\n\nThis role is gonna learn a new ability:\n```json\n{\n  \"Nature Blessing\": \"Heals 1/8 of its maximum HP at the end of each turn when in grassy terrain.\"\n}\n```",
        "response": "```python\n@Increment(Chirona,'_ability')\ndef value():\n    return ['Wise Mentor','Nature Blessing']\n\n@Increment(Chirona)\ndef endturn(self):\n    if self.env.get('GRASSY_TERRAIN'):\n        self.restore(self['max_hp']//8,'heal')\n    if self['conditions'].get('DOUBLE_DAMAGE'):\n        self['conditions']['DOUBLE_DAMAGE']['counter']+=1\n        if self['conditions']['DOUBLE_DAMAGE']['counter']==2:\n            del self['conditions']['DOUBLE_DAMAGE']\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Chromeleon\",\n  \"types\": [\n    \"Normal\"\n  ],\n  \"gender\": \"Unknown\",\n  \"ability\": {\n    \"Adaptive Camouflage\": \"50% chance for this Pokemon to change to the type of a move it is hit by.\"\n  },\n  \"moves\": {\n    \"Aqua Slash\": {\n      \"power\": 80,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Water\",\n      \"effect\": \"30% chance to make the target flinch.\"\n    },\n    \"Ghostly Claw\": {\n      \"power\": 70,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Ghost\",\n      \"effect\": \"20% chance to lower the target's Speed by 1 stage.\",\n      \"property\": [\n        \"contact\"\n      ]\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass Chromeleon(PokemonBase):\n    _species='Chromeleon'\n    _types=['Normal']\n    _gender='Unknown'\n    _ability=['Adaptive Camouflage']\n    _move_1=('Aqua Slash',80,100,'Physical','Water',0,[])\n    _move_2=('Ghostly Claw',70,100,'Physical','Ghost',0,['contact'])\n    def __init__(self):\n        super().__init__()\n\n    def _take_damage_attack(self,x):\n        self.register_act_taken()\n        self.state['hp']=max(0,self['hp']-x)\n        if self['hp']==0:\n            self.state['status']='FNT'\n            return\n        if rnd()<0.5:\n            self.state['types']=[self['act_taken']['type']]\n    \n    def move_1(self): # Aqua Slash\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<0.3:\n                self.target.set_condition('FLINCH',counter=0)\n\n    def move_2(self): # Ghostly Claw  \n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<0.2:\n                self.target.set_boost('spe',-1)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Cloyster\",\n  \"types\": [\n    \"Water\",\n    \"Ice\"\n  ],\n  \"gender\": \"Female\",\n  \"ability\": {\n    \"Skill Link\": \"This Pokemon's multi-hit moves always hit the maximum number of times.\"\n  },\n  \"moves\": {\n    \"Rock Blast\": {\n      \"power\": 25,\n      \"accuracy\": 90,\n      \"category\": \"Physical\",\n      \"type\": \"Rock\",\n      \"effect\": \"Hits 2-5 times. Each hit has a 50% chance to be the last.\"\n    },\n    \"Icicle Spear\": {\n      \"power\": 25,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Ice\",\n      \"effect\": \"Hits 2-5 times. Each hit has a 50% chance to be the last.\"\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass Cloyster(PokemonBase):\n    _species='Cloyster'\n    _types=['Water','Ice']\n    _gender='Female'\n    _ability=['Skill Link']\n    _move_1=('Rock Blast',25,90,'Physical','Rock',0,[])\n    _move_2=('Icicle Spear',25,100,'Physical','Ice',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def move_1(self): # Rock Blast\n        hit=True; i=0\n        while hit and i<5:\n            damage_ret=self.get_damage()\n            if damage_ret['miss']: break\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            i+=1; hit=False if self.target.isfaint() else True\n\n    def move_2(self): # Icicle Spear\n        hit=True; i=0\n        while hit and i<5:\n            damage_ret=self.get_damage()\n            if damage_ret['miss']: break\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            i+=1; hit=False if self.target.isfaint() else True\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Cloyster\",\n  \"types\": [\n    \"Water\",\n    \"Ice\"\n  ],\n  \"gender\": \"Female\",\n  \"ability\": {\n    \"Skill Link\": \"This Pokemon's multi-hit moves always hit the maximum number of times.\"\n  },\n  \"moves\": {\n    \"Rock Blast\": {\n      \"power\": 25,\n      \"accuracy\": 90,\n      \"category\": \"Physical\",\n      \"type\": \"Rock\",\n      \"effect\": \"Hits 2-5 times. Each hit has a 50% chance to be the last.\"\n    },\n    \"Icicle Spear\": {\n      \"power\": 25,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Ice\",\n      \"effect\": \"Hits 2-5 times. Each hit has a 50% chance to be the last.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Cloyster(PokemonBase):\n    _species='Cloyster'\n    _types=['Water','Ice']\n    _gender='Female'\n    _ability=['Skill Link']\n    _move_1=('Rock Blast',25,90,'Physical','Rock',0,[])\n    _move_2=('Icicle Spear',25,100,'Physical','Ice',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def move_1(self): # Rock Blast\n        hit=True; i=0\n        while hit and i<5:\n            damage_ret=self.get_damage()\n            if damage_ret['miss']: break\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            i+=1; hit=False if self.target.isfaint() else True\n\n    def move_2(self): # Icicle Spear\n        hit=True; i=0\n        while hit and i<5:\n            damage_ret=self.get_damage()\n            if damage_ret['miss']: break\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            i+=1; hit=False if self.target.isfaint() else True\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Ice Spinner\": {\n    \"power\": 80,\n    \"accuracy\": 100,\n    \"category\": \"Physical\",\n    \"type\": \"Ice\",\n    \"effect\": \"Ends the effects of Electric Terrain, Grassy Terrain, Misty Terrain, and Psychic Terrain.\",\n    \"property\": [\n      \"contact\"\n    ]\n  }\n}\n```",
        "response": "```python\n@Increment(Cloyster,'_move_3')\ndef value():\n    return ('Ice Spinner',80,100,'Physical','Ice',0,['contact'])\n\n@Increment(Cloyster)\ndef move_3(self): # Ice Spinner\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        for t in ['PSYCHIC_TERRAIN','ELECTRIC_TERRAIN','GRASSY_TERRAIN','MISTY_TERRAIN']:\n            if self.env.get(t):\n                del self.env[t]\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Corviknight\",\n  \"types\": [\n    \"Flying\",\n    \"Steel\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Mirror Armor\": \"Bounces back only the stat-lowering effects of moves.\"\n  },\n  \"moves\": {\n    \"Wing Slash\": {\n      \"power\": 85,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Flying\",\n      \"effect\": \"No additional effect.\"\n    },\n    \"Steel Wing\": {\n      \"power\": 70,\n      \"accuracy\": 90,\n      \"category\": \"Physical\",\n      \"type\": \"Steel\",\n      \"effect\": \"Has a 10% chance to raise the user's Defense by 1 stage.\"\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass Corviknight(PokemonBase):\n    _species='Corviknight'\n    _types=['Flying','Steel']\n    _gender='Male'\n    _ability=['Mirror Armor']\n    _move_1=('Wing Slash',85,100,'Physical','Flying',0,[])\n    _move_2=('Steel Wing',70,90,'Physical','Steel',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def set_boost(self,key,x,from_='target'):\n        if x<0 and from_=='target':\n            self.target.set_boost(key,x)\n            return\n        bar=6 if key in ['atk','def','spa','spd','spe'] else 3\n        if x>0:\n            self['boosts'][key]=min(bar,self['boosts'][key]+x)\n        else:\n            self['boosts'][key]=max(-bar,self['boosts'][key]+x)\n\n    def move_1(self): # Wing Slash\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n    \n    def move_2(self): # Steel Wing\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<10/100:\n                self.set_boost('def',+1,'self')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Corviknight\",\n  \"types\": [\n    \"Flying\",\n    \"Steel\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Mirror Armor\": \"Bounces back only the stat-lowering effects of moves.\"\n  },\n  \"moves\": {\n    \"Wing Slash\": {\n      \"power\": 85,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Flying\",\n      \"effect\": \"No additional effect.\"\n    },\n    \"Steel Wing\": {\n      \"power\": 70,\n      \"accuracy\": 90,\n      \"category\": \"Physical\",\n      \"type\": \"Steel\",\n      \"effect\": \"Has a 10% chance to raise the user's Defense by 1 stage.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Corviknight(PokemonBase):\n    _species='Corviknight'\n    _types=['Flying','Steel']\n    _gender='Male'\n    _ability=['Mirror Armor']\n    _move_1=('Wing Slash',85,100,'Physical','Flying',0,[])\n    _move_2=('Steel Wing',70,90,'Physical','Steel',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def set_boost(self,key,x,from_='target'):\n        if x<0 and from_=='target':\n            self.target.set_boost(key,x)\n            return\n        bar=6 if key in ['atk','def','spa','spd','spe'] else 3\n        if x>0:\n            self['boosts'][key]=min(bar,self['boosts'][key]+x)\n        else:\n            self['boosts'][key]=max(-bar,self['boosts'][key]+x)\n\n    def move_1(self): # Wing Slash\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n    \n    def move_2(self): # Steel Wing\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<10/100:\n                self.set_boost('def',+1,'self')\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Mirror Shield\": {\n    \"power\": 0,\n    \"accuracy\": 100000,\n    \"category\": \"Status\",\n    \"type\": \"Steel\",\n    \"effect\": \"Raises the user's Defense and Special Defense by 1 stage.\"\n  }\n}\n```",
        "response": "```python\n@Increment(Corviknight,'_move_3')\ndef value():\n    return ('Mirror Shield',0,100000,'Status','Steel',0,[])\n\n@Increment(Corviknight)\ndef move_3(self): # Mirror Shield\n    self.set_boost('def',+1,'self')\n    self.set_boost('spd',+1,'self')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Corviknight\",\n  \"types\": [\n    \"Flying\",\n    \"Steel\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Mirror Armor\": \"Bounces back only the stat-lowering effects of moves.\"\n  },\n  \"moves\": {\n    \"Wing Slash\": {\n      \"power\": 85,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Flying\",\n      \"effect\": \"No additional effect.\"\n    },\n    \"Steel Wing\": {\n      \"power\": 70,\n      \"accuracy\": 90,\n      \"category\": \"Physical\",\n      \"type\": \"Steel\",\n      \"effect\": \"Has a 10% chance to raise the user's Defense by 1 stage.\"\n    },\n    \"Mirror Shield\": {\n      \"power\": 0,\n      \"accuracy\": 100000,\n      \"category\": \"Status\",\n      \"type\": \"Steel\",\n      \"effect\": \"Raises the user's Defense and Special Defense by 1 stage.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Corviknight(PokemonBase):\n    _species='Corviknight'\n    _types=['Flying','Steel']\n    _gender='Male'\n    _ability=['Mirror Armor']\n    _move_1=('Wing Slash',85,100,'Physical','Flying',0,[])\n    _move_2=('Steel Wing',70,90,'Physical','Steel',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def set_boost(self,key,x,from_='target'):\n        if x<0 and from_=='target':\n            self.target.set_boost(key,x)\n            return\n        bar=6 if key in ['atk','def','spa','spd','spe'] else 3\n        if x>0:\n            self['boosts'][key]=min(bar,self['boosts'][key]+x)\n        else:\n            self['boosts'][key]=max(-bar,self['boosts'][key]+x)\n\n    def move_1(self): # Wing Slash\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n    \n    def move_2(self): # Steel Wing\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<10/100:\n                self.set_boost('def',+1,'self')\n\n@Increment(Corviknight,'_move_3')\ndef value():\n    return ('Mirror Shield',0,100000,'Status','Steel',0,[])\n\n@Increment(Corviknight)\ndef move_3(self): # Mirror Shield\n    self.set_boost('def',+1,'self')\n    self.set_boost('spd',+1,'self')\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Sky Dive\": {\n    \"power\": 120,\n    \"accuracy\": 75,\n    \"category\": \"Physical\",\n    \"type\": \"Flying\",\n    \"effect\": \"User takes recoil damage equal to 1/3 of the damage dealt.\"\n  }\n}\n```",
        "response": "```python\n@Increment(Corviknight,'_move_4')\ndef value():\n    return ('Sky Dive',120,75,'Physical','Flying',0,[])\n\n@Increment(Corviknight)\ndef move_4(self): # Sky Dive\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        recoil=int(damage/3)\n        self.take_damage(recoil,'recoil')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Corviknight\",\n  \"types\": [\n    \"Flying\",\n    \"Steel\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Mirror Armor\": \"Bounces back only the stat-lowering effects of moves.\"\n  },\n  \"moves\": {\n    \"Wing Slash\": {\n      \"power\": 85,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Flying\",\n      \"effect\": \"No additional effect.\"\n    },\n    \"Steel Wing\": {\n      \"power\": 70,\n      \"accuracy\": 90,\n      \"category\": \"Physical\",\n      \"type\": \"Steel\",\n      \"effect\": \"Has a 10% chance to raise the user's Defense by 1 stage.\"\n    },\n    \"Mirror Shield\": {\n      \"power\": 0,\n      \"accuracy\": 100000,\n      \"category\": \"Status\",\n      \"type\": \"Steel\",\n      \"effect\": \"Raises the user's Defense and Special Defense by 1 stage.\"\n    },\n    \"Sky Dive\": {\n      \"power\": 120,\n      \"accuracy\": 75,\n      \"category\": \"Physical\",\n      \"type\": \"Flying\",\n      \"effect\": \"User takes recoil damage equal to 1/3 of the damage dealt.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Corviknight(PokemonBase):\n    _species='Corviknight'\n    _types=['Flying','Steel']\n    _gender='Male'\n    _ability=['Mirror Armor']\n    _move_1=('Wing Slash',85,100,'Physical','Flying',0,[])\n    _move_2=('Steel Wing',70,90,'Physical','Steel',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def set_boost(self,key,x,from_='target'):\n        if x<0 and from_=='target':\n            self.target.set_boost(key,x)\n            return\n        bar=6 if key in ['atk','def','spa','spd','spe'] else 3\n        if x>0:\n            self['boosts'][key]=min(bar,self['boosts'][key]+x)\n        else:\n            self['boosts'][key]=max(-bar,self['boosts'][key]+x)\n\n    def move_1(self): # Wing Slash\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n    \n    def move_2(self): # Steel Wing\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<10/100:\n                self.set_boost('def',+1,'self')\n\n@Increment(Corviknight,'_move_3')\ndef value():\n    return ('Mirror Shield',0,100000,'Status','Steel',0,[])\n\n@Increment(Corviknight)\ndef move_3(self): # Mirror Shield\n    self.set_boost('def',+1,'self')\n    self.set_boost('spd',+1,'self')\n\n@Increment(Corviknight,'_move_4')\ndef value():\n    return ('Sky Dive',120,75,'Physical','Flying',0,[])\n\n@Increment(Corviknight)\ndef move_4(self): # Sky Dive\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        recoil=int(damage/3)\n        self.take_damage(recoil,'recoil')\n```\n\nThis role is gonna learn a new ability:\n```json\n{\n  \"Steel Clad\": \"Reduces damage taken from super-effective moves by 25%.\"\n}\n```",
        "response": "```python\n@Increment(Corviknight,'_ability')\ndef value():\n    return ['Mirror Armor','Steel Clad']\n\n@Increment(Corviknight)\ndef _take_damage_attack(self,x):\n    self.register_act_taken()\n    if 'type_efc' in self['act_taken'] and self['act_taken']['type_efc']>1:\n        x=int(0.75*x)\n    self.state['hp']=max(0,self['hp']-x)\n    if self['hp']==0:\n        self.state['status']='FNT'\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Corviknight\",\n  \"types\": [\n    \"Flying\",\n    \"Steel\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Mirror Armor\": \"Bounces back only the stat-lowering effects of moves.\",\n    \"Steel Clad\": \"Reduces damage taken from super-effective moves by 25%.\"\n  },\n  \"moves\": {\n    \"Wing Slash\": {\n      \"power\": 85,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Flying\",\n      \"effect\": \"No additional effect.\"\n    },\n    \"Steel Wing\": {\n      \"power\": 70,\n      \"accuracy\": 90,\n      \"category\": \"Physical\",\n      \"type\": \"Steel\",\n      \"effect\": \"Has a 10% chance to raise the user's Defense by 1 stage.\"\n    },\n    \"Mirror Shield\": {\n      \"power\": 0,\n      \"accuracy\": 100000,\n      \"category\": \"Status\",\n      \"type\": \"Steel\",\n      \"effect\": \"Raises the user's Defense and Special Defense by 1 stage.\"\n    },\n    \"Sky Dive\": {\n      \"power\": 120,\n      \"accuracy\": 75,\n      \"category\": \"Physical\",\n      \"type\": \"Flying\",\n      \"effect\": \"User takes recoil damage equal to 1/3 of the damage dealt.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Corviknight(PokemonBase):\n    _species='Corviknight'\n    _types=['Flying','Steel']\n    _gender='Male'\n    _ability=['Mirror Armor']\n    _move_1=('Wing Slash',85,100,'Physical','Flying',0,[])\n    _move_2=('Steel Wing',70,90,'Physical','Steel',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def set_boost(self,key,x,from_='target'):\n        if x<0 and from_=='target':\n            self.target.set_boost(key,x)\n            return\n        bar=6 if key in ['atk','def','spa','spd','spe'] else 3\n        if x>0:\n            self['boosts'][key]=min(bar,self['boosts'][key]+x)\n        else:\n            self['boosts'][key]=max(-bar,self['boosts'][key]+x)\n\n    def move_1(self): # Wing Slash\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n    \n    def move_2(self): # Steel Wing\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<10/100:\n                self.set_boost('def',+1,'self')\n\n@Increment(Corviknight,'_move_3')\ndef value():\n    return ('Mirror Shield',0,100000,'Status','Steel',0,[])\n\n@Increment(Corviknight)\ndef move_3(self): # Mirror Shield\n    self.set_boost('def',+1,'self')\n    self.set_boost('spd',+1,'self')\n\n@Increment(Corviknight,'_move_4')\ndef value():\n    return ('Sky Dive',120,75,'Physical','Flying',0,[])\n\n@Increment(Corviknight)\ndef move_4(self): # Sky Dive\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        recoil=int(damage/3)\n        self.take_damage(recoil,'recoil')\n\n@Increment(Corviknight,'_ability')\ndef value():\n    return ['Mirror Armor','Steel Clad']\n\n@Increment(Corviknight)\ndef _take_damage_attack(self,x):\n    self.register_act_taken()\n    if 'type_efc' in self['act_taken'] and self['act_taken']['type_efc']>1:\n        x=int(0.75*x)\n    self.state['hp']=max(0,self['hp']-x)\n    if self['hp']==0:\n        self.state['status']='FNT'\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Body Press\": {\n    \"power\": 80,\n    \"accuracy\": 100,\n    \"category\": \"Physical\",\n    \"type\": \"Fighting\",\n    \"effect\": \"Damage is calculated using the user's Defense stat as its Attack, including stat stage changes.\",\n    \"property\": [\n      \"contact\"\n    ]\n  }\n}\n```",
        "response": "```python\n@Increment(Corviknight,'_move_5')\ndef value():\n    return ('Body Press',80,100,'Physical','Fighting',0,['contact'])\n\n@Increment(Corviknight)\ndef move_5(self): # Body Press\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n\n@Increment(Corviknight)\ndef _get_base_damage(self,power,crit):\n    if self['act']['id']=='Body Press':\n        atk_boost=self['boosts']['def']\n    else:\n        atk_boost=self['boosts']['atk'] if self['act']['category']=='Physical' else self['boosts']['spa']\n    def_boost=self.target['boosts']['def'] if self['act']['category']=='Physical' else self.target['boosts']['spd']\n    \n    if crit:\n        atk_boost=max(0,atk_boost)\n        def_boost=min(0,def_boost)\n\n    if self['act']['id']=='Body Press':\n        attack=self.get_stat('def',atk_boost)\n    else:\n        attack=self.get_stat('atk' if self['act']['category']=='Physical' else 'spa',atk_boost)\n    defense=self.target.get_stat('def' if self['act']['category']=='Physical' else 'spd',def_boost)\n\n    level=100\n    base_damage=int(int(int(int(2*level/5+2)*power*attack)/defense)/50)+2\n\n    return base_damage\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Cyberagon\",\n  \"types\": [\n    \"Steel\",\n    \"Dragon\"\n  ],\n  \"gender\": \"Neutral\",\n  \"ability\": {\n    \"Material Gain\": \"Gains 1 Material at the end of each turn. Each Material increases the power of its moves by 10%.\"\n  },\n  \"moves\": {\n    \"Infinity Cannon\": {\n      \"power\": 100,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Steel\",\n      \"effect\": \"The user gains 1 Material after using this move.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Dragon Pulse\": {\n      \"power\": 85,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Dragon\",\n      \"effect\": \"Has a 20% chance to lower the target's Special Defense by 1 stage.\"\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass Cyberagon(PokemonBase):\n    _species='Cyberagon'\n    _types=['Steel','Dragon']\n    _gender='Neutral'\n    _ability=['Material Gain']\n    _move_1=('Infinity Cannon',100,100,'Special','Steel',0,['contact'])\n    _move_2=('Dragon Pulse',85,100,'Special','Dragon',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def onswitch(self):\n        self.set_condition('MATERIAL',counter=0)\n\n    def endturn(self):\n        self['conditions']['MATERIAL']['counter']+=1\n\n    def get_power(self):\n        power=self['act']['power']\n        power*=1+(self['conditions']['MATERIAL']['counter']*0.1)\n        return int(power*self.get_weather_power_mult())\n\n    def move_1(self): # Infinity Cannon\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            self['conditions']['MATERIAL']['counter']+=1\n\n    def move_2(self): # Dragon Pulse\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<20/100:\n                self.target.set_boost('spd',-1)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Cyberagon\",\n  \"types\": [\n    \"Steel\",\n    \"Dragon\"\n  ],\n  \"gender\": \"Neutral\",\n  \"ability\": {\n    \"Material Gain\": \"Gains 1 Material at the end of each turn. Each Material increases the power of its moves by 10%.\"\n  },\n  \"moves\": {\n    \"Infinity Cannon\": {\n      \"power\": 100,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Steel\",\n      \"effect\": \"The user gains 1 Material after using this move.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Dragon Pulse\": {\n      \"power\": 85,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Dragon\",\n      \"effect\": \"Has a 20% chance to lower the target's Special Defense by 1 stage.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Cyberagon(PokemonBase):\n    _species='Cyberagon'\n    _types=['Steel','Dragon']\n    _gender='Neutral'\n    _ability=['Material Gain']\n    _move_1=('Infinity Cannon',100,100,'Special','Steel',0,['contact'])\n    _move_2=('Dragon Pulse',85,100,'Special','Dragon',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def onswitch(self):\n        self.set_condition('MATERIAL',counter=0)\n\n    def endturn(self):\n        self['conditions']['MATERIAL']['counter']+=1\n\n    def get_power(self):\n        power=self['act']['power']\n        power*=1+(self['conditions']['MATERIAL']['counter']*0.1)\n        return int(power*self.get_weather_power_mult())\n\n    def move_1(self): # Infinity Cannon\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            self['conditions']['MATERIAL']['counter']+=1\n\n    def move_2(self): # Dragon Pulse\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<20/100:\n                self.target.set_boost('spd',-1)\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Thunder Charge\": {\n    \"power\": 90,\n    \"accuracy\": 100,\n    \"category\": \"Special\",\n    \"type\": \"Electric\",\n    \"effect\": \"Has a 20% chance to paralyze the target.\",\n    \"property\": [\n      \"contact\"\n    ]\n  }\n}\n```",
        "response": "```python\n@Increment(Cyberagon,'_move_3')\ndef value():\n    return ('Thunder Charge',90,100,'Special','Electric',0,['contact'])\n\n@Increment(Cyberagon)\ndef move_3(self): # Thunder Charge\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint() and rnd()<20/100:\n            self.target.set_status('PAR')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Cyberagon\",\n  \"types\": [\n    \"Steel\",\n    \"Dragon\"\n  ],\n  \"gender\": \"Neutral\",\n  \"ability\": {\n    \"Material Gain\": \"Gains 1 Material at the end of each turn. Each Material increases the power of its moves by 10%.\"\n  },\n  \"moves\": {\n    \"Infinity Cannon\": {\n      \"power\": 100,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Steel\",\n      \"effect\": \"The user gains 1 Material after using this move.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Dragon Pulse\": {\n      \"power\": 85,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Dragon\",\n      \"effect\": \"Has a 20% chance to lower the target's Special Defense by 1 stage.\"\n    },\n    \"Thunder Charge\": {\n      \"power\": 90,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Electric\",\n      \"effect\": \"Has a 20% chance to paralyze the target.\",\n      \"property\": [\n        \"contact\"\n      ]\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Cyberagon(PokemonBase):\n    _species='Cyberagon'\n    _types=['Steel','Dragon']\n    _gender='Neutral'\n    _ability=['Material Gain']\n    _move_1=('Infinity Cannon',100,100,'Special','Steel',0,['contact'])\n    _move_2=('Dragon Pulse',85,100,'Special','Dragon',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def onswitch(self):\n        self.set_condition('MATERIAL',counter=0)\n\n    def endturn(self):\n        self['conditions']['MATERIAL']['counter']+=1\n\n    def get_power(self):\n        power=self['act']['power']\n        power*=1+(self['conditions']['MATERIAL']['counter']*0.1)\n        return int(power*self.get_weather_power_mult())\n\n    def move_1(self): # Infinity Cannon\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            self['conditions']['MATERIAL']['counter']+=1\n\n    def move_2(self): # Dragon Pulse\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<20/100:\n                self.target.set_boost('spd',-1)\n\n@Increment(Cyberagon,'_move_3')\ndef value():\n    return ('Thunder Charge',90,100,'Special','Electric',0,['contact'])\n\n@Increment(Cyberagon)\ndef move_3(self): # Thunder Charge\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint() and rnd()<20/100:\n            self.target.set_status('PAR')\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Barrier Break\": {\n    \"power\": 75,\n    \"accuracy\": 95,\n    \"category\": \"Physical\",\n    \"type\": \"Steel\",\n    \"effect\": \"This move ignores the stat change of the target's Special Defense during the attack.\",\n    \"property\": [\n      \"contact\"\n    ]\n  }\n}\n```",
        "response": "```python\n@Increment(Cyberagon,'_move_4')\ndef value():\n    return ('Barrier Break',75,95,'Physical','Steel',0,['contact'])\n\n@Increment(Cyberagon)\ndef move_4(self): # Barrier Break\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n\n@Increment(Cyberagon)\ndef _get_base_damage(self,power,crit):\n    atk_boost=self['boosts']['atk'] if self['act']['category']=='Physical' else self['boosts']['spa']\n    def_boost=self.target['boosts']['def'] if self['act']['category']=='Physical' else self.target['boosts']['spd']\n    \n    if crit:\n        atk_boost=max(0,atk_boost)\n        def_boost=min(0,def_boost)\n\n    attack=self.get_stat('atk' if self['act']['category']=='Physical' else 'spa',atk_boost)\n    if self['act']['id']=='Barrier Break':\n        defense=self.target.get_stat('spd',0)\n    else:\n        defense=self.target.get_stat('def' if self['act']['category']=='Physical' else 'spd',def_boost)\n\n    level=100\n    base_damage=int(int(int(int(2*level/5+2)*power*attack)/defense)/50)+2\n\n    return base_damage\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Cyberagon\",\n  \"types\": [\n    \"Steel\",\n    \"Dragon\"\n  ],\n  \"gender\": \"Neutral\",\n  \"ability\": {\n    \"Material Gain\": \"Gains 1 Material at the end of each turn. Each Material increases the power of its moves by 10%.\"\n  },\n  \"moves\": {\n    \"Infinity Cannon\": {\n      \"power\": 100,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Steel\",\n      \"effect\": \"The user gains 1 Material after using this move.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Dragon Pulse\": {\n      \"power\": 85,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Dragon\",\n      \"effect\": \"Has a 20% chance to lower the target's Special Defense by 1 stage.\"\n    },\n    \"Thunder Charge\": {\n      \"power\": 90,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Electric\",\n      \"effect\": \"Has a 20% chance to paralyze the target.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Barrier Break\": {\n      \"power\": 75,\n      \"accuracy\": 95,\n      \"category\": \"Physical\",\n      \"type\": \"Steel\",\n      \"effect\": \"This move ignores the stat change of the target's Special Defense during the attack.\",\n      \"property\": [\n        \"contact\"\n      ]\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Cyberagon(PokemonBase):\n    _species='Cyberagon'\n    _types=['Steel','Dragon']\n    _gender='Neutral'\n    _ability=['Material Gain']\n    _move_1=('Infinity Cannon',100,100,'Special','Steel',0,['contact'])\n    _move_2=('Dragon Pulse',85,100,'Special','Dragon',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def onswitch(self):\n        self.set_condition('MATERIAL',counter=0)\n\n    def endturn(self):\n        self['conditions']['MATERIAL']['counter']+=1\n\n    def get_power(self):\n        power=self['act']['power']\n        power*=1+(self['conditions']['MATERIAL']['counter']*0.1)\n        return int(power*self.get_weather_power_mult())\n\n    def move_1(self): # Infinity Cannon\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            self['conditions']['MATERIAL']['counter']+=1\n\n    def move_2(self): # Dragon Pulse\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<20/100:\n                self.target.set_boost('spd',-1)\n\n@Increment(Cyberagon,'_move_3')\ndef value():\n    return ('Thunder Charge',90,100,'Special','Electric',0,['contact'])\n\n@Increment(Cyberagon)\ndef move_3(self): # Thunder Charge\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint() and rnd()<20/100:\n            self.target.set_status('PAR')\n\n@Increment(Cyberagon,'_move_4')\ndef value():\n    return ('Barrier Break',75,95,'Physical','Steel',0,['contact'])\n\n@Increment(Cyberagon)\ndef move_4(self): # Barrier Break\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n\n@Increment(Cyberagon)\ndef _get_base_damage(self,power,crit):\n    atk_boost=self['boosts']['atk'] if self['act']['category']=='Physical' else self['boosts']['spa']\n    def_boost=self.target['boosts']['def'] if self['act']['category']=='Physical' else self.target['boosts']['spd']\n    \n    if crit:\n        atk_boost=max(0,atk_boost)\n        def_boost=min(0,def_boost)\n\n    attack=self.get_stat('atk' if self['act']['category']=='Physical' else 'spa',atk_boost)\n    if self['act']['id']=='Barrier Break':\n        defense=self.target.get_stat('spd',0)\n    else:\n        defense=self.target.get_stat('def' if self['act']['category']=='Physical' else 'spd',def_boost)\n\n    level=100\n    base_damage=int(int(int(int(2*level/5+2)*power*attack)/defense)/50)+2\n\n    return base_damage\n```\n\nThis role is gonna learn a new ability:\n```json\n{\n  \"Clear Body\": \"Prevents other Pokemon from lowering this Pokemon's stat stages.\"\n}\n```",
        "response": "```python\n@Increment(Cyberagon,'_ability')\ndef value():\n    return ['Material Gain','Clear Body']\n\n@Increment(Cyberagon)\ndef set_boost(self,key,x,from_='target'):\n    if x<0 and from_=='target':\n        return\n    bar=6 if key in ['atk','def','spa','spd','spe'] else 3\n    if x>0:\n        self['boosts'][key]=min(bar,self['boosts'][key]+x)\n    else:\n        self['boosts'][key]=max(-bar,self['boosts'][key]+x)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Cyclonox\",\n  \"types\": [\n    \"Rock\",\n    \"Fighting\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Titan Gaze\": \"The power of Rock-type moves is increased by 50% in the next turn when the user is hit by a Special move.\"\n  },\n  \"moves\": {\n    \"Cyclone Smash\": {\n      \"power\": 120,\n      \"accuracy\": 85,\n      \"category\": \"Physical\",\n      \"type\": \"Rock\",\n      \"effect\": \"Has a 20% chance to lower the target's Defense by 1 stage.\"\n    },\n    \"Titanic Roar\": {\n      \"power\": 100,\n      \"accuracy\": 90,\n      \"category\": \"Special\",\n      \"type\": \"Fighting\",\n      \"effect\": \"Has a 30% chance to confuse the target.\"\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass Cyclonox(PokemonBase):\n    _species='Cyclonox'\n    _types=['Rock','Fighting']\n    _gender='Male'\n    _ability=['Titan Gaze','Single Mind']\n    _move_1=('Cyclone Smash',120,85,'Physical','Rock',0,[])\n    _move_2=('Titanic Roar',100,90,'Special','Fighting',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def endturn(self):\n        if self['conditions'].get('TITAN_GAZE'):\n            self['conditions']['TITAN_GAZE']['counter']+=1\n            if self['conditions']['TITAN_GAZE']['counter']==2:\n                del self['conditions']['TITAN_GAZE']\n\n    def _take_damage_attack(self,x):\n        self.register_act_taken()\n        if self['act_taken']['category']=='Special':\n            self.set_condition('TITAN_GAZE',counter=0)\n        self.state['hp']=max(0,self['hp']-x)\n        if self['hp']==0:\n            self.state['status']='FNT'\n\n    def get_power(self):\n        power=self['act']['power']\n        if self['act']['type']=='Rock':\n            if self['conditions'].get('TITAN_GAZE') and self['conditions']['TITAN_GAZE']['counter']==1:\n                power*=1.5\n                del self['conditions']['TITAN_GAZE']\n        return int(power*self.get_weather_power_mult())\n\n    def move_1(self): # Cyclone Smash\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<20/100:\n                self.target.set_boost('def',-1)\n    \n    def move_2(self): # Titanic Roar\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100:\n                self.target.set_condition('CONFUSION',counter=0)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Cyclonox\",\n  \"types\": [\n    \"Rock\",\n    \"Fighting\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Titan Gaze\": \"The power of Rock-type moves is increased by 50% in the next turn when the user is hit by a Special move.\"\n  },\n  \"moves\": {\n    \"Cyclone Smash\": {\n      \"power\": 120,\n      \"accuracy\": 85,\n      \"category\": \"Physical\",\n      \"type\": \"Rock\",\n      \"effect\": \"Has a 20% chance to lower the target's Defense by 1 stage.\"\n    },\n    \"Titanic Roar\": {\n      \"power\": 100,\n      \"accuracy\": 90,\n      \"category\": \"Special\",\n      \"type\": \"Fighting\",\n      \"effect\": \"Has a 30% chance to confuse the target.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Cyclonox(PokemonBase):\n    _species='Cyclonox'\n    _types=['Rock','Fighting']\n    _gender='Male'\n    _ability=['Titan Gaze','Single Mind']\n    _move_1=('Cyclone Smash',120,85,'Physical','Rock',0,[])\n    _move_2=('Titanic Roar',100,90,'Special','Fighting',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def endturn(self):\n        if self['conditions'].get('TITAN_GAZE'):\n            self['conditions']['TITAN_GAZE']['counter']+=1\n            if self['conditions']['TITAN_GAZE']['counter']==2:\n                del self['conditions']['TITAN_GAZE']\n\n    def _take_damage_attack(self,x):\n        self.register_act_taken()\n        if self['act_taken']['category']=='Special':\n            self.set_condition('TITAN_GAZE',counter=0)\n        self.state['hp']=max(0,self['hp']-x)\n        if self['hp']==0:\n            self.state['status']='FNT'\n\n    def get_power(self):\n        power=self['act']['power']\n        if self['act']['type']=='Rock':\n            if self['conditions'].get('TITAN_GAZE') and self['conditions']['TITAN_GAZE']['counter']==1:\n                power*=1.5\n                del self['conditions']['TITAN_GAZE']\n        return int(power*self.get_weather_power_mult())\n\n    def move_1(self): # Cyclone Smash\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<20/100:\n                self.target.set_boost('def',-1)\n    \n    def move_2(self): # Titanic Roar\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100:\n                self.target.set_condition('CONFUSION',counter=0)\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Crafted Strike\": {\n    \"power\": 90,\n    \"accuracy\": 100000,\n    \"category\": \"Physical\",\n    \"type\": \"Rock\",\n    \"effect\": \"Increases the user's Defense by 1 stage if it hits.\"\n  }\n}\n```",
        "response": "```python\n@Increment(Cyclonox,'_move_3')\ndef value():\n    return ('Crafted Strike',90,100000,'Physical','Rock',0,[])\n\n@Increment(Cyclonox)\ndef move_3(self): # Crafted Strike\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        self.set_boost('def',+1,'self')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Cyclonox\",\n  \"types\": [\n    \"Rock\",\n    \"Fighting\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Titan Gaze\": \"The power of Rock-type moves is increased by 50% in the next turn when the user is hit by a Special move.\"\n  },\n  \"moves\": {\n    \"Cyclone Smash\": {\n      \"power\": 120,\n      \"accuracy\": 85,\n      \"category\": \"Physical\",\n      \"type\": \"Rock\",\n      \"effect\": \"Has a 20% chance to lower the target's Defense by 1 stage.\"\n    },\n    \"Titanic Roar\": {\n      \"power\": 100,\n      \"accuracy\": 90,\n      \"category\": \"Special\",\n      \"type\": \"Fighting\",\n      \"effect\": \"Has a 30% chance to confuse the target.\"\n    },\n    \"Crafted Strike\": {\n      \"power\": 90,\n      \"accuracy\": 100000,\n      \"category\": \"Physical\",\n      \"type\": \"Rock\",\n      \"effect\": \"Increases the user's Defense by 1 stage if it hits.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Cyclonox(PokemonBase):\n    _species='Cyclonox'\n    _types=['Rock','Fighting']\n    _gender='Male'\n    _ability=['Titan Gaze','Single Mind']\n    _move_1=('Cyclone Smash',120,85,'Physical','Rock',0,[])\n    _move_2=('Titanic Roar',100,90,'Special','Fighting',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def endturn(self):\n        if self['conditions'].get('TITAN_GAZE'):\n            self['conditions']['TITAN_GAZE']['counter']+=1\n            if self['conditions']['TITAN_GAZE']['counter']==2:\n                del self['conditions']['TITAN_GAZE']\n\n    def _take_damage_attack(self,x):\n        self.register_act_taken()\n        if self['act_taken']['category']=='Special':\n            self.set_condition('TITAN_GAZE',counter=0)\n        self.state['hp']=max(0,self['hp']-x)\n        if self['hp']==0:\n            self.state['status']='FNT'\n\n    def get_power(self):\n        power=self['act']['power']\n        if self['act']['type']=='Rock':\n            if self['conditions'].get('TITAN_GAZE') and self['conditions']['TITAN_GAZE']['counter']==1:\n                power*=1.5\n                del self['conditions']['TITAN_GAZE']\n        return int(power*self.get_weather_power_mult())\n\n    def move_1(self): # Cyclone Smash\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<20/100:\n                self.target.set_boost('def',-1)\n    \n    def move_2(self): # Titanic Roar\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100:\n                self.target.set_condition('CONFUSION',counter=0)\n\n@Increment(Cyclonox,'_move_3')\ndef value():\n    return ('Crafted Strike',90,100000,'Physical','Rock',0,[])\n\n@Increment(Cyclonox)\ndef move_3(self): # Crafted Strike\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        self.set_boost('def',+1,'self')\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Mighty Stomp\": {\n    \"power\": 80,\n    \"accuracy\": 100,\n    \"category\": \"Physical\",\n    \"type\": \"Fighting\",\n    \"effect\": \"Has a 10% chance to flinch the target.\"\n  }\n}\n```",
        "response": "```python\n@Increment(Cyclonox,'_move_4')\ndef value():\n    return ('Mighty Stomp',80,100,'Physical','Fighting',0,[])\n\n@Increment(Cyclonox)\ndef move_4(self): # Mighty Stomp\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint() and rnd()<10/100:\n            self.target.set_condition('FLINCH',counter=0)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Cyclorax\",\n  \"types\": [\n    \"Rock\",\n    \"Steel\"\n  ],\n  \"gender\": \"Neutral\",\n  \"ability\": {\n    \"Giants Craft\": \"Boosts the power of Rock and Steel-type moves by 50%. The user's Defense increases by 1 stage when hit by a Rock-type move.\"\n  },\n  \"moves\": {\n    \"Titanic Strike\": {\n      \"power\": 120,\n      \"accuracy\": 85,\n      \"category\": \"Physical\",\n      \"type\": \"Rock\",\n      \"effect\": \"Has a 20% chance to lower the target's Defense by 1 stage.\"\n    },\n    \"Forged Fist\": {\n      \"power\": 90,\n      \"accuracy\": 95,\n      \"category\": \"Physical\",\n      \"type\": \"Steel\",\n      \"effect\": \"Has a 30% chance to cause the target to flinch.\"\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass Cyclorax(PokemonBase):\n    _species='Cyclorax'\n    _types=['Rock','Steel']\n    _gender='Neutral'\n    _ability=['Giants Craft']\n    _move_1=('Titanic Strike',120,85,'Physical','Rock',0,[])\n    _move_2=('Forged Fist',90,95,'Physical','Steel',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def get_power(self):\n        power=self['act']['power']\n        if self['act']['type'] in ['Rock','Steel']:\n            power*=1.5\n        return int(power*self.get_weather_power_mult())\n    \n    def _take_damage_attack(self,x):\n        self.register_act_taken()\n        self.state['hp']=max(0,self['hp']-x)\n        if self['hp']==0:\n            self.state['status']='FNT'\n            return\n        if self['act_taken'] and self['act_taken']['type']=='Rock':\n            self.set_boost('def',1,'self')\n\n    def move_1(self): # Titanic Strike\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<20/100:\n                self.target.set_boost('def',-1)\n\n    def move_2(self): # Forged Fist\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100:\n                self.target.set_condition('FLINCH',counter=0)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Cyclorax\",\n  \"types\": [\n    \"Rock\",\n    \"Steel\"\n  ],\n  \"gender\": \"Neutral\",\n  \"ability\": {\n    \"Giants Craft\": \"Boosts the power of Rock and Steel-type moves by 50%. The user's Defense increases by 1 stage when hit by a Rock-type move.\"\n  },\n  \"moves\": {\n    \"Titanic Strike\": {\n      \"power\": 120,\n      \"accuracy\": 85,\n      \"category\": \"Physical\",\n      \"type\": \"Rock\",\n      \"effect\": \"Has a 20% chance to lower the target's Defense by 1 stage.\"\n    },\n    \"Forged Fist\": {\n      \"power\": 90,\n      \"accuracy\": 95,\n      \"category\": \"Physical\",\n      \"type\": \"Steel\",\n      \"effect\": \"Has a 30% chance to cause the target to flinch.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Cyclorax(PokemonBase):\n    _species='Cyclorax'\n    _types=['Rock','Steel']\n    _gender='Neutral'\n    _ability=['Giants Craft']\n    _move_1=('Titanic Strike',120,85,'Physical','Rock',0,[])\n    _move_2=('Forged Fist',90,95,'Physical','Steel',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def get_power(self):\n        power=self['act']['power']\n        if self['act']['type'] in ['Rock','Steel']:\n            power*=1.5\n        return int(power*self.get_weather_power_mult())\n    \n    def _take_damage_attack(self,x):\n        self.register_act_taken()\n        self.state['hp']=max(0,self['hp']-x)\n        if self['hp']==0:\n            self.state['status']='FNT'\n            return\n        if self['act_taken'] and self['act_taken']['type']=='Rock':\n            self.set_boost('def',1,'self')\n\n    def move_1(self): # Titanic Strike\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<20/100:\n                self.target.set_boost('def',-1)\n\n    def move_2(self): # Forged Fist\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100:\n                self.target.set_condition('FLINCH',counter=0)\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Stubborn Stare\": {\n    \"power\": 0,\n    \"accuracy\": 100,\n    \"category\": \"Status\",\n    \"type\": \"Steel\",\n    \"effect\": \"Increases the user's Attack and Defense by 1 stage each. Also lowers the target's Attack by 1 stage.\"\n  }\n}\n```",
        "response": "```python\n@Increment(Cyclorax,'_move_3')\ndef value():\n    return ('Stubborn Stare',0,100,'Status','Steel',0,[])\n\n@Increment(Cyclorax)\ndef move_3(self): # Stubborn Stare\n    self.set_boost('atk',+1,'self')\n    self.set_boost('def',+1,'self')\n    self.target.set_boost('atk',-1)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Cyclorax\",\n  \"types\": [\n    \"Rock\",\n    \"Steel\"\n  ],\n  \"gender\": \"Neutral\",\n  \"ability\": {\n    \"Giants Craft\": \"Boosts the power of Rock and Steel-type moves by 50%. The user's Defense increases by 1 stage when hit by a Rock-type move.\"\n  },\n  \"moves\": {\n    \"Titanic Strike\": {\n      \"power\": 120,\n      \"accuracy\": 85,\n      \"category\": \"Physical\",\n      \"type\": \"Rock\",\n      \"effect\": \"Has a 20% chance to lower the target's Defense by 1 stage.\"\n    },\n    \"Forged Fist\": {\n      \"power\": 90,\n      \"accuracy\": 95,\n      \"category\": \"Physical\",\n      \"type\": \"Steel\",\n      \"effect\": \"Has a 30% chance to cause the target to flinch.\"\n    },\n    \"Stubborn Stare\": {\n      \"power\": 0,\n      \"accuracy\": 100,\n      \"category\": \"Status\",\n      \"type\": \"Steel\",\n      \"effect\": \"Increases the user's Attack and Defense by 1 stage each. Also lowers the target's Attack by 1 stage.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Cyclorax(PokemonBase):\n    _species='Cyclorax'\n    _types=['Rock','Steel']\n    _gender='Neutral'\n    _ability=['Giants Craft']\n    _move_1=('Titanic Strike',120,85,'Physical','Rock',0,[])\n    _move_2=('Forged Fist',90,95,'Physical','Steel',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def get_power(self):\n        power=self['act']['power']\n        if self['act']['type'] in ['Rock','Steel']:\n            power*=1.5\n        return int(power*self.get_weather_power_mult())\n    \n    def _take_damage_attack(self,x):\n        self.register_act_taken()\n        self.state['hp']=max(0,self['hp']-x)\n        if self['hp']==0:\n            self.state['status']='FNT'\n            return\n        if self['act_taken'] and self['act_taken']['type']=='Rock':\n            self.set_boost('def',1,'self')\n\n    def move_1(self): # Titanic Strike\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<20/100:\n                self.target.set_boost('def',-1)\n\n    def move_2(self): # Forged Fist\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100:\n                self.target.set_condition('FLINCH',counter=0)\n\n@Increment(Cyclorax,'_move_3')\ndef value():\n    return ('Stubborn Stare',0,100,'Status','Steel',0,[])\n\n@Increment(Cyclorax)\ndef move_3(self): # Stubborn Stare\n    self.set_boost('atk',+1,'self')\n    self.set_boost('def',+1,'self')\n    self.target.set_boost('atk',-1)\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Counter\": {\n    \"power\": 0,\n    \"accuracy\": 100,\n    \"category\": \"Physical\",\n    \"priority\": -5,\n    \"type\": \"Fighting\",\n    \"effect\": \"Deals damage to the target if its hits the user with a physical attack this turn, equal to twice the HP lost by the user from that attack.\",\n    \"property\": [\n      \"contact\"\n    ]\n  }\n}\n```",
        "response": "```python\n@Increment(Cyclorax,'_move_4')\ndef value():\n    return ('Counter',0,100,'Physical','Fighting',-5,['contact'])\n\n@Increment(Cyclorax)\ndef move_4(self): # Counter\n    if self['act_taken'] and self['act_taken']['category']=='Physical' and self['act_taken'].get('damage'):\n        self.target.take_damage(self['act_taken']['damage']*2)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Cyclorax\",\n  \"types\": [\n    \"Rock\",\n    \"Steel\"\n  ],\n  \"gender\": \"Neutral\",\n  \"ability\": {\n    \"Giants Craft\": \"Boosts the power of Rock and Steel-type moves by 50%. The user's Defense increases by 1 stage when hit by a Rock-type move.\"\n  },\n  \"moves\": {\n    \"Titanic Strike\": {\n      \"power\": 120,\n      \"accuracy\": 85,\n      \"category\": \"Physical\",\n      \"type\": \"Rock\",\n      \"effect\": \"Has a 20% chance to lower the target's Defense by 1 stage.\"\n    },\n    \"Forged Fist\": {\n      \"power\": 90,\n      \"accuracy\": 95,\n      \"category\": \"Physical\",\n      \"type\": \"Steel\",\n      \"effect\": \"Has a 30% chance to cause the target to flinch.\"\n    },\n    \"Stubborn Stare\": {\n      \"power\": 0,\n      \"accuracy\": 100,\n      \"category\": \"Status\",\n      \"type\": \"Steel\",\n      \"effect\": \"Increases the user's Attack and Defense by 1 stage each. Also lowers the target's Attack by 1 stage.\"\n    },\n    \"Counter\": {\n      \"power\": 0,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"priority\": -5,\n      \"type\": \"Fighting\",\n      \"effect\": \"Deals damage to the target if its hits the user with a physical attack this turn, equal to twice the HP lost by the user from that attack.\",\n      \"property\": [\n        \"contact\"\n      ]\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Cyclorax(PokemonBase):\n    _species='Cyclorax'\n    _types=['Rock','Steel']\n    _gender='Neutral'\n    _ability=['Giants Craft']\n    _move_1=('Titanic Strike',120,85,'Physical','Rock',0,[])\n    _move_2=('Forged Fist',90,95,'Physical','Steel',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def get_power(self):\n        power=self['act']['power']\n        if self['act']['type'] in ['Rock','Steel']:\n            power*=1.5\n        return int(power*self.get_weather_power_mult())\n    \n    def _take_damage_attack(self,x):\n        self.register_act_taken()\n        self.state['hp']=max(0,self['hp']-x)\n        if self['hp']==0:\n            self.state['status']='FNT'\n            return\n        if self['act_taken'] and self['act_taken']['type']=='Rock':\n            self.set_boost('def',1,'self')\n\n    def move_1(self): # Titanic Strike\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<20/100:\n                self.target.set_boost('def',-1)\n\n    def move_2(self): # Forged Fist\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100:\n                self.target.set_condition('FLINCH',counter=0)\n\n@Increment(Cyclorax,'_move_3')\ndef value():\n    return ('Stubborn Stare',0,100,'Status','Steel',0,[])\n\n@Increment(Cyclorax)\ndef move_3(self): # Stubborn Stare\n    self.set_boost('atk',+1,'self')\n    self.set_boost('def',+1,'self')\n    self.target.set_boost('atk',-1)\n\n@Increment(Cyclorax,'_move_4')\ndef value():\n    return ('Counter',0,100,'Physical','Fighting',-5,['contact'])\n\n@Increment(Cyclorax)\ndef move_4(self): # Counter\n    if self['act_taken'] and self['act_taken']['category']=='Physical' and self['act_taken'].get('damage'):\n        self.target.take_damage(self['act_taken']['damage']*2)\n```\n\nThis role is gonna learn a new ability:\n```json\n{\n  \"One-Eyed Stubbornness\": \"Has a 30% chance to endure a move that would otherwise knock out Cyclorax with 1 HP.\"\n}\n```",
        "response": "```python\n@Increment(Cyclorax,'_ability')\ndef value():\n    return ['Giants Craft','One-Eyed Stubbornness']\n\n@Increment(Cyclorax)\ndef _take_damage_attack(self,x):\n    self.register_act_taken()\n    self.state['hp']=max(0,self['hp']-x)\n    if self['hp']==0:\n        if rnd()<30/100:\n          self.state['hp']=1\n        else:\n          self.state['status']='FNT'\n          return\n    if self['act_taken'] and self['act_taken']['type']=='Rock':\n        self.set_boost('def',1,'self')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Darkrai\",\n  \"types\": [\n    \"Dark\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Bad Dreams\": \"Opposing Pokemon with Sleep status lose 1/8 of their max HP each turn.\"\n  },\n  \"moves\": {\n    \"Dark Pulse\": {\n      \"power\": 80,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Dark\",\n      \"effect\": \"Has a 20% chance to make the target flinch.\"\n    },\n    \"Hypnosis\": {\n      \"power\": 0,\n      \"accuracy\": 60,\n      \"category\": \"Status\",\n      \"type\": \"Psychic\",\n      \"effect\": \"Causes the target to fall asleep.\"\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass Darkrai(PokemonBase):\n    _species='Darkrai'\n    _types=['Dark']\n    _gender='Male'\n    _ability=['Bad Dreams']\n    _move_1=('Dark Pulse',80,100,'Special','Dark',0,[])\n    _move_2=('Hypnosis',0,60,'Status','Psychic',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def endturn(self):\n        if isinstance(self.target['status'],dict) and self.target['status']=='SLP':\n            self.target.take_damage(self.target['max_hp']//8,'loss')\n\n    def move_1(self): # Dark Pulse\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<20/100:\n                self.target.set_condition('FLINCH',counter=0)\n\n    def move_2(self): # Hypnosis\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            self.target.set_status('SLP')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Darmanitan\",\n  \"types\": [\n    \"Fire\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Gorilla Tactics\": \"Boosts the power of this Pokemon's attacks by 1.5x, but only allows the use of the first selected move.\"\n  },\n  \"moves\": {\n    \"Flare Blitz\": {\n      \"power\": 120,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Fire\",\n      \"effect\": \"Has a 10% chance to burn the target. If the target lost HP, the user takes recoil damage equal to 33% the HP lost by the target, rounded half up, but not less than 1 HP.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Crunch\": {\n      \"power\": 80,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Dark\",\n      \"effect\": \"Has a 20% chance to lower the target's Defense by 1 stage.\",\n      \"property\": [\n        \"contact\"\n      ]\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass Darmanitan(PokemonBase):\n    _species='Darmanitan'\n    _types=['Fire']\n    _gender='Male'\n    _ability=['Gorilla Tactics']\n    _move_1=('Flare Blitz',120,100,'Physical','Fire',0,['contact'])\n    _move_2=('Crunch',80,100,'Physical','Dark',0,['contact'])\n    def __init__(self):\n        super().__init__()\n\n    def get_stat(self,key,boost=None):\n        stat=self['stats'][key]\n        boost=self['boosts'][key] if not boost else boost\n        stat_ratio={0:1,1:1.5,2:2,3:2.5,4:3,5:3.5,6:4}[min(6,abs(boost))]\n        if boost<0:\n            stat_ratio=1/stat_ratio\n        stat_ratio*=self.get_weather_stat_mult(key)\n        if key=='spe' and self.isstatus('PAR'):\n            stat_ratio*=0.5\n        if key=='atk':\n            stat_ratio*=1.5\n        return int(stat*stat_ratio)\n\n    def move_1(self): # Flare Blitz\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<10/100: self.target.set_status('BRN')\n            if damage>0:\n                self.take_damage(int(0.33*damage),'recoil')\n        self.state['canact']='Flare Blitz'\n    \n    def move_2(self): # Crunch\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<20/100: self.target.set_boost('def',-1)\n        self.state['canact']='Crunch'\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Deviljho\",\n  \"types\": [\n    \"Dark\",\n    \"Dragon\"\n  ],\n  \"gender\": \"Neutral\",\n  \"ability\": {\n    \"Endless Hunger\": \"Restores HP equal to 25% of damage dealt with biting moves.\"\n  },\n  \"moves\": {\n    \"Devour\": {\n      \"power\": 80,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Dark\",\n      \"effect\": \"Has a 20% chance to flinch the target.\",\n      \"property\": [\n        \"contact\",\n        \"bite\"\n      ]\n    },\n    \"Territorial Roar\": {\n      \"power\": 0,\n      \"accuracy\": 100000,\n      \"category\": \"Status\",\n      \"type\": \"Dragon\",\n      \"effect\": \"Lowers the Defense and Special Defense of all opponents by 1 stage.\"\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass Deviljho(PokemonBase):\n    _species='Deviljho'\n    _types=['Dark','Dragon']\n    _gender='Neutral'\n    _ability=['Endless Hunger']\n    _move_1=('Devour',80,100,'Physical','Dark',0,['contact','bite'])\n    _move_2=('Territorial Roar',0,100,'Status','Dragon',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def move_1(self):\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            self.restore(damage//4,'drain')\n            if not self.target.isfaint() and rnd()<20/100:\n                self.target.set_condition('FLINCH',counter=0)\n\n    def move_2(self):\n        self.target.set_boost('def',-1)\n        self.target.set_boost('spd',-1)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Deviljho\",\n  \"types\": [\n    \"Dark\",\n    \"Dragon\"\n  ],\n  \"gender\": \"Neutral\",\n  \"ability\": {\n    \"Endless Hunger\": \"Restores HP equal to 25% of damage dealt with biting moves.\"\n  },\n  \"moves\": {\n    \"Devour\": {\n      \"power\": 80,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Dark\",\n      \"effect\": \"Has a 20% chance to flinch the target.\",\n      \"property\": [\n        \"contact\",\n        \"bite\"\n      ]\n    },\n    \"Territorial Roar\": {\n      \"power\": 0,\n      \"accuracy\": 100000,\n      \"category\": \"Status\",\n      \"type\": \"Dragon\",\n      \"effect\": \"Lowers the Defense and Special Defense of all opponents by 1 stage.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Deviljho(PokemonBase):\n    _species='Deviljho'\n    _types=['Dark','Dragon']\n    _gender='Neutral'\n    _ability=['Endless Hunger']\n    _move_1=('Devour',80,100,'Physical','Dark',0,['contact','bite'])\n    _move_2=('Territorial Roar',0,100,'Status','Dragon',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def move_1(self):\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            self.restore(damage//4,'drain')\n            if not self.target.isfaint() and rnd()<20/100:\n                self.target.set_condition('FLINCH',counter=0)\n\n    def move_2(self):\n        self.target.set_boost('def',-1)\n        self.target.set_boost('spd',-1)\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Rampage\": {\n    \"power\": 120,\n    \"accuracy\": 85,\n    \"category\": \"Physical\",\n    \"type\": \"Dragon\",\n    \"effect\": \"Has a 30% chance to cause the user to become confused.\",\n    \"property\": [\n      \"contact\"\n    ]\n  }\n}\n```",
        "response": "```python\n@Increment(Deviljho,'_move_3')\ndef value():\n    return ('Rampage',120,85,'Physical','Dragon',0,['contact'])\n\n@Increment(Deviljho)\ndef move_3(self):\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if rnd()<30/100:\n            self.set_condition('CONFUSION',counter=0)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Deviljho\",\n  \"types\": [\n    \"Dark\",\n    \"Dragon\"\n  ],\n  \"gender\": \"Neutral\",\n  \"ability\": {\n    \"Endless Hunger\": \"Restores HP equal to 25% of damage dealt with biting moves.\"\n  },\n  \"moves\": {\n    \"Devour\": {\n      \"power\": 80,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Dark\",\n      \"effect\": \"Has a 20% chance to flinch the target.\",\n      \"property\": [\n        \"contact\",\n        \"bite\"\n      ]\n    },\n    \"Territorial Roar\": {\n      \"power\": 0,\n      \"accuracy\": 100000,\n      \"category\": \"Status\",\n      \"type\": \"Dragon\",\n      \"effect\": \"Lowers the Defense and Special Defense of all opponents by 1 stage.\"\n    },\n    \"Rampage\": {\n      \"power\": 120,\n      \"accuracy\": 85,\n      \"category\": \"Physical\",\n      \"type\": \"Dragon\",\n      \"effect\": \"Has a 30% chance to cause the user to become confused.\",\n      \"property\": [\n        \"contact\"\n      ]\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Deviljho(PokemonBase):\n    _species='Deviljho'\n    _types=['Dark','Dragon']\n    _gender='Neutral'\n    _ability=['Endless Hunger']\n    _move_1=('Devour',80,100,'Physical','Dark',0,['contact','bite'])\n    _move_2=('Territorial Roar',0,100,'Status','Dragon',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def move_1(self):\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            self.restore(damage//4,'drain')\n            if not self.target.isfaint() and rnd()<20/100:\n                self.target.set_condition('FLINCH',counter=0)\n\n    def move_2(self):\n        self.target.set_boost('def',-1)\n        self.target.set_boost('spd',-1)\n\n@Increment(Deviljho,'_move_3')\ndef value():\n    return ('Rampage',120,85,'Physical','Dragon',0,['contact'])\n\n@Increment(Deviljho)\ndef move_3(self):\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if rnd()<30/100:\n            self.set_condition('CONFUSION',counter=0)\n```\n\nThis role is gonna learn a new ability:\n```json\n{\n  \"Territorial Domination\": \"Raises Attack by 1 stage when entering battle.\"\n}\n```",
        "response": "```python\n@Increment(Deviljho,'_ability')\ndef value():\n    return ['Endless Hunger','Territorial Domination']\n\n@Increment(Deviljho)\ndef onswitch(self):\n    self.set_boost('atk',1)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Diablos\",\n  \"types\": [\n    \"Ground\",\n    \"Dragon\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Berserker Mode\": \"When HP falls below 50%, Diablos's Speed and Attack are increased by 50%.\"\n  },\n  \"moves\": {\n    \"Corkscrew Burrow\": {\n      \"power\": 120,\n      \"accuracy\": 60,\n      \"category\": \"Physical\",\n      \"type\": \"Ground\",\n      \"effect\": \"This move hits twice if the user is in Berserker Mode.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Multi-Charge\": {\n      \"power\": 100,\n      \"accuracy\": 95,\n      \"category\": \"Physical\",\n      \"type\": \"Dragon\",\n      \"effect\": \"Hits 2-5 times in one turn. Each hit has a 10% chance to cause flinching.\",\n      \"property\": [\n        \"contact\"\n      ]\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass Diablos(PokemonBase):\n    _species='Diablos'\n    _types=['Ground','Dragon']\n    _gender='Male'\n    _ability=['Unyielding Fury','Berserker Mode']\n    _move_1=('Corkscrew Burrow',120,60,'Physical','Ground',0,['contact'])\n    _move_2=('Multi-Charge',100,95,'Physical','Dragon',0,['contact'])\n    def __init__(self):\n        super().__init__()\n\n    def get_stat(self,key,boost=None):\n        stat=self['stats'][key]\n        boost=self['boosts'][key] if not boost else boost\n        stat_ratio={0:1,1:1.5,2:2,3:2.5,4:3,5:3.5,6:4}[min(6,abs(boost))]\n        if boost<0:\n            stat_ratio=1/stat_ratio\n        stat_ratio*=self.get_weather_stat_mult(key)\n        if key=='spe' and self.isstatus('PAR'):\n            stat_ratio*=0.5\n        if key in ['atk','spe'] and self['hp']<self['max_hp']//2:\n            stat_ratio*=1.5\n        return int(stat*stat_ratio)\n\n    def endturn(self):\n        if self['hp']<self['max_hp']//2:\n            self.set_condition('BERSERKER_MODE',counter=0)\n\n    def move_1(self): # Corkscrew Burrow\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n        if self['conditions'].get('BERSERKER_MODE'):\n            damage_ret=self.get_damage()\n            if not damage_ret['miss']:\n                damage=damage_ret['damage']\n                self.target.take_damage(damage)\n\n    def move_2(self): # Multi-Charge\n        for _ in range(rndc([2,3,4,5])):\n            damage_ret=self.get_damage()\n            if damage_ret['miss']: break\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if self.target.isfaint(): break\n            if rnd()<10/100: self.target.set_condition('FLINCH')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Diablos\",\n  \"types\": [\n    \"Ground\",\n    \"Dragon\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Berserker Mode\": \"When HP falls below 50%, Diablos's Speed and Attack are increased by 50%.\"\n  },\n  \"moves\": {\n    \"Corkscrew Burrow\": {\n      \"power\": 120,\n      \"accuracy\": 60,\n      \"category\": \"Physical\",\n      \"type\": \"Ground\",\n      \"effect\": \"This move hits twice if the user is in Berserker Mode.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Multi-Charge\": {\n      \"power\": 100,\n      \"accuracy\": 95,\n      \"category\": \"Physical\",\n      \"type\": \"Dragon\",\n      \"effect\": \"Hits 2-5 times in one turn. Each hit has a 10% chance to cause flinching.\",\n      \"property\": [\n        \"contact\"\n      ]\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Diablos(PokemonBase):\n    _species='Diablos'\n    _types=['Ground','Dragon']\n    _gender='Male'\n    _ability=['Unyielding Fury','Berserker Mode']\n    _move_1=('Corkscrew Burrow',120,60,'Physical','Ground',0,['contact'])\n    _move_2=('Multi-Charge',100,95,'Physical','Dragon',0,['contact'])\n    def __init__(self):\n        super().__init__()\n\n    def get_stat(self,key,boost=None):\n        stat=self['stats'][key]\n        boost=self['boosts'][key] if not boost else boost\n        stat_ratio={0:1,1:1.5,2:2,3:2.5,4:3,5:3.5,6:4}[min(6,abs(boost))]\n        if boost<0:\n            stat_ratio=1/stat_ratio\n        stat_ratio*=self.get_weather_stat_mult(key)\n        if key=='spe' and self.isstatus('PAR'):\n            stat_ratio*=0.5\n        if key in ['atk','spe'] and self['hp']<self['max_hp']//2:\n            stat_ratio*=1.5\n        return int(stat*stat_ratio)\n\n    def endturn(self):\n        if self['hp']<self['max_hp']//2:\n            self.set_condition('BERSERKER_MODE',counter=0)\n\n    def move_1(self): # Corkscrew Burrow\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n        if self['conditions'].get('BERSERKER_MODE'):\n            damage_ret=self.get_damage()\n            if not damage_ret['miss']:\n                damage=damage_ret['damage']\n                self.target.take_damage(damage)\n\n    def move_2(self): # Multi-Charge\n        for _ in range(rndc([2,3,4,5])):\n            damage_ret=self.get_damage()\n            if damage_ret['miss']: break\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if self.target.isfaint(): break\n            if rnd()<10/100: self.target.set_condition('FLINCH')\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Raging Earth\": {\n    \"power\": 120,\n    \"accuracy\": 85,\n    \"category\": \"Special\",\n    \"type\": \"Ground\",\n    \"effect\": \"Has a 30% chance to lower the target's Speed by 1 stage.\"\n  }\n}\n```",
        "response": "```python\n@Increment(Diablos,'_move_3')\ndef value():\n    return ('Raging Earth',120,85,'Special','Ground',0,[])\n\n@Increment(Diablos)\ndef move_3(self): # Raging Earth\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if self.target.isfaint() and rnd()<30/100:\n            self.target.set_boost('spe',-1)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Diablos\",\n  \"types\": [\n    \"Ground\",\n    \"Dragon\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Berserker Mode\": \"When HP falls below 50%, Diablos's Speed and Attack are increased by 50%.\"\n  },\n  \"moves\": {\n    \"Corkscrew Burrow\": {\n      \"power\": 120,\n      \"accuracy\": 60,\n      \"category\": \"Physical\",\n      \"type\": \"Ground\",\n      \"effect\": \"This move hits twice if the user is in Berserker Mode.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Multi-Charge\": {\n      \"power\": 100,\n      \"accuracy\": 95,\n      \"category\": \"Physical\",\n      \"type\": \"Dragon\",\n      \"effect\": \"Hits 2-5 times in one turn. Each hit has a 10% chance to cause flinching.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Raging Earth\": {\n      \"power\": 120,\n      \"accuracy\": 85,\n      \"category\": \"Special\",\n      \"type\": \"Ground\",\n      \"effect\": \"Has a 30% chance to lower the target's Speed by 1 stage.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Diablos(PokemonBase):\n    _species='Diablos'\n    _types=['Ground','Dragon']\n    _gender='Male'\n    _ability=['Unyielding Fury','Berserker Mode']\n    _move_1=('Corkscrew Burrow',120,60,'Physical','Ground',0,['contact'])\n    _move_2=('Multi-Charge',100,95,'Physical','Dragon',0,['contact'])\n    def __init__(self):\n        super().__init__()\n\n    def get_stat(self,key,boost=None):\n        stat=self['stats'][key]\n        boost=self['boosts'][key] if not boost else boost\n        stat_ratio={0:1,1:1.5,2:2,3:2.5,4:3,5:3.5,6:4}[min(6,abs(boost))]\n        if boost<0:\n            stat_ratio=1/stat_ratio\n        stat_ratio*=self.get_weather_stat_mult(key)\n        if key=='spe' and self.isstatus('PAR'):\n            stat_ratio*=0.5\n        if key in ['atk','spe'] and self['hp']<self['max_hp']//2:\n            stat_ratio*=1.5\n        return int(stat*stat_ratio)\n\n    def endturn(self):\n        if self['hp']<self['max_hp']//2:\n            self.set_condition('BERSERKER_MODE',counter=0)\n\n    def move_1(self): # Corkscrew Burrow\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n        if self['conditions'].get('BERSERKER_MODE'):\n            damage_ret=self.get_damage()\n            if not damage_ret['miss']:\n                damage=damage_ret['damage']\n                self.target.take_damage(damage)\n\n    def move_2(self): # Multi-Charge\n        for _ in range(rndc([2,3,4,5])):\n            damage_ret=self.get_damage()\n            if damage_ret['miss']: break\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if self.target.isfaint(): break\n            if rnd()<10/100: self.target.set_condition('FLINCH')\n\n@Increment(Diablos,'_move_3')\ndef value():\n    return ('Raging Earth',120,85,'Special','Ground',0,[])\n\n@Increment(Diablos)\ndef move_3(self): # Raging Earth\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if self.target.isfaint() and rnd()<30/100:\n            self.target.set_boost('spe',-1)\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Infernal Roar\": {\n    \"power\": 80,\n    \"accuracy\": 100,\n    \"category\": \"Special\",\n    \"type\": \"Dragon\",\n    \"effect\": \"Has a 20% chance to burn the target.\",\n    \"property\": [\n      \"sound\"\n    ]\n  }\n}\n```",
        "response": "```python\n@Increment(Diablos,'_move_4')\ndef value():\n    return ('Infernal Roar',80,100,'Special','Dragon',0,['sound'])\n\n@Increment(Diablos)\ndef move_4(self): # Infernal Roar\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if self.target.isfaint() and rnd()<20/100:\n            self.target.set_status('BRN')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Diablos\",\n  \"types\": [\n    \"Ground\",\n    \"Dragon\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Berserker Mode\": \"When HP falls below 50%, Diablos's Speed and Attack are increased by 50%.\"\n  },\n  \"moves\": {\n    \"Corkscrew Burrow\": {\n      \"power\": 120,\n      \"accuracy\": 60,\n      \"category\": \"Physical\",\n      \"type\": \"Ground\",\n      \"effect\": \"This move hits twice if the user is in Berserker Mode.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Multi-Charge\": {\n      \"power\": 100,\n      \"accuracy\": 95,\n      \"category\": \"Physical\",\n      \"type\": \"Dragon\",\n      \"effect\": \"Hits 2-5 times in one turn. Each hit has a 10% chance to cause flinching.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Raging Earth\": {\n      \"power\": 120,\n      \"accuracy\": 85,\n      \"category\": \"Special\",\n      \"type\": \"Ground\",\n      \"effect\": \"Has a 30% chance to lower the target's Speed by 1 stage.\"\n    },\n    \"Infernal Roar\": {\n      \"power\": 80,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Dragon\",\n      \"effect\": \"Has a 20% chance to burn the target.\",\n      \"property\": [\n        \"sound\"\n      ]\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Diablos(PokemonBase):\n    _species='Diablos'\n    _types=['Ground','Dragon']\n    _gender='Male'\n    _ability=['Unyielding Fury','Berserker Mode']\n    _move_1=('Corkscrew Burrow',120,60,'Physical','Ground',0,['contact'])\n    _move_2=('Multi-Charge',100,95,'Physical','Dragon',0,['contact'])\n    def __init__(self):\n        super().__init__()\n\n    def get_stat(self,key,boost=None):\n        stat=self['stats'][key]\n        boost=self['boosts'][key] if not boost else boost\n        stat_ratio={0:1,1:1.5,2:2,3:2.5,4:3,5:3.5,6:4}[min(6,abs(boost))]\n        if boost<0:\n            stat_ratio=1/stat_ratio\n        stat_ratio*=self.get_weather_stat_mult(key)\n        if key=='spe' and self.isstatus('PAR'):\n            stat_ratio*=0.5\n        if key in ['atk','spe'] and self['hp']<self['max_hp']//2:\n            stat_ratio*=1.5\n        return int(stat*stat_ratio)\n\n    def endturn(self):\n        if self['hp']<self['max_hp']//2:\n            self.set_condition('BERSERKER_MODE',counter=0)\n\n    def move_1(self): # Corkscrew Burrow\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n        if self['conditions'].get('BERSERKER_MODE'):\n            damage_ret=self.get_damage()\n            if not damage_ret['miss']:\n                damage=damage_ret['damage']\n                self.target.take_damage(damage)\n\n    def move_2(self): # Multi-Charge\n        for _ in range(rndc([2,3,4,5])):\n            damage_ret=self.get_damage()\n            if damage_ret['miss']: break\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if self.target.isfaint(): break\n            if rnd()<10/100: self.target.set_condition('FLINCH')\n\n@Increment(Diablos,'_move_3')\ndef value():\n    return ('Raging Earth',120,85,'Special','Ground',0,[])\n\n@Increment(Diablos)\ndef move_3(self): # Raging Earth\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if self.target.isfaint() and rnd()<30/100:\n            self.target.set_boost('spe',-1)\n\n@Increment(Diablos,'_move_4')\ndef value():\n    return ('Infernal Roar',80,100,'Special','Dragon',0,['sound'])\n\n@Increment(Diablos)\ndef move_4(self): # Infernal Roar\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if self.target.isfaint() and rnd()<20/100:\n            self.target.set_status('BRN')\n```\n\nThis role is gonna learn a new ability:\n```json\n{\n  \"Unyielding Fury\": \"Has a 30% chance to increase Attack by 1 stage each time Diablos takes damage.\"\n}\n```",
        "response": "```python\n@Increment(Diablos,'_ability')\ndef value():\n    return ['Berserker Mode','Unyielding Fury']\n\n@Increment(Diablos)\ndef take_damage(self,x,from_='attack'):\n    if from_=='attack':\n        self._take_damage_attack(x)\n    elif from_=='loss':\n        self._take_damage_loss(x)\n    elif from_=='recoil':\n        self._take_damage_recoil(x)\n    if rnd()<0.3:\n        self.set_boost('atk',1,'self')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Dodrio\",\n  \"types\": [\n    \"Normal\",\n    \"Flying\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Tangled Feet\": \"Gain 50% of evasion if this Pokemon is under a status condition.\"\n  },\n  \"moves\": {\n    \"Drill Peck\": {\n      \"power\": 80,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Flying\",\n      \"effect\": \"No additional effect.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Tri Attack\": {\n      \"power\": 80,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Normal\",\n      \"effect\": \"Has a 20% chance each to burn, freeze or paralyze the target. Only one will activate.\"\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass Dodrio(PokemonBase):\n    _species='Dodrio'\n    _types=['Normal','Flying']\n    _gender='Male'\n    _ability=['Tangled Feet']\n    _move_1=('Drill Peck',80,100,'Physical','Flying',0,['contact'])\n    _move_2=('Tri Attack',80,100,'Special','Normal',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def get_evasion(self):\n        if self['status']:\n            return 0.5\n        return 1\n\n    def move_1(self): # Drill Peck\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n\n    def move_2(self): # Tri Attack\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint():\n                if rnd()<20/100:self.target.set_status('BRN')\n                elif rnd()<40/100:self.target.set_status('PAR')\n                elif rnd()<60/100:self.target.set_status('FRZ')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Dodrio\",\n  \"types\": [\n    \"Normal\",\n    \"Flying\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Tangled Feet\": \"Gain 50% of evasion if this Pokemon is under a status condition.\"\n  },\n  \"moves\": {\n    \"Drill Peck\": {\n      \"power\": 80,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Flying\",\n      \"effect\": \"No additional effect.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Tri Attack\": {\n      \"power\": 80,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Normal\",\n      \"effect\": \"Has a 20% chance each to burn, freeze or paralyze the target. Only one will activate.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Dodrio(PokemonBase):\n    _species='Dodrio'\n    _types=['Normal','Flying']\n    _gender='Male'\n    _ability=['Tangled Feet']\n    _move_1=('Drill Peck',80,100,'Physical','Flying',0,['contact'])\n    _move_2=('Tri Attack',80,100,'Special','Normal',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def get_evasion(self):\n        if self['status']:\n            return 0.5\n        return 1\n\n    def move_1(self): # Drill Peck\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n\n    def move_2(self): # Tri Attack\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint():\n                if rnd()<20/100:self.target.set_status('BRN')\n                elif rnd()<40/100:self.target.set_status('PAR')\n                elif rnd()<60/100:self.target.set_status('FRZ')\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Jump Kick\": {\n    \"power\": 100,\n    \"accuracy\": 95,\n    \"category\": \"Physical\",\n    \"type\": \"Fighting\",\n    \"effect\": \"If this attack is not successful, the user loses half of its maximum HP.\",\n    \"property\": [\n      \"contact\"\n    ]\n  }\n}\n```",
        "response": "```python\n@Increment(Dodrio,'_move_3')\ndef value():\n    return ('Jump Kick',100,95,'Physical','Fighting',0,['contact'])\n\n@Increment(Dodrio)\ndef move_3(self): # Jump Kick\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n    else:\n        self.take_damage(self['max_hp']//2,'recoil')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Draconicon\",\n  \"types\": [\n    \"Dragon\",\n    \"Poison\"\n  ],\n  \"gender\": \"Female\",\n  \"ability\": {\n    \"Poisonous Skin\": \"Pokemon making contact with this Pokemon has a 20% chance of becoming confused.\"\n  },\n  \"moves\": {\n    \"Draconic Beam\": {\n      \"power\": 80,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Dragon\",\n      \"effect\": \"Has a 10% chance to lower the target's Defense and Speed by 1 stage.\"\n    },\n    \"Venoshock\": {\n      \"power\": 65,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Poison\",\n      \"effect\": \"Power doubles if the target is poisoned.\"\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass Draconicon(PokemonBase):\n    _species='Draconicon'\n    _types=['Dragon','Poison']\n    _gender='Female'\n    _ability=['Poisonous Skin']\n    _move_1=('Draconic Beam',80,100,'Special','Dragon',0,[])\n    _move_2=('Venoshock',65,100,'Special','Poison',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def _take_damage_attack(self,x):\n        self.register_act_taken()\n        self.state['hp']=max(0,self['hp']-x)\n        if self['hp']==0:\n            self.state['status']='FNT'\n            return\n        if self['act_taken'] and 'property' in self['act_taken'] and 'contact' in self['act_taken']['property']:\n            if rnd()<20/100:\n                self.target.set_condition('CONFUSION',counter=0)\n    \n    def get_power(self):\n        power=self['act']['power']\n        if self.target.isstatus('PSN') or self.target.isstatus('TOX'):\n            power*=2\n        return int(power*self.get_weather_power_mult())\n\n    def move_1(self): # Draconic Beam\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<10/100:\n                self.target.set_boost('def',-1)\n                self.target.set_boost('spd',-1)\n    \n    def move_2(self): # Venoshock\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Dragalge\",\n  \"types\": [\n    \"Dragon\",\n    \"Poison\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Poison Point\": \"Pokemon making contact with this Pokemon has a 30% chance of being poisoned.\"\n  },\n  \"moves\": {\n    \"Dragon Pulse\": {\n      \"power\": 85,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Dragon\",\n      \"effect\": \"No additional effect.\"\n    },\n    \"Sludge Bomb\": {\n      \"power\": 90,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Poison\",\n      \"effect\": \"Has a 30% chance to poison the target.\"\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass Dragalge(PokemonBase):\n    _species='Dragalge'\n    _types=['Dragon','Poison']\n    _gender='Male'\n    _ability=['Poison Point']\n    _move_1=('Dragon Pulse',85,100,'Special','Dragon',0,[])\n    _move_2=('Sludge Bomb',90,100,'Special','Poison',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def _take_damage_attack(self,x):\n        self.register_act_taken()\n        self.state['hp']=max(0,self['hp']-x)\n        if self['hp']==0:\n            self.state['status']='FNT'\n            return\n        if self['act_taken'] and 'property' in self['act_taken'] and 'contact' in self['act_taken']['property']:\n            if rnd()<30/100:\n                self.target.set_status('PSN')\n\n    def move_1(self): # Dragon Pulse\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n    \n    def move_2(self): # Sludge Bomb\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100: self.target.set_status('PSN')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Dragalge\",\n  \"types\": [\n    \"Dragon\",\n    \"Poison\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Poison Point\": \"Pokemon making contact with this Pokemon has a 30% chance of being poisoned.\"\n  },\n  \"moves\": {\n    \"Dragon Pulse\": {\n      \"power\": 85,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Dragon\",\n      \"effect\": \"No additional effect.\"\n    },\n    \"Sludge Bomb\": {\n      \"power\": 90,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Poison\",\n      \"effect\": \"Has a 30% chance to poison the target.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Dragalge(PokemonBase):\n    _species='Dragalge'\n    _types=['Dragon','Poison']\n    _gender='Male'\n    _ability=['Poison Point']\n    _move_1=('Dragon Pulse',85,100,'Special','Dragon',0,[])\n    _move_2=('Sludge Bomb',90,100,'Special','Poison',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def _take_damage_attack(self,x):\n        self.register_act_taken()\n        self.state['hp']=max(0,self['hp']-x)\n        if self['hp']==0:\n            self.state['status']='FNT'\n            return\n        if self['act_taken'] and 'property' in self['act_taken'] and 'contact' in self['act_taken']['property']:\n            if rnd()<30/100:\n                self.target.set_status('PSN')\n\n    def move_1(self): # Dragon Pulse\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n    \n    def move_2(self): # Sludge Bomb\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100: self.target.set_status('PSN')\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Toxic Dance\": {\n    \"power\": 0,\n    \"accuracy\": 100000,\n    \"category\": \"Status\",\n    \"type\": \"Poison\",\n    \"effect\": \"Raises the user's spa and spd by 1 stage. If the opponent is poisoned or badly poisoned, additionally raises the user's def by 1 stage.\"\n  }\n}\n```",
        "response": "```python\n@Increment(Dragalge,'_move_3')\ndef value():\n    return ('Toxic Dance',0,100000,'Status','Poison',0,[])\n\n@Increment(Dragalge)\ndef move_3(self): # Toxic Dance\n    self.set_boost('spa',+1,'self')\n    self.set_boost('spd',+1,'self')\n    if self.target.isstatus('PSN') or self.target.isstatus('TOX'):\n        self.set_boost('def',+1,'self')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Dragalge\",\n  \"types\": [\n    \"Poison\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Merciless\": \"This Pokemon's attacks are critical hits if the target is poisoned.\"\n  },\n  \"moves\": {\n    \"Dragon Pulse\": {\n      \"power\": 85,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Dragon\",\n      \"effect\": \"No additional effect.\"\n    },\n    \"Sludge Bomb\": {\n      \"power\": 90,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Poison\",\n      \"effect\": \"Has a 30% chance to poison the target.\"\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass Dragalge(PokemonBase):\n    _species='Dragalge'\n    _types=['Poison']\n    _gender='Male'\n    _ability=['Merciless']\n    _move_1=('Dragon Pulse',85,100,'Special','Dragon',0,[])\n    _move_2=('Sludge Bomb',90,100,'Special','Poison',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def get_crit(self):\n        if self.target.isstatus('PSN') or self.target.isstatus('TOX'):\n            return True\n        crit_mult=[0,24,8,2,1]\n        crit_ratio=self['boosts']['crit']\n        crit=False\n        if rnd()*crit_mult[crit_ratio+1]<1:\n            crit=True\n        return crit\n\n    def move_1(self): # Dragon Pulse\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n    \n    def move_2(self): # Sludge Bomb\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint()and rnd()<30/100:\n                self.target.set_status('PSN')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Dragalge\",\n  \"types\": [\n    \"Poison\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Merciless\": \"This Pokemon's attacks are critical hits if the target is poisoned.\"\n  },\n  \"moves\": {\n    \"Dragon Pulse\": {\n      \"power\": 85,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Dragon\",\n      \"effect\": \"No additional effect.\"\n    },\n    \"Sludge Bomb\": {\n      \"power\": 90,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Poison\",\n      \"effect\": \"Has a 30% chance to poison the target.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Dragalge(PokemonBase):\n    _species='Dragalge'\n    _types=['Poison']\n    _gender='Male'\n    _ability=['Merciless']\n    _move_1=('Dragon Pulse',85,100,'Special','Dragon',0,[])\n    _move_2=('Sludge Bomb',90,100,'Special','Poison',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def get_crit(self):\n        if self.target.isstatus('PSN') or self.target.isstatus('TOX'):\n            return True\n        crit_mult=[0,24,8,2,1]\n        crit_ratio=self['boosts']['crit']\n        crit=False\n        if rnd()*crit_mult[crit_ratio+1]<1:\n            crit=True\n        return crit\n\n    def move_1(self): # Dragon Pulse\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n    \n    def move_2(self): # Sludge Bomb\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint()and rnd()<30/100:\n                self.target.set_status('PSN')\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Toxic\": {\n    \"power\": 0,\n    \"accuracy\": 90,\n    \"category\": \"Status\",\n    \"type\": \"Poison\",\n    \"effect\": \"Badly poison the target.\"\n  }\n}\n```",
        "response": "```python\n@Increment(Dragalge,'_move_3')\ndef value():\n    return ('Toxic',0,90,'Status','Poison',0,[])\n\n@Increment(Dragalge)\ndef move_3(self): # Toxic\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        self.target.set_status('TOX')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Dragalge\",\n  \"types\": [\n    \"Poison\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Merciless\": \"This Pokemon's attacks are critical hits if the target is poisoned.\"\n  },\n  \"moves\": {\n    \"Dragon Pulse\": {\n      \"power\": 85,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Dragon\",\n      \"effect\": \"No additional effect.\"\n    },\n    \"Sludge Bomb\": {\n      \"power\": 90,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Poison\",\n      \"effect\": \"Has a 30% chance to poison the target.\"\n    },\n    \"Toxic\": {\n      \"power\": 0,\n      \"accuracy\": 90,\n      \"category\": \"Status\",\n      \"type\": \"Poison\",\n      \"effect\": \"Badly poison the target.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Dragalge(PokemonBase):\n    _species='Dragalge'\n    _types=['Poison']\n    _gender='Male'\n    _ability=['Merciless']\n    _move_1=('Dragon Pulse',85,100,'Special','Dragon',0,[])\n    _move_2=('Sludge Bomb',90,100,'Special','Poison',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def get_crit(self):\n        if self.target.isstatus('PSN') or self.target.isstatus('TOX'):\n            return True\n        crit_mult=[0,24,8,2,1]\n        crit_ratio=self['boosts']['crit']\n        crit=False\n        if rnd()*crit_mult[crit_ratio+1]<1:\n            crit=True\n        return crit\n\n    def move_1(self): # Dragon Pulse\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n    \n    def move_2(self): # Sludge Bomb\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint()and rnd()<30/100:\n                self.target.set_status('PSN')\n\n@Increment(Dragalge,'_move_3')\ndef value():\n    return ('Toxic',0,90,'Status','Poison',0,[])\n\n@Increment(Dragalge)\ndef move_3(self): # Toxic\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        self.target.set_status('TOX')\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Scald\": {\n    \"power\": 80,\n    \"accuracy\": 100,\n    \"category\": \"Special\",\n    \"type\": \"Water\",\n    \"effect\": \"Has a 30% chance to burn the target.\"\n  }\n}\n```",
        "response": "```python\n@Increment(Dragalge,'_move_4')\ndef value():\n    return ('Scald',80,100,'Special','Water',0,[])\n\n@Increment(Dragalge)\ndef move_4(self): # Scald\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint()and rnd()<30/100:\n            self.target.set_status('BRN')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Dragalge\",\n  \"types\": [\n    \"Poison\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Merciless\": \"This Pokemon's attacks are critical hits if the target is poisoned.\"\n  },\n  \"moves\": {\n    \"Dragon Pulse\": {\n      \"power\": 85,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Dragon\",\n      \"effect\": \"No additional effect.\"\n    },\n    \"Sludge Bomb\": {\n      \"power\": 90,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Poison\",\n      \"effect\": \"Has a 30% chance to poison the target.\"\n    },\n    \"Toxic\": {\n      \"power\": 0,\n      \"accuracy\": 90,\n      \"category\": \"Status\",\n      \"type\": \"Poison\",\n      \"effect\": \"Badly poison the target.\"\n    },\n    \"Scald\": {\n      \"power\": 80,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Water\",\n      \"effect\": \"Has a 30% chance to burn the target.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Dragalge(PokemonBase):\n    _species='Dragalge'\n    _types=['Poison']\n    _gender='Male'\n    _ability=['Merciless']\n    _move_1=('Dragon Pulse',85,100,'Special','Dragon',0,[])\n    _move_2=('Sludge Bomb',90,100,'Special','Poison',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def get_crit(self):\n        if self.target.isstatus('PSN') or self.target.isstatus('TOX'):\n            return True\n        crit_mult=[0,24,8,2,1]\n        crit_ratio=self['boosts']['crit']\n        crit=False\n        if rnd()*crit_mult[crit_ratio+1]<1:\n            crit=True\n        return crit\n\n    def move_1(self): # Dragon Pulse\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n    \n    def move_2(self): # Sludge Bomb\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint()and rnd()<30/100:\n                self.target.set_status('PSN')\n\n@Increment(Dragalge,'_move_3')\ndef value():\n    return ('Toxic',0,90,'Status','Poison',0,[])\n\n@Increment(Dragalge)\ndef move_3(self): # Toxic\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        self.target.set_status('TOX')\n\n@Increment(Dragalge,'_move_4')\ndef value():\n    return ('Scald',80,100,'Special','Water',0,[])\n\n@Increment(Dragalge)\ndef move_4(self): # Scald\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint()and rnd()<30/100:\n            self.target.set_status('BRN')\n```\n\nThis role is gonna learn a new ability:\n```json\n{\n  \"Intoxicate\": \"When this Pokemon uses a Poison-type move, it has a 10% chance at the end of the turn of increasing its Special Attack by 1 stage.\"\n}\n```",
        "response": "```python\n@Increment(Dragalge,'_ability')\ndef value():\n    return ['Merciless','Intoxicate']\n\n@Increment(Dragalge)\ndef endturn(self):\n    if self['act'] and self['act']['type']=='Poison' and rnd()<10/100:\n        self.set_boost('spa',+1,'self')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Dragalge\",\n  \"types\": [\n    \"Poison\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Merciless\": \"This Pokemon's attacks are critical hits if the target is poisoned.\",\n    \"Intoxicate\": \"When this Pokemon uses a Poison-type move, it has a 10% chance at the end of the turn of increasing its Special Attack by 1 stage.\"\n  },\n  \"moves\": {\n    \"Dragon Pulse\": {\n      \"power\": 85,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Dragon\",\n      \"effect\": \"No additional effect.\"\n    },\n    \"Sludge Bomb\": {\n      \"power\": 90,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Poison\",\n      \"effect\": \"Has a 30% chance to poison the target.\"\n    },\n    \"Toxic\": {\n      \"power\": 0,\n      \"accuracy\": 90,\n      \"category\": \"Status\",\n      \"type\": \"Poison\",\n      \"effect\": \"Badly poison the target.\"\n    },\n    \"Scald\": {\n      \"power\": 80,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Water\",\n      \"effect\": \"Has a 30% chance to burn the target.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Dragalge(PokemonBase):\n    _species='Dragalge'\n    _types=['Poison']\n    _gender='Male'\n    _ability=['Merciless']\n    _move_1=('Dragon Pulse',85,100,'Special','Dragon',0,[])\n    _move_2=('Sludge Bomb',90,100,'Special','Poison',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def get_crit(self):\n        if self.target.isstatus('PSN') or self.target.isstatus('TOX'):\n            return True\n        crit_mult=[0,24,8,2,1]\n        crit_ratio=self['boosts']['crit']\n        crit=False\n        if rnd()*crit_mult[crit_ratio+1]<1:\n            crit=True\n        return crit\n\n    def move_1(self): # Dragon Pulse\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n    \n    def move_2(self): # Sludge Bomb\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint()and rnd()<30/100:\n                self.target.set_status('PSN')\n\n@Increment(Dragalge,'_move_3')\ndef value():\n    return ('Toxic',0,90,'Status','Poison',0,[])\n\n@Increment(Dragalge)\ndef move_3(self): # Toxic\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        self.target.set_status('TOX')\n\n@Increment(Dragalge,'_move_4')\ndef value():\n    return ('Scald',80,100,'Special','Water',0,[])\n\n@Increment(Dragalge)\ndef move_4(self): # Scald\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint()and rnd()<30/100:\n            self.target.set_status('BRN')\n\n@Increment(Dragalge,'_ability')\ndef value():\n    return ['Merciless','Intoxicate']\n\n@Increment(Dragalge)\ndef endturn(self):\n    if self['act'] and self['act']['type']=='Poison' and rnd()<10/100:\n        self.set_boost('spa',+1,'self')\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Venom Drench\": {\n    \"power\": 0,\n    \"accuracy\": 100,\n    \"category\": \"Status\",\n    \"type\": \"Poison\",\n    \"effect\": \"Lowers the target's Attack, Special Attack, and Speed by 1 stage if the target is poisoned.\"\n  }\n}\n```",
        "response": "```python\n@Increment(Dragalge,'_move_5')\ndef value():\n    return ('Venom Drench',0,100,'Status','Poison',0,[])\n\n@Increment(Dragalge)\ndef move_5(self): # Venom Drench\n    if self.target.isstatus('PSN') or self.target.isstatus('TOX'):\n        self.target.set_boost('atk',-1)\n        self.target.set_boost('spa',-1)\n        self.target.set_boost('spe',-1)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Dragapult\",\n  \"types\": [\n    \"Dragon\",\n    \"Ghost\"\n  ],\n  \"gender\": \"Female\",\n  \"ability\": {\n    \"Clear Body\": \"Prevents other Pokemon from lowering this Pokemon's stat stages.\"\n  },\n  \"moves\": {\n    \"Dragon Darts\": {\n      \"power\": 50,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Dragon\",\n      \"effect\": \"Hits twice.\"\n    },\n    \"Phantom Force\": {\n      \"power\": 90,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Ghost\",\n      \"effect\": \"This attack charges on the first turn and executes on the second. On the first turn, the user avoids all attacks.\",\n      \"property\": [\n        \"contact\"\n      ]\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass Dragapult(PokemonBase):\n    _species='Dragapult'\n    _types=['Dragon','Ghost']\n    _gender='Female'\n    _ability=['Clear Body']\n    _move_1=('Dragon Darts',50,100,'Physical','Dragon',0,[])\n    _move_2=('Phantom Force',90,100,'Physical','Ghost',0,['contact'])\n    def __init__(self):\n        super().__init__()\n\n    def set_boost(self,key,x,from_='target'):\n        if x<0 and from_=='target':\n            return\n        bar=6 if key in ['atk','def','spa','spd','spe'] else 3\n        if x>0:\n            self['boosts'][key]=min(bar,self['boosts'][key]+x)\n        else:\n            self['boosts'][key]=max(-bar,self['boosts'][key]+x)\n\n    def get_evasion(self):\n        if self['conditions'].get('PHANTOM_FORCE'):\n            return 0\n        return 1\n\n    def move_1(self): # Dragon Darts\n        hit=True; i=0\n        while hit and i<2:\n            damage_ret=self.get_damage()\n            if damage_ret['miss']: break\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            i+=1; hit=False if self.target.isfaint() else True\n    \n    def move_2(self): # Phantom Force\n        if not self['conditions'].get('PHANTOM_FORCE'):\n            self.set_condition('PHANTOM_FORCE',counter=0)\n            self.state['canact']='Phantom Force'\n        else:\n            del self['conditions']['PHANTOM_FORCE']\n            self.state['canact']=True\n            damage_ret=self.get_damage()\n            if not damage_ret['miss']:\n                damage=damage_ret['damage']\n                self.target.take_damage(damage)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Dragapult\",\n  \"types\": [\n    \"Dragon\",\n    \"Ghost\"\n  ],\n  \"gender\": \"Female\",\n  \"ability\": {\n    \"Clear Body\": \"Prevents other Pokemon from lowering this Pokemon's stat stages.\"\n  },\n  \"moves\": {\n    \"Dragon Darts\": {\n      \"power\": 50,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Dragon\",\n      \"effect\": \"Hits twice.\"\n    },\n    \"Phantom Force\": {\n      \"power\": 90,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Ghost\",\n      \"effect\": \"This attack charges on the first turn and executes on the second. On the first turn, the user avoids all attacks.\",\n      \"property\": [\n        \"contact\"\n      ]\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Dragapult(PokemonBase):\n    _species='Dragapult'\n    _types=['Dragon','Ghost']\n    _gender='Female'\n    _ability=['Clear Body']\n    _move_1=('Dragon Darts',50,100,'Physical','Dragon',0,[])\n    _move_2=('Phantom Force',90,100,'Physical','Ghost',0,['contact'])\n    def __init__(self):\n        super().__init__()\n\n    def set_boost(self,key,x,from_='target'):\n        if x<0 and from_=='target':\n            return\n        bar=6 if key in ['atk','def','spa','spd','spe'] else 3\n        if x>0:\n            self['boosts'][key]=min(bar,self['boosts'][key]+x)\n        else:\n            self['boosts'][key]=max(-bar,self['boosts'][key]+x)\n\n    def get_evasion(self):\n        if self['conditions'].get('PHANTOM_FORCE'):\n            return 0\n        return 1\n\n    def move_1(self): # Dragon Darts\n        hit=True; i=0\n        while hit and i<2:\n            damage_ret=self.get_damage()\n            if damage_ret['miss']: break\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            i+=1; hit=False if self.target.isfaint() else True\n    \n    def move_2(self): # Phantom Force\n        if not self['conditions'].get('PHANTOM_FORCE'):\n            self.set_condition('PHANTOM_FORCE',counter=0)\n            self.state['canact']='Phantom Force'\n        else:\n            del self['conditions']['PHANTOM_FORCE']\n            self.state['canact']=True\n            damage_ret=self.get_damage()\n            if not damage_ret['miss']:\n                damage=damage_ret['damage']\n                self.target.take_damage(damage)\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Dragon Dance\": {\n    \"power\": 0,\n    \"accuracy\": 100000,\n    \"category\": \"Status\",\n    \"type\": \"Dragon\",\n    \"effect\": \"Raises the user's Attack and Speed by 1 stage.\"\n  }\n}\n```",
        "response": "```python\n@Increment(Dragapult,'_move_3')\ndef value():\n    return ('Dragon Dance',0,100000,'Status','Dragon',0,[])\n\n@Increment(Dragapult)\ndef move_3(self): # Dragon Dance\n    self.set_boost('atk',+1,'self')\n    self.set_boost('spe',+1,'self')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Dragapult\",\n  \"types\": [\n    \"Dragon\",\n    \"Ghost\"\n  ],\n  \"gender\": \"Female\",\n  \"ability\": {\n    \"Ghostly Boost\": \"At the end of each turn, this Pokemon has a 30% chance to raise a random stat by 1 stage.\"\n  },\n  \"moves\": {\n    \"Dragon Darts\": {\n      \"power\": 50,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Dragon\",\n      \"effect\": \"Hits twice.\"\n    },\n    \"Phantom Force\": {\n      \"power\": 90,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Ghost\",\n      \"effect\": \"This attack charges on the first turn and executes on the second. On the first turn, the user avoids all attacks.\",\n      \"property\": [\n        \"contact\"\n      ]\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass Dragapult(PokemonBase):\n    _species='Dragapult'\n    _types=['Dragon','Ghost']\n    _gender='Female'\n    _ability=['Ghostly Boost']\n    _move_1=('Dragon Darts',50,100,'Physical','Dragon',0,[])\n    _move_2=('Phantom Force',90,100,'Physical','Ghost',0,['contact'])\n    def __init__(self):\n        super().__init__()\n    \n    def get_evasion(self):\n        if self['conditions'].get('PHANTOM_FORCE'):\n            return 0\n        return 1\n    \n    def endturn(self):\n        if rnd()<0.3:\n            self.set_boost(rndc(['atk','def','spa','spd','spe']),+1)\n    \n    def move_1(self): # Dragon Darts\n        hit=True; i=0\n        while hit and i<2:\n            damage_ret=self.get_damage()\n            if damage_ret['miss']: break\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            i+=1; hit=False if self.target.isfaint() else True\n    \n    def move_2(self): # Phantom Force\n        if not self['conditions'].get('PHANTOM_FORCE'):\n            self.set_condition('PHANTOM_FORCE',counter=0)\n            self.state['canact']='Phantom Force'\n        else:\n            del self['conditions']['PHANTOM_FORCE']\n            self.state['canact']=True\n            damage_ret=self.get_damage()\n            if not damage_ret['miss']:\n                damage=damage_ret['damage']\n                self.target.take_damage(damage)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Dragomir\",\n  \"types\": [\n    \"Dragon\",\n    \"Psychic\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Mystic Eyes\": \"This Pokemon cannot have its stats lowered.\"\n  },\n  \"moves\": {\n    \"Legend Strike\": {\n      \"power\": 90,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Dragon\",\n      \"effect\": \"Has a 20% chance to confuse the target.\"\n    },\n    \"Mind Shatter\": {\n      \"power\": 70,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Psychic\",\n      \"effect\": \"Has a 30% chance to lower the target's Special Defense by 1 stage.\"\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass Dragomir(PokemonBase):\n    _species='Dragomir'\n    _types=['Dragon','Psychic']\n    _gender='Male'\n    _ability=['Mystic Eyes']\n    _move_1=('Legend Strike',90,100,'Physical','Dragon',0,[])\n    _move_2=('Mind Shatter',70,100,'Special','Psychic',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def set_boost(self,key,x,from_='target'):\n        bar=6 if key in ['atk','def','spa','spd','spe'] else 3\n        if x>0:\n            self['boosts'][key]=min(bar,self['boosts'][key]+x)\n    \n    def move_1(self): # Legend Strike\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<20/100: self.target.set_condition('CONFUSION',counter=0)\n    \n    def move_2(self): # Mind Shatter\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100: self.target.set_boost('spd',-1)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Dragomir\",\n  \"types\": [\n    \"Dragon\",\n    \"Psychic\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Mystic Eyes\": \"This Pokemon cannot have its stats lowered.\"\n  },\n  \"moves\": {\n    \"Legend Strike\": {\n      \"power\": 90,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Dragon\",\n      \"effect\": \"Has a 20% chance to confuse the target.\"\n    },\n    \"Mind Shatter\": {\n      \"power\": 70,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Psychic\",\n      \"effect\": \"Has a 30% chance to lower the target's Special Defense by 1 stage.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Dragomir(PokemonBase):\n    _species='Dragomir'\n    _types=['Dragon','Psychic']\n    _gender='Male'\n    _ability=['Mystic Eyes']\n    _move_1=('Legend Strike',90,100,'Physical','Dragon',0,[])\n    _move_2=('Mind Shatter',70,100,'Special','Psychic',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def set_boost(self,key,x,from_='target'):\n        bar=6 if key in ['atk','def','spa','spd','spe'] else 3\n        if x>0:\n            self['boosts'][key]=min(bar,self['boosts'][key]+x)\n    \n    def move_1(self): # Legend Strike\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<20/100: self.target.set_condition('CONFUSION',counter=0)\n    \n    def move_2(self): # Mind Shatter\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100: self.target.set_boost('spd',-1)\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Recover\": {\n    \"power\": 0,\n    \"accuracy\": 100000,\n    \"category\": \"Status\",\n    \"type\": \"Normal\",\n    \"effect\": \"The user restores 1/2 of its maximum HP.\"\n  }\n}\n```",
        "response": "```python\n@Increment(Dragomir,'_move_3')\ndef value():\n    return ('Recover',0,100000,'Status','Normal',0,[])\n\n@Increment(Dragomir)\ndef move_3(self): # Recover\n    self.restore(self['max_hp']//2,'heal')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Dragomir\",\n  \"types\": [\n    \"Dragon\",\n    \"Psychic\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Mystic Eyes\": \"This Pokemon cannot have its stats lowered.\"\n  },\n  \"moves\": {\n    \"Legend Strike\": {\n      \"power\": 90,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Dragon\",\n      \"effect\": \"Has a 20% chance to confuse the target.\"\n    },\n    \"Mind Shatter\": {\n      \"power\": 70,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Psychic\",\n      \"effect\": \"Has a 30% chance to lower the target's Special Defense by 1 stage.\"\n    },\n    \"Recover\": {\n      \"power\": 0,\n      \"accuracy\": 100000,\n      \"category\": \"Status\",\n      \"type\": \"Normal\",\n      \"effect\": \"The user restores 1/2 of its maximum HP.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Dragomir(PokemonBase):\n    _species='Dragomir'\n    _types=['Dragon','Psychic']\n    _gender='Male'\n    _ability=['Mystic Eyes']\n    _move_1=('Legend Strike',90,100,'Physical','Dragon',0,[])\n    _move_2=('Mind Shatter',70,100,'Special','Psychic',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def set_boost(self,key,x,from_='target'):\n        bar=6 if key in ['atk','def','spa','spd','spe'] else 3\n        if x>0:\n            self['boosts'][key]=min(bar,self['boosts'][key]+x)\n    \n    def move_1(self): # Legend Strike\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<20/100: self.target.set_condition('CONFUSION',counter=0)\n    \n    def move_2(self): # Mind Shatter\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100: self.target.set_boost('spd',-1)\n\n@Increment(Dragomir,'_move_3')\ndef value():\n    return ('Recover',0,100000,'Status','Normal',0,[])\n\n@Increment(Dragomir)\ndef move_3(self): # Recover\n    self.restore(self['max_hp']//2,'heal')\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Psychic Blast\": {\n    \"power\": 100,\n    \"accuracy\": 95,\n    \"category\": \"Special\",\n    \"type\": \"Psychic\",\n    \"effect\": \"Has a 10% chance to paralyze the target.\"\n  }\n}\n```",
        "response": "```python\n@Increment(Dragomir,'_move_4')\ndef value():\n    return ('Psychic Blast',100,95,'Special','Psychic',0,[])\n\n@Increment(Dragomir)\ndef move_4(self): # Psychic Blast\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint() and rnd()<10/100: self.target.set_status('PAR')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Dragomir\",\n  \"types\": [\n    \"Dragon\",\n    \"Psychic\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Mystic Eyes\": \"This Pokemon cannot have its stats lowered.\"\n  },\n  \"moves\": {\n    \"Legend Strike\": {\n      \"power\": 90,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Dragon\",\n      \"effect\": \"Has a 20% chance to confuse the target.\"\n    },\n    \"Mind Shatter\": {\n      \"power\": 70,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Psychic\",\n      \"effect\": \"Has a 30% chance to lower the target's Special Defense by 1 stage.\"\n    },\n    \"Recover\": {\n      \"power\": 0,\n      \"accuracy\": 100000,\n      \"category\": \"Status\",\n      \"type\": \"Normal\",\n      \"effect\": \"The user restores 1/2 of its maximum HP.\"\n    },\n    \"Psychic Blast\": {\n      \"power\": 100,\n      \"accuracy\": 95,\n      \"category\": \"Special\",\n      \"type\": \"Psychic\",\n      \"effect\": \"Has a 10% chance to paralyze the target.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Dragomir(PokemonBase):\n    _species='Dragomir'\n    _types=['Dragon','Psychic']\n    _gender='Male'\n    _ability=['Mystic Eyes']\n    _move_1=('Legend Strike',90,100,'Physical','Dragon',0,[])\n    _move_2=('Mind Shatter',70,100,'Special','Psychic',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def set_boost(self,key,x,from_='target'):\n        bar=6 if key in ['atk','def','spa','spd','spe'] else 3\n        if x>0:\n            self['boosts'][key]=min(bar,self['boosts'][key]+x)\n    \n    def move_1(self): # Legend Strike\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<20/100: self.target.set_condition('CONFUSION',counter=0)\n    \n    def move_2(self): # Mind Shatter\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100: self.target.set_boost('spd',-1)\n\n@Increment(Dragomir,'_move_3')\ndef value():\n    return ('Recover',0,100000,'Status','Normal',0,[])\n\n@Increment(Dragomir)\ndef move_3(self): # Recover\n    self.restore(self['max_hp']//2,'heal')\n\n@Increment(Dragomir,'_move_4')\ndef value():\n    return ('Psychic Blast',100,95,'Special','Psychic',0,[])\n\n@Increment(Dragomir)\ndef move_4(self): # Psychic Blast\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint() and rnd()<10/100: self.target.set_status('PAR')\n```\n\nThis role is gonna learn a new ability:\n```json\n{\n  \"Focused Destruction\": \"Once per turn, this Pokemon can randomly lower one of the opponent's stats by one stage.\"\n}\n```",
        "response": "```python\n@Increment(Dragomir,'_ability')\ndef value():\n    return ['Mystic Eyes','Focused Destruction']\n\n@Increment(Dragomir)\ndef endturn(self):\n    self.target.set_boost(rndc(['atk','def','spa','spd','spe']),-1)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Dragonair\",\n  \"types\": [\n    \"Dragon\"\n  ],\n  \"gender\": \"Female\",\n  \"ability\": {\n    \"Shed Skin\": \"At the end of each turn, this Pokemon has a 33% chance to cure its status and heals 1/8 of its max HP.\"\n  },\n  \"moves\": {\n    \"Dragon Claw\": {\n      \"power\": 80,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Dragon\",\n      \"effect\": \"No additional effect.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Aqua Tail\": {\n      \"power\": 90,\n      \"accuracy\": 90,\n      \"category\": \"Physical\",\n      \"type\": \"Water\",\n      \"effect\": \"No additional effect.\",\n      \"property\": [\n        \"contact\"\n      ]\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass Dragonair(PokemonBase):\n    _species='Dragonair'\n    _types=['Dragon']\n    _gender='Female'\n    _ability=['Shed Skin']\n    _move_1=('Dragon Claw',80,100,'Physical','Dragon',0,['contact'])\n    _move_2=('Aqua Tail',90,90,'Physical','Water',0,['contact'])\n    def __init__(self):\n        super().__init__()\n    \n    def endturn(self):\n        if rnd()<1/3:\n            self.state['status']=None\n            self.restore(int(1/8*self['max_hp']),'heal')\n    \n    def move_1(self): # Dragon Claw\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n    \n    def move_2(self): # Aqua Tail\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Dragonair\",\n  \"types\": [\n    \"Dragon\"\n  ],\n  \"gender\": \"Female\",\n  \"ability\": {\n    \"Shed Skin\": \"At the end of each turn, this Pokemon has a 33% chance to cure its status and heals 1/8 of its max HP.\"\n  },\n  \"moves\": {\n    \"Dragon Claw\": {\n      \"power\": 80,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Dragon\",\n      \"effect\": \"No additional effect.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Aqua Tail\": {\n      \"power\": 90,\n      \"accuracy\": 90,\n      \"category\": \"Physical\",\n      \"type\": \"Water\",\n      \"effect\": \"No additional effect.\",\n      \"property\": [\n        \"contact\"\n      ]\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Dragonair(PokemonBase):\n    _species='Dragonair'\n    _types=['Dragon']\n    _gender='Female'\n    _ability=['Shed Skin']\n    _move_1=('Dragon Claw',80,100,'Physical','Dragon',0,['contact'])\n    _move_2=('Aqua Tail',90,90,'Physical','Water',0,['contact'])\n    def __init__(self):\n        super().__init__()\n    \n    def endturn(self):\n        if rnd()<1/3:\n            self.state['status']=None\n            self.restore(int(1/8*self['max_hp']),'heal')\n    \n    def move_1(self): # Dragon Claw\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n    \n    def move_2(self): # Aqua Tail\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Fire Fang\": {\n    \"power\": 65,\n    \"accuracy\": 95,\n    \"category\": \"Physical\",\n    \"type\": \"Fire\",\n    \"effect\": \"Has a 10% chance to burn the target and a separate 10% chance to make it flinch.\",\n    \"property\": [\n      \"contact\",\n      \"bite\"\n    ]\n  }\n}\n```",
        "response": "```python\n@Increment(Dragonair,'_move_3')\ndef value():\n    return ('Fire Fang',65,95,'Physical','Fire',0,['contact','bite'])\n\n@Increment(Dragonair)\ndef move_3(self): # Fire Fang\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint():\n            if rnd()<10/100:\n                self.target.set_condition('FLINCH',counter=0)\n            if rnd()<10/100:\n                self.target.set_status('BRN')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Dragonair\",\n  \"types\": [\n    \"Dragon\"\n  ],\n  \"gender\": \"Female\",\n  \"ability\": {\n    \"Shed Skin\": \"At the end of each turn, this Pokemon has a 33% chance to cure its status and heals 1/8 of its max HP.\"\n  },\n  \"moves\": {\n    \"Dragon Claw\": {\n      \"power\": 80,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Dragon\",\n      \"effect\": \"No additional effect.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Aqua Tail\": {\n      \"power\": 90,\n      \"accuracy\": 90,\n      \"category\": \"Physical\",\n      \"type\": \"Water\",\n      \"effect\": \"No additional effect.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Fire Fang\": {\n      \"power\": 65,\n      \"accuracy\": 95,\n      \"category\": \"Physical\",\n      \"type\": \"Fire\",\n      \"effect\": \"Has a 10% chance to burn the target and a separate 10% chance to make it flinch.\",\n      \"property\": [\n        \"contact\",\n        \"bite\"\n      ]\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Dragonair(PokemonBase):\n    _species='Dragonair'\n    _types=['Dragon']\n    _gender='Female'\n    _ability=['Shed Skin']\n    _move_1=('Dragon Claw',80,100,'Physical','Dragon',0,['contact'])\n    _move_2=('Aqua Tail',90,90,'Physical','Water',0,['contact'])\n    def __init__(self):\n        super().__init__()\n    \n    def endturn(self):\n        if rnd()<1/3:\n            self.state['status']=None\n            self.restore(int(1/8*self['max_hp']),'heal')\n    \n    def move_1(self): # Dragon Claw\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n    \n    def move_2(self): # Aqua Tail\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n\n@Increment(Dragonair,'_move_3')\ndef value():\n    return ('Fire Fang',65,95,'Physical','Fire',0,['contact','bite'])\n\n@Increment(Dragonair)\ndef move_3(self): # Fire Fang\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint():\n            if rnd()<10/100:\n                self.target.set_condition('FLINCH',counter=0)\n            if rnd()<10/100:\n                self.target.set_status('BRN')\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Thunder Wave\": {\n    \"power\": 0,\n    \"accuracy\": 100000,\n    \"category\": \"Status\",\n    \"type\": \"Electric\",\n    \"effect\": \"Paralyzes the target.\"\n  }\n}\n```",
        "response": "```python\n@Increment(Dragonair,'_move_4')\ndef value():\n    return ('Thunder Wave',0,100000,'Status','Electric',0,[])\n\n@Increment(Dragonair)\ndef move_4(self): # Thunder Wave\n    self.target.set_status('PAR')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Dragonite\",\n  \"types\": [\n    \"Dragon\",\n    \"Flying\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Multiscale\": \"If this Pokemon is at full HP, damage taken from attacks is halved.\"\n  },\n  \"moves\": {\n    \"Dragon Dance\": {\n      \"power\": 0,\n      \"accuracy\": 1000000,\n      \"category\": \"Status\",\n      \"type\": \"Dragon\",\n      \"effect\": \"Raises the user's Attack and Speed by 1 stage.\"\n    },\n    \"Aerial Ace\": {\n      \"power\": 60,\n      \"accuracy\": 1000000,\n      \"category\": \"Physical\",\n      \"type\": \"Flying\",\n      \"effect\": \"This move does not check accuracy.\"\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass Dragonite(PokemonBase):\n    _species='Dragonite'\n    _types=['Dragon','Flying']\n    _gender='Male'\n    _ability=['Multiscale']\n    _move_1=('Dragon Dance',0,1000000,'Status','Dragon',0,[])\n    _move_2=('Aerial Ace',60,1000000,'Physical','Flying',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def _take_damage_attack(self,x):\n        self.register_act_taken()\n        if self['hp']==self['max_hp']:\n            x//=2\n        self.state['hp']=max(0,self['hp']-x)\n        if self['hp']==0:\n            self.state['status']='FNT'\n\n    def move_1(self): # Dragon Dance\n        self.set_boost('atk',+1,'self')\n        self.set_boost('spe',+1,'self')\n\n    def move_2(self): # Aerial Ace\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Dragonite\",\n  \"types\": [\n    \"Dragon\",\n    \"Flying\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Multiscale\": \"If this Pokemon is at full HP, damage taken from attacks is halved.\"\n  },\n  \"moves\": {\n    \"Dragon Dance\": {\n      \"power\": 0,\n      \"accuracy\": 1000000,\n      \"category\": \"Status\",\n      \"type\": \"Dragon\",\n      \"effect\": \"Raises the user's Attack and Speed by 1 stage.\"\n    },\n    \"Aerial Ace\": {\n      \"power\": 60,\n      \"accuracy\": 1000000,\n      \"category\": \"Physical\",\n      \"type\": \"Flying\",\n      \"effect\": \"This move does not check accuracy.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Dragonite(PokemonBase):\n    _species='Dragonite'\n    _types=['Dragon','Flying']\n    _gender='Male'\n    _ability=['Multiscale']\n    _move_1=('Dragon Dance',0,1000000,'Status','Dragon',0,[])\n    _move_2=('Aerial Ace',60,1000000,'Physical','Flying',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def _take_damage_attack(self,x):\n        self.register_act_taken()\n        if self['hp']==self['max_hp']:\n            x//=2\n        self.state['hp']=max(0,self['hp']-x)\n        if self['hp']==0:\n            self.state['status']='FNT'\n\n    def move_1(self): # Dragon Dance\n        self.set_boost('atk',+1,'self')\n        self.set_boost('spe',+1,'self')\n\n    def move_2(self): # Aerial Ace\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Earthquake\": {\n    \"power\": 100,\n    \"accuracy\": 100,\n    \"category\": \"Physical\",\n    \"type\": \"Ground\",\n    \"effect\": \"\"\n  }\n}\n```",
        "response": "```python\n@Increment(Dragonite,'_move_3')\ndef value():\n    return ('Earthquake',100,100,'Physical','Ground',0,[])\n\n@Increment(Dragonite)\ndef move_3(self): # Earthquake\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Dragorion\",\n  \"types\": [\n    \"Fire\",\n    \"Dragon\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"End Phase Fury\": \"Each turn, if this Pokemon uses a status move, it deals damage equal to 1/8 of its max HP to its opponent Pokemon at the end of the turn.\"\n  },\n  \"moves\": {\n    \"Inferno Claw\": {\n      \"power\": 85,\n      \"accuracy\": 90,\n      \"category\": \"Physical\",\n      \"type\": \"Fire\",\n      \"effect\": \"Has a 20% chance to burn the target.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Dragon Breath\": {\n      \"power\": 60,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Dragon\",\n      \"effect\": \"Has a 30% chance to paralyze the target.\"\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass Dragorion(PokemonBase):\n    _species='Dragorion'\n    _types=['Fire','Dragon']\n    _gender='Male'\n    _ability=['End Phase Fury']\n    _move_1=('Inferno Claw',85,90,'Physical','Fire',0,['contact'])\n    _move_2=('Dragon Breath',60,100,'Special','Dragon',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def endturn(self):\n        if self['act'] and self['act']['category']=='Status':\n            self.target.take_damage(self['max_hp']//8,'loss')\n\n    def move_1(self):\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<20/100:\n                self.target.set_status('BRN')\n\n    def move_2(self):\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100:\n                self.target.set_status('PAR')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Dragorion\",\n  \"types\": [\n    \"Fire\",\n    \"Dragon\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"End Phase Fury\": \"Each turn, if this Pokemon uses a status move, it deals damage equal to 1/8 of its max HP to its opponent Pokemon at the end of the turn.\"\n  },\n  \"moves\": {\n    \"Inferno Claw\": {\n      \"power\": 85,\n      \"accuracy\": 90,\n      \"category\": \"Physical\",\n      \"type\": \"Fire\",\n      \"effect\": \"Has a 20% chance to burn the target.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Dragon Breath\": {\n      \"power\": 60,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Dragon\",\n      \"effect\": \"Has a 30% chance to paralyze the target.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Dragorion(PokemonBase):\n    _species='Dragorion'\n    _types=['Fire','Dragon']\n    _gender='Male'\n    _ability=['End Phase Fury']\n    _move_1=('Inferno Claw',85,90,'Physical','Fire',0,['contact'])\n    _move_2=('Dragon Breath',60,100,'Special','Dragon',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def endturn(self):\n        if self['act'] and self['act']['category']=='Status':\n            self.target.take_damage(self['max_hp']//8,'loss')\n\n    def move_1(self):\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<20/100:\n                self.target.set_status('BRN')\n\n    def move_2(self):\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100:\n                self.target.set_status('PAR')\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Fiery Roar\": {\n    \"power\": 0,\n    \"accuracy\": 100,\n    \"category\": \"Status\",\n    \"type\": \"Fire\",\n    \"effect\": \"Lowers the target's Attack by 1 stage and has a 50% chance to burn.\"\n  }\n}\n```",
        "response": "```python\n@Increment(Dragorion,'_move_3')\ndef value():\n    return ('Fiery Roar',0,100,'Status','Fire',0,[])\n\n@Increment(Dragorion)\ndef move_3(self):\n    self.target.set_boost('atk',-1)\n    if not self.target.isfaint() and rnd()<50/100:\n        self.target.set_status('BRN')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Dragorion\",\n  \"types\": [\n    \"Fire\",\n    \"Dragon\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"End Phase Fury\": \"Each turn, if this Pokemon uses a status move, it deals damage equal to 1/8 of its max HP to its opponent Pokemon at the end of the turn.\"\n  },\n  \"moves\": {\n    \"Inferno Claw\": {\n      \"power\": 85,\n      \"accuracy\": 90,\n      \"category\": \"Physical\",\n      \"type\": \"Fire\",\n      \"effect\": \"Has a 20% chance to burn the target.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Dragon Breath\": {\n      \"power\": 60,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Dragon\",\n      \"effect\": \"Has a 30% chance to paralyze the target.\"\n    },\n    \"Fiery Roar\": {\n      \"power\": 0,\n      \"accuracy\": 100,\n      \"category\": \"Status\",\n      \"type\": \"Fire\",\n      \"effect\": \"Lowers the target's Attack by 1 stage and has a 50% chance to burn.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Dragorion(PokemonBase):\n    _species='Dragorion'\n    _types=['Fire','Dragon']\n    _gender='Male'\n    _ability=['End Phase Fury']\n    _move_1=('Inferno Claw',85,90,'Physical','Fire',0,['contact'])\n    _move_2=('Dragon Breath',60,100,'Special','Dragon',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def endturn(self):\n        if self['act'] and self['act']['category']=='Status':\n            self.target.take_damage(self['max_hp']//8,'loss')\n\n    def move_1(self):\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<20/100:\n                self.target.set_status('BRN')\n\n    def move_2(self):\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100:\n                self.target.set_status('PAR')\n\n@Increment(Dragorion,'_move_3')\ndef value():\n    return ('Fiery Roar',0,100,'Status','Fire',0,[])\n\n@Increment(Dragorion)\ndef move_3(self):\n    self.target.set_boost('atk',-1)\n    if not self.target.isfaint() and rnd()<50/100:\n        self.target.set_status('BRN')\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Heat Wave\": {\n    \"power\": 95,\n    \"accuracy\": 90,\n    \"category\": \"Special\",\n    \"type\": \"Fire\",\n    \"effect\": \"Has a 10% chance to burn the target.\"\n  }\n}\n```",
        "response": "```python\n@Increment(Dragorion,'_move_4')\ndef value():\n    return ('Heat Wave',95,90,'Special','Fire',0,[])\n\n@Increment(Dragorion)\ndef move_4(self):\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint() and rnd()<10/100:\n            self.target.set_status('BRN')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Dragorion\",\n  \"types\": [\n    \"Fire\",\n    \"Dragon\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"End Phase Fury\": \"Each turn, if this Pokemon uses a status move, it deals damage equal to 1/8 of its max HP to its opponent Pokemon at the end of the turn.\"\n  },\n  \"moves\": {\n    \"Inferno Claw\": {\n      \"power\": 85,\n      \"accuracy\": 90,\n      \"category\": \"Physical\",\n      \"type\": \"Fire\",\n      \"effect\": \"Has a 20% chance to burn the target.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Dragon Breath\": {\n      \"power\": 60,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Dragon\",\n      \"effect\": \"Has a 30% chance to paralyze the target.\"\n    },\n    \"Fiery Roar\": {\n      \"power\": 0,\n      \"accuracy\": 100,\n      \"category\": \"Status\",\n      \"type\": \"Fire\",\n      \"effect\": \"Lowers the target's Attack by 1 stage and has a 50% chance to burn.\"\n    },\n    \"Heat Wave\": {\n      \"power\": 95,\n      \"accuracy\": 90,\n      \"category\": \"Special\",\n      \"type\": \"Fire\",\n      \"effect\": \"Has a 10% chance to burn the target.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Dragorion(PokemonBase):\n    _species='Dragorion'\n    _types=['Fire','Dragon']\n    _gender='Male'\n    _ability=['End Phase Fury']\n    _move_1=('Inferno Claw',85,90,'Physical','Fire',0,['contact'])\n    _move_2=('Dragon Breath',60,100,'Special','Dragon',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def endturn(self):\n        if self['act'] and self['act']['category']=='Status':\n            self.target.take_damage(self['max_hp']//8,'loss')\n\n    def move_1(self):\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<20/100:\n                self.target.set_status('BRN')\n\n    def move_2(self):\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100:\n                self.target.set_status('PAR')\n\n@Increment(Dragorion,'_move_3')\ndef value():\n    return ('Fiery Roar',0,100,'Status','Fire',0,[])\n\n@Increment(Dragorion)\ndef move_3(self):\n    self.target.set_boost('atk',-1)\n    if not self.target.isfaint() and rnd()<50/100:\n        self.target.set_status('BRN')\n\n@Increment(Dragorion,'_move_4')\ndef value():\n    return ('Heat Wave',95,90,'Special','Fire',0,[])\n\n@Increment(Dragorion)\ndef move_4(self):\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint() and rnd()<10/100:\n            self.target.set_status('BRN')\n```\n\nThis role is gonna learn a new ability:\n```json\n{\n  \"Flame Shield\": \"When this Pokemon is hit by a contact move, it has a 30% chance to burn the attacker.\"\n}\n```",
        "response": "```python\n@Increment(Dragorion,'_ability')\ndef value():\n    return ['End Phase Fury','Flame Shield']\n\n@Increment(Dragorion)\ndef _take_damage_attack(self,x):\n    self.register_act_taken()\n    self.state['hp']=max(0,self['hp']-x)\n    if 'property' in self['act_taken'] and 'contact' in self['act_taken']['property']:\n        if rnd()<30/100:\n            self.target.set_status('BRN')\n    if self['hp']==0:\n        self.state['status']='FNT'\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Dragorion\",\n  \"types\": [\n    \"Fire\",\n    \"Dragon\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"End Phase Fury\": \"Each turn, if this Pokemon uses a status move, it deals damage equal to 1/8 of its max HP to its opponent Pokemon at the end of the turn.\",\n    \"Flame Shield\": \"When this Pokemon is hit by a contact move, it has a 30% chance to burn the attacker.\"\n  },\n  \"moves\": {\n    \"Inferno Claw\": {\n      \"power\": 85,\n      \"accuracy\": 90,\n      \"category\": \"Physical\",\n      \"type\": \"Fire\",\n      \"effect\": \"Has a 20% chance to burn the target.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Dragon Breath\": {\n      \"power\": 60,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Dragon\",\n      \"effect\": \"Has a 30% chance to paralyze the target.\"\n    },\n    \"Fiery Roar\": {\n      \"power\": 0,\n      \"accuracy\": 100,\n      \"category\": \"Status\",\n      \"type\": \"Fire\",\n      \"effect\": \"Lowers the target's Attack by 1 stage and has a 50% chance to burn.\"\n    },\n    \"Heat Wave\": {\n      \"power\": 95,\n      \"accuracy\": 90,\n      \"category\": \"Special\",\n      \"type\": \"Fire\",\n      \"effect\": \"Has a 10% chance to burn the target.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Dragorion(PokemonBase):\n    _species='Dragorion'\n    _types=['Fire','Dragon']\n    _gender='Male'\n    _ability=['End Phase Fury']\n    _move_1=('Inferno Claw',85,90,'Physical','Fire',0,['contact'])\n    _move_2=('Dragon Breath',60,100,'Special','Dragon',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def endturn(self):\n        if self['act'] and self['act']['category']=='Status':\n            self.target.take_damage(self['max_hp']//8,'loss')\n\n    def move_1(self):\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<20/100:\n                self.target.set_status('BRN')\n\n    def move_2(self):\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100:\n                self.target.set_status('PAR')\n\n@Increment(Dragorion,'_move_3')\ndef value():\n    return ('Fiery Roar',0,100,'Status','Fire',0,[])\n\n@Increment(Dragorion)\ndef move_3(self):\n    self.target.set_boost('atk',-1)\n    if not self.target.isfaint() and rnd()<50/100:\n        self.target.set_status('BRN')\n\n@Increment(Dragorion,'_move_4')\ndef value():\n    return ('Heat Wave',95,90,'Special','Fire',0,[])\n\n@Increment(Dragorion)\ndef move_4(self):\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint() and rnd()<10/100:\n            self.target.set_status('BRN')\n\n@Increment(Dragorion,'_ability')\ndef value():\n    return ['End Phase Fury','Flame Shield']\n\n@Increment(Dragorion)\ndef _take_damage_attack(self,x):\n    self.register_act_taken()\n    self.state['hp']=max(0,self['hp']-x)\n    if 'property' in self['act_taken'] and 'contact' in self['act_taken']['property']:\n        if rnd()<30/100:\n            self.target.set_status('BRN')\n    if self['hp']==0:\n        self.state['status']='FNT'\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Dragon Claw\": {\n    \"power\": 80,\n    \"accuracy\": 100,\n    \"category\": \"Physical\",\n    \"type\": \"Dragon\",\n    \"effect\": \"No additional effect.\",\n    \"property\": [\n      \"contact\"\n    ]\n  }\n}\n```",
        "response": "```python\n@Increment(Dragorion,'_move_5')\ndef value():\n    return ('Dragon Claw',80,100,'Physical','Dragon',0,['contact'])\n\n@Increment(Dragorion)\ndef move_5(self):\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Drakha\",\n  \"types\": [\n    \"Dark\",\n    \"Dragon\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Shadow Realm\": \"On switch-in, this Pokemon creates Shadow Realm on the field for 3 turns. Under Shadow Realm, Dark-type moves have their power multiplied by 1.5.\"\n  },\n  \"moves\": {\n    \"Abyssal Flame\": {\n      \"power\": 100,\n      \"accuracy\": 90,\n      \"category\": \"Special\",\n      \"type\": \"Dragon\",\n      \"effect\": \"Has a 20% chance to burn the target.\"\n    },\n    \"Dark Pulse\": {\n      \"power\": 80,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Dark\",\n      \"effect\": \"Has a 20% chance to flinch the target.\"\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass Drakha(PokemonBase):\n    _species='Drakha'\n    _types=['Dark','Dragon']\n    _gender='Male'\n    _ability=['Shadow Realm']\n    _move_1=('Abyssal Flame',100,90,'Special','Dragon',0,[])\n    _move_2=('Dark Pulse',80,100,'Special','Dark',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def onswitch(self):\n        self.set_side_condition('SHADOW_REALM',counter=0,max_count=3)\n    \n    def get_power(self):\n        power=self['act']['power']\n        if self['side_conditions'].get('SHADOW_REALM') and self['act']['type']=='Dark':\n            power*=1.5\n        return int(power*self.get_weather_power_mult())\n\n    def move_1(self): # Abyssal Flame\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<20/100:\n                self.target.set_status('BRN')\n\n    def move_2(self): # Dark Pulse\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<20/100:\n                self.target.set_condition('FLINCH',counter=0)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Drakha\",\n  \"types\": [\n    \"Dark\",\n    \"Dragon\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Shadow Realm\": \"On switch-in, this Pokemon creates Shadow Realm on the field for 3 turns. Under Shadow Realm, Dark-type moves have their power multiplied by 1.5.\"\n  },\n  \"moves\": {\n    \"Abyssal Flame\": {\n      \"power\": 100,\n      \"accuracy\": 90,\n      \"category\": \"Special\",\n      \"type\": \"Dragon\",\n      \"effect\": \"Has a 20% chance to burn the target.\"\n    },\n    \"Dark Pulse\": {\n      \"power\": 80,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Dark\",\n      \"effect\": \"Has a 20% chance to flinch the target.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Drakha(PokemonBase):\n    _species='Drakha'\n    _types=['Dark','Dragon']\n    _gender='Male'\n    _ability=['Shadow Realm']\n    _move_1=('Abyssal Flame',100,90,'Special','Dragon',0,[])\n    _move_2=('Dark Pulse',80,100,'Special','Dark',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def onswitch(self):\n        self.set_side_condition('SHADOW_REALM',counter=0,max_count=3)\n    \n    def get_power(self):\n        power=self['act']['power']\n        if self['side_conditions'].get('SHADOW_REALM') and self['act']['type']=='Dark':\n            power*=1.5\n        return int(power*self.get_weather_power_mult())\n\n    def move_1(self): # Abyssal Flame\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<20/100:\n                self.target.set_status('BRN')\n\n    def move_2(self): # Dark Pulse\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<20/100:\n                self.target.set_condition('FLINCH',counter=0)\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Despair Roar\": {\n    \"power\": 0,\n    \"accuracy\": 100000,\n    \"category\": \"Status\",\n    \"type\": \"Dark\",\n    \"effect\": \"Lowers the target's Attack and Special Attack by 1 stage.\"\n  }\n}\n```",
        "response": "```python\n@Increment(Drakha,'_move_3')\ndef value():\n    return ('Despair Roar',0,100000,'Status','Dark',0,[])\n\n@Increment(Drakha)\ndef move_3(self): # Despair Roar\n    self.target.set_boost('atk',-1)\n    self.target.set_boost('spa',-1)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Drakha\",\n  \"types\": [\n    \"Dark\",\n    \"Dragon\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Shadow Realm\": \"On switch-in, this Pokemon creates Shadow Realm on the field for 3 turns. Under Shadow Realm, Dark-type moves have their power multiplied by 1.5.\"\n  },\n  \"moves\": {\n    \"Abyssal Flame\": {\n      \"power\": 100,\n      \"accuracy\": 90,\n      \"category\": \"Special\",\n      \"type\": \"Dragon\",\n      \"effect\": \"Has a 20% chance to burn the target.\"\n    },\n    \"Dark Pulse\": {\n      \"power\": 80,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Dark\",\n      \"effect\": \"Has a 20% chance to flinch the target.\"\n    },\n    \"Despair Roar\": {\n      \"power\": 0,\n      \"accuracy\": 100000,\n      \"category\": \"Status\",\n      \"type\": \"Dark\",\n      \"effect\": \"Lowers the target's Attack and Special Attack by 1 stage.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Drakha(PokemonBase):\n    _species='Drakha'\n    _types=['Dark','Dragon']\n    _gender='Male'\n    _ability=['Shadow Realm']\n    _move_1=('Abyssal Flame',100,90,'Special','Dragon',0,[])\n    _move_2=('Dark Pulse',80,100,'Special','Dark',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def onswitch(self):\n        self.set_side_condition('SHADOW_REALM',counter=0,max_count=3)\n    \n    def get_power(self):\n        power=self['act']['power']\n        if self['side_conditions'].get('SHADOW_REALM') and self['act']['type']=='Dark':\n            power*=1.5\n        return int(power*self.get_weather_power_mult())\n\n    def move_1(self): # Abyssal Flame\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<20/100:\n                self.target.set_status('BRN')\n\n    def move_2(self): # Dark Pulse\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<20/100:\n                self.target.set_condition('FLINCH',counter=0)\n\n@Increment(Drakha,'_move_3')\ndef value():\n    return ('Despair Roar',0,100000,'Status','Dark',0,[])\n\n@Increment(Drakha)\ndef move_3(self): # Despair Roar\n    self.target.set_boost('atk',-1)\n    self.target.set_boost('spa',-1)\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Dragon Claw\": {\n    \"power\": 80,\n    \"accuracy\": 100,\n    \"category\": \"Physical\",\n    \"type\": \"Dragon\",\n    \"effect\": \"No additional effect.\"\n  }\n}\n```",
        "response": "```python\n@Increment(Drakha,'_move_4')\ndef value():\n    return ('Dragon Claw',80,100,'Physical','Dragon',0,[])\n\n@Increment(Drakha)\ndef move_4(self): # Dragon Claw\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Drakha\",\n  \"types\": [\n    \"Dark\",\n    \"Dragon\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Shadow Realm\": \"On switch-in, this Pokemon creates Shadow Realm on the field for 3 turns. Under Shadow Realm, Dark-type moves have their power multiplied by 1.5.\"\n  },\n  \"moves\": {\n    \"Abyssal Flame\": {\n      \"power\": 100,\n      \"accuracy\": 90,\n      \"category\": \"Special\",\n      \"type\": \"Dragon\",\n      \"effect\": \"Has a 20% chance to burn the target.\"\n    },\n    \"Dark Pulse\": {\n      \"power\": 80,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Dark\",\n      \"effect\": \"Has a 20% chance to flinch the target.\"\n    },\n    \"Despair Roar\": {\n      \"power\": 0,\n      \"accuracy\": 100000,\n      \"category\": \"Status\",\n      \"type\": \"Dark\",\n      \"effect\": \"Lowers the target's Attack and Special Attack by 1 stage.\"\n    },\n    \"Dragon Claw\": {\n      \"power\": 80,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Dragon\",\n      \"effect\": \"No additional effect.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Drakha(PokemonBase):\n    _species='Drakha'\n    _types=['Dark','Dragon']\n    _gender='Male'\n    _ability=['Shadow Realm']\n    _move_1=('Abyssal Flame',100,90,'Special','Dragon',0,[])\n    _move_2=('Dark Pulse',80,100,'Special','Dark',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def onswitch(self):\n        self.set_side_condition('SHADOW_REALM',counter=0,max_count=3)\n    \n    def get_power(self):\n        power=self['act']['power']\n        if self['side_conditions'].get('SHADOW_REALM') and self['act']['type']=='Dark':\n            power*=1.5\n        return int(power*self.get_weather_power_mult())\n\n    def move_1(self): # Abyssal Flame\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<20/100:\n                self.target.set_status('BRN')\n\n    def move_2(self): # Dark Pulse\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<20/100:\n                self.target.set_condition('FLINCH',counter=0)\n\n@Increment(Drakha,'_move_3')\ndef value():\n    return ('Despair Roar',0,100000,'Status','Dark',0,[])\n\n@Increment(Drakha)\ndef move_3(self): # Despair Roar\n    self.target.set_boost('atk',-1)\n    self.target.set_boost('spa',-1)\n\n@Increment(Drakha,'_move_4')\ndef value():\n    return ('Dragon Claw',80,100,'Physical','Dragon',0,[])\n\n@Increment(Drakha)\ndef move_4(self): # Dragon Claw\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n```\n\nThis role is gonna learn a new ability:\n```json\n{\n  \"Destruction Surge\": \"This Pokemon's next attack deals 2x damage if its stat is lowered.\"\n}\n```",
        "response": "```python\n@Increment(Drakha,'_ability')\ndef value():\n    return ['Shadow Realm','Destruction Surge']\n\n@Increment(Drakha)\ndef set_boost(self,key,x,from_='target'):\n    bar=6 if key in ['atk','def','spa','spd','spe'] else 3\n    if x>0:\n        self['boosts'][key]=min(bar,self['boosts'][key]+x)\n    else:\n        self['boosts'][key]=max(-bar,self['boosts'][key]+x)\n        self.set_condition('DESTRUCTION_SURGE',counter=0)\n\n@Increment(Drakha)\ndef get_other_mult(self):\n    mult=1\n    if self.isstatus('BRN') and self['act']['category']=='Physical':\n        mult*=0.5\n    if self['conditions'].get('DESTRUCTION_SURGE'):\n        mult*=2\n        del self['conditions']['DESTRUCTION_SURGE']\n    return mult\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Duraludon\",\n  \"types\": [\n    \"Steel\",\n    \"Dragon\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Sniper\": \"Increases critical hit damage to 2.25x instead of 1.5x.\"\n  },\n  \"moves\": {\n    \"Flash Cannon\": {\n      \"power\": 80,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Steel\",\n      \"effect\": \"Has a 10% chance to lower the target's Special Defense by 1 stage.\"\n    },\n    \"Tri Attack\": {\n      \"power\": 80,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Normal\",\n      \"effect\": \"Has a 20% chance to either burn, freeze or paralyze the target.\"\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass Duraludon(PokemonBase):\n    _species='Duraludon'\n    _types=['Steel','Dragon']\n    _gender='Male'\n    _ability=['Sniper']\n    _move_1=('Flash Cannon',80,100,'Special','Steel',0,[])\n    _move_2=('Tri Attack',80,100,'Special','Normal',0,[])\n    def __init__(self):\n        super().__init__()\n    \n    def move_1(self): # Flash Cannon\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            if damage_ret['crit']: damage=int(damage*1.5)\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<10/100: self.target.set_boost('spd',-1)\n    \n    def move_2(self): # Tri Attack\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            if damage_ret['crit']: damage=int(damage*1.5)\n            self.target.take_damage(damage)\n            if not self.target.isfaint():\n                r=rnd()\n                if r<20/100: \n                    self.target.set_status('PAR')\n                elif r<40/100:\n                    self.target.set_status('BRN')\n                elif r<60/100:\n                    self.target.set_status('FRZ')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Espinas\",\n  \"types\": [\n    \"Poison\",\n    \"Fire\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Toxic Shield\": \"Espiker's thick hide reduces damage from physical moves by 30%; prevent from being paralyzed or poisoned; has a 20% chance to inflict Poison when hit by a contact move.\"\n  },\n  \"moves\": {\n    \"Thorned Assault\": {\n      \"power\": 90,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Poison\",\n      \"effect\": \"This move has a 50% chance to burn the target.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Horn Charge\": {\n      \"power\": 120,\n      \"accuracy\": 75,\n      \"category\": \"Physical\",\n      \"type\": \"Normal\",\n      \"effect\": \"This move has a 30% chance to lower the target's Defense by 1 stage.\",\n      \"property\": [\n        \"contact\"\n      ]\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass Espinas(PokemonBase):\n    _species='Espinas'\n    _types=['Poison','Fire']\n    _gender='Male'\n    _ability=['Toxic Shield']\n    _move_1=('Thorned Assault',90,100,'Physical','Poison',0,['contact'])\n    _move_2=('Horn Charge',120,75,'Physical','Normal',0,['contact'])\n    def __init__(self):\n        super().__init__()\n\n    def _take_damage_attack(self,x):\n        self.register_act_taken()\n        if self['act_taken']['category']=='Physical':\n            x=int(x*0.7)\n        self.state['hp']=max(0,self['hp']-x)\n        if self['hp']==0:\n            self.state['status']='FNT'\n            return\n        if 'contact' in self['act_taken']['property'] and rnd()<20/100:\n            self.target.set_condition('PSN')\n\n    def set_status(self,x):\n        if self['status'] or self.env.get('MISTY_TERRAIN'):\n            return\n        if x=='BRN':\n            if not self.istype('Fire'):\n                self.state['status']={x:{'counter':0}}\n        elif x=='FRZ':\n            if not self.istype('Ice'):\n                self.state['status']={x:{'counter':0}}\n        elif x=='SLP':\n            self.state['status']={x:{'counter':0}}\n\n    def move_1(self): # Thorned Assault\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<50/100:\n                self.target.set_condition('BRN')\n\n    def move_2(self): # Horn Charge\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100:\n                self.target.set_boost('def',-1)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Espinas\",\n  \"types\": [\n    \"Poison\",\n    \"Fire\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Toxic Shield\": \"Espiker's thick hide reduces damage from physical moves by 30%; prevent from being paralyzed or poisoned; has a 20% chance to inflict Poison when hit by a contact move.\"\n  },\n  \"moves\": {\n    \"Thorned Assault\": {\n      \"power\": 90,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Poison\",\n      \"effect\": \"This move has a 50% chance to burn the target.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Horn Charge\": {\n      \"power\": 120,\n      \"accuracy\": 75,\n      \"category\": \"Physical\",\n      \"type\": \"Normal\",\n      \"effect\": \"This move has a 30% chance to lower the target's Defense by 1 stage.\",\n      \"property\": [\n        \"contact\"\n      ]\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Espinas(PokemonBase):\n    _species='Espinas'\n    _types=['Poison','Fire']\n    _gender='Male'\n    _ability=['Toxic Shield']\n    _move_1=('Thorned Assault',90,100,'Physical','Poison',0,['contact'])\n    _move_2=('Horn Charge',120,75,'Physical','Normal',0,['contact'])\n    def __init__(self):\n        super().__init__()\n\n    def _take_damage_attack(self,x):\n        self.register_act_taken()\n        if self['act_taken']['category']=='Physical':\n            x=int(x*0.7)\n        self.state['hp']=max(0,self['hp']-x)\n        if self['hp']==0:\n            self.state['status']='FNT'\n            return\n        if 'contact' in self['act_taken']['property'] and rnd()<20/100:\n            self.target.set_condition('PSN')\n\n    def set_status(self,x):\n        if self['status'] or self.env.get('MISTY_TERRAIN'):\n            return\n        if x=='BRN':\n            if not self.istype('Fire'):\n                self.state['status']={x:{'counter':0}}\n        elif x=='FRZ':\n            if not self.istype('Ice'):\n                self.state['status']={x:{'counter':0}}\n        elif x=='SLP':\n            self.state['status']={x:{'counter':0}}\n\n    def move_1(self): # Thorned Assault\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<50/100:\n                self.target.set_condition('BRN')\n\n    def move_2(self): # Horn Charge\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100:\n                self.target.set_boost('def',-1)\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Flame Rush\": {\n    \"power\": 80,\n    \"accuracy\": 100,\n    \"category\": \"Physical\",\n    \"type\": \"Fire\",\n    \"effect\": \"This move has a 50% chance to increase the user's Speed by 1 stage.\",\n    \"property\": [\n      \"contact\"\n    ]\n  }\n}\n```",
        "response": "```python\n@Increment(Espinas,'_move_3')\ndef value():\n    return ('Flame Rush',80,100,'Physical','Fire',0,['contact'])\n\n@Increment(Espinas)\ndef move_3(self): # Flame Rush\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if rnd()<50/100:\n            self.set_boost('spe',+1,'self')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Espinas\",\n  \"types\": [\n    \"Poison\",\n    \"Fire\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Toxic Shield\": \"Espiker's thick hide reduces damage from physical moves by 30%; prevent from being paralyzed or poisoned; has a 20% chance to inflict Poison when hit by a contact move.\"\n  },\n  \"moves\": {\n    \"Thorned Assault\": {\n      \"power\": 90,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Poison\",\n      \"effect\": \"This move has a 50% chance to burn the target.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Horn Charge\": {\n      \"power\": 120,\n      \"accuracy\": 75,\n      \"category\": \"Physical\",\n      \"type\": \"Normal\",\n      \"effect\": \"This move has a 30% chance to lower the target's Defense by 1 stage.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Flame Rush\": {\n      \"power\": 80,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Fire\",\n      \"effect\": \"This move has a 50% chance to increase the user's Speed by 1 stage.\",\n      \"property\": [\n        \"contact\"\n      ]\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Espinas(PokemonBase):\n    _species='Espinas'\n    _types=['Poison','Fire']\n    _gender='Male'\n    _ability=['Toxic Shield']\n    _move_1=('Thorned Assault',90,100,'Physical','Poison',0,['contact'])\n    _move_2=('Horn Charge',120,75,'Physical','Normal',0,['contact'])\n    def __init__(self):\n        super().__init__()\n\n    def _take_damage_attack(self,x):\n        self.register_act_taken()\n        if self['act_taken']['category']=='Physical':\n            x=int(x*0.7)\n        self.state['hp']=max(0,self['hp']-x)\n        if self['hp']==0:\n            self.state['status']='FNT'\n            return\n        if 'contact' in self['act_taken']['property'] and rnd()<20/100:\n            self.target.set_condition('PSN')\n\n    def set_status(self,x):\n        if self['status'] or self.env.get('MISTY_TERRAIN'):\n            return\n        if x=='BRN':\n            if not self.istype('Fire'):\n                self.state['status']={x:{'counter':0}}\n        elif x=='FRZ':\n            if not self.istype('Ice'):\n                self.state['status']={x:{'counter':0}}\n        elif x=='SLP':\n            self.state['status']={x:{'counter':0}}\n\n    def move_1(self): # Thorned Assault\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<50/100:\n                self.target.set_condition('BRN')\n\n    def move_2(self): # Horn Charge\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100:\n                self.target.set_boost('def',-1)\n\n@Increment(Espinas,'_move_3')\ndef value():\n    return ('Flame Rush',80,100,'Physical','Fire',0,['contact'])\n\n@Increment(Espinas)\ndef move_3(self): # Flame Rush\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if rnd()<50/100:\n            self.set_boost('spe',+1,'self')\n```\n\nThis role is gonna learn a new ability:\n```json\n{\n  \"Blazing Surge\": \"This Pokemon's Fire-type moves have a 50% chance to inflict Paralysis.\"\n}\n```",
        "response": "```python\n@Increment(Espinas,'_ability')\ndef value():\n    return ['Toxic Shield','Blazing Surge']\n\n@Increment(Espinas)\ndef move_3(self): # Flame Rush\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if rnd()<50/100:\n            self.set_boost('spe',+1,'self')\n        if not self.target.isfaint() and rnd()<50/100:\n            self.target.set_condition('PAR')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Fei\",\n  \"types\": [\n    \"Dark\",\n    \"Poison\"\n  ],\n  \"gender\": \"Genderless\",\n  \"ability\": {\n    \"Desolate Trail\": \"This Pokemon causes the terrain to become Grassy Terrain for 10 turns when it enters battles.\"\n  },\n  \"moves\": {\n    \"Plague Fang\": {\n      \"power\": 85,\n      \"accuracy\": 90,\n      \"category\": \"Physical\",\n      \"type\": \"Poison\",\n      \"effect\": \"Has a 30% chance to badly poison the target.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Withering Gaze\": {\n      \"power\": 70,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Dark\",\n      \"effect\": \"Has a 20% chance to lower the target's Special Attack by 1 stage.\",\n      \"property\": []\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass Fei(PokemonBase):\n    _species='Fei'\n    _types=['Dark','Poison']\n    _gender='Genderless'\n    _ability=['Desolate Trail']\n    _move_1=('Plague Fang',85,90,'Physical','Poison',0,['contact'])\n    _move_2=('Withering Gaze',70,100,'Special','Dark',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def onswitch(self):\n        self.set_env('GRASSY_TERRAIN',max_count=10)\n    \n    def move_1(self): # Plague Fang\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100:\n                self.target.set_status('TOX')\n    \n    def move_2(self): # Withering Gaze\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<20/100:\n                self.target.set_boost('spa',-1)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Fei\",\n  \"types\": [\n    \"Dark\",\n    \"Poison\"\n  ],\n  \"gender\": \"Genderless\",\n  \"ability\": {\n    \"Desolate Trail\": \"This Pokemon causes the terrain to become Grassy Terrain for 10 turns when it enters battles.\"\n  },\n  \"moves\": {\n    \"Plague Fang\": {\n      \"power\": 85,\n      \"accuracy\": 90,\n      \"category\": \"Physical\",\n      \"type\": \"Poison\",\n      \"effect\": \"Has a 30% chance to badly poison the target.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Withering Gaze\": {\n      \"power\": 70,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Dark\",\n      \"effect\": \"Has a 20% chance to lower the target's Special Attack by 1 stage.\",\n      \"property\": []\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Fei(PokemonBase):\n    _species='Fei'\n    _types=['Dark','Poison']\n    _gender='Genderless'\n    _ability=['Desolate Trail']\n    _move_1=('Plague Fang',85,90,'Physical','Poison',0,['contact'])\n    _move_2=('Withering Gaze',70,100,'Special','Dark',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def onswitch(self):\n        self.set_env('GRASSY_TERRAIN',max_count=10)\n    \n    def move_1(self): # Plague Fang\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100:\n                self.target.set_status('TOX')\n    \n    def move_2(self): # Withering Gaze\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<20/100:\n                self.target.set_boost('spa',-1)\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Pestilence\": {\n    \"power\": 0,\n    \"accuracy\": 100,\n    \"category\": \"Status\",\n    \"type\": \"Poison\",\n    \"effect\": \"Poison the opponents and lower their Speed by 1 stage.\",\n    \"property\": []\n  }\n}\n```",
        "response": "```python\n@Increment(Fei,'_move_3')\ndef value():\n    return ('Pestilence',0,100,'Status','Poison',0,[])\n\n@Increment(Fei)\ndef move_3(self): # Pestilence\n    self.target.set_status('PSN')\n    self.target.set_boost('spe',-1)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Fei\",\n  \"types\": [\n    \"Dark\",\n    \"Poison\"\n  ],\n  \"gender\": \"Genderless\",\n  \"ability\": {\n    \"Desolate Trail\": \"This Pokemon causes the terrain to become Grassy Terrain for 10 turns when it enters battles.\"\n  },\n  \"moves\": {\n    \"Plague Fang\": {\n      \"power\": 85,\n      \"accuracy\": 90,\n      \"category\": \"Physical\",\n      \"type\": \"Poison\",\n      \"effect\": \"Has a 30% chance to badly poison the target.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Withering Gaze\": {\n      \"power\": 70,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Dark\",\n      \"effect\": \"Has a 20% chance to lower the target's Special Attack by 1 stage.\",\n      \"property\": []\n    },\n    \"Pestilence\": {\n      \"power\": 0,\n      \"accuracy\": 100,\n      \"category\": \"Status\",\n      \"type\": \"Poison\",\n      \"effect\": \"Poison the opponents and lower their Speed by 1 stage.\",\n      \"property\": []\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Fei(PokemonBase):\n    _species='Fei'\n    _types=['Dark','Poison']\n    _gender='Genderless'\n    _ability=['Desolate Trail']\n    _move_1=('Plague Fang',85,90,'Physical','Poison',0,['contact'])\n    _move_2=('Withering Gaze',70,100,'Special','Dark',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def onswitch(self):\n        self.set_env('GRASSY_TERRAIN',max_count=10)\n    \n    def move_1(self): # Plague Fang\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100:\n                self.target.set_status('TOX')\n    \n    def move_2(self): # Withering Gaze\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<20/100:\n                self.target.set_boost('spa',-1)\n\n@Increment(Fei,'_move_3')\ndef value():\n    return ('Pestilence',0,100,'Status','Poison',0,[])\n\n@Increment(Fei)\ndef move_3(self): # Pestilence\n    self.target.set_status('PSN')\n    self.target.set_boost('spe',-1)\n```\n\nThis role is gonna learn a new ability:\n```json\n{\n  \"Omen of Plague\": \"When this Pokemon is on the field, the oppenent has a 30% chance to be poisoned at the end of each turn.\"\n}\n```",
        "response": "```python\n@Increment(Fei,'_ability')\ndef value():\n    return ['Desolate Trail','Omen of Plague']\n\n@Increment(Fei)\ndef endturn(self):\n    if rnd()<0.3:\n        self.target.set_status('PSN')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Feraligatr\",\n  \"types\": [\n    \"Water\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Sheer Force\": \"This Pokemon's attacks with secondary effects have 1.3x power; nullifies the effects.\"\n  },\n  \"moves\": {\n    \"Waterfall\": {\n      \"power\": 80,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Water\",\n      \"effect\": \"Has a 20% chance to make the target flinch.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Ice Fang\": {\n      \"power\": 65,\n      \"accuracy\": 95,\n      \"category\": \"Physical\",\n      \"type\": \"Ice\",\n      \"effect\": \"Has a 10% chance to freeze the target and a 10% chance to make it flinch.\",\n      \"property\": [\n        \"contact\"\n      ]\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass Feraligatr(PokemonBase):\n    _species='Feraligatr'\n    _types=['Water']\n    _gender='Male'\n    _ability=['Sheer Force']\n    _move_1=('Waterfall',80,100,'Physical','Water',0,['contact'])\n    _move_2=('Ice Fang',65,95,'Physical','Ice',0,['contact'])\n    def __init__(self):\n        super().__init__()\n\n    def get_power(self):\n        power=self['act']['power']\n        if self['act']['id'] in ['Waterfall','Ice Fang']:\n            power*=1.3\n        return int(power*self.get_weather_power_mult())\n\n    def move_1(self): # Waterfall\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n\n    def move_2(self): # Ice Fang\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Feraligatr\",\n  \"types\": [\n    \"Water\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Sheer Force\": \"This Pokemon's attacks with secondary effects have 1.3x power; nullifies the effects.\"\n  },\n  \"moves\": {\n    \"Waterfall\": {\n      \"power\": 80,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Water\",\n      \"effect\": \"Has a 20% chance to make the target flinch.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Ice Fang\": {\n      \"power\": 65,\n      \"accuracy\": 95,\n      \"category\": \"Physical\",\n      \"type\": \"Ice\",\n      \"effect\": \"Has a 10% chance to freeze the target and a 10% chance to make it flinch.\",\n      \"property\": [\n        \"contact\"\n      ]\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Feraligatr(PokemonBase):\n    _species='Feraligatr'\n    _types=['Water']\n    _gender='Male'\n    _ability=['Sheer Force']\n    _move_1=('Waterfall',80,100,'Physical','Water',0,['contact'])\n    _move_2=('Ice Fang',65,95,'Physical','Ice',0,['contact'])\n    def __init__(self):\n        super().__init__()\n\n    def get_power(self):\n        power=self['act']['power']\n        if self['act']['id'] in ['Waterfall','Ice Fang']:\n            power*=1.3\n        return int(power*self.get_weather_power_mult())\n\n    def move_1(self): # Waterfall\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n\n    def move_2(self): # Ice Fang\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Rock Slide\": {\n    \"power\": 75,\n    \"accuracy\": 90,\n    \"category\": \"Physical\",\n    \"type\": \"Rock\",\n    \"effect\": \"Has a 30% chance to make the target flinch.\"\n  }\n}\n```",
        "response": "```python\n@Increment(Feraligatr,'_move_3')\ndef value():\n    return ('Rock Slide',75,90,'Physical','Rock',0,[])\n\n@Increment(Feraligatr)\ndef move_3(self): # Rock Slide\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n\n@Increment(Feraligatr)\ndef get_power(self):\n    power=self['act']['power']\n    if self['act']['id'] in ['Waterfall','Ice Fang','Rock Slide']:\n        power*=1.3\n    return int(power*self.get_weather_power_mult())\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Feraligatr\",\n  \"types\": [\n    \"Water\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Sheer Force\": \"This Pokemon's attacks with secondary effects have 1.3x power; nullifies the effects.\"\n  },\n  \"moves\": {\n    \"Waterfall\": {\n      \"power\": 80,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Water\",\n      \"effect\": \"Has a 20% chance to make the target flinch.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Ice Fang\": {\n      \"power\": 65,\n      \"accuracy\": 95,\n      \"category\": \"Physical\",\n      \"type\": \"Ice\",\n      \"effect\": \"Has a 10% chance to freeze the target and a 10% chance to make it flinch.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Rock Slide\": {\n      \"power\": 75,\n      \"accuracy\": 90,\n      \"category\": \"Physical\",\n      \"type\": \"Rock\",\n      \"effect\": \"Has a 30% chance to make the target flinch.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Feraligatr(PokemonBase):\n    _species='Feraligatr'\n    _types=['Water']\n    _gender='Male'\n    _ability=['Sheer Force']\n    _move_1=('Waterfall',80,100,'Physical','Water',0,['contact'])\n    _move_2=('Ice Fang',65,95,'Physical','Ice',0,['contact'])\n    def __init__(self):\n        super().__init__()\n\n    def get_power(self):\n        power=self['act']['power']\n        if self['act']['id'] in ['Waterfall','Ice Fang']:\n            power*=1.3\n        return int(power*self.get_weather_power_mult())\n\n    def move_1(self): # Waterfall\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n\n    def move_2(self): # Ice Fang\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n\n@Increment(Feraligatr,'_move_3')\ndef value():\n    return ('Rock Slide',75,90,'Physical','Rock',0,[])\n\n@Increment(Feraligatr)\ndef move_3(self): # Rock Slide\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n\n@Increment(Feraligatr)\ndef get_power(self):\n    power=self['act']['power']\n    if self['act']['id'] in ['Waterfall','Ice Fang','Rock Slide']:\n        power*=1.3\n    return int(power*self.get_weather_power_mult())\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Scale Shot\": {\n    \"power\": 25,\n    \"accuracy\": 90,\n    \"category\": \"Physical\",\n    \"type\": \"Dragon\",\n    \"effect\": \"Hits two to five times. Lowers the user's Defense by 1 stage and raises the user's Speed by 1 stage after the last hit. Has a 35% chance to hit two or three times and a 15% chance to hit four or five times.\"\n  }\n}\n```",
        "response": "```python\n@Increment(Feraligatr,'_move_4')\ndef value():\n    return ('Scale Shot',25,90,'Physical','Dragon',0,[])\n\n@Increment(Feraligatr)\ndef move_4(self): # Scale Shot\n    hit=True; i=0\n    r=rnd()\n    if r<0.35:\n        n_hits=2\n    elif r<0.7:\n        n_hits=3\n    elif r<0.85:\n        n_hits=4\n    else:\n        n_hits=5\n    while hit and i<n_hits:\n        damage_ret=self.get_damage()\n        if damage_ret['miss']: break\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        i+=1; hit=False if self.target.isfaint() else True\n    self.set_boost('def',-1,'self')\n    self.set_boost('spe',+1,'self')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Feraligatr\",\n  \"types\": [\n    \"Water\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Sheer Force\": \"This Pokemon's attacks with secondary effects have 1.3x power; nullifies the effects.\"\n  },\n  \"moves\": {\n    \"Waterfall\": {\n      \"power\": 80,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Water\",\n      \"effect\": \"Has a 20% chance to make the target flinch.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Ice Fang\": {\n      \"power\": 65,\n      \"accuracy\": 95,\n      \"category\": \"Physical\",\n      \"type\": \"Ice\",\n      \"effect\": \"Has a 10% chance to freeze the target and a 10% chance to make it flinch.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Rock Slide\": {\n      \"power\": 75,\n      \"accuracy\": 90,\n      \"category\": \"Physical\",\n      \"type\": \"Rock\",\n      \"effect\": \"Has a 30% chance to make the target flinch.\"\n    },\n    \"Scale Shot\": {\n      \"power\": 25,\n      \"accuracy\": 90,\n      \"category\": \"Physical\",\n      \"type\": \"Dragon\",\n      \"effect\": \"Hits two to five times. Lowers the user's Defense by 1 stage and raises the user's Speed by 1 stage after the last hit. Has a 35% chance to hit two or three times and a 15% chance to hit four or five times.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Feraligatr(PokemonBase):\n    _species='Feraligatr'\n    _types=['Water']\n    _gender='Male'\n    _ability=['Sheer Force']\n    _move_1=('Waterfall',80,100,'Physical','Water',0,['contact'])\n    _move_2=('Ice Fang',65,95,'Physical','Ice',0,['contact'])\n    def __init__(self):\n        super().__init__()\n\n    def get_power(self):\n        power=self['act']['power']\n        if self['act']['id'] in ['Waterfall','Ice Fang']:\n            power*=1.3\n        return int(power*self.get_weather_power_mult())\n\n    def move_1(self): # Waterfall\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n\n    def move_2(self): # Ice Fang\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n\n@Increment(Feraligatr,'_move_3')\ndef value():\n    return ('Rock Slide',75,90,'Physical','Rock',0,[])\n\n@Increment(Feraligatr)\ndef move_3(self): # Rock Slide\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n\n@Increment(Feraligatr)\ndef get_power(self):\n    power=self['act']['power']\n    if self['act']['id'] in ['Waterfall','Ice Fang','Rock Slide']:\n        power*=1.3\n    return int(power*self.get_weather_power_mult())\n\n@Increment(Feraligatr,'_move_4')\ndef value():\n    return ('Scale Shot',25,90,'Physical','Dragon',0,[])\n\n@Increment(Feraligatr)\ndef move_4(self): # Scale Shot\n    hit=True; i=0\n    r=rnd()\n    if r<0.35:\n        n_hits=2\n    elif r<0.7:\n        n_hits=3\n    elif r<0.85:\n        n_hits=4\n    else:\n        n_hits=5\n    while hit and i<n_hits:\n        damage_ret=self.get_damage()\n        if damage_ret['miss']: break\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        i+=1; hit=False if self.target.isfaint() else True\n    self.set_boost('def',-1,'self')\n    self.set_boost('spe',+1,'self')\n```\n\nThis role is gonna learn a new ability:\n```json\n{\n  \"Sheer Predator\": \"This Pokemon's moves of 75 power or less have +1 priority.\"\n}\n```",
        "response": "```python\n@Increment(Feraligatr,'_ability')\ndef value():\n    return ['Sheer Force','Sheer Predator']\n\n@Increment(Feraligatr)\ndef get_priority(self,move_id):\n    if self._moves[move_id]['power']<=75:\n        return self._moves[move_id]['priority']+1\n    return self._moves[move_id]['priority']\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Feraligatr\",\n  \"types\": [\n    \"Water\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Sheer Force\": \"This Pokemon's attacks with secondary effects have 1.3x power; nullifies the effects.\",\n    \"Sheer Predator\": \"This Pokemon's moves of 75 power or less have +1 priority.\"\n  },\n  \"moves\": {\n    \"Waterfall\": {\n      \"power\": 80,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Water\",\n      \"effect\": \"Has a 20% chance to make the target flinch.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Ice Fang\": {\n      \"power\": 65,\n      \"accuracy\": 95,\n      \"category\": \"Physical\",\n      \"type\": \"Ice\",\n      \"effect\": \"Has a 10% chance to freeze the target and a 10% chance to make it flinch.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Rock Slide\": {\n      \"power\": 75,\n      \"accuracy\": 90,\n      \"category\": \"Physical\",\n      \"type\": \"Rock\",\n      \"effect\": \"Has a 30% chance to make the target flinch.\"\n    },\n    \"Scale Shot\": {\n      \"power\": 25,\n      \"accuracy\": 90,\n      \"category\": \"Physical\",\n      \"type\": \"Dragon\",\n      \"effect\": \"Hits two to five times. Lowers the user's Defense by 1 stage and raises the user's Speed by 1 stage after the last hit. Has a 35% chance to hit two or three times and a 15% chance to hit four or five times.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Feraligatr(PokemonBase):\n    _species='Feraligatr'\n    _types=['Water']\n    _gender='Male'\n    _ability=['Sheer Force']\n    _move_1=('Waterfall',80,100,'Physical','Water',0,['contact'])\n    _move_2=('Ice Fang',65,95,'Physical','Ice',0,['contact'])\n    def __init__(self):\n        super().__init__()\n\n    def get_power(self):\n        power=self['act']['power']\n        if self['act']['id'] in ['Waterfall','Ice Fang']:\n            power*=1.3\n        return int(power*self.get_weather_power_mult())\n\n    def move_1(self): # Waterfall\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n\n    def move_2(self): # Ice Fang\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n\n@Increment(Feraligatr,'_move_3')\ndef value():\n    return ('Rock Slide',75,90,'Physical','Rock',0,[])\n\n@Increment(Feraligatr)\ndef move_3(self): # Rock Slide\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n\n@Increment(Feraligatr)\ndef get_power(self):\n    power=self['act']['power']\n    if self['act']['id'] in ['Waterfall','Ice Fang','Rock Slide']:\n        power*=1.3\n    return int(power*self.get_weather_power_mult())\n\n@Increment(Feraligatr,'_move_4')\ndef value():\n    return ('Scale Shot',25,90,'Physical','Dragon',0,[])\n\n@Increment(Feraligatr)\ndef move_4(self): # Scale Shot\n    hit=True; i=0\n    r=rnd()\n    if r<0.35:\n        n_hits=2\n    elif r<0.7:\n        n_hits=3\n    elif r<0.85:\n        n_hits=4\n    else:\n        n_hits=5\n    while hit and i<n_hits:\n        damage_ret=self.get_damage()\n        if damage_ret['miss']: break\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        i+=1; hit=False if self.target.isfaint() else True\n    self.set_boost('def',-1,'self')\n    self.set_boost('spe',+1,'self')\n\n@Increment(Feraligatr,'_ability')\ndef value():\n    return ['Sheer Force','Sheer Predator']\n\n@Increment(Feraligatr)\ndef get_priority(self,move_id):\n    if self._moves[move_id]['power']<=75:\n        return self._moves[move_id]['priority']+1\n    return self._moves[move_id]['priority']\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Bulldoze\": {\n    \"power\": 60,\n    \"accuracy\": 100,\n    \"category\": \"Physical\",\n    \"type\": \"Ground\",\n    \"effect\": \"Has a 100% chance to lower the target's Speed by 1 stage.\"\n  }\n}\n```",
        "response": "```python\n@Increment(Feraligatr,'_move_5')\ndef value():\n    return ('Bulldoze',60,100,'Physical','Ground',0,[])\n\n@Increment(Feraligatr)\ndef move_5(self): # Bulldoze\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n\n@Increment(Feraligatr)\ndef get_power(self):\n    power=self['act']['power']\n    if self['act']['id'] in ['Waterfall','Ice Fang','Rock Slide','Bulldoze']:\n        power*=1.3\n    return int(power*self.get_weather_power_mult())\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Feraligatr\",\n  \"types\": [\n    \"Water\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Sheer Force\": \"This Pokemon's moves with a secondary effect have 1.3x power, but lose their secondary effect.\"\n  },\n  \"moves\": {\n    \"Aqua Tail\": {\n      \"power\": 90,\n      \"accuracy\": 90,\n      \"category\": \"Physical\",\n      \"type\": \"Water\",\n      \"effect\": \"\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Storm Punch\": {\n      \"power\": 75,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Fighting\",\n      \"effect\": \"Has a 20% chance to paralyze the target.\",\n      \"property\": [\n        \"contact\"\n      ]\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass Feraligatr(PokemonBase):\n    _species='Feraligatr'\n    _types=['Water']\n    _gender='Male'\n    _ability=['Sheer Force']\n    _move_1=('Aqua Tail',90,90,'Physical','Water',0,['contact'])\n    _move_2=('Storm Punch',75,100,'Physical','Fighting',0,['contact'])\n    def __init__(self):\n        super().__init__()\n\n    def get_power(self):\n        power=self['act']['power']\n        if self['act']['id'] in ['Crunch']:\n            power*=1.3\n        return int(power*self.get_weather_power_mult())\n\n    def move_1(self): # Aqua Tail\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n\n    def move_2(self): # Crunch\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Fire-Eagle\",\n  \"types\": [\n    \"Fire\",\n    \"Flying\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Flame Shield\": \"This Pokemon takes 50% less damage from all attacks but loses 1/8 of its max HP at the end of each turn.\"\n  },\n  \"moves\": {\n    \"Inferno Wing\": {\n      \"power\": 90,\n      \"accuracy\": 85,\n      \"category\": \"Special\",\n      \"type\": \"Fire\",\n      \"effect\": \"Has a 30% chance to burn the target.\"\n    },\n    \"Blazing Claw\": {\n      \"power\": 75,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Fire\",\n      \"effect\": \"Has a higher critical hit ratio.\",\n      \"property\": [\n        \"contact\"\n      ]\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass FireEagle(PokemonBase):\n    _species='Fire-Eagle'\n    _types=['Fire','Flying']\n    _gender='Male'\n    _ability=['Flame Shield']\n    _move_1=('Inferno Wing',90,85,'Special','Fire',0,[])\n    _move_2=('Blazing Claw',75,100,'Physical','Fire',0,['contact'])\n    def __init__(self):\n        super().__init__()\n\n    def _take_damage_attack(self,x):\n        self.register_act_taken()\n        x=int(x*0.5)\n        self.state['hp']=max(0,self['hp']-x)\n        if self['hp']==0:\n            self.state['status']='FNT'\n\n    def endturn(self):\n        self.take_damage(self['max_hp']//8,'loss')\n    \n    def get_crit(self):\n        crit_mult=[0,24,8,2,1]\n        crit_ratio=self['boosts']['crit']\n        if self['act']['id']=='Blazing Claw':\n            crit_ratio=min(3,crit_ratio+1)\n        crit=False\n        if rnd()*crit_mult[crit_ratio+1]<1:\n            crit=True\n        return crit\n    \n    def move_1(self): # Inferno Wing\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100:\n                self.target.set_status('BRN')\n\n    def move_2(self): # Blazing Claw\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Fire-Eagle\",\n  \"types\": [\n    \"Fire\",\n    \"Flying\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Flame Shield\": \"This Pokemon takes 50% less damage from all attacks but loses 1/8 of its max HP at the end of each turn.\"\n  },\n  \"moves\": {\n    \"Inferno Wing\": {\n      \"power\": 90,\n      \"accuracy\": 85,\n      \"category\": \"Special\",\n      \"type\": \"Fire\",\n      \"effect\": \"Has a 30% chance to burn the target.\"\n    },\n    \"Blazing Claw\": {\n      \"power\": 75,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Fire\",\n      \"effect\": \"Has a higher critical hit ratio.\",\n      \"property\": [\n        \"contact\"\n      ]\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass FireEagle(PokemonBase):\n    _species='Fire-Eagle'\n    _types=['Fire','Flying']\n    _gender='Male'\n    _ability=['Flame Shield']\n    _move_1=('Inferno Wing',90,85,'Special','Fire',0,[])\n    _move_2=('Blazing Claw',75,100,'Physical','Fire',0,['contact'])\n    def __init__(self):\n        super().__init__()\n\n    def _take_damage_attack(self,x):\n        self.register_act_taken()\n        x=int(x*0.5)\n        self.state['hp']=max(0,self['hp']-x)\n        if self['hp']==0:\n            self.state['status']='FNT'\n\n    def endturn(self):\n        self.take_damage(self['max_hp']//8,'loss')\n    \n    def get_crit(self):\n        crit_mult=[0,24,8,2,1]\n        crit_ratio=self['boosts']['crit']\n        if self['act']['id']=='Blazing Claw':\n            crit_ratio=min(3,crit_ratio+1)\n        crit=False\n        if rnd()*crit_mult[crit_ratio+1]<1:\n            crit=True\n        return crit\n    \n    def move_1(self): # Inferno Wing\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100:\n                self.target.set_status('BRN')\n\n    def move_2(self): # Blazing Claw\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Eagle Dive\": {\n    \"power\": 80,\n    \"accuracy\": 95,\n    \"category\": \"Physical\",\n    \"type\": \"Flying\",\n    \"effect\": \"The user recovers half the HP lost by the target.\",\n    \"property\": [\n      \"contact\"\n    ]\n  }\n}\n```",
        "response": "```python\n@Increment(FireEagle,'_move_3')\ndef value():\n    return ('Eagle Dive',80,95,'Physical','Flying',0,['contact'])\n\n@Increment(FireEagle)\ndef move_3(self): # Eagle Dive\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        self.restore(int(0.5*damage),'drain')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Fire-Eagle\",\n  \"types\": [\n    \"Fire\",\n    \"Flying\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Flame Shield\": \"This Pokemon takes 50% less damage from all attacks but loses 1/8 of its max HP at the end of each turn.\"\n  },\n  \"moves\": {\n    \"Inferno Wing\": {\n      \"power\": 90,\n      \"accuracy\": 85,\n      \"category\": \"Special\",\n      \"type\": \"Fire\",\n      \"effect\": \"Has a 30% chance to burn the target.\"\n    },\n    \"Blazing Claw\": {\n      \"power\": 75,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Fire\",\n      \"effect\": \"Has a higher critical hit ratio.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Eagle Dive\": {\n      \"power\": 80,\n      \"accuracy\": 95,\n      \"category\": \"Physical\",\n      \"type\": \"Flying\",\n      \"effect\": \"The user recovers half the HP lost by the target.\",\n      \"property\": [\n        \"contact\"\n      ]\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass FireEagle(PokemonBase):\n    _species='Fire-Eagle'\n    _types=['Fire','Flying']\n    _gender='Male'\n    _ability=['Flame Shield']\n    _move_1=('Inferno Wing',90,85,'Special','Fire',0,[])\n    _move_2=('Blazing Claw',75,100,'Physical','Fire',0,['contact'])\n    def __init__(self):\n        super().__init__()\n\n    def _take_damage_attack(self,x):\n        self.register_act_taken()\n        x=int(x*0.5)\n        self.state['hp']=max(0,self['hp']-x)\n        if self['hp']==0:\n            self.state['status']='FNT'\n\n    def endturn(self):\n        self.take_damage(self['max_hp']//8,'loss')\n    \n    def get_crit(self):\n        crit_mult=[0,24,8,2,1]\n        crit_ratio=self['boosts']['crit']\n        if self['act']['id']=='Blazing Claw':\n            crit_ratio=min(3,crit_ratio+1)\n        crit=False\n        if rnd()*crit_mult[crit_ratio+1]<1:\n            crit=True\n        return crit\n    \n    def move_1(self): # Inferno Wing\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100:\n                self.target.set_status('BRN')\n\n    def move_2(self): # Blazing Claw\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n\n@Increment(FireEagle,'_move_3')\ndef value():\n    return ('Eagle Dive',80,95,'Physical','Flying',0,['contact'])\n\n@Increment(FireEagle)\ndef move_3(self): # Eagle Dive\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        self.restore(int(0.5*damage),'drain')\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Flame Storm\": {\n    \"power\": 0,\n    \"accuracy\": 100000,\n    \"category\": \"Status\",\n    \"type\": \"Fire\",\n    \"effect\": \"Lowers the target's Defense by 2 stages.\"\n  }\n}\n```",
        "response": "```python\n@Increment(FireEagle,'_move_4')\ndef value():\n    return ('Flame Storm',0,100000,'Status','Fire',0,[])\n\n@Increment(FireEagle)\ndef move_4(self): # Flame Storm\n    self.target.set_boost('def',-2)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Fire-Eagle\",\n  \"types\": [\n    \"Fire\",\n    \"Flying\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Flame Shield\": \"This Pokemon takes 50% less damage from all attacks but loses 1/8 of its max HP at the end of each turn.\"\n  },\n  \"moves\": {\n    \"Inferno Wing\": {\n      \"power\": 90,\n      \"accuracy\": 85,\n      \"category\": \"Special\",\n      \"type\": \"Fire\",\n      \"effect\": \"Has a 30% chance to burn the target.\"\n    },\n    \"Blazing Claw\": {\n      \"power\": 75,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Fire\",\n      \"effect\": \"Has a higher critical hit ratio.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Eagle Dive\": {\n      \"power\": 80,\n      \"accuracy\": 95,\n      \"category\": \"Physical\",\n      \"type\": \"Flying\",\n      \"effect\": \"The user recovers half the HP lost by the target.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Flame Storm\": {\n      \"power\": 0,\n      \"accuracy\": 100000,\n      \"category\": \"Status\",\n      \"type\": \"Fire\",\n      \"effect\": \"Lowers the target's Defense by 2 stages.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass FireEagle(PokemonBase):\n    _species='Fire-Eagle'\n    _types=['Fire','Flying']\n    _gender='Male'\n    _ability=['Flame Shield']\n    _move_1=('Inferno Wing',90,85,'Special','Fire',0,[])\n    _move_2=('Blazing Claw',75,100,'Physical','Fire',0,['contact'])\n    def __init__(self):\n        super().__init__()\n\n    def _take_damage_attack(self,x):\n        self.register_act_taken()\n        x=int(x*0.5)\n        self.state['hp']=max(0,self['hp']-x)\n        if self['hp']==0:\n            self.state['status']='FNT'\n\n    def endturn(self):\n        self.take_damage(self['max_hp']//8,'loss')\n    \n    def get_crit(self):\n        crit_mult=[0,24,8,2,1]\n        crit_ratio=self['boosts']['crit']\n        if self['act']['id']=='Blazing Claw':\n            crit_ratio=min(3,crit_ratio+1)\n        crit=False\n        if rnd()*crit_mult[crit_ratio+1]<1:\n            crit=True\n        return crit\n    \n    def move_1(self): # Inferno Wing\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100:\n                self.target.set_status('BRN')\n\n    def move_2(self): # Blazing Claw\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n\n@Increment(FireEagle,'_move_3')\ndef value():\n    return ('Eagle Dive',80,95,'Physical','Flying',0,['contact'])\n\n@Increment(FireEagle)\ndef move_3(self): # Eagle Dive\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        self.restore(int(0.5*damage),'drain')\n\n@Increment(FireEagle,'_move_4')\ndef value():\n    return ('Flame Storm',0,100000,'Status','Fire',0,[])\n\n@Increment(FireEagle)\ndef move_4(self): # Flame Storm\n    self.target.set_boost('def',-2)\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Sky Inferno\": {\n    \"power\": 110,\n    \"accuracy\": 85,\n    \"category\": \"Special\",\n    \"type\": \"Fire\",\n    \"effect\": \"The user takes recoil damage equal to 1/3 of the HP lost by the target.\"\n  }\n}\n```",
        "response": "```python\n@Increment(FireEagle,'_move_5')\ndef value():\n    return ('Sky Inferno',110,85,'Special','Fire',0,[])\n\n@Increment(FireEagle)\ndef move_5(self): # Sky Inferno\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        self.take_damage(int(1/3*damage),'recoil')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Flare-Wing\",\n  \"types\": [\n    \"Fire\",\n    \"Dragon\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Battle Blaze\": \"This Pokemon's Fire attacks cause additional damage equal to the opponent Pokemon's all positive stat stages x10.\"\n  },\n  \"moves\": {\n    \"Blazing Assault\": {\n      \"power\": 100,\n      \"accuracy\": 95,\n      \"category\": \"Physical\",\n      \"type\": \"Fire\",\n      \"effect\": \"Has a 20% chance to burn the target.\"\n    },\n    \"Draco Sweep\": {\n      \"power\": 90,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Dragon\",\n      \"effect\": \"Reduces the target's Special Defense by 1 stage.\",\n      \"property\": [\n        \"contact\"\n      ]\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass FlareWing(PokemonBase):\n    _species='Flare-Wing'\n    _types=['Fire','Dragon']\n    _gender='Male'\n    _ability=['Battle Blaze']\n    _move_1=('Blazing Assault',100,95,'Physical','Fire',0,[])\n    _move_2=('Draco Sweep',90,100,'Physical','Dragon',0,['contact'])\n    def __init__(self):\n        super().__init__()\n\n    def move_1(self): # Blazing Assault\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            blaze_damage=sum([v for _,v in self.target['boosts'].items() if v>0])*10\n            self.target.take_damage(blaze_damage)\n            if not self.target.isfaint() and rnd()<20/100:\n                self.target.set_status('BRN')\n\n    def move_2(self): # Draco Sweep\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint():\n                self.target.set_boost('spd',-1)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Flare-Wing\",\n  \"types\": [\n    \"Fire\",\n    \"Dragon\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Battle Blaze\": \"This Pokemon's Fire attacks cause additional damage equal to the opponent Pokemon's all positive stat stages x10.\"\n  },\n  \"moves\": {\n    \"Blazing Assault\": {\n      \"power\": 100,\n      \"accuracy\": 95,\n      \"category\": \"Physical\",\n      \"type\": \"Fire\",\n      \"effect\": \"Has a 20% chance to burn the target.\"\n    },\n    \"Draco Sweep\": {\n      \"power\": 90,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Dragon\",\n      \"effect\": \"Reduces the target's Special Defense by 1 stage.\",\n      \"property\": [\n        \"contact\"\n      ]\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass FlareWing(PokemonBase):\n    _species='Flare-Wing'\n    _types=['Fire','Dragon']\n    _gender='Male'\n    _ability=['Battle Blaze']\n    _move_1=('Blazing Assault',100,95,'Physical','Fire',0,[])\n    _move_2=('Draco Sweep',90,100,'Physical','Dragon',0,['contact'])\n    def __init__(self):\n        super().__init__()\n\n    def move_1(self): # Blazing Assault\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            blaze_damage=sum([v for _,v in self.target['boosts'].items() if v>0])*10\n            self.target.take_damage(blaze_damage)\n            if not self.target.isfaint() and rnd()<20/100:\n                self.target.set_status('BRN')\n\n    def move_2(self): # Draco Sweep\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint():\n                self.target.set_boost('spd',-1)\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Ignition Burst\": {\n    \"power\": 70,\n    \"accuracy\": 100,\n    \"category\": \"Special\",\n    \"type\": \"Fire\",\n    \"effect\": \"Always results in a critical hit if the user's HP is below 30%.\"\n  }\n}\n```",
        "response": "```python\n@Increment(FlareWing,'_move_3')\ndef value():\n    return ('Ignition Burst',70,100,'Special','Fire',0,[])\n\n@Increment(FlareWing)\ndef move_3(self): # Ignition Burst\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n\n@Increment(FlareWing)\ndef get_crit(self):\n    if self['act']['id']=='Ignition Burst' and self['hp']<int(self['max_hp']*0.3):\n        return True\n    crit_mult=[0,24,8,2,1]\n    crit_ratio=self['boosts']['crit']\n    crit=False\n    if rnd()*crit_mult[crit_ratio+1]<1:\n        crit=True\n    return crit\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Flare-Wing\",\n  \"types\": [\n    \"Fire\",\n    \"Dragon\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Battle Blaze\": \"This Pokemon's Fire attacks cause additional damage equal to the opponent Pokemon's all positive stat stages x10.\"\n  },\n  \"moves\": {\n    \"Blazing Assault\": {\n      \"power\": 100,\n      \"accuracy\": 95,\n      \"category\": \"Physical\",\n      \"type\": \"Fire\",\n      \"effect\": \"Has a 20% chance to burn the target.\"\n    },\n    \"Draco Sweep\": {\n      \"power\": 90,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Dragon\",\n      \"effect\": \"Reduces the target's Special Defense by 1 stage.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Ignition Burst\": {\n      \"power\": 70,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Fire\",\n      \"effect\": \"Always results in a critical hit if the user's HP is below 30%.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass FlareWing(PokemonBase):\n    _species='Flare-Wing'\n    _types=['Fire','Dragon']\n    _gender='Male'\n    _ability=['Battle Blaze']\n    _move_1=('Blazing Assault',100,95,'Physical','Fire',0,[])\n    _move_2=('Draco Sweep',90,100,'Physical','Dragon',0,['contact'])\n    def __init__(self):\n        super().__init__()\n\n    def move_1(self): # Blazing Assault\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            blaze_damage=sum([v for _,v in self.target['boosts'].items() if v>0])*10\n            self.target.take_damage(blaze_damage)\n            if not self.target.isfaint() and rnd()<20/100:\n                self.target.set_status('BRN')\n\n    def move_2(self): # Draco Sweep\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint():\n                self.target.set_boost('spd',-1)\n\n@Increment(FlareWing,'_move_3')\ndef value():\n    return ('Ignition Burst',70,100,'Special','Fire',0,[])\n\n@Increment(FlareWing)\ndef move_3(self): # Ignition Burst\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n\n@Increment(FlareWing)\ndef get_crit(self):\n    if self['act']['id']=='Ignition Burst' and self['hp']<int(self['max_hp']*0.3):\n        return True\n    crit_mult=[0,24,8,2,1]\n    crit_ratio=self['boosts']['crit']\n    crit=False\n    if rnd()*crit_mult[crit_ratio+1]<1:\n        crit=True\n    return crit\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Wing Slash\": {\n    \"power\": 80,\n    \"accuracy\": 95,\n    \"category\": \"Physical\",\n    \"type\": \"Flying\",\n    \"effect\": \"Has a 30% chance to make the target flinch.\",\n    \"property\": [\n      \"contact\"\n    ]\n  }\n}\n```",
        "response": "```python\n@Increment(FlareWing,'_move_4')\ndef value():\n    return ('Wing Slash',80,95,'Physical','Flying',0,['contact'])\n\n@Increment(FlareWing)\ndef move_4(self): # Wing Slash\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint() and rnd()<30/100:\n            self.target.set_condition('FLINCH',counter=0)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Flare-Wing\",\n  \"types\": [\n    \"Fire\",\n    \"Dragon\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Battle Blaze\": \"This Pokemon's Fire attacks cause additional damage equal to the opponent Pokemon's all positive stat stages x10.\"\n  },\n  \"moves\": {\n    \"Blazing Assault\": {\n      \"power\": 100,\n      \"accuracy\": 95,\n      \"category\": \"Physical\",\n      \"type\": \"Fire\",\n      \"effect\": \"Has a 20% chance to burn the target.\"\n    },\n    \"Draco Sweep\": {\n      \"power\": 90,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Dragon\",\n      \"effect\": \"Reduces the target's Special Defense by 1 stage.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Ignition Burst\": {\n      \"power\": 70,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Fire\",\n      \"effect\": \"Always results in a critical hit if the user's HP is below 30%.\"\n    },\n    \"Wing Slash\": {\n      \"power\": 80,\n      \"accuracy\": 95,\n      \"category\": \"Physical\",\n      \"type\": \"Flying\",\n      \"effect\": \"Has a 30% chance to make the target flinch.\",\n      \"property\": [\n        \"contact\"\n      ]\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass FlareWing(PokemonBase):\n    _species='Flare-Wing'\n    _types=['Fire','Dragon']\n    _gender='Male'\n    _ability=['Battle Blaze']\n    _move_1=('Blazing Assault',100,95,'Physical','Fire',0,[])\n    _move_2=('Draco Sweep',90,100,'Physical','Dragon',0,['contact'])\n    def __init__(self):\n        super().__init__()\n\n    def move_1(self): # Blazing Assault\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            blaze_damage=sum([v for _,v in self.target['boosts'].items() if v>0])*10\n            self.target.take_damage(blaze_damage)\n            if not self.target.isfaint() and rnd()<20/100:\n                self.target.set_status('BRN')\n\n    def move_2(self): # Draco Sweep\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint():\n                self.target.set_boost('spd',-1)\n\n@Increment(FlareWing,'_move_3')\ndef value():\n    return ('Ignition Burst',70,100,'Special','Fire',0,[])\n\n@Increment(FlareWing)\ndef move_3(self): # Ignition Burst\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n\n@Increment(FlareWing)\ndef get_crit(self):\n    if self['act']['id']=='Ignition Burst' and self['hp']<int(self['max_hp']*0.3):\n        return True\n    crit_mult=[0,24,8,2,1]\n    crit_ratio=self['boosts']['crit']\n    crit=False\n    if rnd()*crit_mult[crit_ratio+1]<1:\n        crit=True\n    return crit\n\n@Increment(FlareWing,'_move_4')\ndef value():\n    return ('Wing Slash',80,95,'Physical','Flying',0,['contact'])\n\n@Increment(FlareWing)\ndef move_4(self): # Wing Slash\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint() and rnd()<30/100:\n            self.target.set_condition('FLINCH',counter=0)\n```\n\nThis role is gonna learn a new ability:\n```json\n{\n  \"Dragon Fury\": \"When this Pokemon's HP drops below 50%, its Dragon-type moves deal 1.5x damage.\"\n}\n```",
        "response": "```python\n@Increment(FlareWing,'_ability')\ndef value():\n    return ['Battle Blaze','Dragon Fury']\n\n@Increment(FlareWing)\ndef get_other_mult(self):\n    mult=1\n    if self.isstatus('BRN') and self['act']['category']=='Physical':\n        mult*=0.5\n    if self['hp']<self['max_hp']//2:\n        if self['act']['type']=='Dragon':\n            mult*=1.5\n    return mult\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Flare-Wing\",\n  \"types\": [\n    \"Fire\",\n    \"Dragon\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Battle Blaze\": \"This Pokemon's Fire attacks cause additional damage equal to the opponent Pokemon's all positive stat stages x10.\",\n    \"Dragon Fury\": \"When this Pokemon's HP drops below 50%, its Dragon-type moves deal 1.5x damage.\"\n  },\n  \"moves\": {\n    \"Blazing Assault\": {\n      \"power\": 100,\n      \"accuracy\": 95,\n      \"category\": \"Physical\",\n      \"type\": \"Fire\",\n      \"effect\": \"Has a 20% chance to burn the target.\"\n    },\n    \"Draco Sweep\": {\n      \"power\": 90,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Dragon\",\n      \"effect\": \"Reduces the target's Special Defense by 1 stage.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Ignition Burst\": {\n      \"power\": 70,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Fire\",\n      \"effect\": \"Always results in a critical hit if the user's HP is below 30%.\"\n    },\n    \"Wing Slash\": {\n      \"power\": 80,\n      \"accuracy\": 95,\n      \"category\": \"Physical\",\n      \"type\": \"Flying\",\n      \"effect\": \"Has a 30% chance to make the target flinch.\",\n      \"property\": [\n        \"contact\"\n      ]\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass FlareWing(PokemonBase):\n    _species='Flare-Wing'\n    _types=['Fire','Dragon']\n    _gender='Male'\n    _ability=['Battle Blaze']\n    _move_1=('Blazing Assault',100,95,'Physical','Fire',0,[])\n    _move_2=('Draco Sweep',90,100,'Physical','Dragon',0,['contact'])\n    def __init__(self):\n        super().__init__()\n\n    def move_1(self): # Blazing Assault\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            blaze_damage=sum([v for _,v in self.target['boosts'].items() if v>0])*10\n            self.target.take_damage(blaze_damage)\n            if not self.target.isfaint() and rnd()<20/100:\n                self.target.set_status('BRN')\n\n    def move_2(self): # Draco Sweep\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint():\n                self.target.set_boost('spd',-1)\n\n@Increment(FlareWing,'_move_3')\ndef value():\n    return ('Ignition Burst',70,100,'Special','Fire',0,[])\n\n@Increment(FlareWing)\ndef move_3(self): # Ignition Burst\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n\n@Increment(FlareWing)\ndef get_crit(self):\n    if self['act']['id']=='Ignition Burst' and self['hp']<int(self['max_hp']*0.3):\n        return True\n    crit_mult=[0,24,8,2,1]\n    crit_ratio=self['boosts']['crit']\n    crit=False\n    if rnd()*crit_mult[crit_ratio+1]<1:\n        crit=True\n    return crit\n\n@Increment(FlareWing,'_move_4')\ndef value():\n    return ('Wing Slash',80,95,'Physical','Flying',0,['contact'])\n\n@Increment(FlareWing)\ndef move_4(self): # Wing Slash\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint() and rnd()<30/100:\n            self.target.set_condition('FLINCH',counter=0)\n\n@Increment(FlareWing,'_ability')\ndef value():\n    return ['Battle Blaze','Dragon Fury']\n\n@Increment(FlareWing)\ndef get_other_mult(self):\n    mult=1\n    if self.isstatus('BRN') and self['act']['category']=='Physical':\n        mult*=0.5\n    if self['hp']<self['max_hp']//2:\n        if self['act']['type']=='Dragon':\n            mult*=1.5\n    return mult\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Flare Blitz\": {\n    \"power\": 120,\n    \"accuracy\": 100,\n    \"category\": \"Physical\",\n    \"type\": \"Fire\",\n    \"effect\": \"Recoil damage equal to 1/3 of the damage dealt.\"\n  }\n}\n```",
        "response": "```python\n@Increment(FlareWing,'_move_5')\ndef value():\n    return ('Flare Blitz',120,100,'Physical','Fire',0,[])\n\n@Increment(FlareWing)\ndef move_5(self): # Flare Blitz\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        recoil_damage=damage//3\n        self.take_damage(recoil_damage,'recoil')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Furfrou\",\n  \"types\": [\n    \"Normal\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Fur Coat\": \"Halves damage taken from physical moves.\"\n  },\n  \"moves\": {\n    \"Thunder Fang\": {\n      \"power\": 65,\n      \"accuracy\": 95,\n      \"category\": \"Physical\",\n      \"type\": \"Electric\",\n      \"effect\": \"Has a 10% chance to paralyze the target. Has a separate 10% chance to cause the target to flinch.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Ice Fang\": {\n      \"power\": 65,\n      \"accuracy\": 95,\n      \"category\": \"Physical\",\n      \"type\": \"Ice\",\n      \"effect\": \"Has a 10% chance to freeze the target. Has a separate 10% chance to cause the target to flinch.\",\n      \"property\": [\n        \"contact\"\n      ]\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass Furfrou(PokemonBase):\n    _species='Furfrou'\n    _types=['Normal']\n    _gender='Male'\n    _ability=['Fur Coat']\n    _move_1=('Thunder Fang',65,95,'Physical','Electric',0,['contact'])\n    _move_2=('Ice Fang',65,95,'Physical','Ice',0,['contact'])\n    def __init__(self):\n        super().__init__()\n\n    def _take_damage_attack(self,x):\n        self.register_act_taken()\n        if self['act_taken']['category']=='Physical':\n            x//=2\n        self.state['hp']=max(0,self['hp']-x)\n        if self['hp']==0:\n            self.state['status']='FNT'\n\n    def move_1(self): # Thunder Fang\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<10/100: \n                self.target.set_status('PAR')\n            if not self.target.isfaint() and rnd()<10/100:\n                self.target.set_condition('FLINCH',counter=0)\n\n    def move_2(self): # Ice Fang\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<10/100:\n                self.target.set_status('FRZ')\n            if not self.target.isfaint() and rnd()<10/100:\n                self.target.set_condition('FLINCH',counter=0)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Gallade\",\n  \"types\": [\n    \"Psychic\",\n    \"Fighting\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Sharpness\": \"This Pokemon's slicing moves have their power multiplied by 1.5.\"\n  },\n  \"moves\": {\n    \"Psycho Cut\": {\n      \"power\": 70,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"priority\": 0,\n      \"type\": \"Psychic\",\n      \"effect\": \"Has a higher chance for a critical hit.\",\n      \"property\": [\n        \"slicing\"\n      ]\n    },\n    \"Sacred Sword\": {\n      \"power\": 90,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"priority\": 0,\n      \"type\": \"Fighting\",\n      \"effect\": \"Ignores the target's stat stage changes.\",\n      \"property\": [\n        \"contact\",\n        \"slicing\"\n      ]\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass Gallade(PokemonBase):\n    _species='Gallade'\n    _types=['Psychic','Fighting']\n    _gender='Male'\n    _ability=['Sharpness']\n    _move_1=('Psycho Cut',70,100,'Physical','Psychic',0,['slicing'])\n    _move_2=('Sacred Sword',90,100,'Physical','Fighting',0,['contact','slicing'])\n    def __init__(self):\n        super().__init__()\n\n    def get_power(self):        \n        power=self['act']['power']\n        if 'slicing' in self['act']['property']:\n            power*=1.5\n        return int(power*self.get_weather_power_mult())\n\n    def get_crit(self):\n        crit_mult=[0,24,8,2,1]\n        crit_ratio=self['boosts']['crit']\n        if self['act']['id']=='Psycho Cut':\n            crit_ratio=min(3,crit_ratio+1)\n        crit=False\n        if rnd()*crit_mult[crit_ratio+1]<1:\n            crit=True\n        return crit\n\n    def move_1(self): # Psycho Cut\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n\n    def move_2(self): # Sacred Sword\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n\n    def _get_base_damage(self,power,crit):\n        atk_boost=self['boosts']['atk'] if self['act']['category']=='Physical' else self['boosts']['spa']\n        if self['act']['id']=='Sacred Sword':\n            def_boost=0\n        else:\n            def_boost=self.target['boosts']['def'] if self['act']['category']=='Physical' else self.target['boosts']['spd']\n\n        if crit:\n            atk_boost=max(0,atk_boost)\n            def_boost=min(0,def_boost)\n\n        attack=self.get_stat('atk' if self['act']['category']=='Physical' else 'spa',atk_boost)\n        defense=self.target.get_stat('def' if self['act']['category']=='Physical' else 'spd',def_boost)\n\n        level=100\n        base_damage=int(int(int(int(2*level/5+2)*power*attack)/defense)/50)+2\n\n        return base_damage\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Gallade\",\n  \"types\": [\n    \"Psychic\",\n    \"Fighting\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Sharpness\": \"This Pokemon's slicing moves have their power multiplied by 1.5.\"\n  },\n  \"moves\": {\n    \"Psycho Cut\": {\n      \"power\": 70,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"priority\": 0,\n      \"type\": \"Psychic\",\n      \"effect\": \"Has a higher chance for a critical hit.\",\n      \"property\": [\n        \"slicing\"\n      ]\n    },\n    \"Sacred Sword\": {\n      \"power\": 90,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"priority\": 0,\n      \"type\": \"Fighting\",\n      \"effect\": \"Ignores the target's stat stage changes.\",\n      \"property\": [\n        \"contact\",\n        \"slicing\"\n      ]\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Gallade(PokemonBase):\n    _species='Gallade'\n    _types=['Psychic','Fighting']\n    _gender='Male'\n    _ability=['Sharpness']\n    _move_1=('Psycho Cut',70,100,'Physical','Psychic',0,['slicing'])\n    _move_2=('Sacred Sword',90,100,'Physical','Fighting',0,['contact','slicing'])\n    def __init__(self):\n        super().__init__()\n\n    def get_power(self):        \n        power=self['act']['power']\n        if 'slicing' in self['act']['property']:\n            power*=1.5\n        return int(power*self.get_weather_power_mult())\n\n    def get_crit(self):\n        crit_mult=[0,24,8,2,1]\n        crit_ratio=self['boosts']['crit']\n        if self['act']['id']=='Psycho Cut':\n            crit_ratio=min(3,crit_ratio+1)\n        crit=False\n        if rnd()*crit_mult[crit_ratio+1]<1:\n            crit=True\n        return crit\n\n    def move_1(self): # Psycho Cut\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n\n    def move_2(self): # Sacred Sword\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n\n    def _get_base_damage(self,power,crit):\n        atk_boost=self['boosts']['atk'] if self['act']['category']=='Physical' else self['boosts']['spa']\n        if self['act']['id']=='Sacred Sword':\n            def_boost=0\n        else:\n            def_boost=self.target['boosts']['def'] if self['act']['category']=='Physical' else self.target['boosts']['spd']\n\n        if crit:\n            atk_boost=max(0,atk_boost)\n            def_boost=min(0,def_boost)\n\n        attack=self.get_stat('atk' if self['act']['category']=='Physical' else 'spa',atk_boost)\n        defense=self.target.get_stat('def' if self['act']['category']=='Physical' else 'spd',def_boost)\n\n        level=100\n        base_damage=int(int(int(int(2*level/5+2)*power*attack)/defense)/50)+2\n\n        return base_damage\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Swords Dance\": {\n    \"power\": 0,\n    \"accuracy\": 100000,\n    \"category\": \"Status\",\n    \"priority\": 0,\n    \"type\": \"Normal\",\n    \"effect\": \"Raises the user's Attack by 2 stages.\"\n  }\n}\n```",
        "response": "```python\n@Increment(Gallade,'_move_3')\ndef value():\n    return ('Swords Dance',0,100000,'Status','Normal',0,[])\n\n@Increment(Gallade)\ndef move_3(self): # Swords Dance\n    self.set_boost('atk',+2,'self')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Gallade\",\n  \"types\": [\n    \"Psychic\",\n    \"Fighting\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Sharpness\": \"This Pokemon's slicing moves have their power multiplied by 1.5.\"\n  },\n  \"moves\": {\n    \"Psycho Cut\": {\n      \"power\": 70,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"priority\": 0,\n      \"type\": \"Psychic\",\n      \"effect\": \"Has a higher chance for a critical hit.\",\n      \"property\": [\n        \"slicing\"\n      ]\n    },\n    \"Sacred Sword\": {\n      \"power\": 90,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"priority\": 0,\n      \"type\": \"Fighting\",\n      \"effect\": \"Ignores the target's stat stage changes.\",\n      \"property\": [\n        \"contact\",\n        \"slicing\"\n      ]\n    },\n    \"Swords Dance\": {\n      \"power\": 0,\n      \"accuracy\": 100000,\n      \"category\": \"Status\",\n      \"priority\": 0,\n      \"type\": \"Normal\",\n      \"effect\": \"Raises the user's Attack by 2 stages.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Gallade(PokemonBase):\n    _species='Gallade'\n    _types=['Psychic','Fighting']\n    _gender='Male'\n    _ability=['Sharpness']\n    _move_1=('Psycho Cut',70,100,'Physical','Psychic',0,['slicing'])\n    _move_2=('Sacred Sword',90,100,'Physical','Fighting',0,['contact','slicing'])\n    def __init__(self):\n        super().__init__()\n\n    def get_power(self):        \n        power=self['act']['power']\n        if 'slicing' in self['act']['property']:\n            power*=1.5\n        return int(power*self.get_weather_power_mult())\n\n    def get_crit(self):\n        crit_mult=[0,24,8,2,1]\n        crit_ratio=self['boosts']['crit']\n        if self['act']['id']=='Psycho Cut':\n            crit_ratio=min(3,crit_ratio+1)\n        crit=False\n        if rnd()*crit_mult[crit_ratio+1]<1:\n            crit=True\n        return crit\n\n    def move_1(self): # Psycho Cut\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n\n    def move_2(self): # Sacred Sword\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n\n    def _get_base_damage(self,power,crit):\n        atk_boost=self['boosts']['atk'] if self['act']['category']=='Physical' else self['boosts']['spa']\n        if self['act']['id']=='Sacred Sword':\n            def_boost=0\n        else:\n            def_boost=self.target['boosts']['def'] if self['act']['category']=='Physical' else self.target['boosts']['spd']\n\n        if crit:\n            atk_boost=max(0,atk_boost)\n            def_boost=min(0,def_boost)\n\n        attack=self.get_stat('atk' if self['act']['category']=='Physical' else 'spa',atk_boost)\n        defense=self.target.get_stat('def' if self['act']['category']=='Physical' else 'spd',def_boost)\n\n        level=100\n        base_damage=int(int(int(int(2*level/5+2)*power*attack)/defense)/50)+2\n\n        return base_damage\n\n@Increment(Gallade,'_move_3')\ndef value():\n    return ('Swords Dance',0,100000,'Status','Normal',0,[])\n\n@Increment(Gallade)\ndef move_3(self): # Swords Dance\n    self.set_boost('atk',+2,'self')\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Leaf Blade\": {\n    \"power\": 90,\n    \"accuracy\": 100,\n    \"category\": \"Physical\",\n    \"priority\": 0,\n    \"type\": \"Grass\",\n    \"effect\": \"Has a higher chance for a critical hit.\",\n    \"property\": [\n      \"contact\",\n      \"slicing\"\n    ]\n  }\n}\n```",
        "response": "```python\n@Increment(Gallade,'_move_4')\ndef value():\n    return ('Leaf Blade',90,100,'Physical','Grass',0,['contact','slicing'])\n\n@Increment(Gallade)\ndef get_crit(self):\n    crit_mult=[0,24,8,2,1]\n    crit_ratio=self['boosts']['crit']\n    if self['act']['id']=='Psycho Cut' or self['act']['id']=='Leaf Blade':\n        crit_ratio=min(3,crit_ratio+1)\n    crit=False\n    if rnd()*crit_mult[crit_ratio+1]<1:\n        crit=True\n    return crit\n\n@Increment(Gallade)\ndef move_4(self): # Leaf Blade\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Gallade\",\n  \"types\": [\n    \"Psychic\",\n    \"Fighting\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Sharpness\": \"This Pokemon's slicing moves have their power multiplied by 1.5.\"\n  },\n  \"moves\": {\n    \"Psycho Cut\": {\n      \"power\": 70,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"priority\": 0,\n      \"type\": \"Psychic\",\n      \"effect\": \"Has a higher chance for a critical hit.\",\n      \"property\": [\n        \"slicing\"\n      ]\n    },\n    \"Sacred Sword\": {\n      \"power\": 90,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"priority\": 0,\n      \"type\": \"Fighting\",\n      \"effect\": \"Ignores the target's stat stage changes.\",\n      \"property\": [\n        \"contact\",\n        \"slicing\"\n      ]\n    },\n    \"Swords Dance\": {\n      \"power\": 0,\n      \"accuracy\": 100000,\n      \"category\": \"Status\",\n      \"priority\": 0,\n      \"type\": \"Normal\",\n      \"effect\": \"Raises the user's Attack by 2 stages.\"\n    },\n    \"Leaf Blade\": {\n      \"power\": 90,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"priority\": 0,\n      \"type\": \"Grass\",\n      \"effect\": \"Has a higher chance for a critical hit.\",\n      \"property\": [\n        \"contact\",\n        \"slicing\"\n      ]\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Gallade(PokemonBase):\n    _species='Gallade'\n    _types=['Psychic','Fighting']\n    _gender='Male'\n    _ability=['Sharpness']\n    _move_1=('Psycho Cut',70,100,'Physical','Psychic',0,['slicing'])\n    _move_2=('Sacred Sword',90,100,'Physical','Fighting',0,['contact','slicing'])\n    def __init__(self):\n        super().__init__()\n\n    def get_power(self):        \n        power=self['act']['power']\n        if 'slicing' in self['act']['property']:\n            power*=1.5\n        return int(power*self.get_weather_power_mult())\n\n    def get_crit(self):\n        crit_mult=[0,24,8,2,1]\n        crit_ratio=self['boosts']['crit']\n        if self['act']['id']=='Psycho Cut':\n            crit_ratio=min(3,crit_ratio+1)\n        crit=False\n        if rnd()*crit_mult[crit_ratio+1]<1:\n            crit=True\n        return crit\n\n    def move_1(self): # Psycho Cut\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n\n    def move_2(self): # Sacred Sword\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n\n    def _get_base_damage(self,power,crit):\n        atk_boost=self['boosts']['atk'] if self['act']['category']=='Physical' else self['boosts']['spa']\n        if self['act']['id']=='Sacred Sword':\n            def_boost=0\n        else:\n            def_boost=self.target['boosts']['def'] if self['act']['category']=='Physical' else self.target['boosts']['spd']\n\n        if crit:\n            atk_boost=max(0,atk_boost)\n            def_boost=min(0,def_boost)\n\n        attack=self.get_stat('atk' if self['act']['category']=='Physical' else 'spa',atk_boost)\n        defense=self.target.get_stat('def' if self['act']['category']=='Physical' else 'spd',def_boost)\n\n        level=100\n        base_damage=int(int(int(int(2*level/5+2)*power*attack)/defense)/50)+2\n\n        return base_damage\n\n@Increment(Gallade,'_move_3')\ndef value():\n    return ('Swords Dance',0,100000,'Status','Normal',0,[])\n\n@Increment(Gallade)\ndef move_3(self): # Swords Dance\n    self.set_boost('atk',+2,'self')\n\n@Increment(Gallade,'_move_4')\ndef value():\n    return ('Leaf Blade',90,100,'Physical','Grass',0,['contact','slicing'])\n\n@Increment(Gallade)\ndef get_crit(self):\n    crit_mult=[0,24,8,2,1]\n    crit_ratio=self['boosts']['crit']\n    if self['act']['id']=='Psycho Cut' or self['act']['id']=='Leaf Blade':\n        crit_ratio=min(3,crit_ratio+1)\n    crit=False\n    if rnd()*crit_mult[crit_ratio+1]<1:\n        crit=True\n    return crit\n\n@Increment(Gallade)\ndef move_4(self): # Leaf Blade\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n```\n\nThis role is gonna learn a new ability:\n```json\n{\n  \"Sharpness II\": \"This Pokemon's slicing moves have their priority plus 1.\"\n}\n```",
        "response": "```python\n@Increment(Gallade,'_ability')\ndef value():\n    return ['Sharpness','Sharpness II']\n\n@Increment(Gallade)\ndef get_priority(self,move_id):\n    if 'slicing' in self._moves[move_id]['property']:\n        return self._moves[move_id]['priority']+1\n    return self._moves[move_id]['priority']\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Gallade\",\n  \"types\": [\n    \"Psychic\",\n    \"Fighting\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Sharpness\": \"This Pokemon's slicing moves have their power multiplied by 1.5.\",\n    \"Sharpness II\": \"This Pokemon's slicing moves have their priority plus 1.\"\n  },\n  \"moves\": {\n    \"Psycho Cut\": {\n      \"power\": 70,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"priority\": 0,\n      \"type\": \"Psychic\",\n      \"effect\": \"Has a higher chance for a critical hit.\",\n      \"property\": [\n        \"slicing\"\n      ]\n    },\n    \"Sacred Sword\": {\n      \"power\": 90,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"priority\": 0,\n      \"type\": \"Fighting\",\n      \"effect\": \"Ignores the target's stat stage changes.\",\n      \"property\": [\n        \"contact\",\n        \"slicing\"\n      ]\n    },\n    \"Swords Dance\": {\n      \"power\": 0,\n      \"accuracy\": 100000,\n      \"category\": \"Status\",\n      \"priority\": 0,\n      \"type\": \"Normal\",\n      \"effect\": \"Raises the user's Attack by 2 stages.\"\n    },\n    \"Leaf Blade\": {\n      \"power\": 90,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"priority\": 0,\n      \"type\": \"Grass\",\n      \"effect\": \"Has a higher chance for a critical hit.\",\n      \"property\": [\n        \"contact\",\n        \"slicing\"\n      ]\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Gallade(PokemonBase):\n    _species='Gallade'\n    _types=['Psychic','Fighting']\n    _gender='Male'\n    _ability=['Sharpness']\n    _move_1=('Psycho Cut',70,100,'Physical','Psychic',0,['slicing'])\n    _move_2=('Sacred Sword',90,100,'Physical','Fighting',0,['contact','slicing'])\n    def __init__(self):\n        super().__init__()\n\n    def get_power(self):        \n        power=self['act']['power']\n        if 'slicing' in self['act']['property']:\n            power*=1.5\n        return int(power*self.get_weather_power_mult())\n\n    def get_crit(self):\n        crit_mult=[0,24,8,2,1]\n        crit_ratio=self['boosts']['crit']\n        if self['act']['id']=='Psycho Cut':\n            crit_ratio=min(3,crit_ratio+1)\n        crit=False\n        if rnd()*crit_mult[crit_ratio+1]<1:\n            crit=True\n        return crit\n\n    def move_1(self): # Psycho Cut\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n\n    def move_2(self): # Sacred Sword\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n\n    def _get_base_damage(self,power,crit):\n        atk_boost=self['boosts']['atk'] if self['act']['category']=='Physical' else self['boosts']['spa']\n        if self['act']['id']=='Sacred Sword':\n            def_boost=0\n        else:\n            def_boost=self.target['boosts']['def'] if self['act']['category']=='Physical' else self.target['boosts']['spd']\n\n        if crit:\n            atk_boost=max(0,atk_boost)\n            def_boost=min(0,def_boost)\n\n        attack=self.get_stat('atk' if self['act']['category']=='Physical' else 'spa',atk_boost)\n        defense=self.target.get_stat('def' if self['act']['category']=='Physical' else 'spd',def_boost)\n\n        level=100\n        base_damage=int(int(int(int(2*level/5+2)*power*attack)/defense)/50)+2\n\n        return base_damage\n\n@Increment(Gallade,'_move_3')\ndef value():\n    return ('Swords Dance',0,100000,'Status','Normal',0,[])\n\n@Increment(Gallade)\ndef move_3(self): # Swords Dance\n    self.set_boost('atk',+2,'self')\n\n@Increment(Gallade,'_move_4')\ndef value():\n    return ('Leaf Blade',90,100,'Physical','Grass',0,['contact','slicing'])\n\n@Increment(Gallade)\ndef get_crit(self):\n    crit_mult=[0,24,8,2,1]\n    crit_ratio=self['boosts']['crit']\n    if self['act']['id']=='Psycho Cut' or self['act']['id']=='Leaf Blade':\n        crit_ratio=min(3,crit_ratio+1)\n    crit=False\n    if rnd()*crit_mult[crit_ratio+1]<1:\n        crit=True\n    return crit\n\n@Increment(Gallade)\ndef move_4(self): # Leaf Blade\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n\n@Increment(Gallade,'_ability')\ndef value():\n    return ['Sharpness','Sharpness II']\n\n@Increment(Gallade)\ndef get_priority(self,move_id):\n    if 'slicing' in self._moves[move_id]['property']:\n        return self._moves[move_id]['priority']+1\n    return self._moves[move_id]['priority']\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Drain Punch\": {\n    \"power\": 75,\n    \"accuracy\": 100,\n    \"category\": \"Physical\",\n    \"priority\": 0,\n    \"type\": \"Fighting\",\n    \"effect\": \"The user recovers 1/2 the HP lost by the target.\",\n    \"property\": [\n      \"contact\"\n    ]\n  }\n}\n```",
        "response": "```python\n@Increment(Gallade,'_move_5')\ndef value():\n    return ('Drain Punch',75,100,'Physical','Fighting',0,['contact','punch'])\n\n@Increment(Gallade)\ndef move_5(self): # Drain Punch\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        self.restore(int(1/2*damage),'drain')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Gallade\",\n  \"types\": [\n    \"Psychic\",\n    \"Fighting\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Neuroforce\": \"This Pokemon's attacks that are effective against the target do 1.25x damage.\"\n  },\n  \"moves\": {\n    \"Psychic\": {\n      \"power\": 90,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Psychic\",\n      \"effect\": \"10% chance to lower the target's Special Defense by 1 stage.\"\n    },\n    \"Drain Punch\": {\n      \"power\": 75,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Fighting\",\n      \"effect\": \"The user recovers 1/2 the HP lost by the target.\",\n      \"property\": [\n        \"contact\"\n      ]\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass Gallade(PokemonBase):\n    _species='Gallade'\n    _types=['Psychic','Fighting']\n    _gender='Male'\n    _ability=['Neuroforce']\n    _move_1=('Psychic',90,100,'Special','Psychic',0,[])\n    _move_2=('Drain Punch',75,100,'Physical','Fighting',0,['contact'])\n    def __init__(self):\n        super().__init__()\n\n    def get_type_effect(self):\n        move_type=self['act']['type']\n        target_types=self.target['types']\n        effect=1\n        for tt in target_types:\n            effect*=TYPEEFFECTIVENESS[move_type][tt]\n        if effect>1: effect*=1.25\n        return effect\n\n    def move_1(self): # Psychic\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<0.1: self.target.set_boost('spd',-1)\n    \n    def move_2(self): # Drain Punch\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            self.restore(int(1/2*damage),'drain')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Garchomp\",\n  \"types\": [\n    \"Dragon\",\n    \"Ground\"\n  ],\n  \"gender\": \"Female\",\n  \"ability\": {\n    \"Rough Skin\": \"Pokemon making contact with this Pokemon lose 1/8 of their max HP.\"\n  },\n  \"moves\": {\n    \"Sand Tomb\": {\n      \"power\": 35,\n      \"accuracy\": 85,\n      \"category\": \"Physical\",\n      \"type\": \"Ground\",\n      \"effect\": \"Traps the target for five turns. Causes damage to the target equal to 1/8 of its maximum HP at the end of each turn during effect.\"\n    },\n    \"Dragon Claw\": {\n      \"power\": 80,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Dragon\",\n      \"effect\": \"No additional effect.\",\n      \"property\": [\n        \"contact\"\n      ]\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass Garchomp(PokemonBase):\n    _species='Garchomp'\n    _types=['Dragon','Ground']\n    _gender='Female'\n    _ability=['Rough Skin']\n    _move_1=('Sand Tomb',35,85,'Physical','Ground',0,[])\n    _move_2=('Dragon Claw',80,100,'Physical','Dragon',0,['contact'])\n    def __init__(self):\n        super().__init__()\n\n    def _take_damage_attack(self,x):\n        self.register_act_taken()\n        self.state['hp']=max(0,self['hp']-x)\n        if self['act_taken'] and 'property' in self['act_taken'] and 'contact' in self['act_taken']['property']:\n            self.target.take_damage(self.target['max_hp']//8,'loss')\n        if self['hp']==0:\n            self.state['status']='FNT'\n\n    def endturn(self):\n        if self.target['conditions'].get('TRAP'):\n            if self.target['conditions']['TRAP']['counter']<5:\n                self.target.take_damage(self.target['max_hp']//8,'loss')\n                self.target['conditions']['TRAP']['counter']+=1\n            else:\n                del self.target['conditions']['TRAP']\n\n    def move_1(self): # Sand Tomb\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100:\n                self.target.set_condition('TRAP',counter=0)\n    \n    def move_2(self): # Dragon Claw\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Garchomp\",\n  \"types\": [\n    \"Dragon\",\n    \"Ground\"\n  ],\n  \"gender\": \"Female\",\n  \"ability\": {\n    \"Rough Skin\": \"Pokemon making contact with this Pokemon lose 1/8 of their max HP.\"\n  },\n  \"moves\": {\n    \"Sand Tomb\": {\n      \"power\": 35,\n      \"accuracy\": 85,\n      \"category\": \"Physical\",\n      \"type\": \"Ground\",\n      \"effect\": \"Traps the target for five turns. Causes damage to the target equal to 1/8 of its maximum HP at the end of each turn during effect.\"\n    },\n    \"Dragon Claw\": {\n      \"power\": 80,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Dragon\",\n      \"effect\": \"No additional effect.\",\n      \"property\": [\n        \"contact\"\n      ]\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Garchomp(PokemonBase):\n    _species='Garchomp'\n    _types=['Dragon','Ground']\n    _gender='Female'\n    _ability=['Rough Skin']\n    _move_1=('Sand Tomb',35,85,'Physical','Ground',0,[])\n    _move_2=('Dragon Claw',80,100,'Physical','Dragon',0,['contact'])\n    def __init__(self):\n        super().__init__()\n\n    def _take_damage_attack(self,x):\n        self.register_act_taken()\n        self.state['hp']=max(0,self['hp']-x)\n        if self['act_taken'] and 'property' in self['act_taken'] and 'contact' in self['act_taken']['property']:\n            self.target.take_damage(self.target['max_hp']//8,'loss')\n        if self['hp']==0:\n            self.state['status']='FNT'\n\n    def endturn(self):\n        if self.target['conditions'].get('TRAP'):\n            if self.target['conditions']['TRAP']['counter']<5:\n                self.target.take_damage(self.target['max_hp']//8,'loss')\n                self.target['conditions']['TRAP']['counter']+=1\n            else:\n                del self.target['conditions']['TRAP']\n\n    def move_1(self): # Sand Tomb\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100:\n                self.target.set_condition('TRAP',counter=0)\n    \n    def move_2(self): # Dragon Claw\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Protect\": {\n    \"power\": 0,\n    \"accuracy\": 100000,\n    \"category\": \"Status\",\n    \"priority\": 4,\n    \"type\": \"Normal\",\n    \"effect\": \"The user is protected from attacks made by other Pokemon during this turn. Fails if the user uses this move last turn.\"\n  }\n}\n```",
        "response": "```python\n@Increment(Garchomp,'_move_3')\ndef value():\n    return ('Protect',0,100000,'Status','Normal',4,[])\n\n@Increment(Garchomp)\ndef _take_damage_attack(self,x):\n    if self['conditions'].get('PROTECT'):\n        del self['conditions']['PROTECT']\n        return\n    self.register_act_taken()\n    self.state['hp']=max(0,self['hp']-x)\n    if self['act_taken'] and 'property' in self['act_taken'] and 'contact' in self['act_taken']['property']:\n        self.target.take_damage(self.target['max_hp']//8,'loss')\n    if self['hp']==0:\n        self.state['status']='FNT'\n\n@Increment(Garchomp)\ndef endturn(self):\n    if self.target['conditions'].get('TRAP'):\n        if self.target['conditions']['TRAP']['counter']<5:\n            self.target.take_damage(self.target['max_hp']//8,'loss')\n            self.target['conditions']['TRAP']['counter']+=1\n        else:\n            del self.target['conditions']['TRAP']\n    if self['conditions'].get('PROTECT'):\n        del self['conditions']['PROTECT']\n\n@Increment(Garchomp)\ndef move_3(self): # Protect\n    if self['last_act'] and self['last_act']['id']=='Protect':\n        return\n    self.set_condition('PROTECT',counter=0)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Garchomp\",\n  \"types\": [\n    \"Dragon\",\n    \"Ground\"\n  ],\n  \"gender\": \"Female\",\n  \"ability\": {\n    \"Arena Trap\": \"Moves that deal super-effective damage to the target lower its Defense and Sp. Def by 1 stage.\"\n  },\n  \"moves\": {\n    \"Sand Tomb\": {\n      \"power\": 35,\n      \"accuracy\": 85,\n      \"category\": \"Physical\",\n      \"type\": \"Ground\",\n      \"effect\": \"Traps the target for five turns. Causes damage to the target equal to 1/8 of its maximum HP at the end of each turn during effect.\"\n    },\n    \"Dragon Claw\": {\n      \"power\": 80,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Dragon\",\n      \"effect\": \"No additional effect.\",\n      \"property\": [\n        \"contact\"\n      ]\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass Garchomp(PokemonBase):\n    _species='Garchomp'\n    _types=['Dragon','Ground']\n    _gender='Female'\n    _ability=['Arena Trap']\n    _move_1=('Sand Tomb',35,85,'Physical','Ground',0,[])\n    _move_2=('Dragon Claw',80,100,'Physical','Dragon',0,['contact'])\n    def __init__(self):\n        super().__init__()\n\n    def move_effect(self,type_efc):\n        if type_efc>1:\n            self.target.set_boost('def',-1)\n            self.target.set_boost('spd',-1)\n\n    def endturn(self):\n        if self.target['conditions'].get('TRAP'):\n            if self.target['conditions']['TRAP']['counter']<5:\n                self.target.take_damage(self.target['max_hp']//8,'loss')\n                self.target['conditions']['TRAP']['counter']+=1\n            else:\n                del self.target['conditions']['TRAP']\n\n    def move_1(self): # Sand Tomb\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint():\n                self.move_effect(damage_ret['type_efc'])\n                if rnd()<30/100:\n                    self.target.set_condition('TRAP',counter=0)\n\n    def move_2(self): # Dragon Claw\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint():\n                self.move_effect(damage_ret['type_efc'])\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Garchomp\",\n  \"types\": [\n    \"Dragon\",\n    \"Ground\"\n  ],\n  \"gender\": \"Female\",\n  \"ability\": {\n    \"Arena Trap\": \"Moves that deal super-effective damage to the target lower its Defense and Sp. Def by 1 stage.\"\n  },\n  \"moves\": {\n    \"Sand Tomb\": {\n      \"power\": 35,\n      \"accuracy\": 85,\n      \"category\": \"Physical\",\n      \"type\": \"Ground\",\n      \"effect\": \"Traps the target for five turns. Causes damage to the target equal to 1/8 of its maximum HP at the end of each turn during effect.\"\n    },\n    \"Dragon Claw\": {\n      \"power\": 80,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Dragon\",\n      \"effect\": \"No additional effect.\",\n      \"property\": [\n        \"contact\"\n      ]\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Garchomp(PokemonBase):\n    _species='Garchomp'\n    _types=['Dragon','Ground']\n    _gender='Female'\n    _ability=['Arena Trap']\n    _move_1=('Sand Tomb',35,85,'Physical','Ground',0,[])\n    _move_2=('Dragon Claw',80,100,'Physical','Dragon',0,['contact'])\n    def __init__(self):\n        super().__init__()\n\n    def move_effect(self,type_efc):\n        if type_efc>1:\n            self.target.set_boost('def',-1)\n            self.target.set_boost('spd',-1)\n\n    def endturn(self):\n        if self.target['conditions'].get('TRAP'):\n            if self.target['conditions']['TRAP']['counter']<5:\n                self.target.take_damage(self.target['max_hp']//8,'loss')\n                self.target['conditions']['TRAP']['counter']+=1\n            else:\n                del self.target['conditions']['TRAP']\n\n    def move_1(self): # Sand Tomb\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint():\n                self.move_effect(damage_ret['type_efc'])\n                if rnd()<30/100:\n                    self.target.set_condition('TRAP',counter=0)\n\n    def move_2(self): # Dragon Claw\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint():\n                self.move_effect(damage_ret['type_efc'])\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Protect\": {\n    \"power\": 0,\n    \"accuracy\": 100000,\n    \"category\": \"Status\",\n    \"priority\": 4,\n    \"type\": \"Normal\",\n    \"effect\": \"The user is protected from attacks made by other Pokemon during this turn. Fails if the user uses this move last turn.\"\n  }\n}\n```",
        "response": "```python\n@Increment(Garchomp,'_move_3')\ndef value():\n    return ('Protect',0,100000,'Status','Normal',4,[])\n\n@Increment(Garchomp)\ndef move_3(self): # Protect\n    if self['last_act'] and self['last_act']['id']=='Protect':\n        return\n    self.set_condition('PROTECT',counter=0)\n\n@Increment(Garchomp)\ndef _take_damage_attack(self,x):\n    if self['conditions'].get('PROTECT'):\n        del self['conditions']['PROTECT']\n        return\n    self.register_act_taken()\n    self.state['hp']=max(0,self['hp']-x)\n    if self['hp']==0:\n        self.state['status']='FNT'\n\n@Increment(Garchomp)\ndef endturn(self):\n    if self.target['conditions'].get('TRAP'):\n        if self.target['conditions']['TRAP']['counter']<5:\n            self.target.take_damage(self.target['max_hp']//8,'loss')\n            self.target['conditions']['TRAP']['counter']+=1\n        else:\n            del self.target['conditions']['TRAP']\n    if self['conditions'].get('PROTECT'):\n        del self['conditions']['PROTECT']\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Gardevoir\",\n  \"types\": [\n    \"Psychic\",\n    \"Fairy\"\n  ],\n  \"gender\": \"Female\",\n  \"ability\": {\n    \"Wonder Skin\": \"50% to avoid the status moves from the opponent used on this Pokemon.\"\n  },\n  \"moves\": {\n    \"Dazzling Gleam\": {\n      \"power\": 80,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Fairy\",\n      \"effect\": \"No additional effect.\"\n    },\n    \"Shadow Ball\": {\n      \"power\": 80,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Ghost\",\n      \"effect\": \"Has a 20% chance to lower the target's Special Defense by 1 stage.\"\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass Gardevoir(PokemonBase):\n    _species='Gardevoir'\n    _types=['Psychic','Fairy']\n    _gender='Female'\n    _ability=['Wonder Skin']\n    _move_1=('Dazzling Gleam',80,100,'Special','Fairy',0,[])\n    _move_2=('Shadow Ball',80,100,'Special','Ghost',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def get_evasion(self):\n        if self.target['act']['category']=='Status':\n            return 0.5\n        return 1\n    \n    def move_1(self): # Dazzling Gleam\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n    \n    def move_2(self): # Shadow Ball\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<0.2:\n                self.target.set_boost('spd',-1)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Gardevoir\",\n  \"types\": [\n    \"Psychic\",\n    \"Fairy\"\n  ],\n  \"gender\": \"Female\",\n  \"ability\": {\n    \"Wonder Skin\": \"50% to avoid the status moves from the opponent used on this Pokemon.\"\n  },\n  \"moves\": {\n    \"Dazzling Gleam\": {\n      \"power\": 80,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Fairy\",\n      \"effect\": \"No additional effect.\"\n    },\n    \"Shadow Ball\": {\n      \"power\": 80,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Ghost\",\n      \"effect\": \"Has a 20% chance to lower the target's Special Defense by 1 stage.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Gardevoir(PokemonBase):\n    _species='Gardevoir'\n    _types=['Psychic','Fairy']\n    _gender='Female'\n    _ability=['Wonder Skin']\n    _move_1=('Dazzling Gleam',80,100,'Special','Fairy',0,[])\n    _move_2=('Shadow Ball',80,100,'Special','Ghost',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def get_evasion(self):\n        if self.target['act']['category']=='Status':\n            return 0.5\n        return 1\n    \n    def move_1(self): # Dazzling Gleam\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n    \n    def move_2(self): # Shadow Ball\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<0.2:\n                self.target.set_boost('spd',-1)\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Mind Blast\": {\n    \"power\": 90,\n    \"accuracy\": 95,\n    \"category\": \"Special\",\n    \"type\": \"Psychic\",\n    \"effect\": \"Has a 10% chance to confuse the target.\"\n  }\n}\n```",
        "response": "```python\n@Increment(Gardevoir,'_move_3')\ndef value():\n    return ('Mind Blast',90,95,'Special','Psychic',0,[])\n\n@Increment(Gardevoir)\ndef move_3(self): # Mind Blast\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint() and rnd()<10/100:\n            self.target.set_condition('CONFUSION',counter=0)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Gardevoir\",\n  \"types\": [\n    \"Psychic\",\n    \"Fairy\"\n  ],\n  \"gender\": \"Female\",\n  \"ability\": {\n    \"Wonder Skin\": \"50% to avoid the status moves from the opponent used on this Pokemon.\"\n  },\n  \"moves\": {\n    \"Dazzling Gleam\": {\n      \"power\": 80,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Fairy\",\n      \"effect\": \"No additional effect.\"\n    },\n    \"Shadow Ball\": {\n      \"power\": 80,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Ghost\",\n      \"effect\": \"Has a 20% chance to lower the target's Special Defense by 1 stage.\"\n    },\n    \"Mind Blast\": {\n      \"power\": 90,\n      \"accuracy\": 95,\n      \"category\": \"Special\",\n      \"type\": \"Psychic\",\n      \"effect\": \"Has a 10% chance to confuse the target.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Gardevoir(PokemonBase):\n    _species='Gardevoir'\n    _types=['Psychic','Fairy']\n    _gender='Female'\n    _ability=['Wonder Skin']\n    _move_1=('Dazzling Gleam',80,100,'Special','Fairy',0,[])\n    _move_2=('Shadow Ball',80,100,'Special','Ghost',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def get_evasion(self):\n        if self.target['act']['category']=='Status':\n            return 0.5\n        return 1\n    \n    def move_1(self): # Dazzling Gleam\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n    \n    def move_2(self): # Shadow Ball\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<0.2:\n                self.target.set_boost('spd',-1)\n\n@Increment(Gardevoir,'_move_3')\ndef value():\n    return ('Mind Blast',90,95,'Special','Psychic',0,[])\n\n@Increment(Gardevoir)\ndef move_3(self): # Mind Blast\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint() and rnd()<10/100:\n            self.target.set_condition('CONFUSION',counter=0)\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Fairy Shield\": {\n    \"power\": 0,\n    \"accuracy\": 100000,\n    \"category\": \"Status\",\n    \"type\": \"Fairy\",\n    \"effect\": \"Raises the user's Defense and Special Defense by 1 stage each.\"\n  }\n}\n```",
        "response": "```python\n@Increment(Gardevoir,'_move_4')\ndef value():\n    return ('Fairy Shield',0,100000,'Status','Fairy',0,[])\n\n@Increment(Gardevoir)\ndef move_4(self): # Fairy Shield\n    self.set_boost('def',1,'self')\n    self.set_boost('spd',1,'self')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Gardevoir\",\n  \"types\": [\n    \"Psychic\",\n    \"Fairy\"\n  ],\n  \"gender\": \"Female\",\n  \"ability\": {\n    \"Wonder Skin\": \"50% to avoid the status moves from the opponent used on this Pokemon.\"\n  },\n  \"moves\": {\n    \"Dazzling Gleam\": {\n      \"power\": 80,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Fairy\",\n      \"effect\": \"No additional effect.\"\n    },\n    \"Shadow Ball\": {\n      \"power\": 80,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Ghost\",\n      \"effect\": \"Has a 20% chance to lower the target's Special Defense by 1 stage.\"\n    },\n    \"Mind Blast\": {\n      \"power\": 90,\n      \"accuracy\": 95,\n      \"category\": \"Special\",\n      \"type\": \"Psychic\",\n      \"effect\": \"Has a 10% chance to confuse the target.\"\n    },\n    \"Fairy Shield\": {\n      \"power\": 0,\n      \"accuracy\": 100000,\n      \"category\": \"Status\",\n      \"type\": \"Fairy\",\n      \"effect\": \"Raises the user's Defense and Special Defense by 1 stage each.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Gardevoir(PokemonBase):\n    _species='Gardevoir'\n    _types=['Psychic','Fairy']\n    _gender='Female'\n    _ability=['Wonder Skin']\n    _move_1=('Dazzling Gleam',80,100,'Special','Fairy',0,[])\n    _move_2=('Shadow Ball',80,100,'Special','Ghost',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def get_evasion(self):\n        if self.target['act']['category']=='Status':\n            return 0.5\n        return 1\n    \n    def move_1(self): # Dazzling Gleam\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n    \n    def move_2(self): # Shadow Ball\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<0.2:\n                self.target.set_boost('spd',-1)\n\n@Increment(Gardevoir,'_move_3')\ndef value():\n    return ('Mind Blast',90,95,'Special','Psychic',0,[])\n\n@Increment(Gardevoir)\ndef move_3(self): # Mind Blast\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint() and rnd()<10/100:\n            self.target.set_condition('CONFUSION',counter=0)\n\n@Increment(Gardevoir,'_move_4')\ndef value():\n    return ('Fairy Shield',0,100000,'Status','Fairy',0,[])\n\n@Increment(Gardevoir)\ndef move_4(self): # Fairy Shield\n    self.set_boost('def',1,'self')\n    self.set_boost('spd',1,'self')\n```\n\nThis role is gonna learn a new ability:\n```json\n{\n  \"Psychic Surge\": \"On switch-in, this Pokemon creates a Psychic Terrain which lasts for 5 turns.\"\n}\n```",
        "response": "```python\n@Increment(Gardevoir,'_ability')\ndef value():\n    return ['Wonder Skin','Psychic Surge']\n\n@Increment(Gardevoir)\ndef onswitch(self):\n    self.set_env('PSYCHIC_TERRAIN')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Gardevoir\",\n  \"types\": [\n    \"Psychic\",\n    \"Fairy\"\n  ],\n  \"gender\": \"Female\",\n  \"ability\": {\n    \"Synchronize\": \"If this Pokemon becomes poisoned, paralyzed or burned, so does the opponent.\"\n  },\n  \"moves\": {\n    \"Psychic\": {\n      \"power\": 90,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Psychic\",\n      \"effect\": \"Has a 10% chance to lower the target's Special Defense by 1 stage.\"\n    },\n    \"Moon Blast\": {\n      \"power\": 95,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Fairy\",\n      \"effect\": \"Has a 30% chance to lower the target's Special Attack by 1 stage.\"\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass Gardevoir(PokemonBase):\n    _species='Gardevoir'\n    _types=['Psychic','Fairy']\n    _gender='Female'\n    _ability=['Synchronize']\n    _move_1=('Psychic',90,100,'Special','Psychic',0,[])\n    _move_2=('Moon Blast',95,100,'Special','Fairy',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def set_status(self,x):\n        if self['status'] or self.env.get('MISTY_TERRAIN'):\n            return\n        if x=='BRN':\n            if not self.istype('Fire'):\n                self.state['status']={x:{'counter':0}}\n                self.target.set_status(x)\n        elif x=='PAR':\n            if not self.istype('Electric'):\n                self.state['status']={x:{'counter':0}}\n                self.target.set_status(x)\n        elif x=='PSN':\n            if not self.istype('Poison') and not self.istype('Steel'):\n                self.state['status']={x:{'counter':0}}\n                self.target.set_status(x)\n        elif x=='TOX':\n            if not self.istype('Poison') and not self.istype('Steel'):\n                self.state['status']={x:{'counter':0}}\n                self.target.set_status(x)\n        elif x=='FRZ':\n            if not self.istype('Ice'):\n                self.state['status']={x:{'counter':0}}\n                self.target.set_status(x)\n        elif x=='SLP':\n            self.state['status']={x:{'counter':0}}\n            self.target.set_status(x)\n\n    def move_1(self): # Psychic\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<10/100: self.target.set_boost('spd',-1)\n\n    def move_2(self): # Moon Blast\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100: self.target.set_boost('spa',-1)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Gardevoir\",\n  \"types\": [\n    \"Psychic\",\n    \"Fairy\"\n  ],\n  \"gender\": \"Female\",\n  \"ability\": {\n    \"Synchronize\": \"If this Pokemon becomes poisoned, paralyzed or burned, so does the opponent.\"\n  },\n  \"moves\": {\n    \"Psychic\": {\n      \"power\": 90,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Psychic\",\n      \"effect\": \"Has a 10% chance to lower the target's Special Defense by 1 stage.\"\n    },\n    \"Moon Blast\": {\n      \"power\": 95,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Fairy\",\n      \"effect\": \"Has a 30% chance to lower the target's Special Attack by 1 stage.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Gardevoir(PokemonBase):\n    _species='Gardevoir'\n    _types=['Psychic','Fairy']\n    _gender='Female'\n    _ability=['Synchronize']\n    _move_1=('Psychic',90,100,'Special','Psychic',0,[])\n    _move_2=('Moon Blast',95,100,'Special','Fairy',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def set_status(self,x):\n        if self['status'] or self.env.get('MISTY_TERRAIN'):\n            return\n        if x=='BRN':\n            if not self.istype('Fire'):\n                self.state['status']={x:{'counter':0}}\n                self.target.set_status(x)\n        elif x=='PAR':\n            if not self.istype('Electric'):\n                self.state['status']={x:{'counter':0}}\n                self.target.set_status(x)\n        elif x=='PSN':\n            if not self.istype('Poison') and not self.istype('Steel'):\n                self.state['status']={x:{'counter':0}}\n                self.target.set_status(x)\n        elif x=='TOX':\n            if not self.istype('Poison') and not self.istype('Steel'):\n                self.state['status']={x:{'counter':0}}\n                self.target.set_status(x)\n        elif x=='FRZ':\n            if not self.istype('Ice'):\n                self.state['status']={x:{'counter':0}}\n                self.target.set_status(x)\n        elif x=='SLP':\n            self.state['status']={x:{'counter':0}}\n            self.target.set_status(x)\n\n    def move_1(self): # Psychic\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<10/100: self.target.set_boost('spd',-1)\n\n    def move_2(self): # Moon Blast\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100: self.target.set_boost('spa',-1)\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Thunderbolt\": {\n    \"power\": 90,\n    \"accuracy\": 100,\n    \"category\": \"Special\",\n    \"type\": \"Electric\",\n    \"effect\": \"Has a 10% chance to paralyze the target.\"\n  }\n}\n```",
        "response": "```python\n@Increment(Gardevoir,'_move_3')\ndef value():\n    return ('Thunderbolt',90,100,'Special','Electric',0,[])\n\n@Increment(Gardevoir)\ndef move_3(self): # Thunderbolt\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint() and rnd()<10/100: self.target.set_status('PAR')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Gardevoir\",\n  \"types\": [\n    \"Psychic\",\n    \"Fairy\"\n  ],\n  \"gender\": \"Female\",\n  \"ability\": {\n    \"Synchronize\": \"If this Pokemon becomes poisoned, paralyzed or burned, so does the opponent.\"\n  },\n  \"moves\": {\n    \"Psychic\": {\n      \"power\": 90,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Psychic\",\n      \"effect\": \"Has a 10% chance to lower the target's Special Defense by 1 stage.\"\n    },\n    \"Moon Blast\": {\n      \"power\": 95,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Fairy\",\n      \"effect\": \"Has a 30% chance to lower the target's Special Attack by 1 stage.\"\n    },\n    \"Thunderbolt\": {\n      \"power\": 90,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Electric\",\n      \"effect\": \"Has a 10% chance to paralyze the target.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Gardevoir(PokemonBase):\n    _species='Gardevoir'\n    _types=['Psychic','Fairy']\n    _gender='Female'\n    _ability=['Synchronize']\n    _move_1=('Psychic',90,100,'Special','Psychic',0,[])\n    _move_2=('Moon Blast',95,100,'Special','Fairy',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def set_status(self,x):\n        if self['status'] or self.env.get('MISTY_TERRAIN'):\n            return\n        if x=='BRN':\n            if not self.istype('Fire'):\n                self.state['status']={x:{'counter':0}}\n                self.target.set_status(x)\n        elif x=='PAR':\n            if not self.istype('Electric'):\n                self.state['status']={x:{'counter':0}}\n                self.target.set_status(x)\n        elif x=='PSN':\n            if not self.istype('Poison') and not self.istype('Steel'):\n                self.state['status']={x:{'counter':0}}\n                self.target.set_status(x)\n        elif x=='TOX':\n            if not self.istype('Poison') and not self.istype('Steel'):\n                self.state['status']={x:{'counter':0}}\n                self.target.set_status(x)\n        elif x=='FRZ':\n            if not self.istype('Ice'):\n                self.state['status']={x:{'counter':0}}\n                self.target.set_status(x)\n        elif x=='SLP':\n            self.state['status']={x:{'counter':0}}\n            self.target.set_status(x)\n\n    def move_1(self): # Psychic\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<10/100: self.target.set_boost('spd',-1)\n\n    def move_2(self): # Moon Blast\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100: self.target.set_boost('spa',-1)\n\n@Increment(Gardevoir,'_move_3')\ndef value():\n    return ('Thunderbolt',90,100,'Special','Electric',0,[])\n\n@Increment(Gardevoir)\ndef move_3(self): # Thunderbolt\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint() and rnd()<10/100: self.target.set_status('PAR')\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Shadow Ball\": {\n    \"power\": 80,\n    \"accuracy\": 100,\n    \"category\": \"Special\",\n    \"type\": \"Ghost\",\n    \"effect\": \"Has a 20% chance to lower the target's Special Defense by 1 stage.\"\n  }\n}\n```",
        "response": "```python\n@Increment(Gardevoir,'_move_4')\ndef value():\n    return ('Shadow Ball',80,100,'Special','Ghost',0,[])\n\n@Increment(Gardevoir)\ndef move_4(self): # Shadow Ball\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint() and rnd()<20/100: self.target.set_boost('spd',-1)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Gardevoir\",\n  \"types\": [\n    \"Psychic\",\n    \"Fairy\"\n  ],\n  \"gender\": \"Female\",\n  \"ability\": {\n    \"Synchronize\": \"If this Pokemon becomes poisoned, paralyzed or burned, so does the opponent.\"\n  },\n  \"moves\": {\n    \"Psychic\": {\n      \"power\": 90,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Psychic\",\n      \"effect\": \"Has a 10% chance to lower the target's Special Defense by 1 stage.\"\n    },\n    \"Moon Blast\": {\n      \"power\": 95,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Fairy\",\n      \"effect\": \"Has a 30% chance to lower the target's Special Attack by 1 stage.\"\n    },\n    \"Thunderbolt\": {\n      \"power\": 90,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Electric\",\n      \"effect\": \"Has a 10% chance to paralyze the target.\"\n    },\n    \"Shadow Ball\": {\n      \"power\": 80,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Ghost\",\n      \"effect\": \"Has a 20% chance to lower the target's Special Defense by 1 stage.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Gardevoir(PokemonBase):\n    _species='Gardevoir'\n    _types=['Psychic','Fairy']\n    _gender='Female'\n    _ability=['Synchronize']\n    _move_1=('Psychic',90,100,'Special','Psychic',0,[])\n    _move_2=('Moon Blast',95,100,'Special','Fairy',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def set_status(self,x):\n        if self['status'] or self.env.get('MISTY_TERRAIN'):\n            return\n        if x=='BRN':\n            if not self.istype('Fire'):\n                self.state['status']={x:{'counter':0}}\n                self.target.set_status(x)\n        elif x=='PAR':\n            if not self.istype('Electric'):\n                self.state['status']={x:{'counter':0}}\n                self.target.set_status(x)\n        elif x=='PSN':\n            if not self.istype('Poison') and not self.istype('Steel'):\n                self.state['status']={x:{'counter':0}}\n                self.target.set_status(x)\n        elif x=='TOX':\n            if not self.istype('Poison') and not self.istype('Steel'):\n                self.state['status']={x:{'counter':0}}\n                self.target.set_status(x)\n        elif x=='FRZ':\n            if not self.istype('Ice'):\n                self.state['status']={x:{'counter':0}}\n                self.target.set_status(x)\n        elif x=='SLP':\n            self.state['status']={x:{'counter':0}}\n            self.target.set_status(x)\n\n    def move_1(self): # Psychic\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<10/100: self.target.set_boost('spd',-1)\n\n    def move_2(self): # Moon Blast\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100: self.target.set_boost('spa',-1)\n\n@Increment(Gardevoir,'_move_3')\ndef value():\n    return ('Thunderbolt',90,100,'Special','Electric',0,[])\n\n@Increment(Gardevoir)\ndef move_3(self): # Thunderbolt\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint() and rnd()<10/100: self.target.set_status('PAR')\n\n@Increment(Gardevoir,'_move_4')\ndef value():\n    return ('Shadow Ball',80,100,'Special','Ghost',0,[])\n\n@Increment(Gardevoir)\ndef move_4(self): # Shadow Ball\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint() and rnd()<20/100: self.target.set_boost('spd',-1)\n```\n\nThis role is gonna learn a new ability:\n```json\n{\n  \"Mind Shield\": \"This Pokemon takes 50% less damage from special attacks.\"\n}\n```",
        "response": "```python\n@Increment(Gardevoir,'_ability')\ndef value():\n    return ['Synchronize','Mind Shield']\n\n@Increment(Gardevoir)\ndef _take_damage_attack(self,x):\n    self.register_act_taken()\n    if self['act_taken']['category']=='Special':\n        x//=2\n    self.state['hp']=max(0,self['hp']-x)\n    if self['hp']==0:\n        self.state['status']='FNT'\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Gardevoir\",\n  \"types\": [\n    \"Psychic\",\n    \"Fairy\"\n  ],\n  \"gender\": \"Female\",\n  \"ability\": {\n    \"Synchronize\": \"If this Pokemon becomes poisoned, paralyzed or burned, so does the opponent.\",\n    \"Mind Shield\": \"This Pokemon takes 50% less damage from special attacks.\"\n  },\n  \"moves\": {\n    \"Psychic\": {\n      \"power\": 90,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Psychic\",\n      \"effect\": \"Has a 10% chance to lower the target's Special Defense by 1 stage.\"\n    },\n    \"Moon Blast\": {\n      \"power\": 95,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Fairy\",\n      \"effect\": \"Has a 30% chance to lower the target's Special Attack by 1 stage.\"\n    },\n    \"Thunderbolt\": {\n      \"power\": 90,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Electric\",\n      \"effect\": \"Has a 10% chance to paralyze the target.\"\n    },\n    \"Shadow Ball\": {\n      \"power\": 80,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Ghost\",\n      \"effect\": \"Has a 20% chance to lower the target's Special Defense by 1 stage.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Gardevoir(PokemonBase):\n    _species='Gardevoir'\n    _types=['Psychic','Fairy']\n    _gender='Female'\n    _ability=['Synchronize']\n    _move_1=('Psychic',90,100,'Special','Psychic',0,[])\n    _move_2=('Moon Blast',95,100,'Special','Fairy',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def set_status(self,x):\n        if self['status'] or self.env.get('MISTY_TERRAIN'):\n            return\n        if x=='BRN':\n            if not self.istype('Fire'):\n                self.state['status']={x:{'counter':0}}\n                self.target.set_status(x)\n        elif x=='PAR':\n            if not self.istype('Electric'):\n                self.state['status']={x:{'counter':0}}\n                self.target.set_status(x)\n        elif x=='PSN':\n            if not self.istype('Poison') and not self.istype('Steel'):\n                self.state['status']={x:{'counter':0}}\n                self.target.set_status(x)\n        elif x=='TOX':\n            if not self.istype('Poison') and not self.istype('Steel'):\n                self.state['status']={x:{'counter':0}}\n                self.target.set_status(x)\n        elif x=='FRZ':\n            if not self.istype('Ice'):\n                self.state['status']={x:{'counter':0}}\n                self.target.set_status(x)\n        elif x=='SLP':\n            self.state['status']={x:{'counter':0}}\n            self.target.set_status(x)\n\n    def move_1(self): # Psychic\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<10/100: self.target.set_boost('spd',-1)\n\n    def move_2(self): # Moon Blast\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100: self.target.set_boost('spa',-1)\n\n@Increment(Gardevoir,'_move_3')\ndef value():\n    return ('Thunderbolt',90,100,'Special','Electric',0,[])\n\n@Increment(Gardevoir)\ndef move_3(self): # Thunderbolt\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint() and rnd()<10/100: self.target.set_status('PAR')\n\n@Increment(Gardevoir,'_move_4')\ndef value():\n    return ('Shadow Ball',80,100,'Special','Ghost',0,[])\n\n@Increment(Gardevoir)\ndef move_4(self): # Shadow Ball\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint() and rnd()<20/100: self.target.set_boost('spd',-1)\n\n@Increment(Gardevoir,'_ability')\ndef value():\n    return ['Synchronize','Mind Shield']\n\n@Increment(Gardevoir)\ndef _take_damage_attack(self,x):\n    self.register_act_taken()\n    if self['act_taken']['category']=='Special':\n        x//=2\n    self.state['hp']=max(0,self['hp']-x)\n    if self['hp']==0:\n        self.state['status']='FNT'\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Ethereal Shield\": {\n    \"power\": 0,\n    \"accuracy\": 100000,\n    \"category\": \"Status\",\n    \"type\": \"Psychic\",\n    \"effect\": \"Raises the user's Special Defense by 2 stages.\"\n  }\n}\n```",
        "response": "```python\n@Increment(Gardevoir,'_move_5')\ndef value():\n    return ('Ethereal Shield',0,100000,'Status','Psychic',0,[])\n\n@Increment(Gardevoir)\ndef move_5(self): # Ethereal Shield\n    self.set_boost('spd',+2)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Gastrodon\",\n  \"types\": [\n    \"Water\",\n    \"Ground\"\n  ],\n  \"gender\": \"Female\",\n  \"ability\": {\n    \"Storm Drain\": \"This Pokemon draws Water moves to itself to raise Sp. Atk by 1; Water immunity.\"\n  },\n  \"moves\": {\n    \"Earth Power\": {\n      \"power\": 90,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"priority\": 0,\n      \"type\": \"Ground\",\n      \"effect\": \"Has a 10% chance to lower the target's Special Defense by 1 stage.\"\n    },\n    \"Surf\": {\n      \"power\": 90,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Water\",\n      \"effect\": \"\"\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass Gastrodon(PokemonBase):\n    _species='Gastrodon'\n    _types=['Water','Ground']\n    _gender='Female'\n    _ability=['Storm Drain']\n    _move_1=('Earth Power',90,100,'Special','Ground',0,[])\n    _move_2=('Surf',90,100,'Special','Water',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def _take_damage_attack(self,x):\n        self.register_act_taken()\n        if self['act_taken'] and self['act_taken']['type']=='Water':\n            self.set_boost('spa',1)\n            return\n        self.state['hp']=max(0,self['hp']-x)\n        if self['hp']==0:\n            self.state['status']='FNT'\n\n    def move_1(self): # Earth Power\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<10/100:\n                self.target.set_boost('spd',-1)\n\n    def move_2(self): # Surf\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Gastrodon\",\n  \"types\": [\n    \"Water\",\n    \"Ground\"\n  ],\n  \"gender\": \"Female\",\n  \"ability\": {\n    \"Storm Drain\": \"This Pokemon draws Water moves to itself to raise Sp. Atk by 1; Water immunity.\"\n  },\n  \"moves\": {\n    \"Earth Power\": {\n      \"power\": 90,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"priority\": 0,\n      \"type\": \"Ground\",\n      \"effect\": \"Has a 10% chance to lower the target's Special Defense by 1 stage.\"\n    },\n    \"Surf\": {\n      \"power\": 90,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Water\",\n      \"effect\": \"\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Gastrodon(PokemonBase):\n    _species='Gastrodon'\n    _types=['Water','Ground']\n    _gender='Female'\n    _ability=['Storm Drain']\n    _move_1=('Earth Power',90,100,'Special','Ground',0,[])\n    _move_2=('Surf',90,100,'Special','Water',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def _take_damage_attack(self,x):\n        self.register_act_taken()\n        if self['act_taken'] and self['act_taken']['type']=='Water':\n            self.set_boost('spa',1)\n            return\n        self.state['hp']=max(0,self['hp']-x)\n        if self['hp']==0:\n            self.state['status']='FNT'\n\n    def move_1(self): # Earth Power\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<10/100:\n                self.target.set_boost('spd',-1)\n\n    def move_2(self): # Surf\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Pain Split\": {\n    \"power\": 0,\n    \"accuracy\": 100000,\n    \"category\": \"Status\",\n    \"type\": \"Normal\",\n    \"effect\": \"Shares the combined HP of the user and target equally.\"\n  }\n}\n```",
        "response": "```python\n@Increment(Gastrodon,'_move_3')\ndef value():\n    return ('Pain Split',0,100000,'Status','Normal',0,[])\n\n@Increment(Gastrodon)\ndef move_3(self): # Pain Split\n    hp=(self['hp']+self.target['hp'])//2\n    self.target.state['hp']=hp\n    self.state['hp']=hp\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Gastrodon\",\n  \"types\": [\n    \"Water\",\n    \"Ground\"\n  ],\n  \"gender\": \"Female\",\n  \"ability\": {\n    \"Storm Drain\": \"This Pokemon draws Water moves to itself to raise Sp. Atk by 1; Water immunity.\"\n  },\n  \"moves\": {\n    \"Earth Power\": {\n      \"power\": 90,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"priority\": 0,\n      \"type\": \"Ground\",\n      \"effect\": \"Has a 10% chance to lower the target's Special Defense by 1 stage.\"\n    },\n    \"Surf\": {\n      \"power\": 90,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Water\",\n      \"effect\": \"\"\n    },\n    \"Pain Split\": {\n      \"power\": 0,\n      \"accuracy\": 100000,\n      \"category\": \"Status\",\n      \"type\": \"Normal\",\n      \"effect\": \"Shares the combined HP of the user and target equally.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Gastrodon(PokemonBase):\n    _species='Gastrodon'\n    _types=['Water','Ground']\n    _gender='Female'\n    _ability=['Storm Drain']\n    _move_1=('Earth Power',90,100,'Special','Ground',0,[])\n    _move_2=('Surf',90,100,'Special','Water',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def _take_damage_attack(self,x):\n        self.register_act_taken()\n        if self['act_taken'] and self['act_taken']['type']=='Water':\n            self.set_boost('spa',1)\n            return\n        self.state['hp']=max(0,self['hp']-x)\n        if self['hp']==0:\n            self.state['status']='FNT'\n\n    def move_1(self): # Earth Power\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<10/100:\n                self.target.set_boost('spd',-1)\n\n    def move_2(self): # Surf\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n\n@Increment(Gastrodon,'_move_3')\ndef value():\n    return ('Pain Split',0,100000,'Status','Normal',0,[])\n\n@Increment(Gastrodon)\ndef move_3(self): # Pain Split\n    hp=(self['hp']+self.target['hp'])//2\n    self.target.state['hp']=hp\n    self.state['hp']=hp\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Protect\": {\n    \"power\": 0,\n    \"accuracy\": 100000,\n    \"category\": \"Status\",\n    \"priority\": 4,\n    \"type\": \"Normal\",\n    \"effect\": \"The user is protected from attacks made by other Pokemon during this turn. Fails if the user uses this move last turn.\"\n  }\n}\n```",
        "response": "```python\n@Increment(Gastrodon,'_move_4')\ndef value():\n    return ('Protect',0,100000,'Status','Normal',4,[])\n\n@Increment(Gastrodon)\ndef move_4(self): # Protect\n    if self['last_act'] and self['last_act']['id']=='Protect':\n        return\n    self.set_condition('PROTECT',counter=0)\n\n@Increment(Gastrodon)\ndef _take_damage_attack(self,x):\n    if self['conditions'].get('PROTECT'):\n        del self['conditions']['PROTECT']\n        return\n    self.register_act_taken()\n    if self['act_taken'] and self['act_taken']['type']=='Water':\n        self.set_boost('spa',1)\n        return\n    self.state['hp']=max(0,self['hp']-x)\n    if self['hp']==0:\n        self.state['status']='FNT'\n\n@Increment(Gastrodon)\ndef endturn(self):\n    if self['conditions'].get('PROTECT'):\n        del self['conditions']['PROTECT']\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Gastrodon\",\n  \"types\": [\n    \"Water\",\n    \"Ground\"\n  ],\n  \"gender\": \"Female\",\n  \"ability\": {\n    \"Storm Drain\": \"This Pokemon draws Water moves to itself to raise Sp. Atk by 1; Water immunity.\"\n  },\n  \"moves\": {\n    \"Earth Power\": {\n      \"power\": 90,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"priority\": 0,\n      \"type\": \"Ground\",\n      \"effect\": \"Has a 10% chance to lower the target's Special Defense by 1 stage.\"\n    },\n    \"Surf\": {\n      \"power\": 90,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Water\",\n      \"effect\": \"\"\n    },\n    \"Pain Split\": {\n      \"power\": 0,\n      \"accuracy\": 100000,\n      \"category\": \"Status\",\n      \"type\": \"Normal\",\n      \"effect\": \"Shares the combined HP of the user and target equally.\"\n    },\n    \"Protect\": {\n      \"power\": 0,\n      \"accuracy\": 100000,\n      \"category\": \"Status\",\n      \"priority\": 4,\n      \"type\": \"Normal\",\n      \"effect\": \"The user is protected from attacks made by other Pokemon during this turn. Fails if the user uses this move last turn.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Gastrodon(PokemonBase):\n    _species='Gastrodon'\n    _types=['Water','Ground']\n    _gender='Female'\n    _ability=['Storm Drain']\n    _move_1=('Earth Power',90,100,'Special','Ground',0,[])\n    _move_2=('Surf',90,100,'Special','Water',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def _take_damage_attack(self,x):\n        self.register_act_taken()\n        if self['act_taken'] and self['act_taken']['type']=='Water':\n            self.set_boost('spa',1)\n            return\n        self.state['hp']=max(0,self['hp']-x)\n        if self['hp']==0:\n            self.state['status']='FNT'\n\n    def move_1(self): # Earth Power\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<10/100:\n                self.target.set_boost('spd',-1)\n\n    def move_2(self): # Surf\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n\n@Increment(Gastrodon,'_move_3')\ndef value():\n    return ('Pain Split',0,100000,'Status','Normal',0,[])\n\n@Increment(Gastrodon)\ndef move_3(self): # Pain Split\n    hp=(self['hp']+self.target['hp'])//2\n    self.target.state['hp']=hp\n    self.state['hp']=hp\n\n@Increment(Gastrodon,'_move_4')\ndef value():\n    return ('Protect',0,100000,'Status','Normal',4,[])\n\n@Increment(Gastrodon)\ndef move_4(self): # Protect\n    if self['last_act'] and self['last_act']['id']=='Protect':\n        return\n    self.set_condition('PROTECT',counter=0)\n\n@Increment(Gastrodon)\ndef _take_damage_attack(self,x):\n    if self['conditions'].get('PROTECT'):\n        del self['conditions']['PROTECT']\n        return\n    self.register_act_taken()\n    if self['act_taken'] and self['act_taken']['type']=='Water':\n        self.set_boost('spa',1)\n        return\n    self.state['hp']=max(0,self['hp']-x)\n    if self['hp']==0:\n        self.state['status']='FNT'\n\n@Increment(Gastrodon)\ndef endturn(self):\n    if self['conditions'].get('PROTECT'):\n        del self['conditions']['PROTECT']\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Ice Beam\": {\n    \"power\": 90,\n    \"accuracy\": 100,\n    \"category\": \"Special\",\n    \"type\": \"Ice\",\n    \"effect\": \"Has a 10% chance to freeze the target.\"\n  }\n}\n```",
        "response": "```python\n@Increment(Gastrodon,'_move_5')\ndef value():\n    return ('Ice Beam',90,100,'Special','Ice',0,[])\n\n@Increment(Gastrodon)\ndef move_5(self): # Ice Beam\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint() and rnd()<10/100:\n            self.target.set_status('FRZ')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Glimmerine\",\n  \"types\": [\n    \"Fairy\",\n    \"Water\"\n  ],\n  \"gender\": \"Female\",\n  \"ability\": {\n    \"Dream Weaver\": \"If the opponent is asleep, this Pokemon's special attack x1.5.\"\n  },\n  \"moves\": {\n    \"Lunar Ray\": {\n      \"power\": 70,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Fairy\",\n      \"effect\": \"No additional effect.\"\n    },\n    \"Aqua Veil\": {\n      \"power\": 80,\n      \"accuracy\": 95,\n      \"category\": \"Special\",\n      \"type\": \"Water\",\n      \"effect\": \"Heals the user by 1/4 of the damage dealt.\"\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass Glimmerine(PokemonBase):\n    _species='Glimmerine'\n    _types=['Fairy','Water']\n    _gender='Female'\n    _ability=['Dream Weaver']\n    _move_1=('Lunar Ray',70,100,'Special','Fairy',0,[])\n    _move_2=('Aqua Veil',80,95,'Special','Water',0,[])\n    def __init__(self):\n        super().__init__()\n    \n    def get_stat(self,key,boost=None):\n        stat=self['stats'][key]\n        boost=self['boosts'][key] if not boost else boost\n        stat_ratio={0:1,1:1.5,2:2,3:2.5,4:3,5:3.5,6:4}[min(6,abs(boost))]\n        if boost<0:\n            stat_ratio=1/stat_ratio\n        stat_ratio*=self.get_weather_stat_mult(key)\n        if key=='spe' and self.isstatus('PAR'):\n            stat_ratio*=0.5\n        if key=='spa' and self.target.isstatus('SLP'):\n            stat_ratio*=1.5\n        return int(stat*stat_ratio)\n    \n    def move_1(self):  # Lunar Ray\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n    \n    def move_2(self):  # Aqua Veil\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            self.restore(int(1/4*damage),'drain')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Glimmerine\",\n  \"types\": [\n    \"Fairy\",\n    \"Water\"\n  ],\n  \"gender\": \"Female\",\n  \"ability\": {\n    \"Dream Weaver\": \"If the opponent is asleep, this Pokemon's special attack x1.5.\"\n  },\n  \"moves\": {\n    \"Lunar Ray\": {\n      \"power\": 70,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Fairy\",\n      \"effect\": \"No additional effect.\"\n    },\n    \"Aqua Veil\": {\n      \"power\": 80,\n      \"accuracy\": 95,\n      \"category\": \"Special\",\n      \"type\": \"Water\",\n      \"effect\": \"Heals the user by 1/4 of the damage dealt.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Glimmerine(PokemonBase):\n    _species='Glimmerine'\n    _types=['Fairy','Water']\n    _gender='Female'\n    _ability=['Dream Weaver']\n    _move_1=('Lunar Ray',70,100,'Special','Fairy',0,[])\n    _move_2=('Aqua Veil',80,95,'Special','Water',0,[])\n    def __init__(self):\n        super().__init__()\n    \n    def get_stat(self,key,boost=None):\n        stat=self['stats'][key]\n        boost=self['boosts'][key] if not boost else boost\n        stat_ratio={0:1,1:1.5,2:2,3:2.5,4:3,5:3.5,6:4}[min(6,abs(boost))]\n        if boost<0:\n            stat_ratio=1/stat_ratio\n        stat_ratio*=self.get_weather_stat_mult(key)\n        if key=='spe' and self.isstatus('PAR'):\n            stat_ratio*=0.5\n        if key=='spa' and self.target.isstatus('SLP'):\n            stat_ratio*=1.5\n        return int(stat*stat_ratio)\n    \n    def move_1(self):  # Lunar Ray\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n    \n    def move_2(self):  # Aqua Veil\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            self.restore(int(1/4*damage),'drain')\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Hypnotic Pulse\": {\n    \"power\": 0,\n    \"accuracy\": 75,\n    \"category\": \"Status\",\n    \"type\": \"Psychic\",\n    \"effect\": \"Puts the target to sleep.\"\n  }\n}\n```",
        "response": "```python\n@Increment(Glimmerine,'_move_3')\ndef value():\n    return ('Hypnotic Pulse',0,75,'Status','Psychic',0,[])\n\n@Increment(Glimmerine)\ndef move_3(self):  # Hypnotic Pulse\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        self.target.set_status('SLP')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Glimmerine\",\n  \"types\": [\n    \"Fairy\",\n    \"Water\"\n  ],\n  \"gender\": \"Female\",\n  \"ability\": {\n    \"Dream Weaver\": \"If the opponent is asleep, this Pokemon's special attack x1.5.\"\n  },\n  \"moves\": {\n    \"Lunar Ray\": {\n      \"power\": 70,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Fairy\",\n      \"effect\": \"No additional effect.\"\n    },\n    \"Aqua Veil\": {\n      \"power\": 80,\n      \"accuracy\": 95,\n      \"category\": \"Special\",\n      \"type\": \"Water\",\n      \"effect\": \"Heals the user by 1/4 of the damage dealt.\"\n    },\n    \"Hypnotic Pulse\": {\n      \"power\": 0,\n      \"accuracy\": 75,\n      \"category\": \"Status\",\n      \"type\": \"Psychic\",\n      \"effect\": \"Puts the target to sleep.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Glimmerine(PokemonBase):\n    _species='Glimmerine'\n    _types=['Fairy','Water']\n    _gender='Female'\n    _ability=['Dream Weaver']\n    _move_1=('Lunar Ray',70,100,'Special','Fairy',0,[])\n    _move_2=('Aqua Veil',80,95,'Special','Water',0,[])\n    def __init__(self):\n        super().__init__()\n    \n    def get_stat(self,key,boost=None):\n        stat=self['stats'][key]\n        boost=self['boosts'][key] if not boost else boost\n        stat_ratio={0:1,1:1.5,2:2,3:2.5,4:3,5:3.5,6:4}[min(6,abs(boost))]\n        if boost<0:\n            stat_ratio=1/stat_ratio\n        stat_ratio*=self.get_weather_stat_mult(key)\n        if key=='spe' and self.isstatus('PAR'):\n            stat_ratio*=0.5\n        if key=='spa' and self.target.isstatus('SLP'):\n            stat_ratio*=1.5\n        return int(stat*stat_ratio)\n    \n    def move_1(self):  # Lunar Ray\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n    \n    def move_2(self):  # Aqua Veil\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            self.restore(int(1/4*damage),'drain')\n\n@Increment(Glimmerine,'_move_3')\ndef value():\n    return ('Hypnotic Pulse',0,75,'Status','Psychic',0,[])\n\n@Increment(Glimmerine)\ndef move_3(self):  # Hypnotic Pulse\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        self.target.set_status('SLP')\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Fairy Shield\": {\n    \"power\": 0,\n    \"accuracy\": 100000,\n    \"category\": \"Status\",\n    \"type\": \"Fairy\",\n    \"effect\": \"Raises the user's Defense and Special Defense by 1 stage.\"\n  }\n}\n```",
        "response": "```python\n@Increment(Glimmerine,'_move_4')\ndef value():\n    return ('Fairy Shield',0,100000,'Status','Fairy',0,[])\n\n@Increment(Glimmerine)\ndef move_4(self):  # Fairy Shield\n    self.set_boost('def',+1,'self')\n    self.set_boost('spd',+1,'self')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Glimmerine\",\n  \"types\": [\n    \"Fairy\",\n    \"Water\"\n  ],\n  \"gender\": \"Female\",\n  \"ability\": {\n    \"Dream Weaver\": \"If the opponent is asleep, this Pokemon's special attack x1.5.\"\n  },\n  \"moves\": {\n    \"Lunar Ray\": {\n      \"power\": 70,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Fairy\",\n      \"effect\": \"No additional effect.\"\n    },\n    \"Aqua Veil\": {\n      \"power\": 80,\n      \"accuracy\": 95,\n      \"category\": \"Special\",\n      \"type\": \"Water\",\n      \"effect\": \"Heals the user by 1/4 of the damage dealt.\"\n    },\n    \"Hypnotic Pulse\": {\n      \"power\": 0,\n      \"accuracy\": 75,\n      \"category\": \"Status\",\n      \"type\": \"Psychic\",\n      \"effect\": \"Puts the target to sleep.\"\n    },\n    \"Fairy Shield\": {\n      \"power\": 0,\n      \"accuracy\": 100000,\n      \"category\": \"Status\",\n      \"type\": \"Fairy\",\n      \"effect\": \"Raises the user's Defense and Special Defense by 1 stage.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Glimmerine(PokemonBase):\n    _species='Glimmerine'\n    _types=['Fairy','Water']\n    _gender='Female'\n    _ability=['Dream Weaver']\n    _move_1=('Lunar Ray',70,100,'Special','Fairy',0,[])\n    _move_2=('Aqua Veil',80,95,'Special','Water',0,[])\n    def __init__(self):\n        super().__init__()\n    \n    def get_stat(self,key,boost=None):\n        stat=self['stats'][key]\n        boost=self['boosts'][key] if not boost else boost\n        stat_ratio={0:1,1:1.5,2:2,3:2.5,4:3,5:3.5,6:4}[min(6,abs(boost))]\n        if boost<0:\n            stat_ratio=1/stat_ratio\n        stat_ratio*=self.get_weather_stat_mult(key)\n        if key=='spe' and self.isstatus('PAR'):\n            stat_ratio*=0.5\n        if key=='spa' and self.target.isstatus('SLP'):\n            stat_ratio*=1.5\n        return int(stat*stat_ratio)\n    \n    def move_1(self):  # Lunar Ray\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n    \n    def move_2(self):  # Aqua Veil\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            self.restore(int(1/4*damage),'drain')\n\n@Increment(Glimmerine,'_move_3')\ndef value():\n    return ('Hypnotic Pulse',0,75,'Status','Psychic',0,[])\n\n@Increment(Glimmerine)\ndef move_3(self):  # Hypnotic Pulse\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        self.target.set_status('SLP')\n\n@Increment(Glimmerine,'_move_4')\ndef value():\n    return ('Fairy Shield',0,100000,'Status','Fairy',0,[])\n\n@Increment(Glimmerine)\ndef move_4(self):  # Fairy Shield\n    self.set_boost('def',+1,'self')\n    self.set_boost('spd',+1,'self')\n```\n\nThis role is gonna learn a new ability:\n```json\n{\n  \"Aqua Spirit\": \"This Pokemon's Water-type moves have a 10% chance to confuse the target.\"\n}\n```",
        "response": "```python\n@Increment(Glimmerine,'_ability')\ndef value():\n    return ['Dream Weaver','Aqua Spirit']\n\n@Increment(Glimmerine)\ndef move_2(self):  # Aqua Veil\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint() and rnd()<10/100:\n            self.target.set_condition('CONFUSION',counter=0)\n        self.restore(int(1/4*damage),'drain')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Glimmerine\",\n  \"types\": [\n    \"Fairy\",\n    \"Water\"\n  ],\n  \"gender\": \"Female\",\n  \"ability\": {\n    \"Dream Weaver\": \"If the opponent is asleep, this Pokemon's special attack x1.5.\",\n    \"Aqua Spirit\": \"This Pokemon's Water-type moves have a 10% chance to confuse the target.\"\n  },\n  \"moves\": {\n    \"Lunar Ray\": {\n      \"power\": 70,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Fairy\",\n      \"effect\": \"No additional effect.\"\n    },\n    \"Aqua Veil\": {\n      \"power\": 80,\n      \"accuracy\": 95,\n      \"category\": \"Special\",\n      \"type\": \"Water\",\n      \"effect\": \"Heals the user by 1/4 of the damage dealt.\"\n    },\n    \"Hypnotic Pulse\": {\n      \"power\": 0,\n      \"accuracy\": 75,\n      \"category\": \"Status\",\n      \"type\": \"Psychic\",\n      \"effect\": \"Puts the target to sleep.\"\n    },\n    \"Fairy Shield\": {\n      \"power\": 0,\n      \"accuracy\": 100000,\n      \"category\": \"Status\",\n      \"type\": \"Fairy\",\n      \"effect\": \"Raises the user's Defense and Special Defense by 1 stage.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Glimmerine(PokemonBase):\n    _species='Glimmerine'\n    _types=['Fairy','Water']\n    _gender='Female'\n    _ability=['Dream Weaver']\n    _move_1=('Lunar Ray',70,100,'Special','Fairy',0,[])\n    _move_2=('Aqua Veil',80,95,'Special','Water',0,[])\n    def __init__(self):\n        super().__init__()\n    \n    def get_stat(self,key,boost=None):\n        stat=self['stats'][key]\n        boost=self['boosts'][key] if not boost else boost\n        stat_ratio={0:1,1:1.5,2:2,3:2.5,4:3,5:3.5,6:4}[min(6,abs(boost))]\n        if boost<0:\n            stat_ratio=1/stat_ratio\n        stat_ratio*=self.get_weather_stat_mult(key)\n        if key=='spe' and self.isstatus('PAR'):\n            stat_ratio*=0.5\n        if key=='spa' and self.target.isstatus('SLP'):\n            stat_ratio*=1.5\n        return int(stat*stat_ratio)\n    \n    def move_1(self):  # Lunar Ray\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n    \n    def move_2(self):  # Aqua Veil\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            self.restore(int(1/4*damage),'drain')\n\n@Increment(Glimmerine,'_move_3')\ndef value():\n    return ('Hypnotic Pulse',0,75,'Status','Psychic',0,[])\n\n@Increment(Glimmerine)\ndef move_3(self):  # Hypnotic Pulse\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        self.target.set_status('SLP')\n\n@Increment(Glimmerine,'_move_4')\ndef value():\n    return ('Fairy Shield',0,100000,'Status','Fairy',0,[])\n\n@Increment(Glimmerine)\ndef move_4(self):  # Fairy Shield\n    self.set_boost('def',+1,'self')\n    self.set_boost('spd',+1,'self')\n\n@Increment(Glimmerine,'_ability')\ndef value():\n    return ['Dream Weaver','Aqua Spirit']\n\n@Increment(Glimmerine)\ndef move_2(self):  # Aqua Veil\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint() and rnd()<10/100:\n            self.target.set_condition('CONFUSION',counter=0)\n        self.restore(int(1/4*damage),'drain')\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Mystic Wave\": {\n    \"power\": 90,\n    \"accuracy\": 100,\n    \"category\": \"Special\",\n    \"type\": \"Water\",\n    \"effect\": \"Has a 10% chance to confuse the target.\"\n  }\n}\n```",
        "response": "```python\n@Increment(Glimmerine,'_move_5')\ndef value():\n    return ('Mystic Wave',90,100,'Special','Water',0,[])\n\n@Increment(Glimmerine)\ndef move_5(self):  # Mystic Wave\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint() and rnd()<10/100:\n            self.target.set_condition('CONFUSION',counter=0)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Gouging Fire\",\n  \"types\": [\n    \"Fire\",\n    \"Dragon\"\n  ],\n  \"gender\": \"Genderless\",\n  \"ability\": {\n    \"Protosynthesis\": \"On switch-in, boosts the Pokemon's highest stat by 30%. If the highest stat is speed, boosts by 50%.\"\n  },\n  \"moves\": {\n    \"Scale Shot\": {\n      \"power\": 25,\n      \"accuracy\": 90,\n      \"category\": \"Physical\",\n      \"type\": \"Dragon\",\n      \"effect\": \"Hits two to five times. Lowers the user's Defense by 1 stage and raises the user's Speed by 1 stage after the last hit. Has a 35% chance to hit two or three times and a 15% chance to hit four or five times.\"\n    },\n    \"Flare Blitz\": {\n      \"power\": 120,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"priority\": 0,\n      \"type\": \"Fire\",\n      \"effect\": \"Has a 10% chance to burn the target. If the target lost HP, the user takes recoil damage equal to 33% the HP lost by the target.\",\n      \"property\": [\n        \"contact\"\n      ]\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass Gouging_Fire(PokemonBase):\n    _species='Gouging Fire'\n    _types=['Fire','Dragon']\n    _gender='Genderless'\n    _ability=['Protosynthesis']\n    _move_1=('Scale Shot',25,90,'Physical','Dragon',0,[])\n    _move_2=('Flare Blitz',120,100,'Physical','Fire',0,['contact'])\n    def __init__(self):\n        super().__init__()\n\n    def onswitch(self):\n        t=max([(k,v) for k,v in self['stats'].items()],key=lambda x:x[1])[0]\n        self.set_stat(t,1.5 if t=='spe' else 1.3)\n\n    def move_1(self): # Scale Shot\n        hit=True; i=0\n        r=rnd()\n        if r<0.35:\n            n_hits=2\n        elif r<0.7:\n            n_hits=3\n        elif r<0.85:\n            n_hits=4\n        else:\n            n_hits=5\n        while hit and i<n_hits:\n            damage_ret=self.get_damage()\n            if damage_ret['miss']: break\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            i+=1; hit=False if self.target.isfaint() else True\n        self.set_boost('def',-1,'self')\n        self.set_boost('spe',+1,'self')\n\n    def move_2(self): # Flare Blitz\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            self.take_damage(int(0.33*damage),'recoil')\n            if not self.target.isfaint() and rnd()<10/100: self.target.set_status('BRN')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Gouging Fire\",\n  \"types\": [\n    \"Fire\",\n    \"Dragon\"\n  ],\n  \"gender\": \"Genderless\",\n  \"ability\": {\n    \"Protosynthesis\": \"On switch-in, boosts the Pokemon's highest stat by 30%. If the highest stat is speed, boosts by 50%.\"\n  },\n  \"moves\": {\n    \"Scale Shot\": {\n      \"power\": 25,\n      \"accuracy\": 90,\n      \"category\": \"Physical\",\n      \"type\": \"Dragon\",\n      \"effect\": \"Hits two to five times. Lowers the user's Defense by 1 stage and raises the user's Speed by 1 stage after the last hit. Has a 35% chance to hit two or three times and a 15% chance to hit four or five times.\"\n    },\n    \"Flare Blitz\": {\n      \"power\": 120,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"priority\": 0,\n      \"type\": \"Fire\",\n      \"effect\": \"Has a 10% chance to burn the target. If the target lost HP, the user takes recoil damage equal to 33% the HP lost by the target.\",\n      \"property\": [\n        \"contact\"\n      ]\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Gouging_Fire(PokemonBase):\n    _species='Gouging Fire'\n    _types=['Fire','Dragon']\n    _gender='Genderless'\n    _ability=['Protosynthesis']\n    _move_1=('Scale Shot',25,90,'Physical','Dragon',0,[])\n    _move_2=('Flare Blitz',120,100,'Physical','Fire',0,['contact'])\n    def __init__(self):\n        super().__init__()\n\n    def onswitch(self):\n        t=max([(k,v) for k,v in self['stats'].items()],key=lambda x:x[1])[0]\n        self.set_stat(t,1.5 if t=='spe' else 1.3)\n\n    def move_1(self): # Scale Shot\n        hit=True; i=0\n        r=rnd()\n        if r<0.35:\n            n_hits=2\n        elif r<0.7:\n            n_hits=3\n        elif r<0.85:\n            n_hits=4\n        else:\n            n_hits=5\n        while hit and i<n_hits:\n            damage_ret=self.get_damage()\n            if damage_ret['miss']: break\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            i+=1; hit=False if self.target.isfaint() else True\n        self.set_boost('def',-1,'self')\n        self.set_boost('spe',+1,'self')\n\n    def move_2(self): # Flare Blitz\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            self.take_damage(int(0.33*damage),'recoil')\n            if not self.target.isfaint() and rnd()<10/100: self.target.set_status('BRN')\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Morning Sun\": {\n    \"power\": 0,\n    \"accuracy\": 100000,\n    \"category\": \"Status\",\n    \"priority\": 0,\n    \"type\": \"Normal\",\n    \"effect\": \"The user restores 1/2 of its maximum HP if no weather conditions are in effect, 2/3 of its maximum HP if the weather is Sunny Day, and 1/4 of its maximum HP if the weather is Rain Dance, Sandstorm, Snow, or Hail.\"\n  }\n}\n```",
        "response": "```python\n@Increment(Gouging_Fire,'_move_3')\ndef value():\n    return ('Morning Sun',0,100000,'Status','Normal',0,[])\n\n@Increment(Gouging_Fire)\ndef move_3(self): # Morning Sun\n    if not any([x in self.env for x in ['SUNNYDAY','RAINDANCE','SANDSTORM','SNOW','HAIL']]):\n        self.restore(self['max_hp']//2,'heal')\n    elif self.env.get('SUNNYDAY'):\n        self.restore(self['max_hp']//3*2,'heal')\n    else:\n        self.restore(self['max_hp']//4,'heal')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Gouging Fire\",\n  \"types\": [\n    \"Fire\",\n    \"Dragon\"\n  ],\n  \"gender\": \"Genderless\",\n  \"ability\": {\n    \"Protosynthesis\": \"On switch-in, boosts the Pokemon's highest stat by 30%. If the highest stat is speed, boosts by 50%.\"\n  },\n  \"moves\": {\n    \"Scale Shot\": {\n      \"power\": 25,\n      \"accuracy\": 90,\n      \"category\": \"Physical\",\n      \"type\": \"Dragon\",\n      \"effect\": \"Hits two to five times. Lowers the user's Defense by 1 stage and raises the user's Speed by 1 stage after the last hit. Has a 35% chance to hit two or three times and a 15% chance to hit four or five times.\"\n    },\n    \"Flare Blitz\": {\n      \"power\": 120,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"priority\": 0,\n      \"type\": \"Fire\",\n      \"effect\": \"Has a 10% chance to burn the target. If the target lost HP, the user takes recoil damage equal to 33% the HP lost by the target.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Morning Sun\": {\n      \"power\": 0,\n      \"accuracy\": 100000,\n      \"category\": \"Status\",\n      \"priority\": 0,\n      \"type\": \"Normal\",\n      \"effect\": \"The user restores 1/2 of its maximum HP if no weather conditions are in effect, 2/3 of its maximum HP if the weather is Sunny Day, and 1/4 of its maximum HP if the weather is Rain Dance, Sandstorm, Snow, or Hail.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Gouging_Fire(PokemonBase):\n    _species='Gouging Fire'\n    _types=['Fire','Dragon']\n    _gender='Genderless'\n    _ability=['Protosynthesis']\n    _move_1=('Scale Shot',25,90,'Physical','Dragon',0,[])\n    _move_2=('Flare Blitz',120,100,'Physical','Fire',0,['contact'])\n    def __init__(self):\n        super().__init__()\n\n    def onswitch(self):\n        t=max([(k,v) for k,v in self['stats'].items()],key=lambda x:x[1])[0]\n        self.set_stat(t,1.5 if t=='spe' else 1.3)\n\n    def move_1(self): # Scale Shot\n        hit=True; i=0\n        r=rnd()\n        if r<0.35:\n            n_hits=2\n        elif r<0.7:\n            n_hits=3\n        elif r<0.85:\n            n_hits=4\n        else:\n            n_hits=5\n        while hit and i<n_hits:\n            damage_ret=self.get_damage()\n            if damage_ret['miss']: break\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            i+=1; hit=False if self.target.isfaint() else True\n        self.set_boost('def',-1,'self')\n        self.set_boost('spe',+1,'self')\n\n    def move_2(self): # Flare Blitz\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            self.take_damage(int(0.33*damage),'recoil')\n            if not self.target.isfaint() and rnd()<10/100: self.target.set_status('BRN')\n\n@Increment(Gouging_Fire,'_move_3')\ndef value():\n    return ('Morning Sun',0,100000,'Status','Normal',0,[])\n\n@Increment(Gouging_Fire)\ndef move_3(self): # Morning Sun\n    if not any([x in self.env for x in ['SUNNYDAY','RAINDANCE','SANDSTORM','SNOW','HAIL']]):\n        self.restore(self['max_hp']//2,'heal')\n    elif self.env.get('SUNNYDAY'):\n        self.restore(self['max_hp']//3*2,'heal')\n    else:\n        self.restore(self['max_hp']//4,'heal')\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Solar Claw\": {\n    \"power\": 80,\n    \"accuracy\": 100,\n    \"category\": \"Physical\",\n    \"type\": \"Grass\",\n    \"effect\": \"Boosts user's Attack by 1 stage if used in sunny day.\",\n    \"property\": [\n      \"contact\"\n    ]\n  }\n}\n```",
        "response": "```python\n@Increment(Gouging_Fire,'_move_4')\ndef value():\n    return ('Solar Claw',80,100,'Physical','Grass',0,['contact'])\n\n@Increment(Gouging_Fire)\ndef move_4(self): # Solar Claw\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if self.env.get('SUNNYDAY'):\n            self.set_boost('atk',+1,'self')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Gouging Fire\",\n  \"types\": [\n    \"Fire\",\n    \"Dragon\"\n  ],\n  \"gender\": \"Genderless\",\n  \"ability\": {\n    \"Protosynthesis\": \"On switch-in, boosts the Pokemon's highest stat by 30%. If the highest stat is speed, boosts by 50%.\"\n  },\n  \"moves\": {\n    \"Scale Shot\": {\n      \"power\": 25,\n      \"accuracy\": 90,\n      \"category\": \"Physical\",\n      \"type\": \"Dragon\",\n      \"effect\": \"Hits two to five times. Lowers the user's Defense by 1 stage and raises the user's Speed by 1 stage after the last hit. Has a 35% chance to hit two or three times and a 15% chance to hit four or five times.\"\n    },\n    \"Flare Blitz\": {\n      \"power\": 120,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"priority\": 0,\n      \"type\": \"Fire\",\n      \"effect\": \"Has a 10% chance to burn the target. If the target lost HP, the user takes recoil damage equal to 33% the HP lost by the target.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Morning Sun\": {\n      \"power\": 0,\n      \"accuracy\": 100000,\n      \"category\": \"Status\",\n      \"priority\": 0,\n      \"type\": \"Normal\",\n      \"effect\": \"The user restores 1/2 of its maximum HP if no weather conditions are in effect, 2/3 of its maximum HP if the weather is Sunny Day, and 1/4 of its maximum HP if the weather is Rain Dance, Sandstorm, Snow, or Hail.\"\n    },\n    \"Solar Claw\": {\n      \"power\": 80,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Grass\",\n      \"effect\": \"Boosts user's Attack by 1 stage if used in sunny day.\",\n      \"property\": [\n        \"contact\"\n      ]\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Gouging_Fire(PokemonBase):\n    _species='Gouging Fire'\n    _types=['Fire','Dragon']\n    _gender='Genderless'\n    _ability=['Protosynthesis']\n    _move_1=('Scale Shot',25,90,'Physical','Dragon',0,[])\n    _move_2=('Flare Blitz',120,100,'Physical','Fire',0,['contact'])\n    def __init__(self):\n        super().__init__()\n\n    def onswitch(self):\n        t=max([(k,v) for k,v in self['stats'].items()],key=lambda x:x[1])[0]\n        self.set_stat(t,1.5 if t=='spe' else 1.3)\n\n    def move_1(self): # Scale Shot\n        hit=True; i=0\n        r=rnd()\n        if r<0.35:\n            n_hits=2\n        elif r<0.7:\n            n_hits=3\n        elif r<0.85:\n            n_hits=4\n        else:\n            n_hits=5\n        while hit and i<n_hits:\n            damage_ret=self.get_damage()\n            if damage_ret['miss']: break\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            i+=1; hit=False if self.target.isfaint() else True\n        self.set_boost('def',-1,'self')\n        self.set_boost('spe',+1,'self')\n\n    def move_2(self): # Flare Blitz\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            self.take_damage(int(0.33*damage),'recoil')\n            if not self.target.isfaint() and rnd()<10/100: self.target.set_status('BRN')\n\n@Increment(Gouging_Fire,'_move_3')\ndef value():\n    return ('Morning Sun',0,100000,'Status','Normal',0,[])\n\n@Increment(Gouging_Fire)\ndef move_3(self): # Morning Sun\n    if not any([x in self.env for x in ['SUNNYDAY','RAINDANCE','SANDSTORM','SNOW','HAIL']]):\n        self.restore(self['max_hp']//2,'heal')\n    elif self.env.get('SUNNYDAY'):\n        self.restore(self['max_hp']//3*2,'heal')\n    else:\n        self.restore(self['max_hp']//4,'heal')\n\n@Increment(Gouging_Fire,'_move_4')\ndef value():\n    return ('Solar Claw',80,100,'Physical','Grass',0,['contact'])\n\n@Increment(Gouging_Fire)\ndef move_4(self): # Solar Claw\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if self.env.get('SUNNYDAY'):\n            self.set_boost('atk',+1,'self')\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Iron Defense\": {\n    \"power\": 0,\n    \"accuracy\": 100000,\n    \"category\": \"Status\",\n    \"type\": \"Steel\",\n    \"effect\": \"Raises the user's Defense by 2 stages.\",\n    \"property\": []\n  }\n}\n```",
        "response": "```python\n@Increment(Gouging_Fire,'_move_5')\ndef value():\n    return ('Iron Defense',0,100000,'Status','Steel',0,[])\n\n@Increment(Gouging_Fire)\ndef move_5(self): # Iron Defense\n    self.set_boost('def',+2,'self')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Goumang\",\n  \"types\": [\n    \"Grass\",\n    \"Flying\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Verdant Growth\": \"At the end of each turn, this Pokemon heals 1/16 of its max HP if the weather is Sunny Day.\"\n  },\n  \"moves\": {\n    \"Fusang Flame\": {\n      \"power\": 90,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Fire\",\n      \"effect\": \"Has a 20% chance to burn the target.\"\n    },\n    \"Willow Whip\": {\n      \"power\": 80,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Grass\",\n      \"effect\": \"Has a 30% chance to lower the target's Speed by 1 stage.\"\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass Goumang(PokemonBase):\n    _species='Goumang'\n    _types=['Grass','Flying']\n    _gender='Male'\n    _ability=['Verdant Growth']\n    _move_1=('Fusang Flame',90,100,'Special','Fire',0,[])\n    _move_2=('Willow Whip',80,100,'Physical','Grass',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def endturn(self):\n        if self.env.get('SUNNYDAY'):\n            self.restore(self['max_hp']//16,'heal')\n\n    def move_1(self): # Fusang Flame\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<20/100:\n                self.target.set_status('BRN')\n\n    def move_2(self): # Willow Whip\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100:\n                self.target.set_boost('spe',-1)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Goumang\",\n  \"types\": [\n    \"Grass\",\n    \"Flying\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Verdant Growth\": \"At the end of each turn, this Pokemon heals 1/16 of its max HP if the weather is Sunny Day.\"\n  },\n  \"moves\": {\n    \"Fusang Flame\": {\n      \"power\": 90,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Fire\",\n      \"effect\": \"Has a 20% chance to burn the target.\"\n    },\n    \"Willow Whip\": {\n      \"power\": 80,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Grass\",\n      \"effect\": \"Has a 30% chance to lower the target's Speed by 1 stage.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Goumang(PokemonBase):\n    _species='Goumang'\n    _types=['Grass','Flying']\n    _gender='Male'\n    _ability=['Verdant Growth']\n    _move_1=('Fusang Flame',90,100,'Special','Fire',0,[])\n    _move_2=('Willow Whip',80,100,'Physical','Grass',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def endturn(self):\n        if self.env.get('SUNNYDAY'):\n            self.restore(self['max_hp']//16,'heal')\n\n    def move_1(self): # Fusang Flame\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<20/100:\n                self.target.set_status('BRN')\n\n    def move_2(self): # Willow Whip\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100:\n                self.target.set_boost('spe',-1)\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Dragon Ride\": {\n    \"power\": 100,\n    \"accuracy\": 95,\n    \"category\": \"Physical\",\n    \"priority\": 2,\n    \"type\": \"Flying\",\n    \"effect\": \"This move always goes first.\"\n  }\n}\n```",
        "response": "```python\n@Increment(Goumang,'_move_3')\ndef value():\n    return ('Dragon Ride',100,95,'Physical','Flying',2,[])\n\n@Increment(Goumang)\ndef move_3(self): # Dragon Ride\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Goumang\",\n  \"types\": [\n    \"Grass\",\n    \"Flying\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Verdant Growth\": \"At the end of each turn, this Pokemon heals 1/16 of its max HP if the weather is Sunny Day.\"\n  },\n  \"moves\": {\n    \"Fusang Flame\": {\n      \"power\": 90,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Fire\",\n      \"effect\": \"Has a 20% chance to burn the target.\"\n    },\n    \"Willow Whip\": {\n      \"power\": 80,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Grass\",\n      \"effect\": \"Has a 30% chance to lower the target's Speed by 1 stage.\"\n    },\n    \"Dragon Ride\": {\n      \"power\": 100,\n      \"accuracy\": 95,\n      \"category\": \"Physical\",\n      \"priority\": 2,\n      \"type\": \"Flying\",\n      \"effect\": \"This move always goes first.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Goumang(PokemonBase):\n    _species='Goumang'\n    _types=['Grass','Flying']\n    _gender='Male'\n    _ability=['Verdant Growth']\n    _move_1=('Fusang Flame',90,100,'Special','Fire',0,[])\n    _move_2=('Willow Whip',80,100,'Physical','Grass',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def endturn(self):\n        if self.env.get('SUNNYDAY'):\n            self.restore(self['max_hp']//16,'heal')\n\n    def move_1(self): # Fusang Flame\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<20/100:\n                self.target.set_status('BRN')\n\n    def move_2(self): # Willow Whip\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100:\n                self.target.set_boost('spe',-1)\n\n@Increment(Goumang,'_move_3')\ndef value():\n    return ('Dragon Ride',100,95,'Physical','Flying',2,[])\n\n@Increment(Goumang)\ndef move_3(self): # Dragon Ride\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Spring Renewal\": {\n    \"power\": 0,\n    \"accuracy\": 100000,\n    \"category\": \"Status\",\n    \"type\": \"Grass\",\n    \"effect\": \"Heals the user by 50% of its max HP and cures all status conditions.\"\n  }\n}\n```",
        "response": "```python\n@Increment(Goumang,'_move_4')\ndef value():\n    return ('Spring Renewal',0,100000,'Status','Grass',0,[])\n\n@Increment(Goumang)\ndef move_4(self): # Spring Renewal\n    self.restore(self['max_hp']//2,'heal')\n    self.state['status']=None\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Goumang\",\n  \"types\": [\n    \"Grass\",\n    \"Flying\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Verdant Growth\": \"At the end of each turn, this Pokemon heals 1/16 of its max HP if the weather is Sunny Day.\"\n  },\n  \"moves\": {\n    \"Fusang Flame\": {\n      \"power\": 90,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Fire\",\n      \"effect\": \"Has a 20% chance to burn the target.\"\n    },\n    \"Willow Whip\": {\n      \"power\": 80,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Grass\",\n      \"effect\": \"Has a 30% chance to lower the target's Speed by 1 stage.\"\n    },\n    \"Dragon Ride\": {\n      \"power\": 100,\n      \"accuracy\": 95,\n      \"category\": \"Physical\",\n      \"priority\": 2,\n      \"type\": \"Flying\",\n      \"effect\": \"This move always goes first.\"\n    },\n    \"Spring Renewal\": {\n      \"power\": 0,\n      \"accuracy\": 100000,\n      \"category\": \"Status\",\n      \"type\": \"Grass\",\n      \"effect\": \"Heals the user by 50% of its max HP and cures all status conditions.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Goumang(PokemonBase):\n    _species='Goumang'\n    _types=['Grass','Flying']\n    _gender='Male'\n    _ability=['Verdant Growth']\n    _move_1=('Fusang Flame',90,100,'Special','Fire',0,[])\n    _move_2=('Willow Whip',80,100,'Physical','Grass',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def endturn(self):\n        if self.env.get('SUNNYDAY'):\n            self.restore(self['max_hp']//16,'heal')\n\n    def move_1(self): # Fusang Flame\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<20/100:\n                self.target.set_status('BRN')\n\n    def move_2(self): # Willow Whip\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100:\n                self.target.set_boost('spe',-1)\n\n@Increment(Goumang,'_move_3')\ndef value():\n    return ('Dragon Ride',100,95,'Physical','Flying',2,[])\n\n@Increment(Goumang)\ndef move_3(self): # Dragon Ride\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n\n@Increment(Goumang,'_move_4')\ndef value():\n    return ('Spring Renewal',0,100000,'Status','Grass',0,[])\n\n@Increment(Goumang)\ndef move_4(self): # Spring Renewal\n    self.restore(self['max_hp']//2,'heal')\n    self.state['status']=None\n```\n\nThis role is gonna learn a new ability:\n```json\n{\n  \"Spring Guardian\": \"Boosts the power of Grass-type moves by 30% during Sunny Day.\"\n}\n```",
        "response": "```python\n@Increment(Goumang,'_ability')\ndef value():\n    return ['Verdant Growth','Spring Guardian']\n\n@Increment(Goumang)\ndef get_power(self):\n    power=self['act']['power']\n    if self.env.get('SUNNYDAY') and self['act']['type']=='Grass':\n        power*=1.3\n    return int(power*self.get_weather_power_mult())\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Grapha\",\n  \"types\": [\n    \"Dark\",\n    \"Dragon\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Dark Revival\": \"When this Pokemon's HP is knocked out, for one chance, it can revive itself with 50% maximum HP.\"\n  },\n  \"moves\": {\n    \"Shadow Blast\": {\n      \"power\": 90,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Dark\",\n      \"effect\": \"Has a 20% chance to lower the target's Special Defense by 1 stage.\"\n    },\n    \"Dragon Rage\": {\n      \"power\": 80,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Dragon\",\n      \"effect\": \"Has a 30% chance to burn the target.\"\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass Grapha(PokemonBase):\n    _species='Grapha'\n    _types=['Dark','Dragon']\n    _gender='Male'\n    _ability=['Dark Revival']\n    _move_1=('Shadow Blast',90,100,'Special','Dark',0,[])\n    _move_2=('Dragon Rage',80,100,'Special','Dragon',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def onswitch(self):\n        self.set_condition('REVIVE',counter=1)\n\n    def take_damage(self,x,from_='attack'):\n        if from_=='attack':\n            self._take_damage_attack(x)\n        elif from_=='loss':\n            self._take_damage_loss(x)\n        elif from_=='recoil':\n            self._take_damage_recoil(x)\n        if self['status']=='FNT':\n            if self['conditions'].get('REVIVE'):\n                self.state['status']=None\n                self.state['hp']=self['max_hp']//2\n                del self['conditions']['REVIVE']\n\n    def move_1(self): # Shadow Blast\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<20/100:\n                self.target.set_boost('spd',-1)\n\n    def move_2(self): # Dragon Rage\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100:\n                self.target.set_status('BRN')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Grapha\",\n  \"types\": [\n    \"Dark\",\n    \"Dragon\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Dark Revival\": \"When this Pokemon's HP is knocked out, for one chance, it can revive itself with 50% maximum HP.\"\n  },\n  \"moves\": {\n    \"Shadow Blast\": {\n      \"power\": 90,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Dark\",\n      \"effect\": \"Has a 20% chance to lower the target's Special Defense by 1 stage.\"\n    },\n    \"Dragon Rage\": {\n      \"power\": 80,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Dragon\",\n      \"effect\": \"Has a 30% chance to burn the target.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Grapha(PokemonBase):\n    _species='Grapha'\n    _types=['Dark','Dragon']\n    _gender='Male'\n    _ability=['Dark Revival']\n    _move_1=('Shadow Blast',90,100,'Special','Dark',0,[])\n    _move_2=('Dragon Rage',80,100,'Special','Dragon',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def onswitch(self):\n        self.set_condition('REVIVE',counter=1)\n\n    def take_damage(self,x,from_='attack'):\n        if from_=='attack':\n            self._take_damage_attack(x)\n        elif from_=='loss':\n            self._take_damage_loss(x)\n        elif from_=='recoil':\n            self._take_damage_recoil(x)\n        if self['status']=='FNT':\n            if self['conditions'].get('REVIVE'):\n                self.state['status']=None\n                self.state['hp']=self['max_hp']//2\n                del self['conditions']['REVIVE']\n\n    def move_1(self): # Shadow Blast\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<20/100:\n                self.target.set_boost('spd',-1)\n\n    def move_2(self): # Dragon Rage\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100:\n                self.target.set_status('BRN')\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Nightmare Claw\": {\n    \"power\": 70,\n    \"accuracy\": 100,\n    \"category\": \"Physical\",\n    \"type\": \"Dark\",\n    \"effect\": \"Has a 20% chance to make the target flinch.\"\n  }\n}\n```",
        "response": "```python\n@Increment(Grapha,'_move_3')\ndef value():\n    return ('Nightmare Claw',70,100,'Physical','Dark',0,[])\n\n@Increment(Grapha)\ndef move_3(self): # Nightmare Claw\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint() and rnd()<20/100:\n            self.target.set_condition('FLINCH',counter=0)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Grapha\",\n  \"types\": [\n    \"Dark\",\n    \"Dragon\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Dark Revival\": \"When this Pokemon's HP is knocked out, for one chance, it can revive itself with 50% maximum HP.\"\n  },\n  \"moves\": {\n    \"Shadow Blast\": {\n      \"power\": 90,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Dark\",\n      \"effect\": \"Has a 20% chance to lower the target's Special Defense by 1 stage.\"\n    },\n    \"Dragon Rage\": {\n      \"power\": 80,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Dragon\",\n      \"effect\": \"Has a 30% chance to burn the target.\"\n    },\n    \"Nightmare Claw\": {\n      \"power\": 70,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Dark\",\n      \"effect\": \"Has a 20% chance to make the target flinch.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Grapha(PokemonBase):\n    _species='Grapha'\n    _types=['Dark','Dragon']\n    _gender='Male'\n    _ability=['Dark Revival']\n    _move_1=('Shadow Blast',90,100,'Special','Dark',0,[])\n    _move_2=('Dragon Rage',80,100,'Special','Dragon',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def onswitch(self):\n        self.set_condition('REVIVE',counter=1)\n\n    def take_damage(self,x,from_='attack'):\n        if from_=='attack':\n            self._take_damage_attack(x)\n        elif from_=='loss':\n            self._take_damage_loss(x)\n        elif from_=='recoil':\n            self._take_damage_recoil(x)\n        if self['status']=='FNT':\n            if self['conditions'].get('REVIVE'):\n                self.state['status']=None\n                self.state['hp']=self['max_hp']//2\n                del self['conditions']['REVIVE']\n\n    def move_1(self): # Shadow Blast\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<20/100:\n                self.target.set_boost('spd',-1)\n\n    def move_2(self): # Dragon Rage\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100:\n                self.target.set_status('BRN')\n\n@Increment(Grapha,'_move_3')\ndef value():\n    return ('Nightmare Claw',70,100,'Physical','Dark',0,[])\n\n@Increment(Grapha)\ndef move_3(self): # Nightmare Claw\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint() and rnd()<20/100:\n            self.target.set_condition('FLINCH',counter=0)\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Abyssal Roar\": {\n    \"power\": 0,\n    \"accuracy\": 100000,\n    \"category\": \"Status\",\n    \"type\": \"Dragon\",\n    \"effect\": \"Lowers the target's Attack and Special Attack by 1 stage.\"\n  }\n}\n```",
        "response": "```python\n@Increment(Grapha,'_move_4')\ndef value():\n    return ('Abyssal Roar',0,100000,'Status','Dragon',0,[])\n\n@Increment(Grapha)\ndef move_4(self): # Abyssal Roar\n    self.target.set_boost('atk',-1)\n    self.target.set_boost('spa',-1)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Grapha\",\n  \"types\": [\n    \"Dark\",\n    \"Dragon\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Dark Revival\": \"When this Pokemon's HP is knocked out, for one chance, it can revive itself with 50% maximum HP.\"\n  },\n  \"moves\": {\n    \"Shadow Blast\": {\n      \"power\": 90,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Dark\",\n      \"effect\": \"Has a 20% chance to lower the target's Special Defense by 1 stage.\"\n    },\n    \"Dragon Rage\": {\n      \"power\": 80,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Dragon\",\n      \"effect\": \"Has a 30% chance to burn the target.\"\n    },\n    \"Nightmare Claw\": {\n      \"power\": 70,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Dark\",\n      \"effect\": \"Has a 20% chance to make the target flinch.\"\n    },\n    \"Abyssal Roar\": {\n      \"power\": 0,\n      \"accuracy\": 100000,\n      \"category\": \"Status\",\n      \"type\": \"Dragon\",\n      \"effect\": \"Lowers the target's Attack and Special Attack by 1 stage.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Grapha(PokemonBase):\n    _species='Grapha'\n    _types=['Dark','Dragon']\n    _gender='Male'\n    _ability=['Dark Revival']\n    _move_1=('Shadow Blast',90,100,'Special','Dark',0,[])\n    _move_2=('Dragon Rage',80,100,'Special','Dragon',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def onswitch(self):\n        self.set_condition('REVIVE',counter=1)\n\n    def take_damage(self,x,from_='attack'):\n        if from_=='attack':\n            self._take_damage_attack(x)\n        elif from_=='loss':\n            self._take_damage_loss(x)\n        elif from_=='recoil':\n            self._take_damage_recoil(x)\n        if self['status']=='FNT':\n            if self['conditions'].get('REVIVE'):\n                self.state['status']=None\n                self.state['hp']=self['max_hp']//2\n                del self['conditions']['REVIVE']\n\n    def move_1(self): # Shadow Blast\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<20/100:\n                self.target.set_boost('spd',-1)\n\n    def move_2(self): # Dragon Rage\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100:\n                self.target.set_status('BRN')\n\n@Increment(Grapha,'_move_3')\ndef value():\n    return ('Nightmare Claw',70,100,'Physical','Dark',0,[])\n\n@Increment(Grapha)\ndef move_3(self): # Nightmare Claw\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint() and rnd()<20/100:\n            self.target.set_condition('FLINCH',counter=0)\n\n@Increment(Grapha,'_move_4')\ndef value():\n    return ('Abyssal Roar',0,100000,'Status','Dragon',0,[])\n\n@Increment(Grapha)\ndef move_4(self): # Abyssal Roar\n    self.target.set_boost('atk',-1)\n    self.target.set_boost('spa',-1)\n```\n\nThis role is gonna learn a new ability:\n```json\n{\n  \"Shadow Swap\": \"If this Pokemon uses a Dark-type move, it can restore 10% maximum HP.\"\n}\n```",
        "response": "```python\n@Increment(Grapha,'_ability')\ndef value():\n    return ['Dark Revival','Shadow Swap']\n\n@Increment(Grapha)\ndef move_1(self): # Shadow Blast\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint() and rnd()<20/100:\n            self.target.set_boost('spd',-1)\n    self.restore(self['max_hp']//10,'heal')\n\n@Increment(Grapha)\ndef move_3(self): # Nightmare Claw\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint() and rnd()<20/100:\n            self.target.set_condition('FLINCH',counter=0)\n    self.restore(self['max_hp']//10,'heal')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Greninja\",\n  \"types\": [\n    \"Water\",\n    \"Dark\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Proten\": \"This Pokemon's type changes to the type of the move it is using.\"\n  },\n  \"moves\": {\n    \"Hydro Pump\": {\n      \"power\": 110,\n      \"accuracy\": 80,\n      \"category\": \"Special\",\n      \"type\": \"Water\",\n      \"effect\": \"No additional effect.\"\n    },\n    \"Dark Pulse\": {\n      \"power\": 80,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Dark\",\n      \"effect\": \"Has a 20% chance to make the target flinch.\"\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass Greninja(PokemonBase):\n    _species='Greninja'\n    _types=['Water','Dark']\n    _gender='Male'\n    _ability=['Proten']\n    _move_1=('Hydro Pump',110,80,'Special','Water',0,[])\n    _move_2=('Dark Pulse',80,100,'Special','Dark',0,[])\n    def __init__(self):\n        super().__init__()\n    \n    def move_1(self): # Hydro Pump\n        self.state['types']=[self['act']['type']]\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n\n    def move_2(self): # Dark Pulse\n        self.state['types']=[self['act']['type']]\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<20/100:\n                self.target.set_condition('FLINCH',counter=0)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Greninja\",\n  \"types\": [\n    \"Water\",\n    \"Dark\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Proten\": \"This Pokemon's type changes to the type of the move it is using.\"\n  },\n  \"moves\": {\n    \"Water Shuriken\": {\n      \"power\": 20,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Water\",\n      \"effect\": \"Hits 2-5 times. Each hit has a 50% chance to be the last.\"\n    },\n    \"Night Slash\": {\n      \"power\": 70,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Dark\",\n      \"effect\": \"The ratio for critical hit +1.\",\n      \"property\": [\n        \"contact\"\n      ]\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass Greninja(PokemonBase):\n    _species='Greninja'\n    _types=['Water','Dark']\n    _gender='Male'\n    _ability=['Proten']\n    _move_1=('Water Shuriken',20,100,'Special','Water',0,[])\n    _move_2=('Night Slash',70,100,'Physical','Dark',0,['contact'])\n    def __init__(self):\n        super().__init__()\n\n    def get_crit(self):\n        crit_mult=[0,24,8,2,1]\n        crit_ratio=self['boosts']['crit']\n        if self['act']['id']=='Night Slash':\n            crit_ratio=min(3,crit_ratio+1)\n        crit=False\n        if rnd()*crit_mult[crit_ratio+1]<1:\n            crit=True\n        return crit\n    \n    def move_1(self): # Water Shuriken\n        hit=True; i=0\n        while hit and i<5:\n            self.state['types']=[self['act']['type']]\n            damage_ret=self.get_damage()\n            if damage_ret['miss']: break\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            i+=1; hit=False if self.target.isfaint() else True\n            if i<5 and rnd()<50/100: break\n\n    def move_2(self): # Night Slash\n        self.state['types']=[self['act']['type']]\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Grimmsnarl\",\n  \"types\": [\n    \"Dark\",\n    \"Fairy\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Prankster\": \"As long as the move is Status, its priority +1.\"\n  },\n  \"moves\": {\n    \"Spirit Break\": {\n      \"power\": 75,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Fairy\",\n      \"effect\": \"Lowers the target's Special Attack by 1 stage.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Bulk Up\": {\n      \"power\": 0,\n      \"accuracy\": 100000,\n      \"category\": \"Status\",\n      \"type\": \"Fighting\",\n      \"effect\": \"Raises the user's Attack and Defense by 1 stage.\"\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass Grimmsnarl(PokemonBase):\n    _species='Grimmsnarl'\n    _types=['Dark','Fairy']\n    _gender='Male'\n    _ability=['Prankster']\n    _move_1=('Spirit Break',75,100,'Physical','Fairy',0,['contact'])\n    _move_2=('Bulk Up',0,100000,'Status','Fighting',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def get_priority(self,move_id):\n        if self._moves[move_id]['category']=='Status':\n            return 1\n        return self._moves[move_id]['priority']\n\n    def move_1(self): # Spirit Break\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint():\n                self.target.set_boost('spa',-1)\n\n    def move_2(self): # Bulk Up\n        self.set_boost('atk',+1,'self')\n        self.set_boost('def',+1,'self')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Grovyle\",\n  \"types\": [\n    \"Grass\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Seed Sower\": \"When this Pokemon is hit by an attack, the effect of Grassy Terrain begins.\"\n  },\n  \"moves\": {\n    \"Leech Seed\": {\n      \"power\": 0,\n      \"accuracy\": 90,\n      \"category\": \"Status\",\n      \"type\": \"Grass\",\n      \"effect\": \"Plants a seed on the target that drains 1/8 of its HP each end of turn.\"\n    },\n    \"Seed Flare\": {\n      \"power\": 120,\n      \"accuracy\": 85,\n      \"category\": \"Special\",\n      \"type\": \"Grass\",\n      \"effect\": \"Lowers the target's Special Defense by 2 stages.\"\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass Grovyle(PokemonBase):\n    _species='Grovyle'\n    _types=['Grass']\n    _gender='Male'\n    _ability=['Seed Sower']\n    _move_1=('Leech Seed',0,90,'Status','Grass',0,[])\n    _move_2=('Seed Flare',120,85,'Special','Grass',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def _take_damage_attack(self,x):\n        self.register_act_taken()\n        self.state['hp']=max(0,self['hp']-x)\n        if self['hp']==0:\n            self.state['status']='FNT'\n            return\n        self.set_env('GRASSY_TERRAIN')\n    \n    def endturn(self):\n        if self.target['conditions'].get('LEECH_SEED'):\n            self.target.take_damage(self.target['max_hp']//8,'loss')\n            self.restore(self.target['max_hp']//8,'drain')\n\n    def move_1(self): # Leech Seed\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            self.target.set_condition('LEECH_SEED',counter=0)\n\n    def move_2(self): # Seed Flare \n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint():\n                self.target.set_boost('spd',-2)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Gudiao\",\n  \"types\": [\n    \"Water\",\n    \"Flying\"\n  ],\n  \"gender\": \"Genderless\",\n  \"ability\": {\n    \"Abyssal Cry\": \"This Pokemon's Special Attack is raised by 1 stage when it successfully hits the target.\"\n  },\n  \"moves\": {\n    \"Horn Surge\": {\n      \"power\": 90,\n      \"accuracy\": 95,\n      \"category\": \"Physical\",\n      \"type\": \"Water\",\n      \"effect\": \"Has a 30% chance to lower the target's Defense by 1 stage.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Eerie Wail\": {\n      \"power\": 70,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Ghost\",\n      \"effect\": \"Has a 20% chance to confuse the target.\",\n      \"property\": []\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass Gudiao(PokemonBase):\n    _species='Gudiao'\n    _types=['Water','Flying']\n    _gender='Genderless'\n    _ability=['Abyssal Cry']\n    _move_1=('Horn Surge',90,95,'Physical','Water',0,['contact'])\n    _move_2=('Eerie Wail',70,100,'Special','Ghost',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def move_1(self): # Horn Surge\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100:\n                self.target.set_boost('def',-1)\n            self.set_boost('spa',1,'self')\n\n    def move_2(self): # Eerie Wail\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<20/100:\n                self.target.set_condition('CONFUSION',counter=0)\n            self.set_boost('spa',1,'self')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Gudiao\",\n  \"types\": [\n    \"Water\",\n    \"Flying\"\n  ],\n  \"gender\": \"Genderless\",\n  \"ability\": {\n    \"Abyssal Cry\": \"This Pokemon's Special Attack is raised by 1 stage when it successfully hits the target.\"\n  },\n  \"moves\": {\n    \"Horn Surge\": {\n      \"power\": 90,\n      \"accuracy\": 95,\n      \"category\": \"Physical\",\n      \"type\": \"Water\",\n      \"effect\": \"Has a 30% chance to lower the target's Defense by 1 stage.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Eerie Wail\": {\n      \"power\": 70,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Ghost\",\n      \"effect\": \"Has a 20% chance to confuse the target.\",\n      \"property\": []\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Gudiao(PokemonBase):\n    _species='Gudiao'\n    _types=['Water','Flying']\n    _gender='Genderless'\n    _ability=['Abyssal Cry']\n    _move_1=('Horn Surge',90,95,'Physical','Water',0,['contact'])\n    _move_2=('Eerie Wail',70,100,'Special','Ghost',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def move_1(self): # Horn Surge\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100:\n                self.target.set_boost('def',-1)\n            self.set_boost('spa',1,'self')\n\n    def move_2(self): # Eerie Wail\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<20/100:\n                self.target.set_condition('CONFUSION',counter=0)\n            self.set_boost('spa',1,'self')\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Wing Slice\": {\n    \"power\": 80,\n    \"accuracy\": 100,\n    \"category\": \"Physical\",\n    \"type\": \"Flying\",\n    \"effect\": \"Ignores the target's def stat change during attack.\",\n    \"property\": [\n      \"contact\"\n    ]\n  }\n}\n```",
        "response": "```python\n@Increment(Gudiao,'_move_3')\ndef value():\n    return ('Wing Slice',80,100,'Physical','Flying',0,['contact'])\n\n@Increment(Gudiao)\ndef move_3(self): # Wing Slice\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        self.set_boost('spa',1,'self')\n\n@Increment(Gudiao)\ndef _get_base_damage(self,power,crit):\n    atk_boost=self['boosts']['atk'] if self['act']['category']=='Physical' else self['boosts']['spa']\n    if self['act']['id']=='Wing Slice':\n        def_boost=0\n    else:\n        def_boost=self.target['boosts']['def'] if self['act']['category']=='Physical' else self.target['boosts']['spd']\n\n    if crit:\n        atk_boost=max(0,atk_boost)\n        def_boost=min(0,def_boost)\n\n    attack=self.get_stat('atk' if self['act']['category']=='Physical' else 'spa',atk_boost)\n    defense=self.target.get_stat('def' if self['act']['category']=='Physical' else 'spd',def_boost)\n\n    level=100\n    base_damage=int(int(int(int(2*level/5+2)*power*attack)/defense)/50)+2\n\n    return base_damage\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Gudiao\",\n  \"types\": [\n    \"Water\",\n    \"Flying\"\n  ],\n  \"gender\": \"Genderless\",\n  \"ability\": {\n    \"Abyssal Cry\": \"This Pokemon's Special Attack is raised by 1 stage when it successfully hits the target.\"\n  },\n  \"moves\": {\n    \"Horn Surge\": {\n      \"power\": 90,\n      \"accuracy\": 95,\n      \"category\": \"Physical\",\n      \"type\": \"Water\",\n      \"effect\": \"Has a 30% chance to lower the target's Defense by 1 stage.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Eerie Wail\": {\n      \"power\": 70,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Ghost\",\n      \"effect\": \"Has a 20% chance to confuse the target.\",\n      \"property\": []\n    },\n    \"Wing Slice\": {\n      \"power\": 80,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Flying\",\n      \"effect\": \"Ignores the target's def stat change during attack.\",\n      \"property\": [\n        \"contact\"\n      ]\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Gudiao(PokemonBase):\n    _species='Gudiao'\n    _types=['Water','Flying']\n    _gender='Genderless'\n    _ability=['Abyssal Cry']\n    _move_1=('Horn Surge',90,95,'Physical','Water',0,['contact'])\n    _move_2=('Eerie Wail',70,100,'Special','Ghost',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def move_1(self): # Horn Surge\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100:\n                self.target.set_boost('def',-1)\n            self.set_boost('spa',1,'self')\n\n    def move_2(self): # Eerie Wail\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<20/100:\n                self.target.set_condition('CONFUSION',counter=0)\n            self.set_boost('spa',1,'self')\n\n@Increment(Gudiao,'_move_3')\ndef value():\n    return ('Wing Slice',80,100,'Physical','Flying',0,['contact'])\n\n@Increment(Gudiao)\ndef move_3(self): # Wing Slice\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        self.set_boost('spa',1,'self')\n\n@Increment(Gudiao)\ndef _get_base_damage(self,power,crit):\n    atk_boost=self['boosts']['atk'] if self['act']['category']=='Physical' else self['boosts']['spa']\n    if self['act']['id']=='Wing Slice':\n        def_boost=0\n    else:\n        def_boost=self.target['boosts']['def'] if self['act']['category']=='Physical' else self.target['boosts']['spd']\n\n    if crit:\n        atk_boost=max(0,atk_boost)\n        def_boost=min(0,def_boost)\n\n    attack=self.get_stat('atk' if self['act']['category']=='Physical' else 'spa',atk_boost)\n    defense=self.target.get_stat('def' if self['act']['category']=='Physical' else 'spd',def_boost)\n\n    level=100\n    base_damage=int(int(int(int(2*level/5+2)*power*attack)/defense)/50)+2\n\n    return base_damage\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Aqua Camouflage\": {\n    \"power\": 0,\n    \"accuracy\": 100000,\n    \"category\": \"Status\",\n    \"type\": \"Water\",\n    \"effect\": \"Raises the user's Def by 1 stages and changes the type to Water.\",\n    \"property\": []\n  }\n}\n```",
        "response": "```python\n@Increment(Gudiao,'_move_4')\ndef value():\n    return ('Aqua Camouflage',0,100000,'Status','Water',0,[])\n\n@Increment(Gudiao)\ndef move_4(self): # Aqua Camouflage\n    self.set_boost('def',1,'self')\n    self.state['types']=['Water']\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Gudiao\",\n  \"types\": [\n    \"Water\",\n    \"Flying\"\n  ],\n  \"gender\": \"Genderless\",\n  \"ability\": {\n    \"Abyssal Cry\": \"This Pokemon's Special Attack is raised by 1 stage when it successfully hits the target.\"\n  },\n  \"moves\": {\n    \"Horn Surge\": {\n      \"power\": 90,\n      \"accuracy\": 95,\n      \"category\": \"Physical\",\n      \"type\": \"Water\",\n      \"effect\": \"Has a 30% chance to lower the target's Defense by 1 stage.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Eerie Wail\": {\n      \"power\": 70,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Ghost\",\n      \"effect\": \"Has a 20% chance to confuse the target.\",\n      \"property\": []\n    },\n    \"Wing Slice\": {\n      \"power\": 80,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Flying\",\n      \"effect\": \"Ignores the target's def stat change during attack.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Aqua Camouflage\": {\n      \"power\": 0,\n      \"accuracy\": 100000,\n      \"category\": \"Status\",\n      \"type\": \"Water\",\n      \"effect\": \"Raises the user's Def by 1 stages and changes the type to Water.\",\n      \"property\": []\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Gudiao(PokemonBase):\n    _species='Gudiao'\n    _types=['Water','Flying']\n    _gender='Genderless'\n    _ability=['Abyssal Cry']\n    _move_1=('Horn Surge',90,95,'Physical','Water',0,['contact'])\n    _move_2=('Eerie Wail',70,100,'Special','Ghost',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def move_1(self): # Horn Surge\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100:\n                self.target.set_boost('def',-1)\n            self.set_boost('spa',1,'self')\n\n    def move_2(self): # Eerie Wail\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<20/100:\n                self.target.set_condition('CONFUSION',counter=0)\n            self.set_boost('spa',1,'self')\n\n@Increment(Gudiao,'_move_3')\ndef value():\n    return ('Wing Slice',80,100,'Physical','Flying',0,['contact'])\n\n@Increment(Gudiao)\ndef move_3(self): # Wing Slice\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        self.set_boost('spa',1,'self')\n\n@Increment(Gudiao)\ndef _get_base_damage(self,power,crit):\n    atk_boost=self['boosts']['atk'] if self['act']['category']=='Physical' else self['boosts']['spa']\n    if self['act']['id']=='Wing Slice':\n        def_boost=0\n    else:\n        def_boost=self.target['boosts']['def'] if self['act']['category']=='Physical' else self.target['boosts']['spd']\n\n    if crit:\n        atk_boost=max(0,atk_boost)\n        def_boost=min(0,def_boost)\n\n    attack=self.get_stat('atk' if self['act']['category']=='Physical' else 'spa',atk_boost)\n    defense=self.target.get_stat('def' if self['act']['category']=='Physical' else 'spd',def_boost)\n\n    level=100\n    base_damage=int(int(int(int(2*level/5+2)*power*attack)/defense)/50)+2\n\n    return base_damage\n\n@Increment(Gudiao,'_move_4')\ndef value():\n    return ('Aqua Camouflage',0,100000,'Status','Water',0,[])\n\n@Increment(Gudiao)\ndef move_4(self): # Aqua Camouflage\n    self.set_boost('def',1,'self')\n    self.state['types']=['Water']\n```\n\nThis role is gonna learn a new ability:\n```json\n{\n  \"Aqua Veil\": \"This Pokemon heals 1/8 of its maximum HP at the end of each turn when it is raining.\"\n}\n```",
        "response": "```python\n@Increment(Gudiao,'_ability')\ndef value():\n    return ['Abyssal Cry','Aqua Veil']\n\n@Increment(Gudiao)\ndef endturn(self):\n    if self.env.get('RAINDANCE'):\n        self.restore(self['max_hp']//8,'heal')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Hippowdon\",\n  \"types\": [\n    \"Ground\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Toxic Boost\": \"If this Pokemon is poisoned, its Attack is multiplied by 1.5.\"\n  },\n  \"moves\": {\n    \"Earthquake\": {\n      \"power\": 100,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Ground\",\n      \"effect\": \"\"\n    },\n    \"Iron Head\": {\n      \"power\": 80,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Steel\",\n      \"effect\": \"Has a 30% chance to make the target flinch.\",\n      \"property\": [\n        \"contact\"\n      ]\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass Hippowdon(PokemonBase):\n    _species='Hippowdon'\n    _types=['Ground']\n    _gender='Male'\n    _ability=['Toxic Boost']\n    _move_1=('Earthquake',100,100,'Physical','Ground',0,[])\n    _move_2=('Iron Head',80,100,'Physical','Steel',0,['contact'])\n    def __init__(self):\n        super().__init__()\n    \n    def get_stat(self,key,boost=None):\n        stat=self['stats'][key]\n        boost=self['boosts'][key] if not boost else boost\n        stat_ratio={0:1,1:1.5,2:2,3:2.5,4:3,5:3.5,6:4}[min(6,abs(boost))]\n        if boost<0:\n            stat_ratio=1/stat_ratio\n        stat_ratio*=self.get_weather_stat_mult(key)\n        if key=='spe' and self.isstatus('PAR'):\n            stat_ratio*=0.5\n        if key=='atk' and self['status']=='PSN':\n            stat_ratio*=1.5\n        return int(stat*stat_ratio)\n\n    def move_1(self): # Earthquake\n        damage_ret=self.get_damage() \n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n\n    def move_2(self): # Iron Head\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100:\n                self.target.set_condition('FLINCH',counter=0)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Hippowdon\",\n  \"types\": [\n    \"Ground\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Sand Armor\": \"When this Pokemon is hit by an attack, it has a 25% chance to gain a boost to its Attack stat.\"\n  },\n  \"moves\": {\n    \"Earthquake\": {\n      \"power\": 100,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Ground\",\n      \"effect\": \"\"\n    },\n    \"Iron Head\": {\n      \"power\": 80,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Steel\",\n      \"effect\": \"Has a 30% chance to make the target flinch.\",\n      \"property\": [\n        \"contact\"\n      ]\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass Hippowdon(PokemonBase):\n    _species='Hippowdon'\n    _types=['Ground']\n    _gender='Male'\n    _ability=['Sand Armor']\n    _move_1=('Earthquake',100,100,'Physical','Ground',0,[])\n    _move_2=('Iron Head',80,100,'Physical','Steel',0,['contact'])\n    def __init__(self):\n        super().__init__()\n\n    def _take_damage_attack(self,x):\n        self.register_act_taken()\n        self.state['hp']=max(0,self['hp']-x)\n        if self['hp']==0:\n            self.state['status']='FNT'\n            return\n        if rnd()<25/100:\n            self.set_boost('atk',1,'self')\n\n    def move_1(self): # Earthquake\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n    \n    def move_2(self): # Iron Head\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100:\n                self.target.set_condition('FLINCH',counter=0)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Hippowdon\",\n  \"types\": [\n    \"Ground\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Sand Armor\": \"When this Pokemon is hit by an attack, it has a 25% chance to gain a boost to its Attack stat.\"\n  },\n  \"moves\": {\n    \"Earthquake\": {\n      \"power\": 100,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Ground\",\n      \"effect\": \"\"\n    },\n    \"Iron Head\": {\n      \"power\": 80,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Steel\",\n      \"effect\": \"Has a 30% chance to make the target flinch.\",\n      \"property\": [\n        \"contact\"\n      ]\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Hippowdon(PokemonBase):\n    _species='Hippowdon'\n    _types=['Ground']\n    _gender='Male'\n    _ability=['Sand Armor']\n    _move_1=('Earthquake',100,100,'Physical','Ground',0,[])\n    _move_2=('Iron Head',80,100,'Physical','Steel',0,['contact'])\n    def __init__(self):\n        super().__init__()\n\n    def _take_damage_attack(self,x):\n        self.register_act_taken()\n        self.state['hp']=max(0,self['hp']-x)\n        if self['hp']==0:\n            self.state['status']='FNT'\n            return\n        if rnd()<25/100:\n            self.set_boost('atk',1,'self')\n\n    def move_1(self): # Earthquake\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n    \n    def move_2(self): # Iron Head\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100:\n                self.target.set_condition('FLINCH',counter=0)\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Sandstorm\": {\n    \"power\": 0,\n    \"accuracy\": 100000,\n    \"category\": \"Status\",\n    \"type\": \"Rock\",\n    \"effect\": \"Creates a sandstorm for 5 turns.\"\n  }\n}\n```",
        "response": "```python\n@Increment(Hippowdon,'_move_3')\ndef value():\n    return ('Sandstorm',0,100000,'Status','Rock',0,[])\n\n@Increment(Hippowdon)\ndef move_3(self): # Sandstorm\n    self.set_env('SANDSTORM')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Hippowdon\",\n  \"types\": [\n    \"Ground\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Sand Armor\": \"When this Pokemon is hit by an attack, it has a 25% chance to gain a boost to its Attack stat.\"\n  },\n  \"moves\": {\n    \"Earthquake\": {\n      \"power\": 100,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Ground\",\n      \"effect\": \"\"\n    },\n    \"Iron Head\": {\n      \"power\": 80,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Steel\",\n      \"effect\": \"Has a 30% chance to make the target flinch.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Sandstorm\": {\n      \"power\": 0,\n      \"accuracy\": 100000,\n      \"category\": \"Status\",\n      \"type\": \"Rock\",\n      \"effect\": \"Creates a sandstorm for 5 turns.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Hippowdon(PokemonBase):\n    _species='Hippowdon'\n    _types=['Ground']\n    _gender='Male'\n    _ability=['Sand Armor']\n    _move_1=('Earthquake',100,100,'Physical','Ground',0,[])\n    _move_2=('Iron Head',80,100,'Physical','Steel',0,['contact'])\n    def __init__(self):\n        super().__init__()\n\n    def _take_damage_attack(self,x):\n        self.register_act_taken()\n        self.state['hp']=max(0,self['hp']-x)\n        if self['hp']==0:\n            self.state['status']='FNT'\n            return\n        if rnd()<25/100:\n            self.set_boost('atk',1,'self')\n\n    def move_1(self): # Earthquake\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n    \n    def move_2(self): # Iron Head\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100:\n                self.target.set_condition('FLINCH',counter=0)\n\n@Increment(Hippowdon,'_move_3')\ndef value():\n    return ('Sandstorm',0,100000,'Status','Rock',0,[])\n\n@Increment(Hippowdon)\ndef move_3(self): # Sandstorm\n    self.set_env('SANDSTORM')\n```\n\nThis role is gonna learn a new ability:\n```json\n{\n  \"Earthquake Shield\": \"Reduces damage taken from Earthquake moves by 50% and heals 1/4 of max HP if hit by one.\"\n}\n```",
        "response": "```python\n@Increment(Hippowdon,'_ability')\ndef value():\n    return ['Sand Armor','Earthquake Shield']\n\n@Increment(Hippowdon)\ndef _take_damage_attack(self,x):\n    self.register_act_taken()\n    if self['act_taken']['id']=='Earthquake':\n        x=int(x*0.5)\n        self.state['hp']=min(self['max_hp'],self['hp']+self['max_hp']//4)\n    self.state['hp']=max(0,self['hp']-x)\n    if self['hp']==0:\n        self.state['status']='FNT'\n        return\n    if rnd()<25/100:\n        self.set_boost('atk',1,'self')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Hippowdon\",\n  \"types\": [\n    \"Ground\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Sand Spit\": \"When hit by a attack, this Pokemon summons a sandstorm.\"\n  },\n  \"moves\": {\n    \"Earth Power\": {\n      \"power\": 90,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Ground\",\n      \"effect\": \"Has a 10% chance to lower the target's Special Defense by 1 stage.\"\n    },\n    \"Sludge Wave\": {\n      \"power\": 95,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Poison\",\n      \"effect\": \"Has a 10% chance to poison the target.\"\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass Hippowdon(PokemonBase):\n    _species='Hippowdon'\n    _types=['Ground']\n    _gender='Male'\n    _ability=['Sand Spit']\n    _move_1=('Earth Power',90,100,'Special','Ground',0,[])\n    _move_2=('Sludge Wave',95,100,'Special','Poison',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def onswitch(self):\n        self.set_env('SANDSTORM')\n\n    def _take_damage_attack(self,x):\n        self.register_act_taken()\n        self.state['hp']=max(0,self['hp']-x)\n        if self['hp']==0:\n            self.state['status']='FNT'\n            return\n        self.set_env('SANDSTORM')\n\n    def move_1(self): # Earth Power \n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<10/100:\n                self.target.set_boost('spd',-1)\n\n    def move_2(self): # Sludge Wave\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<10/100: \n                self.target.set_status('PSN')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Hoopa\",\n  \"types\": [\n    \"Psychic\",\n    \"Dark\"\n  ],\n  \"gender\": \"Neutral\",\n  \"ability\": {\n    \"Contrary\": \"This ability inverts all stat changes of the Pokemon with this ability.\"\n  },\n  \"moves\": {\n    \"Hyperspace Fury\": {\n      \"power\": 100,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Dark\",\n      \"effect\": \"Lowers the user's Defense stat by one stage.\"\n    },\n    \"Psychic Combat\": {\n      \"power\": 120,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Psychic\",\n      \"effect\": \"Lowers the user's Def and Spd by 1 stage.\",\n      \"property\": [\n        \"contact\"\n      ]\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass Hoopa(PokemonBase):\n    _species='Hoopa'\n    _types=['Psychic','Dark']\n    _gender='Neutral'\n    _ability=['Contrary']\n    _move_1=('Hyperspace Fury',100,100,'Special','Dark',0,[])\n    _move_2=('Psychic Combat',120,100,'Physical','Psychic',0,['contact'])\n    def __init__(self):\n        super().__init__()\n\n    def set_boost(self,key,x,from_='target'):\n        x=-x\n        bar=6 if key in ['atk','def','spa','spd','spe'] else 3\n        if x>0:\n            self['boosts'][key]=min(bar,self['boosts'][key]+x)\n        else:\n            self['boosts'][key]=max(-bar,self['boosts'][key]+x)\n\n    def move_1(self): # Hyperspace Fury\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=int(0.5*self.target['hp'])\n            self.target.take_damage(damage)\n    \n    def move_2(self): # Psychic Combat\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            self.set_boost('def',-1)\n            self.set_boost('spd',-1)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Hornorus\",\n  \"types\": [\n    \"Steel\",\n    \"Ground\"\n  ],\n  \"gender\": \"Neutral\",\n  \"ability\": {\n    \"Iron Hide\": \"Reduces damage taken from Physical moves by 25%.\"\n  },\n  \"moves\": {\n    \"Horn Smash\": {\n      \"power\": 90,\n      \"accuracy\": 85,\n      \"category\": \"Physical\",\n      \"type\": \"Steel\",\n      \"effect\": \"Has a 30% chance to lower the target's Defense by 1 stage.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Steel Guard\": {\n      \"power\": 0,\n      \"accuracy\": 100000,\n      \"category\": \"Status\",\n      \"type\": \"Steel\",\n      \"effect\": \"Increases the user's Defense and Special Defense by 1 stage each.\"\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass Hornorus(PokemonBase):\n    _species='Hornorus'\n    _types=['Steel','Ground']\n    _gender='Neutral'\n    _ability=['Iron Hide']\n    _move_1=('Horn Smash',90,85,'Physical','Steel',0,['contact'])\n    _move_2=('Steel Guard',0,100000,'Status','Steel',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def _take_damage_attack(self,x):\n        self.register_act_taken()\n        if self['act_taken']['category']=='Physical':\n            x=int(x*0.75)\n        self.state['hp']=max(0,self['hp']-x)\n        if self['hp']==0:\n            self.state['status']='FNT'\n\n    def move_1(self): # Horn Smash\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100:\n                self.target.set_boost('def',-1)\n\n    def move_2(self): # Steel Guard\n        self.set_boost('def',+1,'self')\n        self.set_boost('spd',+1,'self')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Hornorus\",\n  \"types\": [\n    \"Steel\",\n    \"Ground\"\n  ],\n  \"gender\": \"Neutral\",\n  \"ability\": {\n    \"Iron Hide\": \"Reduces damage taken from Physical moves by 25%.\"\n  },\n  \"moves\": {\n    \"Horn Smash\": {\n      \"power\": 90,\n      \"accuracy\": 85,\n      \"category\": \"Physical\",\n      \"type\": \"Steel\",\n      \"effect\": \"Has a 30% chance to lower the target's Defense by 1 stage.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Steel Guard\": {\n      \"power\": 0,\n      \"accuracy\": 100000,\n      \"category\": \"Status\",\n      \"type\": \"Steel\",\n      \"effect\": \"Increases the user's Defense and Special Defense by 1 stage each.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Hornorus(PokemonBase):\n    _species='Hornorus'\n    _types=['Steel','Ground']\n    _gender='Neutral'\n    _ability=['Iron Hide']\n    _move_1=('Horn Smash',90,85,'Physical','Steel',0,['contact'])\n    _move_2=('Steel Guard',0,100000,'Status','Steel',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def _take_damage_attack(self,x):\n        self.register_act_taken()\n        if self['act_taken']['category']=='Physical':\n            x=int(x*0.75)\n        self.state['hp']=max(0,self['hp']-x)\n        if self['hp']==0:\n            self.state['status']='FNT'\n\n    def move_1(self): # Horn Smash\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100:\n                self.target.set_boost('def',-1)\n\n    def move_2(self): # Steel Guard\n        self.set_boost('def',+1,'self')\n        self.set_boost('spd',+1,'self')\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Groundquake\": {\n    \"power\": 100,\n    \"accuracy\": 90,\n    \"category\": \"Special\",\n    \"type\": \"Ground\",\n    \"effect\": \"Has a 20% chance to cause the target to flinch.\"\n  }\n}\n```",
        "response": "```python\n@Increment(Hornorus,'_move_3')\ndef value():\n    return ('Groundquake',100,90,'Special','Ground',0,[])\n\n@Increment(Hornorus)\ndef move_3(self): # Groundquake\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint() and rnd()<20/100:\n            self.target.set_condition('FLINCH',counter=0)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Hornorus\",\n  \"types\": [\n    \"Steel\",\n    \"Ground\"\n  ],\n  \"gender\": \"Neutral\",\n  \"ability\": {\n    \"Iron Hide\": \"Reduces damage taken from Physical moves by 25%.\"\n  },\n  \"moves\": {\n    \"Horn Smash\": {\n      \"power\": 90,\n      \"accuracy\": 85,\n      \"category\": \"Physical\",\n      \"type\": \"Steel\",\n      \"effect\": \"Has a 30% chance to lower the target's Defense by 1 stage.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Steel Guard\": {\n      \"power\": 0,\n      \"accuracy\": 100000,\n      \"category\": \"Status\",\n      \"type\": \"Steel\",\n      \"effect\": \"Increases the user's Defense and Special Defense by 1 stage each.\"\n    },\n    \"Groundquake\": {\n      \"power\": 100,\n      \"accuracy\": 90,\n      \"category\": \"Special\",\n      \"type\": \"Ground\",\n      \"effect\": \"Has a 20% chance to cause the target to flinch.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Hornorus(PokemonBase):\n    _species='Hornorus'\n    _types=['Steel','Ground']\n    _gender='Neutral'\n    _ability=['Iron Hide']\n    _move_1=('Horn Smash',90,85,'Physical','Steel',0,['contact'])\n    _move_2=('Steel Guard',0,100000,'Status','Steel',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def _take_damage_attack(self,x):\n        self.register_act_taken()\n        if self['act_taken']['category']=='Physical':\n            x=int(x*0.75)\n        self.state['hp']=max(0,self['hp']-x)\n        if self['hp']==0:\n            self.state['status']='FNT'\n\n    def move_1(self): # Horn Smash\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100:\n                self.target.set_boost('def',-1)\n\n    def move_2(self): # Steel Guard\n        self.set_boost('def',+1,'self')\n        self.set_boost('spd',+1,'self')\n\n@Increment(Hornorus,'_move_3')\ndef value():\n    return ('Groundquake',100,90,'Special','Ground',0,[])\n\n@Increment(Hornorus)\ndef move_3(self): # Groundquake\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint() and rnd()<20/100:\n            self.target.set_condition('FLINCH',counter=0)\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Armored Strike\": {\n    \"power\": 80,\n    \"accuracy\": 100000,\n    \"category\": \"Physical\",\n    \"type\": \"Steel\",\n    \"effect\": \"The user gains a temporary shield that absorbs 1/4 of the damage taken in the next turn.\"\n  }\n}\n```",
        "response": "```python\n@Increment(Hornorus,'_move_4')\ndef value():\n    return ('Armored Strike',80,100000,'Physical','Steel',0,[])\n\n@Increment(Hornorus)\ndef move_4(self): # Armored Strike\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        self.set_condition('TEMP_SHIELD',counter=0)\n\n@Increment(Hornorus)\ndef _take_damage_attack(self,x):\n    self.register_act_taken()\n    if self['conditions'].get('TEMP_SHIELD'):\n        x=int(x*0.75)\n    if self['act_taken']['category']=='Physical':\n        x=int(x*0.75)\n    self.state['hp']=max(0,self['hp']-x)\n    if self['hp']==0:\n        self.state['status']='FNT'\n\n@Increment(Hornorus)\ndef endturn(self):\n    if self['conditions'].get('TEMP_SHIELD'):\n       self['conditions']['TEMP_SHIELD']['counter']+=1\n       if self['conditions']['TEMP_SHIELD']['counter']==2:\n           del self['conditions']['TEMP_SHIELD']\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Hornorus\",\n  \"types\": [\n    \"Steel\",\n    \"Ground\"\n  ],\n  \"gender\": \"Neutral\",\n  \"ability\": {\n    \"Iron Hide\": \"Reduces damage taken from Physical moves by 25%.\"\n  },\n  \"moves\": {\n    \"Horn Smash\": {\n      \"power\": 90,\n      \"accuracy\": 85,\n      \"category\": \"Physical\",\n      \"type\": \"Steel\",\n      \"effect\": \"Has a 30% chance to lower the target's Defense by 1 stage.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Steel Guard\": {\n      \"power\": 0,\n      \"accuracy\": 100000,\n      \"category\": \"Status\",\n      \"type\": \"Steel\",\n      \"effect\": \"Increases the user's Defense and Special Defense by 1 stage each.\"\n    },\n    \"Groundquake\": {\n      \"power\": 100,\n      \"accuracy\": 90,\n      \"category\": \"Special\",\n      \"type\": \"Ground\",\n      \"effect\": \"Has a 20% chance to cause the target to flinch.\"\n    },\n    \"Armored Strike\": {\n      \"power\": 80,\n      \"accuracy\": 100000,\n      \"category\": \"Physical\",\n      \"type\": \"Steel\",\n      \"effect\": \"The user gains a temporary shield that absorbs 1/4 of the damage taken in the next turn.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Hornorus(PokemonBase):\n    _species='Hornorus'\n    _types=['Steel','Ground']\n    _gender='Neutral'\n    _ability=['Iron Hide']\n    _move_1=('Horn Smash',90,85,'Physical','Steel',0,['contact'])\n    _move_2=('Steel Guard',0,100000,'Status','Steel',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def _take_damage_attack(self,x):\n        self.register_act_taken()\n        if self['act_taken']['category']=='Physical':\n            x=int(x*0.75)\n        self.state['hp']=max(0,self['hp']-x)\n        if self['hp']==0:\n            self.state['status']='FNT'\n\n    def move_1(self): # Horn Smash\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100:\n                self.target.set_boost('def',-1)\n\n    def move_2(self): # Steel Guard\n        self.set_boost('def',+1,'self')\n        self.set_boost('spd',+1,'self')\n\n@Increment(Hornorus,'_move_3')\ndef value():\n    return ('Groundquake',100,90,'Special','Ground',0,[])\n\n@Increment(Hornorus)\ndef move_3(self): # Groundquake\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint() and rnd()<20/100:\n            self.target.set_condition('FLINCH',counter=0)\n\n@Increment(Hornorus,'_move_4')\ndef value():\n    return ('Armored Strike',80,100000,'Physical','Steel',0,[])\n\n@Increment(Hornorus)\ndef move_4(self): # Armored Strike\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        self.set_condition('TEMP_SHIELD',counter=0)\n\n@Increment(Hornorus)\ndef _take_damage_attack(self,x):\n    self.register_act_taken()\n    if self['conditions'].get('TEMP_SHIELD'):\n        x=int(x*0.75)\n    if self['act_taken']['category']=='Physical':\n        x=int(x*0.75)\n    self.state['hp']=max(0,self['hp']-x)\n    if self['hp']==0:\n        self.state['status']='FNT'\n\n@Increment(Hornorus)\ndef endturn(self):\n    if self['conditions'].get('TEMP_SHIELD'):\n       self['conditions']['TEMP_SHIELD']['counter']+=1\n       if self['conditions']['TEMP_SHIELD']['counter']==2:\n           del self['conditions']['TEMP_SHIELD']\n```\n\nThis role is gonna learn a new ability:\n```json\n{\n  \"Horn Charge\": \"Increases the user's Attack by 1 stage when hitting the target with a Physical move.\"\n}\n```",
        "response": "```python\n@Increment(Hornorus,'_ability')\ndef value():\n    return ['Iron Hide','Horn Charge']\n\n@Increment(Hornorus)\ndef move_1(self): # Horn Smash\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint() and rnd()<30/100:\n            self.target.set_boost('def',-1)\n        self.set_boost('atk',+1,'self')\n\n@Increment(Hornorus)\ndef move_4(self): # Armored Strike\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        self.set_condition('TEMP_SHIELD',counter=0)\n        self.set_boost('atk',+1,'self')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Huashe\",\n  \"types\": [\n    \"Ghost\",\n    \"Flying\"\n  ],\n  \"gender\": \"Neutral\",\n  \"ability\": {\n    \"Wailing Echo\": \"Has a 30% chance to lower the target's Special Attack when Huashe is hit by a Special move.\"\n  },\n  \"moves\": {\n    \"Phantom Cry\": {\n      \"power\": 85,\n      \"accuracy\": 90,\n      \"category\": \"Special\",\n      \"type\": \"Ghost\",\n      \"effect\": \"Has a 20% chance to confuse the target.\"\n    },\n    \"Flood Surge\": {\n      \"power\": 100,\n      \"accuracy\": 95,\n      \"category\": \"Special\",\n      \"type\": \"Water\",\n      \"effect\": \"Has a 30% chance to lower the target's Speed by 1 stage.\"\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass Huashe(PokemonBase):\n    _species='Huashe'\n    _types=['Ghost','Flying']\n    _gender='Neutral'\n    _ability=['Wailing Echo']\n    _move_1=('Phantom Cry',85,90,'Special','Ghost',0,[])\n    _move_2=('Flood Surge',100,95,'Special','Water',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def _take_damage_attack(self,x):\n        self.register_act_taken()\n        if self['act_taken']['category']=='Special' and rnd()<30/100:\n            self.target.set_boost('spa',-1)\n        self.state['hp']=max(0,self['hp']-x)\n        if self['hp']==0:\n            self.state['status']='FNT'\n\n    def move_1(self): # Phantom Cry\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<20/100:\n                self.target.set_condition('CONFUSION',counter=0)\n    \n    def move_2(self): # Flood Surge\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100:\n                self.target.set_boost('spe',-1)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Huashe\",\n  \"types\": [\n    \"Ghost\",\n    \"Flying\"\n  ],\n  \"gender\": \"Neutral\",\n  \"ability\": {\n    \"Wailing Echo\": \"Has a 30% chance to lower the target's Special Attack when Huashe is hit by a Special move.\"\n  },\n  \"moves\": {\n    \"Phantom Cry\": {\n      \"power\": 85,\n      \"accuracy\": 90,\n      \"category\": \"Special\",\n      \"type\": \"Ghost\",\n      \"effect\": \"Has a 20% chance to confuse the target.\"\n    },\n    \"Flood Surge\": {\n      \"power\": 100,\n      \"accuracy\": 95,\n      \"category\": \"Special\",\n      \"type\": \"Water\",\n      \"effect\": \"Has a 30% chance to lower the target's Speed by 1 stage.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Huashe(PokemonBase):\n    _species='Huashe'\n    _types=['Ghost','Flying']\n    _gender='Neutral'\n    _ability=['Wailing Echo']\n    _move_1=('Phantom Cry',85,90,'Special','Ghost',0,[])\n    _move_2=('Flood Surge',100,95,'Special','Water',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def _take_damage_attack(self,x):\n        self.register_act_taken()\n        if self['act_taken']['category']=='Special' and rnd()<30/100:\n            self.target.set_boost('spa',-1)\n        self.state['hp']=max(0,self['hp']-x)\n        if self['hp']==0:\n            self.state['status']='FNT'\n\n    def move_1(self): # Phantom Cry\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<20/100:\n                self.target.set_condition('CONFUSION',counter=0)\n    \n    def move_2(self): # Flood Surge\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100:\n                self.target.set_boost('spe',-1)\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Spectral Glide\": {\n    \"power\": 0,\n    \"accuracy\": 100000,\n    \"category\": \"Status\",\n    \"type\": \"Flying\",\n    \"effect\": \"Make the user immune to all Ghost-type moves for the next three turns.\"\n  }\n}\n```",
        "response": "```python\n@Increment(Huashe,'_move_3')\ndef value():\n    return ('Spectral Glide',0,100000,'Status','Flying',0,[])\n\n@Increment(Huashe)\ndef move_3(self): # Spectral Glide\n    self.set_condition('GHOST_IMMUNE',counter=0)\n\n@Increment(Huashe)\ndef _take_damage_attack(self,x):\n    self.register_act_taken()\n    if self['conditions'].get('GHOST_IMMUNE') and self['act_taken']['type']=='Ghost':\n        return\n    if self['act_taken']['category']=='Special' and rnd()<30/100:\n        self.target.set_boost('spa',-1)\n    self.state['hp']=max(0,self['hp']-x)\n    if self['hp']==0:\n        self.state['status']='FNT'\n\n@Increment(Huashe)\ndef endturn(self):\n    if self['conditions'].get('GHOST_IMMUNE'):\n        self['conditions']['GHOST_IMMUNE']['counter']+=1\n        if self['conditions']['GHOST_IMMUNE']['counter']==3:\n            del self['conditions']['GHOST_IMMUNE']\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Huashe\",\n  \"types\": [\n    \"Ghost\",\n    \"Flying\"\n  ],\n  \"gender\": \"Neutral\",\n  \"ability\": {\n    \"Wailing Echo\": \"Has a 30% chance to lower the target's Special Attack when Huashe is hit by a Special move.\"\n  },\n  \"moves\": {\n    \"Phantom Cry\": {\n      \"power\": 85,\n      \"accuracy\": 90,\n      \"category\": \"Special\",\n      \"type\": \"Ghost\",\n      \"effect\": \"Has a 20% chance to confuse the target.\"\n    },\n    \"Flood Surge\": {\n      \"power\": 100,\n      \"accuracy\": 95,\n      \"category\": \"Special\",\n      \"type\": \"Water\",\n      \"effect\": \"Has a 30% chance to lower the target's Speed by 1 stage.\"\n    },\n    \"Spectral Glide\": {\n      \"power\": 0,\n      \"accuracy\": 100000,\n      \"category\": \"Status\",\n      \"type\": \"Flying\",\n      \"effect\": \"Make the user immune to all Ghost-type moves for the next three turns.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Huashe(PokemonBase):\n    _species='Huashe'\n    _types=['Ghost','Flying']\n    _gender='Neutral'\n    _ability=['Wailing Echo']\n    _move_1=('Phantom Cry',85,90,'Special','Ghost',0,[])\n    _move_2=('Flood Surge',100,95,'Special','Water',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def _take_damage_attack(self,x):\n        self.register_act_taken()\n        if self['act_taken']['category']=='Special' and rnd()<30/100:\n            self.target.set_boost('spa',-1)\n        self.state['hp']=max(0,self['hp']-x)\n        if self['hp']==0:\n            self.state['status']='FNT'\n\n    def move_1(self): # Phantom Cry\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<20/100:\n                self.target.set_condition('CONFUSION',counter=0)\n    \n    def move_2(self): # Flood Surge\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100:\n                self.target.set_boost('spe',-1)\n\n@Increment(Huashe,'_move_3')\ndef value():\n    return ('Spectral Glide',0,100000,'Status','Flying',0,[])\n\n@Increment(Huashe)\ndef move_3(self): # Spectral Glide\n    self.set_condition('GHOST_IMMUNE',counter=0)\n\n@Increment(Huashe)\ndef _take_damage_attack(self,x):\n    self.register_act_taken()\n    if self['conditions'].get('GHOST_IMMUNE') and self['act_taken']['type']=='Ghost':\n        return\n    if self['act_taken']['category']=='Special' and rnd()<30/100:\n        self.target.set_boost('spa',-1)\n    self.state['hp']=max(0,self['hp']-x)\n    if self['hp']==0:\n        self.state['status']='FNT'\n\n@Increment(Huashe)\ndef endturn(self):\n    if self['conditions'].get('GHOST_IMMUNE'):\n        self['conditions']['GHOST_IMMUNE']['counter']+=1\n        if self['conditions']['GHOST_IMMUNE']['counter']==3:\n            del self['conditions']['GHOST_IMMUNE']\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Serpent Strike\": {\n    \"power\": 90,\n    \"accuracy\": 100,\n    \"category\": \"Physical\",\n    \"type\": \"Ghost\",\n    \"effect\": \"Has a 20% chance to cause the target to flinch\",\n    \"property\": [\n      \"contact\"\n    ]\n  }\n}\n```",
        "response": "```python\n@Increment(Huashe,'_move_4')\ndef value():\n    return ('Serpent Strike',90,100,'Physical','Ghost',0,['contact'])\n\n@Increment(Huashe)\ndef move_4(self): # Serpent Strike\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint() and rnd()<20/100:\n            self.target.set_condition('FLINCH',counter=0)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Huashe\",\n  \"types\": [\n    \"Ghost\",\n    \"Flying\"\n  ],\n  \"gender\": \"Neutral\",\n  \"ability\": {\n    \"Wailing Echo\": \"Has a 30% chance to lower the target's Special Attack when Huashe is hit by a Special move.\"\n  },\n  \"moves\": {\n    \"Phantom Cry\": {\n      \"power\": 85,\n      \"accuracy\": 90,\n      \"category\": \"Special\",\n      \"type\": \"Ghost\",\n      \"effect\": \"Has a 20% chance to confuse the target.\"\n    },\n    \"Flood Surge\": {\n      \"power\": 100,\n      \"accuracy\": 95,\n      \"category\": \"Special\",\n      \"type\": \"Water\",\n      \"effect\": \"Has a 30% chance to lower the target's Speed by 1 stage.\"\n    },\n    \"Spectral Glide\": {\n      \"power\": 0,\n      \"accuracy\": 100000,\n      \"category\": \"Status\",\n      \"type\": \"Flying\",\n      \"effect\": \"Make the user immune to all Ghost-type moves for the next three turns.\"\n    },\n    \"Serpent Strike\": {\n      \"power\": 90,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Ghost\",\n      \"effect\": \"Has a 20% chance to cause the target to flinch\",\n      \"property\": [\n        \"contact\"\n      ]\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Huashe(PokemonBase):\n    _species='Huashe'\n    _types=['Ghost','Flying']\n    _gender='Neutral'\n    _ability=['Wailing Echo']\n    _move_1=('Phantom Cry',85,90,'Special','Ghost',0,[])\n    _move_2=('Flood Surge',100,95,'Special','Water',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def _take_damage_attack(self,x):\n        self.register_act_taken()\n        if self['act_taken']['category']=='Special' and rnd()<30/100:\n            self.target.set_boost('spa',-1)\n        self.state['hp']=max(0,self['hp']-x)\n        if self['hp']==0:\n            self.state['status']='FNT'\n\n    def move_1(self): # Phantom Cry\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<20/100:\n                self.target.set_condition('CONFUSION',counter=0)\n    \n    def move_2(self): # Flood Surge\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100:\n                self.target.set_boost('spe',-1)\n\n@Increment(Huashe,'_move_3')\ndef value():\n    return ('Spectral Glide',0,100000,'Status','Flying',0,[])\n\n@Increment(Huashe)\ndef move_3(self): # Spectral Glide\n    self.set_condition('GHOST_IMMUNE',counter=0)\n\n@Increment(Huashe)\ndef _take_damage_attack(self,x):\n    self.register_act_taken()\n    if self['conditions'].get('GHOST_IMMUNE') and self['act_taken']['type']=='Ghost':\n        return\n    if self['act_taken']['category']=='Special' and rnd()<30/100:\n        self.target.set_boost('spa',-1)\n    self.state['hp']=max(0,self['hp']-x)\n    if self['hp']==0:\n        self.state['status']='FNT'\n\n@Increment(Huashe)\ndef endturn(self):\n    if self['conditions'].get('GHOST_IMMUNE'):\n        self['conditions']['GHOST_IMMUNE']['counter']+=1\n        if self['conditions']['GHOST_IMMUNE']['counter']==3:\n            del self['conditions']['GHOST_IMMUNE']\n\n@Increment(Huashe,'_move_4')\ndef value():\n    return ('Serpent Strike',90,100,'Physical','Ghost',0,['contact'])\n\n@Increment(Huashe)\ndef move_4(self): # Serpent Strike\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint() and rnd()<20/100:\n            self.target.set_condition('FLINCH',counter=0)\n```\n\nThis role is gonna learn a new ability:\n```json\n{\n  \"Flood Herald\": \"When Rain Dance is active, it increases its Speed by 1 stage and reduces the opponent's Accuracy by 1 stage at each end of the turn.\"\n}\n```",
        "response": "```python\n@Increment(Huashe,'_ability')\ndef value():\n    return ['Wailing Echo','Flood Herald']\n\n@Increment(Huashe)\ndef endturn(self):\n    if self.env.get('RAINDANCE'):\n        self.set_boost('spd',1,'self')\n        self.target.set_boost('accuracy',-1)\n    if self['conditions'].get('GHOST_IMMUNE'):\n        self['conditions']['GHOST_IMMUNE']['counter']+=1\n        if self['conditions']['GHOST_IMMUNE']['counter']==3:\n            del self['conditions']['GHOST_IMMUNE']\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Hydragar\",\n  \"types\": [\n    \"Water\",\n    \"Fire\"\n  ],\n  \"gender\": \"Neutral\",\n  \"ability\": {\n    \"Regenerative Fury\": \"When Hydragar's HP drops below 50%, it regenerates 20% of its maximum HP at the end of each turn.\"\n  },\n  \"moves\": {\n    \"Flame Torrent\": {\n      \"power\": 95,\n      \"accuracy\": 90,\n      \"category\": \"Special\",\n      \"type\": \"Fire\",\n      \"effect\": \"Has a 30% chance to burn the target.\"\n    },\n    \"Venomous Spit\": {\n      \"power\": 80,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Poison\",\n      \"effect\": \"Has a 50% chance to poison the target.\"\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass Hydragar(PokemonBase):\n    _species='Hydragar'\n    _types=['Water','Fire']\n    _gender='Neutral'\n    _ability=['Regenerative Fury']\n    _move_1=('Flame Torrent',95,90,'Special','Fire',0,[])\n    _move_2=('Venomous Spit',80,100,'Special','Poison',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def endturn(self):\n        if self['hp']<self['max_hp']//2:\n            self.restore(self['max_hp']//5,'heal')\n\n    def move_1(self): # Flame Torrent\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100:\n                self.target.set_status('BRN')\n\n    def move_2(self): # Venomous Spit\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<50/100:\n                self.target.set_status('PSN')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Hydragar\",\n  \"types\": [\n    \"Water\",\n    \"Fire\"\n  ],\n  \"gender\": \"Neutral\",\n  \"ability\": {\n    \"Regenerative Fury\": \"When Hydragar's HP drops below 50%, it regenerates 20% of its maximum HP at the end of each turn.\"\n  },\n  \"moves\": {\n    \"Flame Torrent\": {\n      \"power\": 95,\n      \"accuracy\": 90,\n      \"category\": \"Special\",\n      \"type\": \"Fire\",\n      \"effect\": \"Has a 30% chance to burn the target.\"\n    },\n    \"Venomous Spit\": {\n      \"power\": 80,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Poison\",\n      \"effect\": \"Has a 50% chance to poison the target.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Hydragar(PokemonBase):\n    _species='Hydragar'\n    _types=['Water','Fire']\n    _gender='Neutral'\n    _ability=['Regenerative Fury']\n    _move_1=('Flame Torrent',95,90,'Special','Fire',0,[])\n    _move_2=('Venomous Spit',80,100,'Special','Poison',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def endturn(self):\n        if self['hp']<self['max_hp']//2:\n            self.restore(self['max_hp']//5,'heal')\n\n    def move_1(self): # Flame Torrent\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100:\n                self.target.set_status('BRN')\n\n    def move_2(self): # Venomous Spit\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<50/100:\n                self.target.set_status('PSN')\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Aqua Slash\": {\n    \"power\": 85,\n    \"accuracy\": 100,\n    \"category\": \"Physical\",\n    \"type\": \"Water\",\n    \"effect\": \"Each time Hydraga uses Aqua Slash, increases chances of its critical hit rate by 20%.\"\n  }\n}\n```",
        "response": "```python\n@Increment(Hydragar,'_move_3')\ndef value():\n    return ('Aqua Slash',85,100,'Physical','Water',0,[])\n\n@Increment(Hydragar)\ndef move_3(self): # Aqua Slash\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if self['conditions'].get('AQUA_SLASH'):\n            self['conditions']['AQUA_SLASH']['counter']+=1\n        else:\n            self.set_condition('AQUA_SLASH',counter=0)\n\n@Increment(Hydragar)\ndef get_crit(self):\n    crit_mult=[0,24,8,2,1]\n    crit_ratio=self['boosts']['crit']\n    crit=False\n    if self['conditions'].get('AQUA_SLASH'):\n        if rnd()*crit_mult[crit_ratio+1]<1*1.2*self['conditions']['AQUA_SLASH']['counter']:\n            crit=True\n    else:\n        if rnd()*crit_mult[crit_ratio+1]<1:\n            crit=True\n    return crit\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Hydragar\",\n  \"types\": [\n    \"Water\",\n    \"Fire\"\n  ],\n  \"gender\": \"Neutral\",\n  \"ability\": {\n    \"Regenerative Fury\": \"When Hydragar's HP drops below 50%, it regenerates 20% of its maximum HP at the end of each turn.\"\n  },\n  \"moves\": {\n    \"Flame Torrent\": {\n      \"power\": 95,\n      \"accuracy\": 90,\n      \"category\": \"Special\",\n      \"type\": \"Fire\",\n      \"effect\": \"Has a 30% chance to burn the target.\"\n    },\n    \"Venomous Spit\": {\n      \"power\": 80,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Poison\",\n      \"effect\": \"Has a 50% chance to poison the target.\"\n    },\n    \"Aqua Slash\": {\n      \"power\": 85,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Water\",\n      \"effect\": \"Each time Hydraga uses Aqua Slash, increases chances of its critical hit rate by 20%.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Hydragar(PokemonBase):\n    _species='Hydragar'\n    _types=['Water','Fire']\n    _gender='Neutral'\n    _ability=['Regenerative Fury']\n    _move_1=('Flame Torrent',95,90,'Special','Fire',0,[])\n    _move_2=('Venomous Spit',80,100,'Special','Poison',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def endturn(self):\n        if self['hp']<self['max_hp']//2:\n            self.restore(self['max_hp']//5,'heal')\n\n    def move_1(self): # Flame Torrent\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100:\n                self.target.set_status('BRN')\n\n    def move_2(self): # Venomous Spit\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<50/100:\n                self.target.set_status('PSN')\n\n@Increment(Hydragar,'_move_3')\ndef value():\n    return ('Aqua Slash',85,100,'Physical','Water',0,[])\n\n@Increment(Hydragar)\ndef move_3(self): # Aqua Slash\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if self['conditions'].get('AQUA_SLASH'):\n            self['conditions']['AQUA_SLASH']['counter']+=1\n        else:\n            self.set_condition('AQUA_SLASH',counter=0)\n\n@Increment(Hydragar)\ndef get_crit(self):\n    crit_mult=[0,24,8,2,1]\n    crit_ratio=self['boosts']['crit']\n    crit=False\n    if self['conditions'].get('AQUA_SLASH'):\n        if rnd()*crit_mult[crit_ratio+1]<1*1.2*self['conditions']['AQUA_SLASH']['counter']:\n            crit=True\n    else:\n        if rnd()*crit_mult[crit_ratio+1]<1:\n            crit=True\n    return crit\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Hydra Wrath\": {\n    \"power\": 110,\n    \"accuracy\": 85,\n    \"category\": \"Special\",\n    \"type\": \"Water\",\n    \"effect\": \"Reduces the target's Special Attack by 1 stage.\"\n  }\n}\n```",
        "response": "```python\n@Increment(Hydragar,'_move_4')\ndef value():\n    return ('Hydra Wrath',110,85,'Special','Water',0,[])\n\n@Increment(Hydragar)\ndef move_4(self): # Hydras Wrath\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        self.target.set_boost('spa',-1)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Hydragar\",\n  \"types\": [\n    \"Water\",\n    \"Fire\"\n  ],\n  \"gender\": \"Neutral\",\n  \"ability\": {\n    \"Regenerative Fury\": \"When Hydragar's HP drops below 50%, it regenerates 20% of its maximum HP at the end of each turn.\"\n  },\n  \"moves\": {\n    \"Flame Torrent\": {\n      \"power\": 95,\n      \"accuracy\": 90,\n      \"category\": \"Special\",\n      \"type\": \"Fire\",\n      \"effect\": \"Has a 30% chance to burn the target.\"\n    },\n    \"Venomous Spit\": {\n      \"power\": 80,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Poison\",\n      \"effect\": \"Has a 50% chance to poison the target.\"\n    },\n    \"Aqua Slash\": {\n      \"power\": 85,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Water\",\n      \"effect\": \"Each time Hydraga uses Aqua Slash, increases chances of its critical hit rate by 20%.\"\n    },\n    \"Hydra Wrath\": {\n      \"power\": 110,\n      \"accuracy\": 85,\n      \"category\": \"Special\",\n      \"type\": \"Water\",\n      \"effect\": \"Reduces the target's Special Attack by 1 stage.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Hydragar(PokemonBase):\n    _species='Hydragar'\n    _types=['Water','Fire']\n    _gender='Neutral'\n    _ability=['Regenerative Fury']\n    _move_1=('Flame Torrent',95,90,'Special','Fire',0,[])\n    _move_2=('Venomous Spit',80,100,'Special','Poison',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def endturn(self):\n        if self['hp']<self['max_hp']//2:\n            self.restore(self['max_hp']//5,'heal')\n\n    def move_1(self): # Flame Torrent\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100:\n                self.target.set_status('BRN')\n\n    def move_2(self): # Venomous Spit\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<50/100:\n                self.target.set_status('PSN')\n\n@Increment(Hydragar,'_move_3')\ndef value():\n    return ('Aqua Slash',85,100,'Physical','Water',0,[])\n\n@Increment(Hydragar)\ndef move_3(self): # Aqua Slash\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if self['conditions'].get('AQUA_SLASH'):\n            self['conditions']['AQUA_SLASH']['counter']+=1\n        else:\n            self.set_condition('AQUA_SLASH',counter=0)\n\n@Increment(Hydragar)\ndef get_crit(self):\n    crit_mult=[0,24,8,2,1]\n    crit_ratio=self['boosts']['crit']\n    crit=False\n    if self['conditions'].get('AQUA_SLASH'):\n        if rnd()*crit_mult[crit_ratio+1]<1*1.2*self['conditions']['AQUA_SLASH']['counter']:\n            crit=True\n    else:\n        if rnd()*crit_mult[crit_ratio+1]<1:\n            crit=True\n    return crit\n\n@Increment(Hydragar,'_move_4')\ndef value():\n    return ('Hydra Wrath',110,85,'Special','Water',0,[])\n\n@Increment(Hydragar)\ndef move_4(self): # Hydras Wrath\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        self.target.set_boost('spa',-1)\n```\n\nThis role is gonna learn a new ability:\n```json\n{\n  \"Nine-Headed Vengeance\": \"When hit by a critical hit, Hydragar's Attack and Special Attack increase by 2 stages.\"\n}\n```",
        "response": "```python\n@Increment(Hydragar,'_ability')\ndef value():\n    return ['Regenerative Fury','Nine-Headed Vengeance']\n\n@Increment(Hydragar)\ndef _take_damage_attack(self,x):\n    self.register_act_taken()\n    self.state['hp']=max(0,self['hp']-x)\n    if self['hp']==0:\n        self.state['status']='FNT'\n        return\n    if 'crit' in self['act_taken'] and self['act_taken']['crit']:\n        self.set_boost('atk',+2,'self')\n        self.set_boost('spa',+2,'self')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Hydrodrake\",\n  \"types\": [\n    \"Water\",\n    \"Poison\"\n  ],\n  \"gender\": \"Neutral\",\n  \"ability\": {\n    \"Regenerative Scales\": \"Restores 1/8 of Hydrodrake's maximum HP at the end of each turn if it has taken damage during the turn.\"\n  },\n  \"moves\": {\n    \"Hydra Surge\": {\n      \"power\": 100,\n      \"accuracy\": 90,\n      \"category\": \"Special\",\n      \"type\": \"Water\",\n      \"effect\": \"Has a 30% chance to confuse the target. If the target is already confused, this move's power increases by 50%.\"\n    },\n    \"Venomous Strike\": {\n      \"power\": 80,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Poison\",\n      \"effect\": \"Has a 40% chance to poison the target. If the target is already poisoned, this move's damage is doubled.\"\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass Hydrodrake(PokemonBase):\n    _species='Hydrodrake'\n    _types=['Water','Poison']\n    _gender='Neutral'\n    _ability=['Regenerative Scales']\n    _move_1=('Hydra Surge',100,90,'Special','Water',0,[])\n    _move_2=('Venomous Strike',80,100,'Physical','Poison',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def endturn(self):\n        if self['act_taken'] and self['act_taken'].get('damage'):\n            self.restore(self['max_hp']//8,'heal')\n\n    def move_1(self): # Hydra Surge\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            if self.target['conditions'].get('CONFUSION'):\n                damage=int(damage*1.5)\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100:\n                self.target.set_condition('CONFUSION',counter=0)\n\n    def move_2(self): # Venomous Strike\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            if self.target.isstatus('PSN') or self.target.isstatus('TOX'):\n                damage=int(damage*2)\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<40/100:\n                self.target.set_status('PSN')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Hydrodrake\",\n  \"types\": [\n    \"Water\",\n    \"Poison\"\n  ],\n  \"gender\": \"Neutral\",\n  \"ability\": {\n    \"Regenerative Scales\": \"Restores 1/8 of Hydrodrake's maximum HP at the end of each turn if it has taken damage during the turn.\"\n  },\n  \"moves\": {\n    \"Hydra Surge\": {\n      \"power\": 100,\n      \"accuracy\": 90,\n      \"category\": \"Special\",\n      \"type\": \"Water\",\n      \"effect\": \"Has a 30% chance to confuse the target. If the target is already confused, this move's power increases by 50%.\"\n    },\n    \"Venomous Strike\": {\n      \"power\": 80,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Poison\",\n      \"effect\": \"Has a 40% chance to poison the target. If the target is already poisoned, this move's damage is doubled.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Hydrodrake(PokemonBase):\n    _species='Hydrodrake'\n    _types=['Water','Poison']\n    _gender='Neutral'\n    _ability=['Regenerative Scales']\n    _move_1=('Hydra Surge',100,90,'Special','Water',0,[])\n    _move_2=('Venomous Strike',80,100,'Physical','Poison',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def endturn(self):\n        if self['act_taken'] and self['act_taken'].get('damage'):\n            self.restore(self['max_hp']//8,'heal')\n\n    def move_1(self): # Hydra Surge\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            if self.target['conditions'].get('CONFUSION'):\n                damage=int(damage*1.5)\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100:\n                self.target.set_condition('CONFUSION',counter=0)\n\n    def move_2(self): # Venomous Strike\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            if self.target.isstatus('PSN') or self.target.isstatus('TOX'):\n                damage=int(damage*2)\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<40/100:\n                self.target.set_status('PSN')\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Head Rebirth\": {\n    \"power\": 0,\n    \"accuracy\": 100000,\n    \"category\": \"Status\",\n    \"type\": \"Water\",\n    \"effect\": \"Restores 1/4 of the user's maximum HP and increases the user's Defense by 1 stage. The user cannot use this move if its HP is full.\"\n  }\n}\n```",
        "response": "```python\n@Increment(Hydrodrake,'_move_3')\ndef value():\n    return ('Head Rebirth',0,100000,'Status','Water',0,[])\n\n@Increment(Hydrodrake)\ndef move_3(self): # Head Rebirth\n    if self['hp']<self['max_hp']:\n        self.restore(self['max_hp']//4,'heal')\n        self.set_boost('def',+1,'self')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Hydrodrake\",\n  \"types\": [\n    \"Water\",\n    \"Poison\"\n  ],\n  \"gender\": \"Neutral\",\n  \"ability\": {\n    \"Regenerative Scales\": \"Restores 1/8 of Hydrodrake's maximum HP at the end of each turn if it has taken damage during the turn.\"\n  },\n  \"moves\": {\n    \"Hydra Surge\": {\n      \"power\": 100,\n      \"accuracy\": 90,\n      \"category\": \"Special\",\n      \"type\": \"Water\",\n      \"effect\": \"Has a 30% chance to confuse the target. If the target is already confused, this move's power increases by 50%.\"\n    },\n    \"Venomous Strike\": {\n      \"power\": 80,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Poison\",\n      \"effect\": \"Has a 40% chance to poison the target. If the target is already poisoned, this move's damage is doubled.\"\n    },\n    \"Head Rebirth\": {\n      \"power\": 0,\n      \"accuracy\": 100000,\n      \"category\": \"Status\",\n      \"type\": \"Water\",\n      \"effect\": \"Restores 1/4 of the user's maximum HP and increases the user's Defense by 1 stage. The user cannot use this move if its HP is full.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Hydrodrake(PokemonBase):\n    _species='Hydrodrake'\n    _types=['Water','Poison']\n    _gender='Neutral'\n    _ability=['Regenerative Scales']\n    _move_1=('Hydra Surge',100,90,'Special','Water',0,[])\n    _move_2=('Venomous Strike',80,100,'Physical','Poison',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def endturn(self):\n        if self['act_taken'] and self['act_taken'].get('damage'):\n            self.restore(self['max_hp']//8,'heal')\n\n    def move_1(self): # Hydra Surge\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            if self.target['conditions'].get('CONFUSION'):\n                damage=int(damage*1.5)\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100:\n                self.target.set_condition('CONFUSION',counter=0)\n\n    def move_2(self): # Venomous Strike\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            if self.target.isstatus('PSN') or self.target.isstatus('TOX'):\n                damage=int(damage*2)\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<40/100:\n                self.target.set_status('PSN')\n\n@Increment(Hydrodrake,'_move_3')\ndef value():\n    return ('Head Rebirth',0,100000,'Status','Water',0,[])\n\n@Increment(Hydrodrake)\ndef move_3(self): # Head Rebirth\n    if self['hp']<self['max_hp']:\n        self.restore(self['max_hp']//4,'heal')\n        self.set_boost('def',+1,'self')\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Serpents Wrath\": {\n    \"power\": 90,\n    \"accuracy\": 85,\n    \"category\": \"Physical\",\n    \"type\": \"Water\",\n    \"effect\": \"Ignores all attacks in two turns.\"\n  }\n}\n```",
        "response": "```python\n@Increment(Hydrodrake,'_move_4')\ndef value():\n    return ('Serpents Wrath',90,85,'Physical','Water',0,[])\n\n@Increment(Hydrodrake)\ndef move_4(self): # Serpent's Wrath\n    self.set_condition('IGNORE_ATTACKS',counter=0)\n\n@Increment(Hydrodrake)\ndef _take_damage_attack(self,x):\n    if self['conditions'].get('IGNORE_ATTACKS'):\n        return\n    self.register_act_taken()\n    self.state['hp']=max(0,self['hp']-x)\n    if self['hp']==0:\n        self.state['status']='FNT'\n\n@Increment(Hydrodrake)\ndef endturn(self):\n    if self['act_taken'] and self['act_taken'].get('damage'):\n        self.restore(self['max_hp']//8,'heal')\n    if self['conditions'].get('IGNORE_ATTACKS'):\n       self['conditions']['IGNORE_ATTACKS']['counter']+=1\n       if self['conditions']['IGNORE_ATTACKS']['counter']==2:\n           del self['conditions']['IGNORE_ATTACKS']\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Hydrodrake\",\n  \"types\": [\n    \"Water\",\n    \"Poison\"\n  ],\n  \"gender\": \"Neutral\",\n  \"ability\": {\n    \"Regenerative Scales\": \"Restores 1/8 of Hydrodrake's maximum HP at the end of each turn if it has taken damage during the turn.\"\n  },\n  \"moves\": {\n    \"Hydra Surge\": {\n      \"power\": 100,\n      \"accuracy\": 90,\n      \"category\": \"Special\",\n      \"type\": \"Water\",\n      \"effect\": \"Has a 30% chance to confuse the target. If the target is already confused, this move's power increases by 50%.\"\n    },\n    \"Venomous Strike\": {\n      \"power\": 80,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Poison\",\n      \"effect\": \"Has a 40% chance to poison the target. If the target is already poisoned, this move's damage is doubled.\"\n    },\n    \"Head Rebirth\": {\n      \"power\": 0,\n      \"accuracy\": 100000,\n      \"category\": \"Status\",\n      \"type\": \"Water\",\n      \"effect\": \"Restores 1/4 of the user's maximum HP and increases the user's Defense by 1 stage. The user cannot use this move if its HP is full.\"\n    },\n    \"Serpents Wrath\": {\n      \"power\": 90,\n      \"accuracy\": 85,\n      \"category\": \"Physical\",\n      \"type\": \"Water\",\n      \"effect\": \"Ignores all attacks in two turns.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Hydrodrake(PokemonBase):\n    _species='Hydrodrake'\n    _types=['Water','Poison']\n    _gender='Neutral'\n    _ability=['Regenerative Scales']\n    _move_1=('Hydra Surge',100,90,'Special','Water',0,[])\n    _move_2=('Venomous Strike',80,100,'Physical','Poison',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def endturn(self):\n        if self['act_taken'] and self['act_taken'].get('damage'):\n            self.restore(self['max_hp']//8,'heal')\n\n    def move_1(self): # Hydra Surge\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            if self.target['conditions'].get('CONFUSION'):\n                damage=int(damage*1.5)\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100:\n                self.target.set_condition('CONFUSION',counter=0)\n\n    def move_2(self): # Venomous Strike\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            if self.target.isstatus('PSN') or self.target.isstatus('TOX'):\n                damage=int(damage*2)\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<40/100:\n                self.target.set_status('PSN')\n\n@Increment(Hydrodrake,'_move_3')\ndef value():\n    return ('Head Rebirth',0,100000,'Status','Water',0,[])\n\n@Increment(Hydrodrake)\ndef move_3(self): # Head Rebirth\n    if self['hp']<self['max_hp']:\n        self.restore(self['max_hp']//4,'heal')\n        self.set_boost('def',+1,'self')\n\n@Increment(Hydrodrake,'_move_4')\ndef value():\n    return ('Serpents Wrath',90,85,'Physical','Water',0,[])\n\n@Increment(Hydrodrake)\ndef move_4(self): # Serpent's Wrath\n    self.set_condition('IGNORE_ATTACKS',counter=0)\n\n@Increment(Hydrodrake)\ndef _take_damage_attack(self,x):\n    if self['conditions'].get('IGNORE_ATTACKS'):\n        return\n    self.register_act_taken()\n    self.state['hp']=max(0,self['hp']-x)\n    if self['hp']==0:\n        self.state['status']='FNT'\n\n@Increment(Hydrodrake)\ndef endturn(self):\n    if self['act_taken'] and self['act_taken'].get('damage'):\n        self.restore(self['max_hp']//8,'heal')\n    if self['conditions'].get('IGNORE_ATTACKS'):\n       self['conditions']['IGNORE_ATTACKS']['counter']+=1\n       if self['conditions']['IGNORE_ATTACKS']['counter']==2:\n           del self['conditions']['IGNORE_ATTACKS']\n```\n\nThis role is gonna learn a new ability:\n```json\n{\n  \"Toxic Resilience\": \"Reduces damage from Poison-type moves by 50%.\"\n}\n```",
        "response": "```python\n@Increment(Hydrodrake,'_ability')\ndef value():\n    return ['Regenerative Scales','Toxic Resilience']\n\n@Increment(Hydrodrake)\ndef _take_damage_attack(self,x):\n    if self['conditions'].get('IGNORE_ATTACKS'):\n        return\n    self.register_act_taken()\n    if self['act_taken']['type']=='Poison':\n        x=int(x*0.5)\n    self.state['hp']=max(0,self['hp']-x)\n    if self['hp']==0:\n        self.state['status']='FNT'\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Infernape\",\n  \"types\": [\n    \"Fire\",\n    \"Fighting\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Iron Fist\": \"This Pokemon's punch-based attacks have 1.3x power.\"\n  },\n  \"moves\": {\n    \"Fire Punch\": {\n      \"power\": 75,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Fire\",\n      \"effect\": \"Has a 10% chance to burn the target.\",\n      \"property\": [\n        \"contact\",\n        \"punch\"\n      ]\n    },\n    \"Stone Edge\": {\n      \"power\": 100,\n      \"accuracy\": 80,\n      \"category\": \"Physical\",\n      \"type\": \"Rock\",\n      \"effect\": \"Has a higher chance for a critical hit.\"\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass Infernape(PokemonBase):\n    _species='Infernape'\n    _types=['Fire','Fighting']\n    _gender='Male'\n    _ability=['Iron Fist']\n    _move_1=('Fire Punch',75,100,'Physical','Fire',0,['contact','punch'])\n    _move_2=('Stone Edge',100,80,'Physical','Rock',0,[])\n    def __init__(self):\n        super().__init__()\n    \n    def get_power(self):        \n        power=self['act']['power']\n        if 'punch' in self['act']['property']:\n            power*=1.3\n        return int(power*self.get_weather_power_mult())\n\n    def move_1(self): # Fire Punch\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n\n    def move_2(self): # Stone Edge\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Infernape\",\n  \"types\": [\n    \"Fire\",\n    \"Fighting\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Iron Fist\": \"This Pokemon's punch-based attacks have 1.3x power.\"\n  },\n  \"moves\": {\n    \"Fire Punch\": {\n      \"power\": 75,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Fire\",\n      \"effect\": \"Has a 10% chance to burn the target.\",\n      \"property\": [\n        \"contact\",\n        \"punch\"\n      ]\n    },\n    \"Stone Edge\": {\n      \"power\": 100,\n      \"accuracy\": 80,\n      \"category\": \"Physical\",\n      \"type\": \"Rock\",\n      \"effect\": \"Has a higher chance for a critical hit.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Infernape(PokemonBase):\n    _species='Infernape'\n    _types=['Fire','Fighting']\n    _gender='Male'\n    _ability=['Iron Fist']\n    _move_1=('Fire Punch',75,100,'Physical','Fire',0,['contact','punch'])\n    _move_2=('Stone Edge',100,80,'Physical','Rock',0,[])\n    def __init__(self):\n        super().__init__()\n    \n    def get_power(self):        \n        power=self['act']['power']\n        if 'punch' in self['act']['property']:\n            power*=1.3\n        return int(power*self.get_weather_power_mult())\n\n    def move_1(self): # Fire Punch\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n\n    def move_2(self): # Stone Edge\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Thunder Punch\": {\n    \"power\": 75,\n    \"accuracy\": 100,\n    \"category\": \"Physical\",\n    \"type\": \"Electric\",\n    \"effect\": \"Has a 10% chance to paralyze the target.\",\n    \"property\": [\n      \"contact\",\n      \"punch\"\n    ]\n  }\n}\n```",
        "response": "```python\n@Increment(Infernape,'_move_3')\ndef value():\n    return ('Thunder Punch',75,100,'Physical','Electric',0,['contact','punch'])\n\n@Increment(Infernape)\ndef move_3(self): # Thunder Punch\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Infernape\",\n  \"types\": [\n    \"Fire\",\n    \"Fighting\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Iron Fist\": \"This Pokemon's punch-based attacks have 1.3x power.\"\n  },\n  \"moves\": {\n    \"Fire Punch\": {\n      \"power\": 75,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Fire\",\n      \"effect\": \"Has a 10% chance to burn the target.\",\n      \"property\": [\n        \"contact\",\n        \"punch\"\n      ]\n    },\n    \"Stone Edge\": {\n      \"power\": 100,\n      \"accuracy\": 80,\n      \"category\": \"Physical\",\n      \"type\": \"Rock\",\n      \"effect\": \"Has a higher chance for a critical hit.\"\n    },\n    \"Thunder Punch\": {\n      \"power\": 75,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Electric\",\n      \"effect\": \"Has a 10% chance to paralyze the target.\",\n      \"property\": [\n        \"contact\",\n        \"punch\"\n      ]\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Infernape(PokemonBase):\n    _species='Infernape'\n    _types=['Fire','Fighting']\n    _gender='Male'\n    _ability=['Iron Fist']\n    _move_1=('Fire Punch',75,100,'Physical','Fire',0,['contact','punch'])\n    _move_2=('Stone Edge',100,80,'Physical','Rock',0,[])\n    def __init__(self):\n        super().__init__()\n    \n    def get_power(self):        \n        power=self['act']['power']\n        if 'punch' in self['act']['property']:\n            power*=1.3\n        return int(power*self.get_weather_power_mult())\n\n    def move_1(self): # Fire Punch\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n\n    def move_2(self): # Stone Edge\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n\n@Increment(Infernape,'_move_3')\ndef value():\n    return ('Thunder Punch',75,100,'Physical','Electric',0,['contact','punch'])\n\n@Increment(Infernape)\ndef move_3(self): # Thunder Punch\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Earthquake\": {\n    \"power\": 100,\n    \"accuracy\": 100,\n    \"category\": \"Physical\",\n    \"type\": \"Ground\",\n    \"effect\": \"No additional effect.\"\n  }\n}\n```",
        "response": "```python\n@Increment(Infernape,'_move_4')\ndef value():\n    return ('Earthquake',100,100,'Physical','Ground',0,[])\n\n@Increment(Infernape)\ndef move_4(self): # Earthquake\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Infernape\",\n  \"types\": [\n    \"Fire\",\n    \"Fighting\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Iron Fist\": \"This Pokemon's punch-based attacks have 1.3x power.\"\n  },\n  \"moves\": {\n    \"Fire Punch\": {\n      \"power\": 75,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Fire\",\n      \"effect\": \"Has a 10% chance to burn the target.\",\n      \"property\": [\n        \"contact\",\n        \"punch\"\n      ]\n    },\n    \"Stone Edge\": {\n      \"power\": 100,\n      \"accuracy\": 80,\n      \"category\": \"Physical\",\n      \"type\": \"Rock\",\n      \"effect\": \"Has a higher chance for a critical hit.\"\n    },\n    \"Thunder Punch\": {\n      \"power\": 75,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Electric\",\n      \"effect\": \"Has a 10% chance to paralyze the target.\",\n      \"property\": [\n        \"contact\",\n        \"punch\"\n      ]\n    },\n    \"Earthquake\": {\n      \"power\": 100,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Ground\",\n      \"effect\": \"No additional effect.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Infernape(PokemonBase):\n    _species='Infernape'\n    _types=['Fire','Fighting']\n    _gender='Male'\n    _ability=['Iron Fist']\n    _move_1=('Fire Punch',75,100,'Physical','Fire',0,['contact','punch'])\n    _move_2=('Stone Edge',100,80,'Physical','Rock',0,[])\n    def __init__(self):\n        super().__init__()\n    \n    def get_power(self):        \n        power=self['act']['power']\n        if 'punch' in self['act']['property']:\n            power*=1.3\n        return int(power*self.get_weather_power_mult())\n\n    def move_1(self): # Fire Punch\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n\n    def move_2(self): # Stone Edge\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n\n@Increment(Infernape,'_move_3')\ndef value():\n    return ('Thunder Punch',75,100,'Physical','Electric',0,['contact','punch'])\n\n@Increment(Infernape)\ndef move_3(self): # Thunder Punch\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n\n@Increment(Infernape,'_move_4')\ndef value():\n    return ('Earthquake',100,100,'Physical','Ground',0,[])\n\n@Increment(Infernape)\ndef move_4(self): # Earthquake\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n```\n\nThis role is gonna learn a new ability:\n```json\n{\n  \"Sheer Force\": \"This Pokemon's attacks with secondary effects have 1.3x power; nullifies the secondary effects.\"\n}\n```",
        "response": "```python\n@Increment(Infernape,'_ability')\ndef value():\n    return ['Iron Fist','Sheer Force']\n\n@Increment(Infernape)\ndef get_power(self):        \n    power=self['act']['power']\n    if 'punch' in self['act']['property']:\n        power*=1.3\n    if self['act']['id'] in ['Fire Punch', 'Stone Edge', 'Thunder Punch', 'Ice Punch']:\n        power*=1.3\n    return int(power*self.get_weather_power_mult())\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Infernape\",\n  \"types\": [\n    \"Fire\",\n    \"Fighting\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Iron Fist\": \"This Pokemon's punch-based attacks have 1.3x power.\",\n    \"Sheer Force\": \"This Pokemon's attacks with secondary effects have 1.3x power; nullifies the secondary effects.\"\n  },\n  \"moves\": {\n    \"Fire Punch\": {\n      \"power\": 75,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Fire\",\n      \"effect\": \"Has a 10% chance to burn the target.\",\n      \"property\": [\n        \"contact\",\n        \"punch\"\n      ]\n    },\n    \"Stone Edge\": {\n      \"power\": 100,\n      \"accuracy\": 80,\n      \"category\": \"Physical\",\n      \"type\": \"Rock\",\n      \"effect\": \"Has a higher chance for a critical hit.\"\n    },\n    \"Thunder Punch\": {\n      \"power\": 75,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Electric\",\n      \"effect\": \"Has a 10% chance to paralyze the target.\",\n      \"property\": [\n        \"contact\",\n        \"punch\"\n      ]\n    },\n    \"Earthquake\": {\n      \"power\": 100,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Ground\",\n      \"effect\": \"No additional effect.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Infernape(PokemonBase):\n    _species='Infernape'\n    _types=['Fire','Fighting']\n    _gender='Male'\n    _ability=['Iron Fist']\n    _move_1=('Fire Punch',75,100,'Physical','Fire',0,['contact','punch'])\n    _move_2=('Stone Edge',100,80,'Physical','Rock',0,[])\n    def __init__(self):\n        super().__init__()\n    \n    def get_power(self):        \n        power=self['act']['power']\n        if 'punch' in self['act']['property']:\n            power*=1.3\n        return int(power*self.get_weather_power_mult())\n\n    def move_1(self): # Fire Punch\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n\n    def move_2(self): # Stone Edge\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n\n@Increment(Infernape,'_move_3')\ndef value():\n    return ('Thunder Punch',75,100,'Physical','Electric',0,['contact','punch'])\n\n@Increment(Infernape)\ndef move_3(self): # Thunder Punch\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n\n@Increment(Infernape,'_move_4')\ndef value():\n    return ('Earthquake',100,100,'Physical','Ground',0,[])\n\n@Increment(Infernape)\ndef move_4(self): # Earthquake\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n\n@Increment(Infernape,'_ability')\ndef value():\n    return ['Iron Fist','Sheer Force']\n\n@Increment(Infernape)\ndef get_power(self):        \n    power=self['act']['power']\n    if 'punch' in self['act']['property']:\n        power*=1.3\n    if self['act']['id'] in ['Fire Punch', 'Stone Edge', 'Thunder Punch', 'Ice Punch']:\n        power*=1.3\n    return int(power*self.get_weather_power_mult())\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Ice Punch\": {\n    \"power\": 75,\n    \"accuracy\": 100,\n    \"category\": \"Physical\",\n    \"type\": \"Ice\",\n    \"effect\": \"Has a 10% chance to freeze the target.\",\n    \"property\": [\n      \"contact\",\n      \"punch\"\n    ]\n  }\n}\n```",
        "response": "```python\n@Increment(Infernape,'_move_5')\ndef value():\n    return ('Ice Punch',75,100,'Physical','Ice',0,['contact','punch'])\n\n@Increment(Infernape)\ndef move_5(self): # Ice Punch\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Jirachi\",\n  \"types\": [\n    \"Steel\",\n    \"Psychic\"\n  ],\n  \"gender\": \"Neutral\",\n  \"ability\": {\n    \"Serene Grace\": \"This Pokemon's secondary effect chances are doubled.\"\n  },\n  \"moves\": {\n    \"Heart Swap\": {\n      \"power\": 80,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Psychic\",\n      \"effect\": \"Has a 20% chance to lower the target's Special Defense by 1 stage.\"\n    },\n    \"Iron Bash\": {\n      \"power\": 100,\n      \"accuracy\": 95,\n      \"category\": \"Physical\",\n      \"type\": \"Steel\",\n      \"effect\": \"Has a 30% chance to make the target flinch.\"\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\n\nclass Jirachi(PokemonBase):\n    _species='Jirachi'\n    _types=['Steel','Psychic']\n    _gender='Neutral'\n    _ability=['Serene Grace']\n    _move_1=('Heart Swap',80,100,'Special','Psychic',0,[])\n    _move_2=('Iron Bash',100,95,'Physical','Steel',0,[])\n    def __init__(self):\n        super().__init__()\n    \n    def move_1(self): # Heart Swap\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<40/100:\n                self.target.set_boost('spd',-1)\n    \n    def move_2(self): # Iron Bash\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<60/100:\n                self.target.set_condition('FLINCH',counter=0)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Jirachi\",\n  \"types\": [\n    \"Steel\",\n    \"Psychic\"\n  ],\n  \"gender\": \"Neutral\",\n  \"ability\": {\n    \"Serene Grace\": \"This Pokemon's secondary effect chances are doubled.\"\n  },\n  \"moves\": {\n    \"Heart Swap\": {\n      \"power\": 80,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Psychic\",\n      \"effect\": \"Has a 20% chance to lower the target's Special Defense by 1 stage.\"\n    },\n    \"Iron Bash\": {\n      \"power\": 100,\n      \"accuracy\": 95,\n      \"category\": \"Physical\",\n      \"type\": \"Steel\",\n      \"effect\": \"Has a 30% chance to make the target flinch.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\n\nclass Jirachi(PokemonBase):\n    _species='Jirachi'\n    _types=['Steel','Psychic']\n    _gender='Neutral'\n    _ability=['Serene Grace']\n    _move_1=('Heart Swap',80,100,'Special','Psychic',0,[])\n    _move_2=('Iron Bash',100,95,'Physical','Steel',0,[])\n    def __init__(self):\n        super().__init__()\n    \n    def move_1(self): # Heart Swap\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<40/100:\n                self.target.set_boost('spd',-1)\n    \n    def move_2(self): # Iron Bash\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<60/100:\n                self.target.set_condition('FLINCH',counter=0)\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Lunar Wish\": {\n    \"power\": 0,\n    \"accuracy\": 100000,\n    \"category\": \"Status\",\n    \"type\": \"Psychic\",\n    \"effect\": \"Heals the user by 50% of its maximum HP and removes all status conditions.\"\n  }\n}\n```",
        "response": "```python\n@Increment(Jirachi,'_move_3')\ndef value():\n    return ('Lunar Wish',0,100000,'Status','Psychic',0,[])\n\n@Increment(Jirachi)\ndef move_3(self): # Lunar Wish\n    self.restore(self['max_hp']//2,'heal')\n    self.state['status']=None\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Jirachi\",\n  \"types\": [\n    \"Steel\",\n    \"Psychic\"\n  ],\n  \"gender\": \"Neutral\",\n  \"ability\": {\n    \"Serene Grace\": \"This Pokemon's secondary effect chances are doubled.\"\n  },\n  \"moves\": {\n    \"Heart Swap\": {\n      \"power\": 80,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Psychic\",\n      \"effect\": \"Has a 20% chance to lower the target's Special Defense by 1 stage.\"\n    },\n    \"Iron Bash\": {\n      \"power\": 100,\n      \"accuracy\": 95,\n      \"category\": \"Physical\",\n      \"type\": \"Steel\",\n      \"effect\": \"Has a 30% chance to make the target flinch.\"\n    },\n    \"Lunar Wish\": {\n      \"power\": 0,\n      \"accuracy\": 100000,\n      \"category\": \"Status\",\n      \"type\": \"Psychic\",\n      \"effect\": \"Heals the user by 50% of its maximum HP and removes all status conditions.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\n\nclass Jirachi(PokemonBase):\n    _species='Jirachi'\n    _types=['Steel','Psychic']\n    _gender='Neutral'\n    _ability=['Serene Grace']\n    _move_1=('Heart Swap',80,100,'Special','Psychic',0,[])\n    _move_2=('Iron Bash',100,95,'Physical','Steel',0,[])\n    def __init__(self):\n        super().__init__()\n    \n    def move_1(self): # Heart Swap\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<40/100:\n                self.target.set_boost('spd',-1)\n    \n    def move_2(self): # Iron Bash\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<60/100:\n                self.target.set_condition('FLINCH',counter=0)\n\n@Increment(Jirachi,'_move_3')\ndef value():\n    return ('Lunar Wish',0,100000,'Status','Psychic',0,[])\n\n@Increment(Jirachi)\ndef move_3(self): # Lunar Wish\n    self.restore(self['max_hp']//2,'heal')\n    self.state['status']=None\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Meteor Strike\": {\n    \"power\": 120,\n    \"accuracy\": 85,\n    \"category\": \"Special\",\n    \"type\": \"Steel\",\n    \"effect\": \"Has a 30% chance to reduce the target's Speed by 1 stage.\"\n  }\n}\n```",
        "response": "```python\n@Increment(Jirachi,'_move_4')\ndef value():\n    return ('Meteor Strike',120,85,'Special','Steel',0,[])\n\n@Increment(Jirachi)\ndef move_4(self): # Meteor Strike\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint() and rnd()<60/100:\n            self.target.set_boost('spe',-1)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Jyuratodus\",\n  \"types\": [\n    \"Water\",\n    \"Ground\"\n  ],\n  \"gender\": \"Neutral\",\n  \"ability\": {\n    \"Mud Armor\": \"Reduces damage taken from physical attacks by 50% when HP is below 50%.\"\n  },\n  \"moves\": {\n    \"Sludge Spit\": {\n      \"power\": 70,\n      \"accuracy\": 95,\n      \"category\": \"Special\",\n      \"type\": \"Water\",\n      \"effect\": \"Traps the target for five turns. Causes damage to the target equal to 1/8 of its maximum HP at the end of each turn during effect.\"\n    },\n    \"Mud Roll\": {\n      \"power\": 80,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Ground\",\n      \"effect\": \"Increases the user's Defense by 1 stage.\"\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass Jyuratodus(PokemonBase):\n    _species='Jyuratodus'\n    _types=['Water','Ground']\n    _gender='Neutral'\n    _ability=['Mud Armor']\n    _move_1=('Sludge Spit',70,95,'Special','Water',0,[])\n    _move_2=('Mud Roll',80,100,'Physical','Ground',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def _take_damage_attack(self,x):\n        self.register_act_taken()\n        if self['act_taken']['category']=='Physical' and self['hp']<self['max_hp']//2:\n            x=int(x*0.5)\n        self.state['hp']=max(0,self['hp']-x)\n        if self['hp']==0:\n            self.state['status']='FNT'\n\n    def endturn(self):\n        if self.target['conditions'].get('TRAP'):\n            self.target.take_damage(self.target['max_hp']//8,'loss')\n            self.target['conditions']['TRAP']['counter']+=1\n            if self.target['conditions']['TRAP']['counter']==self.target['conditions']['TRAP']['max_count']:\n                del self.target['conditions']['TRAP']\n\n    def move_1(self): # Sludge Spit\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint():\n                self.target.set_condition('TRAP',counter=0,max_count=5)\n    \n    def move_2(self): # Mud Roll\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            self.set_boost('def',+1,'self')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Jyuratodus\",\n  \"types\": [\n    \"Water\",\n    \"Ground\"\n  ],\n  \"gender\": \"Neutral\",\n  \"ability\": {\n    \"Mud Armor\": \"Reduces damage taken from physical attacks by 50% when HP is below 50%.\"\n  },\n  \"moves\": {\n    \"Sludge Spit\": {\n      \"power\": 70,\n      \"accuracy\": 95,\n      \"category\": \"Special\",\n      \"type\": \"Water\",\n      \"effect\": \"Traps the target for five turns. Causes damage to the target equal to 1/8 of its maximum HP at the end of each turn during effect.\"\n    },\n    \"Mud Roll\": {\n      \"power\": 80,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Ground\",\n      \"effect\": \"Increases the user's Defense by 1 stage.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Jyuratodus(PokemonBase):\n    _species='Jyuratodus'\n    _types=['Water','Ground']\n    _gender='Neutral'\n    _ability=['Mud Armor']\n    _move_1=('Sludge Spit',70,95,'Special','Water',0,[])\n    _move_2=('Mud Roll',80,100,'Physical','Ground',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def _take_damage_attack(self,x):\n        self.register_act_taken()\n        if self['act_taken']['category']=='Physical' and self['hp']<self['max_hp']//2:\n            x=int(x*0.5)\n        self.state['hp']=max(0,self['hp']-x)\n        if self['hp']==0:\n            self.state['status']='FNT'\n\n    def endturn(self):\n        if self.target['conditions'].get('TRAP'):\n            self.target.take_damage(self.target['max_hp']//8,'loss')\n            self.target['conditions']['TRAP']['counter']+=1\n            if self.target['conditions']['TRAP']['counter']==self.target['conditions']['TRAP']['max_count']:\n                del self.target['conditions']['TRAP']\n\n    def move_1(self): # Sludge Spit\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint():\n                self.target.set_condition('TRAP',counter=0,max_count=5)\n    \n    def move_2(self): # Mud Roll\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            self.set_boost('def',+1,'self')\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Swamp Wave\": {\n    \"power\": 0,\n    \"accuracy\": 100000,\n    \"category\": \"Status\",\n    \"type\": \"Water\",\n    \"effect\": \"Reduces the speed of all non-Ground-type Pokemon by 2 stages and heals all Water-type Pokemon by 1/4 of their maximum HP.\"\n  }\n}\n```",
        "response": "```python\n@Increment(Jyuratodus,'_move_3')\ndef value():\n    return ('Swamp Wave',0,100000,'Status','Water',0,[])\n\n@Increment(Jyuratodus)\ndef move_3(self): # Swamp Wave\n    for t in [self,self.target]:\n        if not t.istype('Ground'):\n            t.set_boost('spe',-2)\n        if t.istype('Water'):\n            t.restore(t['max_hp']//4,'heal')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Jyuratodus\",\n  \"types\": [\n    \"Water\",\n    \"Ground\"\n  ],\n  \"gender\": \"Neutral\",\n  \"ability\": {\n    \"Mud Armor\": \"Reduces damage taken from physical attacks by 50% when HP is below 50%.\"\n  },\n  \"moves\": {\n    \"Sludge Spit\": {\n      \"power\": 70,\n      \"accuracy\": 95,\n      \"category\": \"Special\",\n      \"type\": \"Water\",\n      \"effect\": \"Traps the target for five turns. Causes damage to the target equal to 1/8 of its maximum HP at the end of each turn during effect.\"\n    },\n    \"Mud Roll\": {\n      \"power\": 80,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Ground\",\n      \"effect\": \"Increases the user's Defense by 1 stage.\"\n    },\n    \"Swamp Wave\": {\n      \"power\": 0,\n      \"accuracy\": 100000,\n      \"category\": \"Status\",\n      \"type\": \"Water\",\n      \"effect\": \"Reduces the speed of all non-Ground-type Pokemon by 2 stages and heals all Water-type Pokemon by 1/4 of their maximum HP.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Jyuratodus(PokemonBase):\n    _species='Jyuratodus'\n    _types=['Water','Ground']\n    _gender='Neutral'\n    _ability=['Mud Armor']\n    _move_1=('Sludge Spit',70,95,'Special','Water',0,[])\n    _move_2=('Mud Roll',80,100,'Physical','Ground',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def _take_damage_attack(self,x):\n        self.register_act_taken()\n        if self['act_taken']['category']=='Physical' and self['hp']<self['max_hp']//2:\n            x=int(x*0.5)\n        self.state['hp']=max(0,self['hp']-x)\n        if self['hp']==0:\n            self.state['status']='FNT'\n\n    def endturn(self):\n        if self.target['conditions'].get('TRAP'):\n            self.target.take_damage(self.target['max_hp']//8,'loss')\n            self.target['conditions']['TRAP']['counter']+=1\n            if self.target['conditions']['TRAP']['counter']==self.target['conditions']['TRAP']['max_count']:\n                del self.target['conditions']['TRAP']\n\n    def move_1(self): # Sludge Spit\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint():\n                self.target.set_condition('TRAP',counter=0,max_count=5)\n    \n    def move_2(self): # Mud Roll\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            self.set_boost('def',+1,'self')\n\n@Increment(Jyuratodus,'_move_3')\ndef value():\n    return ('Swamp Wave',0,100000,'Status','Water',0,[])\n\n@Increment(Jyuratodus)\ndef move_3(self): # Swamp Wave\n    for t in [self,self.target]:\n        if not t.istype('Ground'):\n            t.set_boost('spe',-2)\n        if t.istype('Water'):\n            t.restore(t['max_hp']//4,'heal')\n```\n\nThis role is gonna learn a new ability:\n```json\n{\n  \"Sludge Trap\": \"Lower the speed of the attacker by 1 stage, when hit by a Water-type move.\"\n}\n```",
        "response": "```python\n@Increment(Jyuratodus,'_ability')\ndef value():\n    return ['Mud Armor','Sludge Trap']\n\n@Increment(Jyuratodus)\ndef _take_damage_attack(self,x):\n    self.register_act_taken()\n    if self['act_taken']['category']=='Physical' and self['hp']<self['max_hp']//2:\n        x=int(x*0.5)\n    self.state['hp']=max(0,self['hp']-x)\n    if self['act_taken']['type']=='Water':\n        self.target.set_boost('spe',-1)\n    if self['hp']==0:\n        self.state['status']='FNT'\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Kangaskhan\",\n  \"types\": [\n    \"Normal\"\n  ],\n  \"gender\": \"Female\",\n  \"ability\": {\n    \"Scrappy\": \"Fighting, Normal moves hit Ghost.\"\n  },\n  \"moves\": {\n    \"Double-Edge\": {\n      \"power\": 120,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Normal\",\n      \"effect\": \"If the target lost HP, the user takes recoil damage equal to 33% the HP lost by the target.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Fire Punch\": {\n      \"power\": 75,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Fire\",\n      \"effect\": \"Has a 10% chance to burn the target.\",\n      \"property\": [\n        \"contact\"\n      ]\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass Kangaskhan(PokemonBase):\n    _species='Kangaskhan'\n    _types=['Normal']\n    _gender='Female'\n    _ability=['Scrappy']\n    _move_1=('Double-Edge',120,100,'Physical','Normal',0,['contact'])\n    _move_2=('Fire Punch',75,100,'Physical','Fire',0,['contact'])\n    def __init__(self):\n        super().__init__()\n\n    def get_type_effect(self):\n        move_type=self['act']['type']\n        target_types=self.target['types']\n        effect=1\n        for tt in target_types:\n            if tt=='Ghost' and (self['act']['type']=='Normal' or self['act']['type']=='Fighting'):\n                effect*=1\n            else:\n                effect*=TYPEEFFECTIVENESS[move_type][tt]\n        return effect\n\n    def move_1(self): # Double-Edge\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            self.take_damage(int(0.33*damage),'recoil')\n\n    def move_2(self): # Fire Punch\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<10/100: self.target.set_status('BRN')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Kangaskhan\",\n  \"types\": [\n    \"Normal\"\n  ],\n  \"gender\": \"Female\",\n  \"ability\": {\n    \"Scrappy\": \"Fighting, Normal moves hit Ghost.\"\n  },\n  \"moves\": {\n    \"Double-Edge\": {\n      \"power\": 120,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Normal\",\n      \"effect\": \"If the target lost HP, the user takes recoil damage equal to 33% the HP lost by the target.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Fire Punch\": {\n      \"power\": 75,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Fire\",\n      \"effect\": \"Has a 10% chance to burn the target.\",\n      \"property\": [\n        \"contact\"\n      ]\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Kangaskhan(PokemonBase):\n    _species='Kangaskhan'\n    _types=['Normal']\n    _gender='Female'\n    _ability=['Scrappy']\n    _move_1=('Double-Edge',120,100,'Physical','Normal',0,['contact'])\n    _move_2=('Fire Punch',75,100,'Physical','Fire',0,['contact'])\n    def __init__(self):\n        super().__init__()\n\n    def get_type_effect(self):\n        move_type=self['act']['type']\n        target_types=self.target['types']\n        effect=1\n        for tt in target_types:\n            if tt=='Ghost' and (self['act']['type']=='Normal' or self['act']['type']=='Fighting'):\n                effect*=1\n            else:\n                effect*=TYPEEFFECTIVENESS[move_type][tt]\n        return effect\n\n    def move_1(self): # Double-Edge\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            self.take_damage(int(0.33*damage),'recoil')\n\n    def move_2(self): # Fire Punch\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<10/100: self.target.set_status('BRN')\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Earthquake\": {\n    \"power\": 100,\n    \"accuracy\": 100,\n    \"category\": \"Physical\",\n    \"type\": \"Ground\",\n    \"effect\": \"Damage doubles if the target is using Dig.\"\n  }\n}\n```",
        "response": "```python\n@Increment(Kangaskhan,'_move_3')\ndef value():\n    return ('Earthquake',100,100,'Physical','Ground',0,[])\n\n@Increment(Kangaskhan)\ndef move_3(self): # Earthquake\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Kangaskhan\",\n  \"types\": [\n    \"Normal\"\n  ],\n  \"gender\": \"Female\",\n  \"ability\": {\n    \"Scrappy\": \"Fighting, Normal moves hit Ghost.\"\n  },\n  \"moves\": {\n    \"Double-Edge\": {\n      \"power\": 120,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Normal\",\n      \"effect\": \"If the target lost HP, the user takes recoil damage equal to 33% the HP lost by the target.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Fire Punch\": {\n      \"power\": 75,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Fire\",\n      \"effect\": \"Has a 10% chance to burn the target.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Earthquake\": {\n      \"power\": 100,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Ground\",\n      \"effect\": \"Damage doubles if the target is using Dig.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Kangaskhan(PokemonBase):\n    _species='Kangaskhan'\n    _types=['Normal']\n    _gender='Female'\n    _ability=['Scrappy']\n    _move_1=('Double-Edge',120,100,'Physical','Normal',0,['contact'])\n    _move_2=('Fire Punch',75,100,'Physical','Fire',0,['contact'])\n    def __init__(self):\n        super().__init__()\n\n    def get_type_effect(self):\n        move_type=self['act']['type']\n        target_types=self.target['types']\n        effect=1\n        for tt in target_types:\n            if tt=='Ghost' and (self['act']['type']=='Normal' or self['act']['type']=='Fighting'):\n                effect*=1\n            else:\n                effect*=TYPEEFFECTIVENESS[move_type][tt]\n        return effect\n\n    def move_1(self): # Double-Edge\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            self.take_damage(int(0.33*damage),'recoil')\n\n    def move_2(self): # Fire Punch\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<10/100: self.target.set_status('BRN')\n\n@Increment(Kangaskhan,'_move_3')\ndef value():\n    return ('Earthquake',100,100,'Physical','Ground',0,[])\n\n@Increment(Kangaskhan)\ndef move_3(self): # Earthquake\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Rock Slide\": {\n    \"power\": 75,\n    \"accuracy\": 90,\n    \"category\": \"Physical\",\n    \"type\": \"Rock\",\n    \"effect\": \"Has a 30% chance to make the target flinch.\"\n  }\n}\n```",
        "response": "```python\n@Increment(Kangaskhan,'_move_4')\ndef value():\n    return ('Rock Slide',75,90,'Physical','Rock',0,[])\n\n@Increment(Kangaskhan)\ndef move_4(self): # Rock Slide\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint() and rnd()<30/100:\n            self.target.set_condition('FLINCH',counter=0)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Kangaskhan\",\n  \"types\": [\n    \"Normal\"\n  ],\n  \"gender\": \"Female\",\n  \"ability\": {\n    \"Scrappy\": \"Fighting, Normal moves hit Ghost.\"\n  },\n  \"moves\": {\n    \"Double-Edge\": {\n      \"power\": 120,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Normal\",\n      \"effect\": \"If the target lost HP, the user takes recoil damage equal to 33% the HP lost by the target.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Fire Punch\": {\n      \"power\": 75,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Fire\",\n      \"effect\": \"Has a 10% chance to burn the target.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Earthquake\": {\n      \"power\": 100,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Ground\",\n      \"effect\": \"Damage doubles if the target is using Dig.\"\n    },\n    \"Rock Slide\": {\n      \"power\": 75,\n      \"accuracy\": 90,\n      \"category\": \"Physical\",\n      \"type\": \"Rock\",\n      \"effect\": \"Has a 30% chance to make the target flinch.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Kangaskhan(PokemonBase):\n    _species='Kangaskhan'\n    _types=['Normal']\n    _gender='Female'\n    _ability=['Scrappy']\n    _move_1=('Double-Edge',120,100,'Physical','Normal',0,['contact'])\n    _move_2=('Fire Punch',75,100,'Physical','Fire',0,['contact'])\n    def __init__(self):\n        super().__init__()\n\n    def get_type_effect(self):\n        move_type=self['act']['type']\n        target_types=self.target['types']\n        effect=1\n        for tt in target_types:\n            if tt=='Ghost' and (self['act']['type']=='Normal' or self['act']['type']=='Fighting'):\n                effect*=1\n            else:\n                effect*=TYPEEFFECTIVENESS[move_type][tt]\n        return effect\n\n    def move_1(self): # Double-Edge\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            self.take_damage(int(0.33*damage),'recoil')\n\n    def move_2(self): # Fire Punch\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<10/100: self.target.set_status('BRN')\n\n@Increment(Kangaskhan,'_move_3')\ndef value():\n    return ('Earthquake',100,100,'Physical','Ground',0,[])\n\n@Increment(Kangaskhan)\ndef move_3(self): # Earthquake\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n\n@Increment(Kangaskhan,'_move_4')\ndef value():\n    return ('Rock Slide',75,90,'Physical','Rock',0,[])\n\n@Increment(Kangaskhan)\ndef move_4(self): # Rock Slide\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint() and rnd()<30/100:\n            self.target.set_condition('FLINCH',counter=0)\n```\n\nThis role is gonna learn a new ability:\n```json\n{\n  \"Parental Bond\": \"This Pokemon's damaging moves hit twice. The second hit has its damage quartered.\"\n}\n```",
        "response": "```python\n@Increment(Kangaskhan,'_ability')\ndef value():\n    return ['Scrappy','Parental Bond']\n\n@Increment(Kangaskhan)\ndef move_1(self): # Double-Edge\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        self.take_damage(int(0.33*damage),'recoil')\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']//4\n        self.target.take_damage(damage)\n        self.take_damage(int(0.33*damage),'recoil')\n\n@Increment(Kangaskhan)\ndef move_2(self): # Fire Punch\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint() and rnd()<10/100: self.target.set_status('BRN')\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']//4\n        self.target.take_damage(damage)\n        if not self.target.isfaint() and rnd()<10/100: self.target.set_status('BRN')\n\n@Increment(Kangaskhan)\ndef move_3(self): # Earthquake\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']//4\n        self.target.take_damage(damage)\n\n@Increment(Kangaskhan)\ndef move_4(self): # Rock Slide\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint() and rnd()<30/100:\n            self.target.set_condition('FLINCH',counter=0)\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']//4\n        self.target.take_damage(damage)\n        if not self.target.isfaint() and rnd()<30/100:\n            self.target.set_condition('FLINCH',counter=0)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Kangaskhan\",\n  \"types\": [\n    \"Normal\"\n  ],\n  \"gender\": \"Female\",\n  \"ability\": {\n    \"Scrappy\": \"Fighting, Normal moves hit Ghost.\",\n    \"Parental Bond\": \"This Pokemon's damaging moves hit twice. The second hit has its damage quartered.\"\n  },\n  \"moves\": {\n    \"Double-Edge\": {\n      \"power\": 120,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Normal\",\n      \"effect\": \"If the target lost HP, the user takes recoil damage equal to 33% the HP lost by the target.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Fire Punch\": {\n      \"power\": 75,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Fire\",\n      \"effect\": \"Has a 10% chance to burn the target.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Earthquake\": {\n      \"power\": 100,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Ground\",\n      \"effect\": \"Damage doubles if the target is using Dig.\"\n    },\n    \"Rock Slide\": {\n      \"power\": 75,\n      \"accuracy\": 90,\n      \"category\": \"Physical\",\n      \"type\": \"Rock\",\n      \"effect\": \"Has a 30% chance to make the target flinch.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Kangaskhan(PokemonBase):\n    _species='Kangaskhan'\n    _types=['Normal']\n    _gender='Female'\n    _ability=['Scrappy']\n    _move_1=('Double-Edge',120,100,'Physical','Normal',0,['contact'])\n    _move_2=('Fire Punch',75,100,'Physical','Fire',0,['contact'])\n    def __init__(self):\n        super().__init__()\n\n    def get_type_effect(self):\n        move_type=self['act']['type']\n        target_types=self.target['types']\n        effect=1\n        for tt in target_types:\n            if tt=='Ghost' and (self['act']['type']=='Normal' or self['act']['type']=='Fighting'):\n                effect*=1\n            else:\n                effect*=TYPEEFFECTIVENESS[move_type][tt]\n        return effect\n\n    def move_1(self): # Double-Edge\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            self.take_damage(int(0.33*damage),'recoil')\n\n    def move_2(self): # Fire Punch\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<10/100: self.target.set_status('BRN')\n\n@Increment(Kangaskhan,'_move_3')\ndef value():\n    return ('Earthquake',100,100,'Physical','Ground',0,[])\n\n@Increment(Kangaskhan)\ndef move_3(self): # Earthquake\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n\n@Increment(Kangaskhan,'_move_4')\ndef value():\n    return ('Rock Slide',75,90,'Physical','Rock',0,[])\n\n@Increment(Kangaskhan)\ndef move_4(self): # Rock Slide\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint() and rnd()<30/100:\n            self.target.set_condition('FLINCH',counter=0)\n\n@Increment(Kangaskhan,'_ability')\ndef value():\n    return ['Scrappy','Parental Bond']\n\n@Increment(Kangaskhan)\ndef move_1(self): # Double-Edge\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        self.take_damage(int(0.33*damage),'recoil')\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']//4\n        self.target.take_damage(damage)\n        self.take_damage(int(0.33*damage),'recoil')\n\n@Increment(Kangaskhan)\ndef move_2(self): # Fire Punch\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint() and rnd()<10/100: self.target.set_status('BRN')\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']//4\n        self.target.take_damage(damage)\n        if not self.target.isfaint() and rnd()<10/100: self.target.set_status('BRN')\n\n@Increment(Kangaskhan)\ndef move_3(self): # Earthquake\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']//4\n        self.target.take_damage(damage)\n\n@Increment(Kangaskhan)\ndef move_4(self): # Rock Slide\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint() and rnd()<30/100:\n            self.target.set_condition('FLINCH',counter=0)\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']//4\n        self.target.take_damage(damage)\n        if not self.target.isfaint() and rnd()<30/100:\n            self.target.set_condition('FLINCH',counter=0)\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Power-Up Punch\": {\n    \"power\": 40,\n    \"accuracy\": 100,\n    \"category\": \"Physical\",\n    \"type\": \"Fighting\",\n    \"effect\": \"Has a 100% chance to raise the user's Attack by 1 stage.\",\n    \"property\": [\n      \"contact\"\n    ]\n  }\n}\n```",
        "response": "```python\n@Increment(Kangaskhan,'_move_5')\ndef value():\n    return ('Power-Up Punch',40,100,'Physical','Fighting',0,['contact'])\n\n@Increment(Kangaskhan)\ndef move_5(self): # Power-Up Punch\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        self.set_boost('atk',1,'self')\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']//4\n        self.target.take_damage(damage)\n        self.set_boost('atk',1,'self')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Kangaskhan\",\n  \"types\": [\n    \"Normal\"\n  ],\n  \"gender\": \"Female\",\n  \"ability\": {\n    \"Inner Focus\": \"This Pokemon will not flinch.\"\n  },\n  \"moves\": {\n    \"Comet Punch\": {\n      \"power\": 18,\n      \"accuracy\": 85,\n      \"category\": \"Physical\",\n      \"type\": \"Normal\",\n      \"effect\": \"Hits 3 times in one turn.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Brick Break\": {\n      \"power\": 75,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Fighting\",\n      \"effect\": \"The effects of Reflect and Light Screen end for the target's side of the field before damage is calculated.\",\n      \"property\": [\n        \"contact\"\n      ]\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass Kangaskhan(PokemonBase):\n    _species='Kangaskhan'\n    _types=['Normal']\n    _gender='Female'\n    _ability=['Inner Focus']\n    _move_1=('Comet Punch',18,85,'Physical','Normal',0,['contact'])\n    _move_2=('Brick Break',75,100,'Physical','Fighting',0,['contact'])\n    def __init__(self):\n        super().__init__()\n\n    def set_condition(self,x,**kwargs):\n        if x=='FLINCH': return\n        if not self['conditions'].get(x):\n            self.state['conditions'].update({x: kwargs})\n\n    def move_1(self): # Comet Punch\n        hit=True; i=0\n        while hit and i<3:\n            damage_ret=self.get_damage()\n            if damage_ret['miss']: break\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            i+=1; hit=False if self.target.isfaint() else True\n\n    def move_2(self): # Brick Break\n        if self.target['side_conditions'].get('REFLECT'):\n            del self.target['side_conditions']['REFLECT']\n        if self.target['side_conditions'].get('LIGHT_SCREEN'):\n            del self.target['side_conditions']['LIGHT_SCREEN']\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Kangaskhan\",\n  \"types\": [\n    \"Normal\"\n  ],\n  \"gender\": \"Female\",\n  \"ability\": {\n    \"Inner Focus\": \"This Pokemon will not flinch.\"\n  },\n  \"moves\": {\n    \"Comet Punch\": {\n      \"power\": 18,\n      \"accuracy\": 85,\n      \"category\": \"Physical\",\n      \"type\": \"Normal\",\n      \"effect\": \"Hits 3 times in one turn.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Brick Break\": {\n      \"power\": 75,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Fighting\",\n      \"effect\": \"The effects of Reflect and Light Screen end for the target's side of the field before damage is calculated.\",\n      \"property\": [\n        \"contact\"\n      ]\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Kangaskhan(PokemonBase):\n    _species='Kangaskhan'\n    _types=['Normal']\n    _gender='Female'\n    _ability=['Inner Focus']\n    _move_1=('Comet Punch',18,85,'Physical','Normal',0,['contact'])\n    _move_2=('Brick Break',75,100,'Physical','Fighting',0,['contact'])\n    def __init__(self):\n        super().__init__()\n\n    def set_condition(self,x,**kwargs):\n        if x=='FLINCH': return\n        if not self['conditions'].get(x):\n            self.state['conditions'].update({x: kwargs})\n\n    def move_1(self): # Comet Punch\n        hit=True; i=0\n        while hit and i<3:\n            damage_ret=self.get_damage()\n            if damage_ret['miss']: break\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            i+=1; hit=False if self.target.isfaint() else True\n\n    def move_2(self): # Brick Break\n        if self.target['side_conditions'].get('REFLECT'):\n            del self.target['side_conditions']['REFLECT']\n        if self.target['side_conditions'].get('LIGHT_SCREEN'):\n            del self.target['side_conditions']['LIGHT_SCREEN']\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Crunch\": {\n    \"power\": 80,\n    \"accuracy\": 100,\n    \"category\": \"Physical\",\n    \"type\": \"Dark\",\n    \"effect\": \"Has a 20% chance to lower the target's Defense by 1 stage.\",\n    \"property\": [\n      \"contact\"\n    ]\n  }\n}\n```",
        "response": "```python\n@Increment(Kangaskhan,'_move_3')\ndef value():\n    return ('Crunch',80,100,'Physical','Dark',0,['contact'])\n\n@Increment(Kangaskhan)\ndef move_3(self): # Crunch\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint() and rnd()<20/100:\n            self.target.set_boost('def',-1)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Kangaskhan\",\n  \"types\": [\n    \"Normal\"\n  ],\n  \"gender\": \"Female\",\n  \"ability\": {\n    \"Inner Focus\": \"This Pokemon will not flinch.\"\n  },\n  \"moves\": {\n    \"Comet Punch\": {\n      \"power\": 18,\n      \"accuracy\": 85,\n      \"category\": \"Physical\",\n      \"type\": \"Normal\",\n      \"effect\": \"Hits 3 times in one turn.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Brick Break\": {\n      \"power\": 75,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Fighting\",\n      \"effect\": \"The effects of Reflect and Light Screen end for the target's side of the field before damage is calculated.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Crunch\": {\n      \"power\": 80,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Dark\",\n      \"effect\": \"Has a 20% chance to lower the target's Defense by 1 stage.\",\n      \"property\": [\n        \"contact\"\n      ]\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Kangaskhan(PokemonBase):\n    _species='Kangaskhan'\n    _types=['Normal']\n    _gender='Female'\n    _ability=['Inner Focus']\n    _move_1=('Comet Punch',18,85,'Physical','Normal',0,['contact'])\n    _move_2=('Brick Break',75,100,'Physical','Fighting',0,['contact'])\n    def __init__(self):\n        super().__init__()\n\n    def set_condition(self,x,**kwargs):\n        if x=='FLINCH': return\n        if not self['conditions'].get(x):\n            self.state['conditions'].update({x: kwargs})\n\n    def move_1(self): # Comet Punch\n        hit=True; i=0\n        while hit and i<3:\n            damage_ret=self.get_damage()\n            if damage_ret['miss']: break\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            i+=1; hit=False if self.target.isfaint() else True\n\n    def move_2(self): # Brick Break\n        if self.target['side_conditions'].get('REFLECT'):\n            del self.target['side_conditions']['REFLECT']\n        if self.target['side_conditions'].get('LIGHT_SCREEN'):\n            del self.target['side_conditions']['LIGHT_SCREEN']\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n\n@Increment(Kangaskhan,'_move_3')\ndef value():\n    return ('Crunch',80,100,'Physical','Dark',0,['contact'])\n\n@Increment(Kangaskhan)\ndef move_3(self): # Crunch\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint() and rnd()<20/100:\n            self.target.set_boost('def',-1)\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Dizzy Punch\": {\n    \"power\": 70,\n    \"accuracy\": 100,\n    \"category\": \"Physical\",\n    \"type\": \"Normal\",\n    \"effect\": \"Has a 20% chance to confuse the target.\",\n    \"property\": [\n      \"contact\"\n    ]\n  }\n}\n```",
        "response": "```python\n@Increment(Kangaskhan,'_move_4')\ndef value():\n    return ('Dizzy Punch',70,100,'Physical','Normal',0,['contact'])\n\n@Increment(Kangaskhan)\ndef move_4(self): # Dizzy Punch\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage) \n        if not self.target.isfaint() and rnd()<20/100:\n            self.target.set_boost('spa',-1)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Kecleon\",\n  \"types\": [\n    \"Normal\"\n  ],\n  \"gender\": \"Neutral\",\n  \"ability\": {\n    \"Color Change\": \"The type of this Pokemon changes to the type of a move it is hit by.\"\n  },\n  \"moves\": {\n    \"Liquidation\": {\n      \"power\": 85,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Water\",\n      \"property\": [\n        \"contact\"\n      ],\n      \"effect\": \"Has a 20% chance to lower the target's Defense by 1 stage.\"\n    },\n    \"Lick\": {\n      \"power\": 30,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Ghost\",\n      \"property\": [\n        \"contact\"\n      ],\n      \"effect\": \"Has a 30% chance to paralyze the target.\"\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass Kecleon(PokemonBase):\n    _species='Kecleon'\n    _types=['Normal']\n    _gender='Neutral'\n    _ability=['Color Change']\n    _move_1=('Liquidation',85,100,'Physical','Water',0,['contact'])\n    _move_2=('Lick',30,100,'Physical','Ghost',0,['contact'])\n    def __init__(self):\n        super().__init__()\n\n    def _take_damage_attack(self,x):\n        self.register_act_taken()\n        self.state['hp']=max(0,self['hp']-x)\n        if self['hp']==0:\n            self.state['status']='FNT'\n            return\n        self.state['types']=[self['act_taken']['type']]\n    \n    def move_1(self): # Liquidation\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            self.set_boost('def',-1)\n\n    def move_2(self): # Lick\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100:\n                self.target.set_status('PAR')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Kecleon\",\n  \"types\": [\n    \"Normal\"\n  ],\n  \"gender\": \"Neutral\",\n  \"ability\": {\n    \"Color Change\": \"The type of this Pokemon changes to the type of a move it is hit by.\"\n  },\n  \"moves\": {\n    \"Liquidation\": {\n      \"power\": 85,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Water\",\n      \"property\": [\n        \"contact\"\n      ],\n      \"effect\": \"Has a 20% chance to lower the target's Defense by 1 stage.\"\n    },\n    \"Lick\": {\n      \"power\": 30,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Ghost\",\n      \"property\": [\n        \"contact\"\n      ],\n      \"effect\": \"Has a 30% chance to paralyze the target.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Kecleon(PokemonBase):\n    _species='Kecleon'\n    _types=['Normal']\n    _gender='Neutral'\n    _ability=['Color Change']\n    _move_1=('Liquidation',85,100,'Physical','Water',0,['contact'])\n    _move_2=('Lick',30,100,'Physical','Ghost',0,['contact'])\n    def __init__(self):\n        super().__init__()\n\n    def _take_damage_attack(self,x):\n        self.register_act_taken()\n        self.state['hp']=max(0,self['hp']-x)\n        if self['hp']==0:\n            self.state['status']='FNT'\n            return\n        self.state['types']=[self['act_taken']['type']]\n    \n    def move_1(self): # Liquidation\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            self.set_boost('def',-1)\n\n    def move_2(self): # Lick\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100:\n                self.target.set_status('PAR')\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Dizzy Punch\": {\n    \"power\": 70,\n    \"accuracy\": 100,\n    \"category\": \"Physical\",\n    \"type\": \"Normal\",\n    \"property\": [\n      \"contact\"\n    ],\n    \"effect\": \"Has a 20% chance to confuse the target.\"\n  }\n}\n```",
        "response": "```python\n@Increment(Kecleon,'_move_3')\ndef value():\n    return ('Dizzy Punch',70,100,'Physical','Normal',0,['contact'])\n\n@Increment(Kecleon)\ndef move_3(self): # Dizzy Punch\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint() and rnd()<20/100:\n            self.target.set_condition('CONFUSION',counter=0)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Kirin\",\n  \"types\": [\n    \"Electric\",\n    \"Fairy\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Electric Surge\": \"Summons Electric Terrain when the Pokemon enters the battle, which lasts for 5 turns.\"\n  },\n  \"moves\": {\n    \"Thunder\": {\n      \"power\": 110,\n      \"accuracy\": 70,\n      \"category\": \"Special\",\n      \"type\": \"Electric\",\n      \"effect\": \"Has a 30% chance to paralyze the target. If the weather is Rain Dance, this move does not check accuracy. If the weather is Sunny Day, this move's accuracy is 50%.\"\n    },\n    \"Parabolic Charge\": {\n      \"power\": 65,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"pp\": 20,\n      \"priority\": 0,\n      \"type\": \"Electric\",\n      \"effect\": \"The user recovers 1/2 the HP lost by the target.\"\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass Kirin(PokemonBase):\n    _species='Kirin'\n    _types=['Electric','Fairy']\n    _gender='Male'\n    _ability=['Electric Surge']\n    _move_1=('Thunder',110,70,'Special','Electric',0,[])\n    _move_2=('Parabolic Charge',65,100,'Special','Electric',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def onswitch(self):\n        self.set_env('ELECTRIC_TERRAIN',max_count=5)\n\n    def move_1(self): # Thunder\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100: self.target.set_status('PAR')\n    \n    def move_2(self): # Parabolic Charge\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            self.restore(int(1/2*damage),'drain')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Kirin\",\n  \"types\": [\n    \"Electric\",\n    \"Fairy\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Electric Surge\": \"Summons Electric Terrain when the Pokemon enters the battle, which lasts for 5 turns.\"\n  },\n  \"moves\": {\n    \"Thunder\": {\n      \"power\": 110,\n      \"accuracy\": 70,\n      \"category\": \"Special\",\n      \"type\": \"Electric\",\n      \"effect\": \"Has a 30% chance to paralyze the target. If the weather is Rain Dance, this move does not check accuracy. If the weather is Sunny Day, this move's accuracy is 50%.\"\n    },\n    \"Parabolic Charge\": {\n      \"power\": 65,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"pp\": 20,\n      \"priority\": 0,\n      \"type\": \"Electric\",\n      \"effect\": \"The user recovers 1/2 the HP lost by the target.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Kirin(PokemonBase):\n    _species='Kirin'\n    _types=['Electric','Fairy']\n    _gender='Male'\n    _ability=['Electric Surge']\n    _move_1=('Thunder',110,70,'Special','Electric',0,[])\n    _move_2=('Parabolic Charge',65,100,'Special','Electric',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def onswitch(self):\n        self.set_env('ELECTRIC_TERRAIN',max_count=5)\n\n    def move_1(self): # Thunder\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100: self.target.set_status('PAR')\n    \n    def move_2(self): # Parabolic Charge\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            self.restore(int(1/2*damage),'drain')\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Deflecting Aura\": {\n    \"power\": 0,\n    \"accuracy\": 100000,\n    \"category\": \"Status\",\n    \"type\": \"Fairy\",\n    \"effect\": \"Summons Deflecting Aura for 3 turns. At each end of the turn during Deflecting Aura, the user's defense and special defense is increased by 1 stage.\"\n  }\n}\n```",
        "response": "```python\n@Increment(Kirin,'_move_3')\ndef value():\n    return ('Deflecting Aura',0,100000,'Status','Fairy',0,[])\n\n@Increment(Kirin)\ndef move_3(self): # Deflecting Aura\n    self.set_side_condition('DEFLECTING_AURA',counter=0)\n\n@Increment(Kirin)\ndef endturn(self):\n    if self['side_conditions'].get('DEFLECTING_AURA'):\n        self.set_boost('def',1,'self')\n        self.set_boost('spd',1,'self')\n        self['side_conditions']['DEFLECTING_AURA']['counter']+=1\n        if self['side_conditions']['DEFLECTING_AURA']['counter']==3:\n            del self['side_conditions']['DEFLECTING_AURA']\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Kirin\",\n  \"types\": [\n    \"Electric\",\n    \"Fairy\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Electric Surge\": \"Summons Electric Terrain when the Pokemon enters the battle, which lasts for 5 turns.\"\n  },\n  \"moves\": {\n    \"Thunder\": {\n      \"power\": 110,\n      \"accuracy\": 70,\n      \"category\": \"Special\",\n      \"type\": \"Electric\",\n      \"effect\": \"Has a 30% chance to paralyze the target. If the weather is Rain Dance, this move does not check accuracy. If the weather is Sunny Day, this move's accuracy is 50%.\"\n    },\n    \"Parabolic Charge\": {\n      \"power\": 65,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"pp\": 20,\n      \"priority\": 0,\n      \"type\": \"Electric\",\n      \"effect\": \"The user recovers 1/2 the HP lost by the target.\"\n    },\n    \"Deflecting Aura\": {\n      \"power\": 0,\n      \"accuracy\": 100000,\n      \"category\": \"Status\",\n      \"type\": \"Fairy\",\n      \"effect\": \"Summons Deflecting Aura for 3 turns. At each end of the turn during Deflecting Aura, the user's defense and special defense is increased by 1 stage.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Kirin(PokemonBase):\n    _species='Kirin'\n    _types=['Electric','Fairy']\n    _gender='Male'\n    _ability=['Electric Surge']\n    _move_1=('Thunder',110,70,'Special','Electric',0,[])\n    _move_2=('Parabolic Charge',65,100,'Special','Electric',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def onswitch(self):\n        self.set_env('ELECTRIC_TERRAIN',max_count=5)\n\n    def move_1(self): # Thunder\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100: self.target.set_status('PAR')\n    \n    def move_2(self): # Parabolic Charge\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            self.restore(int(1/2*damage),'drain')\n\n@Increment(Kirin,'_move_3')\ndef value():\n    return ('Deflecting Aura',0,100000,'Status','Fairy',0,[])\n\n@Increment(Kirin)\ndef move_3(self): # Deflecting Aura\n    self.set_side_condition('DEFLECTING_AURA',counter=0)\n\n@Increment(Kirin)\ndef endturn(self):\n    if self['side_conditions'].get('DEFLECTING_AURA'):\n        self.set_boost('def',1,'self')\n        self.set_boost('spd',1,'self')\n        self['side_conditions']['DEFLECTING_AURA']['counter']+=1\n        if self['side_conditions']['DEFLECTING_AURA']['counter']==3:\n            del self['side_conditions']['DEFLECTING_AURA']\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Draco Meteor\": {\n    \"power\": 130,\n    \"accuracy\": 90,\n    \"category\": \"Special\",\n    \"type\": \"Dragon\",\n    \"effect\": \"Lowers the user's Special Attack by 2 stages.\"\n  }\n}\n```",
        "response": "```python\n@Increment(Kirin,'_move_4')\ndef value():\n    return ('Raging Horn',100,95,'Special','Fairy',0,[])\n\n@Increment(Kirin)\ndef move_4(self): # Draco Meteor\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        self.set_boost('spa',-2,'self')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Kirin\",\n  \"types\": [\n    \"Electric\",\n    \"Fairy\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Electric Surge\": \"Summons Electric Terrain when the Pokemon enters the battle, which lasts for 5 turns.\"\n  },\n  \"moves\": {\n    \"Thunder\": {\n      \"power\": 110,\n      \"accuracy\": 70,\n      \"category\": \"Special\",\n      \"type\": \"Electric\",\n      \"effect\": \"Has a 30% chance to paralyze the target. If the weather is Rain Dance, this move does not check accuracy. If the weather is Sunny Day, this move's accuracy is 50%.\"\n    },\n    \"Parabolic Charge\": {\n      \"power\": 65,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"pp\": 20,\n      \"priority\": 0,\n      \"type\": \"Electric\",\n      \"effect\": \"The user recovers 1/2 the HP lost by the target.\"\n    },\n    \"Deflecting Aura\": {\n      \"power\": 0,\n      \"accuracy\": 100000,\n      \"category\": \"Status\",\n      \"type\": \"Fairy\",\n      \"effect\": \"Summons Deflecting Aura for 3 turns. At each end of the turn during Deflecting Aura, the user's defense and special defense is increased by 1 stage.\"\n    },\n    \"Draco Meteor\": {\n      \"power\": 130,\n      \"accuracy\": 90,\n      \"category\": \"Special\",\n      \"type\": \"Dragon\",\n      \"effect\": \"Lowers the user's Special Attack by 2 stages.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Kirin(PokemonBase):\n    _species='Kirin'\n    _types=['Electric','Fairy']\n    _gender='Male'\n    _ability=['Electric Surge']\n    _move_1=('Thunder',110,70,'Special','Electric',0,[])\n    _move_2=('Parabolic Charge',65,100,'Special','Electric',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def onswitch(self):\n        self.set_env('ELECTRIC_TERRAIN',max_count=5)\n\n    def move_1(self): # Thunder\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100: self.target.set_status('PAR')\n    \n    def move_2(self): # Parabolic Charge\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            self.restore(int(1/2*damage),'drain')\n\n@Increment(Kirin,'_move_3')\ndef value():\n    return ('Deflecting Aura',0,100000,'Status','Fairy',0,[])\n\n@Increment(Kirin)\ndef move_3(self): # Deflecting Aura\n    self.set_side_condition('DEFLECTING_AURA',counter=0)\n\n@Increment(Kirin)\ndef endturn(self):\n    if self['side_conditions'].get('DEFLECTING_AURA'):\n        self.set_boost('def',1,'self')\n        self.set_boost('spd',1,'self')\n        self['side_conditions']['DEFLECTING_AURA']['counter']+=1\n        if self['side_conditions']['DEFLECTING_AURA']['counter']==3:\n            del self['side_conditions']['DEFLECTING_AURA']\n\n@Increment(Kirin,'_move_4')\ndef value():\n    return ('Raging Horn',100,95,'Special','Fairy',0,[])\n\n@Increment(Kirin)\ndef move_4(self): # Draco Meteor\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        self.set_boost('spa',-2,'self')\n```\n\nThis role is gonna learn a new ability:\n```json\n{\n  \"Thunderous Rage\": \"When this Pokemon is below 1/3 HP, it will be enraged and all its attacks always hit.\"\n}\n```",
        "response": "```python\n@Increment(Kirin,'_ability')\ndef value():\n    return ['Electric Surge','Thunderous Rage']\n\n@Increment(Kirin)\ndef get_accuracy(self):\n    if self['conditions'].get('THUNDEROUS_RAGE'):\n        return 100000\n    acc=self['act']['accuracy']\n    if self['act']['id']=='Thunder':\n        if self.env.get('RAINDANCE'):\n            acc=1e5\n        elif self.env.get('SUNNYDAY'):\n            acc=50\n    acc_mult=[1.0,1.33,1.67,2.0]\n    if self['boosts']['accuracy']>=0:\n        acc*=acc_mult[self['boosts']['accuracy']]\n    else:\n        acc/=acc_mult[self['boosts']['accuracy']]\n    acc*=self.target.get_evasion()\n    return acc/100\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Kirin\",\n  \"types\": [\n    \"Electric\",\n    \"Fairy\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Electric Surge\": \"Summons Electric Terrain when the Pokemon enters the battle, which lasts for 5 turns.\",\n    \"Thunderous Rage\": \"When this Pokemon is below 1/3 HP, it will be enraged and all its attacks always hit.\"\n  },\n  \"moves\": {\n    \"Thunder\": {\n      \"power\": 110,\n      \"accuracy\": 70,\n      \"category\": \"Special\",\n      \"type\": \"Electric\",\n      \"effect\": \"Has a 30% chance to paralyze the target. If the weather is Rain Dance, this move does not check accuracy. If the weather is Sunny Day, this move's accuracy is 50%.\"\n    },\n    \"Parabolic Charge\": {\n      \"power\": 65,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"pp\": 20,\n      \"priority\": 0,\n      \"type\": \"Electric\",\n      \"effect\": \"The user recovers 1/2 the HP lost by the target.\"\n    },\n    \"Deflecting Aura\": {\n      \"power\": 0,\n      \"accuracy\": 100000,\n      \"category\": \"Status\",\n      \"type\": \"Fairy\",\n      \"effect\": \"Summons Deflecting Aura for 3 turns. At each end of the turn during Deflecting Aura, the user's defense and special defense is increased by 1 stage.\"\n    },\n    \"Draco Meteor\": {\n      \"power\": 130,\n      \"accuracy\": 90,\n      \"category\": \"Special\",\n      \"type\": \"Dragon\",\n      \"effect\": \"Lowers the user's Special Attack by 2 stages.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Kirin(PokemonBase):\n    _species='Kirin'\n    _types=['Electric','Fairy']\n    _gender='Male'\n    _ability=['Electric Surge']\n    _move_1=('Thunder',110,70,'Special','Electric',0,[])\n    _move_2=('Parabolic Charge',65,100,'Special','Electric',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def onswitch(self):\n        self.set_env('ELECTRIC_TERRAIN',max_count=5)\n\n    def move_1(self): # Thunder\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100: self.target.set_status('PAR')\n    \n    def move_2(self): # Parabolic Charge\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            self.restore(int(1/2*damage),'drain')\n\n@Increment(Kirin,'_move_3')\ndef value():\n    return ('Deflecting Aura',0,100000,'Status','Fairy',0,[])\n\n@Increment(Kirin)\ndef move_3(self): # Deflecting Aura\n    self.set_side_condition('DEFLECTING_AURA',counter=0)\n\n@Increment(Kirin)\ndef endturn(self):\n    if self['side_conditions'].get('DEFLECTING_AURA'):\n        self.set_boost('def',1,'self')\n        self.set_boost('spd',1,'self')\n        self['side_conditions']['DEFLECTING_AURA']['counter']+=1\n        if self['side_conditions']['DEFLECTING_AURA']['counter']==3:\n            del self['side_conditions']['DEFLECTING_AURA']\n\n@Increment(Kirin,'_move_4')\ndef value():\n    return ('Raging Horn',100,95,'Special','Fairy',0,[])\n\n@Increment(Kirin)\ndef move_4(self): # Draco Meteor\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        self.set_boost('spa',-2,'self')\n\n@Increment(Kirin,'_ability')\ndef value():\n    return ['Electric Surge','Thunderous Rage']\n\n@Increment(Kirin)\ndef get_accuracy(self):\n    if self['conditions'].get('THUNDEROUS_RAGE'):\n        return 100000\n    acc=self['act']['accuracy']\n    if self['act']['id']=='Thunder':\n        if self.env.get('RAINDANCE'):\n            acc=1e5\n        elif self.env.get('SUNNYDAY'):\n            acc=50\n    acc_mult=[1.0,1.33,1.67,2.0]\n    if self['boosts']['accuracy']>=0:\n        acc*=acc_mult[self['boosts']['accuracy']]\n    else:\n        acc/=acc_mult[self['boosts']['accuracy']]\n    acc*=self.target.get_evasion()\n    return acc/100\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Raging Horn\": {\n    \"power\": 100,\n    \"accuracy\": 95,\n    \"category\": \"Special\",\n    \"type\": \"Fairy\",\n    \"effect\": \"This move always lands a critical hit if the user is in enraged state.\"\n  }\n}\n```",
        "response": "```python\n@Increment(Kirin,'_move_5')\ndef value():\n    return ('Draco Meteor',130,90,'Special','Dragon',0,[])\n\n@Increment(Kirin)\ndef move_5(self): # Raging Horn\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n\n@Increment(Kirin)\ndef get_crit(self):\n    if self['act']['id']=='Raging Horn' and self['conditions'].get('THUNDEROUS_RAGE'):\n        return True\n    crit_mult=[0,24,8,2,1]\n    crit_ratio=self['boosts']['crit']\n    crit=False\n    if rnd()*crit_mult[crit_ratio+1]<1:\n        crit=True\n    return crit\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Kuiou\",\n  \"types\": [\n    \"Dragon\",\n    \"Electric\"\n  ],\n  \"gender\": \"Neutral\",\n  \"ability\": {\n    \"Storm Command\": \"Boosts the power of Electric-type moves by 50% and its Electric-type moves have a 30% chance to paralyze the target if hit.\"\n  },\n  \"moves\": {\n    \"Celestial Roar\": {\n      \"power\": 100,\n      \"accuracy\": 90,\n      \"category\": \"Special\",\n      \"type\": \"Electric\",\n      \"effect\": \"If the target is already paralyzed, the damage it deals increases by 50%\"\n    },\n    \"Ruler Strike\": {\n      \"power\": 90,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Dragon\",\n      \"effect\": \"Deals double damage if the target has higher HP than the user.\"\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass Kuiou(PokemonBase):\n    _species='Kuiou'\n    _types=['Dragon','Electric']\n    _gender='Neutral'\n    _ability=['Storm Command']\n    _move_1=('Celestial Roar',100,90,'Special','Electric',0,[])\n    _move_2=('Ruler Strike',90,100,'Physical','Dragon',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def get_power(self):\n        power=self['act']['power']\n        if self['act']['type']=='Electric':\n            power*=1.5\n        return int(power*self.get_weather_power_mult())\n\n    def move_1(self): # Celestial Roar\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            if self.target.isstatus('PAR'):\n                damage=int(damage*1.5)\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100:\n                self.target.set_status('PAR')\n    \n    def move_2(self): # Ruler Strike\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            if self.target['hp']>self['hp']:\n                damage=int(damage*2)\n            self.target.take_damage(damage)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Kuiou\",\n  \"types\": [\n    \"Dragon\",\n    \"Electric\"\n  ],\n  \"gender\": \"Neutral\",\n  \"ability\": {\n    \"Storm Command\": \"Boosts the power of Electric-type moves by 50% and its Electric-type moves have a 30% chance to paralyze the target if hit.\"\n  },\n  \"moves\": {\n    \"Celestial Roar\": {\n      \"power\": 100,\n      \"accuracy\": 90,\n      \"category\": \"Special\",\n      \"type\": \"Electric\",\n      \"effect\": \"If the target is already paralyzed, the damage it deals increases by 50%\"\n    },\n    \"Ruler Strike\": {\n      \"power\": 90,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Dragon\",\n      \"effect\": \"Deals double damage if the target has higher HP than the user.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Kuiou(PokemonBase):\n    _species='Kuiou'\n    _types=['Dragon','Electric']\n    _gender='Neutral'\n    _ability=['Storm Command']\n    _move_1=('Celestial Roar',100,90,'Special','Electric',0,[])\n    _move_2=('Ruler Strike',90,100,'Physical','Dragon',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def get_power(self):\n        power=self['act']['power']\n        if self['act']['type']=='Electric':\n            power*=1.5\n        return int(power*self.get_weather_power_mult())\n\n    def move_1(self): # Celestial Roar\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            if self.target.isstatus('PAR'):\n                damage=int(damage*1.5)\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100:\n                self.target.set_status('PAR')\n    \n    def move_2(self): # Ruler Strike\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            if self.target['hp']>self['hp']:\n                damage=int(damage*2)\n            self.target.take_damage(damage)\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Guardian Shield\": {\n    \"power\": 0,\n    \"accuracy\": 100000,\n    \"category\": \"Status\",\n    \"type\": \"Dragon\",\n    \"effect\": \"Increases the user's Defense and Special Defense by 1 stage.\"\n  }\n}\n```",
        "response": "```python\n@Increment(Kuiou,'_move_3')\ndef value():\n    return ('Guardian Shield',0,100000,'Status','Dragon',0,[])\n\n@Increment(Kuiou)\ndef move_3(self): # Guardian Shield\n    self.set_boost('def',1,'self')\n    self.set_boost('spd',1,'self')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Kuiou\",\n  \"types\": [\n    \"Dragon\",\n    \"Electric\"\n  ],\n  \"gender\": \"Neutral\",\n  \"ability\": {\n    \"Storm Command\": \"Boosts the power of Electric-type moves by 50% and its Electric-type moves have a 30% chance to paralyze the target if hit.\"\n  },\n  \"moves\": {\n    \"Celestial Roar\": {\n      \"power\": 100,\n      \"accuracy\": 90,\n      \"category\": \"Special\",\n      \"type\": \"Electric\",\n      \"effect\": \"If the target is already paralyzed, the damage it deals increases by 50%\"\n    },\n    \"Ruler Strike\": {\n      \"power\": 90,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Dragon\",\n      \"effect\": \"Deals double damage if the target has higher HP than the user.\"\n    },\n    \"Guardian Shield\": {\n      \"power\": 0,\n      \"accuracy\": 100000,\n      \"category\": \"Status\",\n      \"type\": \"Dragon\",\n      \"effect\": \"Increases the user's Defense and Special Defense by 1 stage.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Kuiou(PokemonBase):\n    _species='Kuiou'\n    _types=['Dragon','Electric']\n    _gender='Neutral'\n    _ability=['Storm Command']\n    _move_1=('Celestial Roar',100,90,'Special','Electric',0,[])\n    _move_2=('Ruler Strike',90,100,'Physical','Dragon',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def get_power(self):\n        power=self['act']['power']\n        if self['act']['type']=='Electric':\n            power*=1.5\n        return int(power*self.get_weather_power_mult())\n\n    def move_1(self): # Celestial Roar\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            if self.target.isstatus('PAR'):\n                damage=int(damage*1.5)\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100:\n                self.target.set_status('PAR')\n    \n    def move_2(self): # Ruler Strike\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            if self.target['hp']>self['hp']:\n                damage=int(damage*2)\n            self.target.take_damage(damage)\n\n@Increment(Kuiou,'_move_3')\ndef value():\n    return ('Guardian Shield',0,100000,'Status','Dragon',0,[])\n\n@Increment(Kuiou)\ndef move_3(self): # Guardian Shield\n    self.set_boost('def',1,'self')\n    self.set_boost('spd',1,'self')\n```\n\nThis role is gonna learn a new ability:\n```json\n{\n  \"Celestial Guard\": \"Reduces damage from Dragon-type moves by 50% and heals 1/8 of its maximum HP when hit by a Dragon-type move.\"\n}\n```",
        "response": "```python\n@Increment(Kuiou,'_ability')\ndef value():\n    return ['Storm Command','Celestial Guard']\n\n@Increment(Kuiou)\ndef _take_damage_attack(self,x):\n    self.register_act_taken()\n    if self['act_taken']['type']=='Dragon':\n        x=int(x*0.5)\n        self.state['hp']=min(self['max_hp'],self['hp']+self['max_hp']//8)\n    self.state['hp']=max(0,self['hp']-x)\n    if self['hp']==0:\n        self.state['status']='FNT'\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Leafeon\",\n  \"types\": [\n    \"Grass\"\n  ],\n  \"gender\": \"Female\",\n  \"ability\": {\n    \"Verdant Grace\": \"This Pokemon's Grass moves have a 50% chance to heal the user by 1/10 of maximum HP.\"\n  },\n  \"moves\": {\n    \"Leaf Blade\": {\n      \"power\": 90,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Grass\",\n      \"effect\": \"The chance for a critical hit +1.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Quick Attack\": {\n      \"power\": 40,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Normal\",\n      \"effect\": \"\",\n      \"property\": [\n        \"contact\"\n      ]\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass Leafeon(PokemonBase):\n    _species='Leafeon'\n    _types=['Grass']\n    _gender='Female'\n    _ability=['Verdant Grace']\n    _move_1=('Leaf Blade',90,100,'Physical','Grass',0,['contact'])\n    _move_2=('Quick Attack',40,100,'Physical','Normal',0,['contact'])\n    def __init__(self):\n        super().__init__()\n\n    def get_crit(self):\n        crit_mult=[0,24,8,2,1]\n        crit_ratio=self['boosts']['crit']\n        if self['act']['id']=='Leaf Blade':\n            crit_ratio=min(3,crit_ratio+1)\n        crit=False\n        if rnd()*crit_mult[crit_ratio+1]<1:\n            crit=True\n        return crit\n\n    def move_1(self): # Leaf Blade\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if rnd()<20/100: self.restore(self['max_hp']//10,'heal')\n\n    def move_2(self): # Quick Attack\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Lilipec\",\n  \"types\": [\n    \"Ground\",\n    \"Water\"\n  ],\n  \"gender\": \"Neutral\",\n  \"ability\": {\n    \"Harbinger\": \"Summons a Sandstorm for 5 turns when entering the battle.\"\n  },\n  \"moves\": {\n    \"Mudslide\": {\n      \"power\": 80,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Ground\",\n      \"effect\": \"Has a 30% chance to lower the target's Speed by 1 stage.\"\n    },\n    \"Aqua Pulse\": {\n      \"power\": 75,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Water\",\n      \"effect\": \"Has a 20% chance to confuse the target.\"\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass Lilipec(PokemonBase):\n    _species='Lilipec'\n    _types=['Ground','Water']\n    _gender='Neutral'\n    _ability=['Harbinger']\n    _move_1=('Mudslide',80,100,'Special','Ground',0,[])\n    _move_2=('Aqua Pulse',75,100,'Special','Water',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def onswitch(self):\n        self.set_env('SANDSTORM',max_count=5)\n\n    def move_1(self): # Mudslide\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100:\n                self.target.set_boost('spe',-1)\n\n    def move_2(self): # Aqua Pulse\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<20/100:\n                self.target.set_condition('CONFUSION',counter=0)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Lilipec\",\n  \"types\": [\n    \"Ground\",\n    \"Water\"\n  ],\n  \"gender\": \"Neutral\",\n  \"ability\": {\n    \"Harbinger\": \"Summons a Sandstorm for 5 turns when entering the battle.\"\n  },\n  \"moves\": {\n    \"Mudslide\": {\n      \"power\": 80,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Ground\",\n      \"effect\": \"Has a 30% chance to lower the target's Speed by 1 stage.\"\n    },\n    \"Aqua Pulse\": {\n      \"power\": 75,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Water\",\n      \"effect\": \"Has a 20% chance to confuse the target.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Lilipec(PokemonBase):\n    _species='Lilipec'\n    _types=['Ground','Water']\n    _gender='Neutral'\n    _ability=['Harbinger']\n    _move_1=('Mudslide',80,100,'Special','Ground',0,[])\n    _move_2=('Aqua Pulse',75,100,'Special','Water',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def onswitch(self):\n        self.set_env('SANDSTORM',max_count=5)\n\n    def move_1(self): # Mudslide\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100:\n                self.target.set_boost('spe',-1)\n\n    def move_2(self): # Aqua Pulse\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<20/100:\n                self.target.set_condition('CONFUSION',counter=0)\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Earthquake\": {\n    \"power\": 100,\n    \"accuracy\": 100,\n    \"category\": \"Physical\",\n    \"type\": \"Ground\",\n    \"effect\": \"\"\n  }\n}\n```",
        "response": "```python\n@Increment(Lilipec,'_move_3')\ndef value():\n    return ('Earthquake',100,100,'Physical','Ground',0,[])\n\n@Increment(Lilipec)\ndef move_3(self): # Earthquake\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Lilipec\",\n  \"types\": [\n    \"Ground\",\n    \"Water\"\n  ],\n  \"gender\": \"Neutral\",\n  \"ability\": {\n    \"Harbinger\": \"Summons a Sandstorm for 5 turns when entering the battle.\"\n  },\n  \"moves\": {\n    \"Mudslide\": {\n      \"power\": 80,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Ground\",\n      \"effect\": \"Has a 30% chance to lower the target's Speed by 1 stage.\"\n    },\n    \"Aqua Pulse\": {\n      \"power\": 75,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Water\",\n      \"effect\": \"Has a 20% chance to confuse the target.\"\n    },\n    \"Earthquake\": {\n      \"power\": 100,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Ground\",\n      \"effect\": \"\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Lilipec(PokemonBase):\n    _species='Lilipec'\n    _types=['Ground','Water']\n    _gender='Neutral'\n    _ability=['Harbinger']\n    _move_1=('Mudslide',80,100,'Special','Ground',0,[])\n    _move_2=('Aqua Pulse',75,100,'Special','Water',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def onswitch(self):\n        self.set_env('SANDSTORM',max_count=5)\n\n    def move_1(self): # Mudslide\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100:\n                self.target.set_boost('spe',-1)\n\n    def move_2(self): # Aqua Pulse\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<20/100:\n                self.target.set_condition('CONFUSION',counter=0)\n\n@Increment(Lilipec,'_move_3')\ndef value():\n    return ('Earthquake',100,100,'Physical','Ground',0,[])\n\n@Increment(Lilipec)\ndef move_3(self): # Earthquake\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n```\n\nThis role is gonna learn a new ability:\n```json\n{\n  \"Industrious Call\": \"Boosts the special attack by 1 stage when this Pokemon uses a Status move.\"\n}\n```",
        "response": "```python\n@Increment(Lilipec,'_ability')\ndef value():\n    return ['Harbinger','Industrious Call']\n\n@Increment(Lilipec)\ndef industrious_call(self):\n    if self['act']['category']=='Status':\n        self.set_boost('spa',1,'self')\n\n@Increment(Lilipec)\ndef move_1(self): # Mudslide\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint() and rnd()<30/100:\n            self.target.set_boost('spe',-1)\n    self.industrious_call()\n\n@Increment(Lilipec)\ndef move_2(self): # Aqua Pulse\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint() and rnd()<20/100:\n            self.target.set_condition('CONFUSION',counter=0)\n    self.industrious_call()\n\n@Increment(Lilipec)\ndef move_3(self): # Earthquake\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n    self.industrious_call()\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Linghu\",\n  \"types\": [\n    \"Grass\",\n    \"Steel\"\n  ],\n  \"gender\": \"Neutral\",\n  \"ability\": {\n    \"Gourd Resilience\": \"Reduces damage from all types of moves by 25% if the user's HP is above 50%.\"\n  },\n  \"moves\": {\n    \"Verdant Goad\": {\n      \"power\": 90,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Grass\",\n      \"effect\": \"Has a 30% chance to lower the target's Special Attack by 1 stage.\"\n    },\n    \"Metallic Rampart\": {\n      \"power\": 0,\n      \"accuracy\": 100,\n      \"category\": \"Status\",\n      \"priority\": -4,\n      \"type\": \"Steel\",\n      \"effect\": \"Raises the user's Defense and Special Defense by 1 stage and reflects 25% of the physical damage taken this turn back to the attacker.\"\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass Linghu(PokemonBase):\n    _species='Linghu'\n    _types=['Grass','Steel']\n    _gender='Neutral'\n    _ability=['Gourd Resilience']\n    _move_1=('Verdant Goad',90,100,'Physical','Grass',0,[])\n    _move_2=('Metallic Rampart',0,100,'Status','Steel',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def _take_damage_attack(self,x):\n        self.register_act_taken()\n        if self['hp']>self['max_hp']//2:\n            x=int(x*0.75)\n        self.state['hp']=max(0,self['hp']-x)\n        if self['hp']==0:\n            self.state['status']='FNT'\n\n    def move_1(self): # Verdant Goad\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100:\n                self.target.set_boost('spa',-1)\n\n    def move_2(self): # Metallic Rampart\n        self.set_boost('def',+1,'self')\n        self.set_boost('spd',+1,'self')\n        if self['act_taken'] and self['act_taken']['category']=='Physical':\n            self.target.take_damage(int(self['act_taken']['damage']*0.25))\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Linghu\",\n  \"types\": [\n    \"Grass\",\n    \"Steel\"\n  ],\n  \"gender\": \"Neutral\",\n  \"ability\": {\n    \"Gourd Resilience\": \"Reduces damage from all types of moves by 25% if the user's HP is above 50%.\"\n  },\n  \"moves\": {\n    \"Verdant Goad\": {\n      \"power\": 90,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Grass\",\n      \"effect\": \"Has a 30% chance to lower the target's Special Attack by 1 stage.\"\n    },\n    \"Metallic Rampart\": {\n      \"power\": 0,\n      \"accuracy\": 100,\n      \"category\": \"Status\",\n      \"priority\": -4,\n      \"type\": \"Steel\",\n      \"effect\": \"Raises the user's Defense and Special Defense by 1 stage and reflects 25% of the physical damage taken this turn back to the attacker.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Linghu(PokemonBase):\n    _species='Linghu'\n    _types=['Grass','Steel']\n    _gender='Neutral'\n    _ability=['Gourd Resilience']\n    _move_1=('Verdant Goad',90,100,'Physical','Grass',0,[])\n    _move_2=('Metallic Rampart',0,100,'Status','Steel',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def _take_damage_attack(self,x):\n        self.register_act_taken()\n        if self['hp']>self['max_hp']//2:\n            x=int(x*0.75)\n        self.state['hp']=max(0,self['hp']-x)\n        if self['hp']==0:\n            self.state['status']='FNT'\n\n    def move_1(self): # Verdant Goad\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100:\n                self.target.set_boost('spa',-1)\n\n    def move_2(self): # Metallic Rampart\n        self.set_boost('def',+1,'self')\n        self.set_boost('spd',+1,'self')\n        if self['act_taken'] and self['act_taken']['category']=='Physical':\n            self.target.take_damage(int(self['act_taken']['damage']*0.25))\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Bovine Crush\": {\n    \"power\": 120,\n    \"accuracy\": 90,\n    \"category\": \"Physical\",\n    \"type\": \"Steel\",\n    \"effect\": \"Has a 20% chance to cause the target to flinch.\"\n  }\n}\n```",
        "response": "```python\n@Increment(Linghu,'_move_3')\ndef value():\n    return ('Bovine Crush',120,90,'Physical','Steel',0,[])\n\n@Increment(Linghu)\ndef move_3(self): # Bovine Crush\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint() and rnd()<20/100:\n            self.target.set_condition('FLINCH',counter=0)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Linghu\",\n  \"types\": [\n    \"Grass\",\n    \"Steel\"\n  ],\n  \"gender\": \"Neutral\",\n  \"ability\": {\n    \"Gourd Resilience\": \"Reduces damage from all types of moves by 25% if the user's HP is above 50%.\"\n  },\n  \"moves\": {\n    \"Verdant Goad\": {\n      \"power\": 90,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Grass\",\n      \"effect\": \"Has a 30% chance to lower the target's Special Attack by 1 stage.\"\n    },\n    \"Metallic Rampart\": {\n      \"power\": 0,\n      \"accuracy\": 100,\n      \"category\": \"Status\",\n      \"priority\": -4,\n      \"type\": \"Steel\",\n      \"effect\": \"Raises the user's Defense and Special Defense by 1 stage and reflects 25% of the physical damage taken this turn back to the attacker.\"\n    },\n    \"Bovine Crush\": {\n      \"power\": 120,\n      \"accuracy\": 90,\n      \"category\": \"Physical\",\n      \"type\": \"Steel\",\n      \"effect\": \"Has a 20% chance to cause the target to flinch.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Linghu(PokemonBase):\n    _species='Linghu'\n    _types=['Grass','Steel']\n    _gender='Neutral'\n    _ability=['Gourd Resilience']\n    _move_1=('Verdant Goad',90,100,'Physical','Grass',0,[])\n    _move_2=('Metallic Rampart',0,100,'Status','Steel',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def _take_damage_attack(self,x):\n        self.register_act_taken()\n        if self['hp']>self['max_hp']//2:\n            x=int(x*0.75)\n        self.state['hp']=max(0,self['hp']-x)\n        if self['hp']==0:\n            self.state['status']='FNT'\n\n    def move_1(self): # Verdant Goad\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100:\n                self.target.set_boost('spa',-1)\n\n    def move_2(self): # Metallic Rampart\n        self.set_boost('def',+1,'self')\n        self.set_boost('spd',+1,'self')\n        if self['act_taken'] and self['act_taken']['category']=='Physical':\n            self.target.take_damage(int(self['act_taken']['damage']*0.25))\n\n@Increment(Linghu,'_move_3')\ndef value():\n    return ('Bovine Crush',120,90,'Physical','Steel',0,[])\n\n@Increment(Linghu)\ndef move_3(self): # Bovine Crush\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint() and rnd()<20/100:\n            self.target.set_condition('FLINCH',counter=0)\n```\n\nThis role is gonna learn a new ability:\n```json\n{\n  \"Enduring Energy\": \"Restores 1/16 of its maximum HP if it uses a Grass-type move during Hail or Snow.\"\n}\n```",
        "response": "```python\n@Increment(Linghu,'_ability')\ndef value():\n    return ['Gourd Resilience','Enduring Energy']\n\n@Increment(Linghu)\ndef move_1(self): # Verdant Goad\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint() and rnd()<30/100:\n            self.target.set_boost('spa',-1)\n    if self.env.get('HAIL') or self.env.get('SNOW'):\n        self.restore(self['max_hp']//16,'heal')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Livyatan\",\n  \"types\": [\n    \"Water\",\n    \"Dark\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Apex Predator\": \"This Pokemon's moves have 1.3x power to Pokemon with lower Speed stat.\"\n  },\n  \"moves\": {\n    \"Tidal Crush\": {\n      \"power\": 85,\n      \"accuracy\": 90,\n      \"category\": \"Physical\",\n      \"type\": \"Water\",\n      \"effect\": \"Has a 20% chance to confuse the target.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Abyssal Bite\": {\n      \"power\": 100,\n      \"accuracy\": 95,\n      \"category\": \"Physical\",\n      \"type\": \"Dark\",\n      \"effect\": \"Has a 50% chance to lower the target's Defense by 1 stage.\",\n      \"property\": [\n        \"contact\"\n      ]\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass Livyatan(PokemonBase):\n    _species='Livyatan'\n    _types=['Water','Dark']\n    _gender='Male'\n    _ability=['Apex Predator']\n    _move_1=('Tidal Crush',85,90,'Physical','Water',0,['contact'])\n    _move_2=('Abyssal Bite',100,95,'Physical','Dark',0,['contact'])\n    def __init__(self):\n        super().__init__()\n\n    def get_power(self):\n        power=self['act']['power']\n        if self.target['stats']['spe']<self['stats']['spe']:\n            power*=1.3\n        return int(power*self.get_weather_power_mult())\n\n    def move_1(self): # Tidal Crush\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<20/100:\n                self.target.set_condition('CONFUSION',counter=0)\n\n    def move_2(self): # Abyssal Bite\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<50/100:\n                self.target.set_boost('def',-1)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Livyatan\",\n  \"types\": [\n    \"Water\",\n    \"Dark\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Apex Predator\": \"This Pokemon's moves have 1.3x power to Pokemon with lower Speed stat.\"\n  },\n  \"moves\": {\n    \"Tidal Crush\": {\n      \"power\": 85,\n      \"accuracy\": 90,\n      \"category\": \"Physical\",\n      \"type\": \"Water\",\n      \"effect\": \"Has a 20% chance to confuse the target.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Abyssal Bite\": {\n      \"power\": 100,\n      \"accuracy\": 95,\n      \"category\": \"Physical\",\n      \"type\": \"Dark\",\n      \"effect\": \"Has a 50% chance to lower the target's Defense by 1 stage.\",\n      \"property\": [\n        \"contact\"\n      ]\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Livyatan(PokemonBase):\n    _species='Livyatan'\n    _types=['Water','Dark']\n    _gender='Male'\n    _ability=['Apex Predator']\n    _move_1=('Tidal Crush',85,90,'Physical','Water',0,['contact'])\n    _move_2=('Abyssal Bite',100,95,'Physical','Dark',0,['contact'])\n    def __init__(self):\n        super().__init__()\n\n    def get_power(self):\n        power=self['act']['power']\n        if self.target['stats']['spe']<self['stats']['spe']:\n            power*=1.3\n        return int(power*self.get_weather_power_mult())\n\n    def move_1(self): # Tidal Crush\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<20/100:\n                self.target.set_condition('CONFUSION',counter=0)\n\n    def move_2(self): # Abyssal Bite\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<50/100:\n                self.target.set_boost('def',-1)\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Whale Song\": {\n    \"power\": 0,\n    \"accuracy\": 100000,\n    \"category\": \"Status\",\n    \"type\": \"Water\",\n    \"effect\": \"Increases the user's Attack and Speed by 1 stage each.\"\n  }\n}\n```",
        "response": "```python\n@Increment(Livyatan,'_move_3')\ndef value():\n    return ('Whale Song',0,100000,'Status','Water',0,[])\n\n@Increment(Livyatan)\ndef move_3(self): # Whale Song\n    self.set_boost('atk',+1,'self')\n    self.set_boost('spe',+1,'self')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Livyatan\",\n  \"types\": [\n    \"Water\",\n    \"Dark\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Apex Predator\": \"This Pokemon's moves have 1.3x power to Pokemon with lower Speed stat.\"\n  },\n  \"moves\": {\n    \"Tidal Crush\": {\n      \"power\": 85,\n      \"accuracy\": 90,\n      \"category\": \"Physical\",\n      \"type\": \"Water\",\n      \"effect\": \"Has a 20% chance to confuse the target.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Abyssal Bite\": {\n      \"power\": 100,\n      \"accuracy\": 95,\n      \"category\": \"Physical\",\n      \"type\": \"Dark\",\n      \"effect\": \"Has a 50% chance to lower the target's Defense by 1 stage.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Whale Song\": {\n      \"power\": 0,\n      \"accuracy\": 100000,\n      \"category\": \"Status\",\n      \"type\": \"Water\",\n      \"effect\": \"Increases the user's Attack and Speed by 1 stage each.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Livyatan(PokemonBase):\n    _species='Livyatan'\n    _types=['Water','Dark']\n    _gender='Male'\n    _ability=['Apex Predator']\n    _move_1=('Tidal Crush',85,90,'Physical','Water',0,['contact'])\n    _move_2=('Abyssal Bite',100,95,'Physical','Dark',0,['contact'])\n    def __init__(self):\n        super().__init__()\n\n    def get_power(self):\n        power=self['act']['power']\n        if self.target['stats']['spe']<self['stats']['spe']:\n            power*=1.3\n        return int(power*self.get_weather_power_mult())\n\n    def move_1(self): # Tidal Crush\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<20/100:\n                self.target.set_condition('CONFUSION',counter=0)\n\n    def move_2(self): # Abyssal Bite\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<50/100:\n                self.target.set_boost('def',-1)\n\n@Increment(Livyatan,'_move_3')\ndef value():\n    return ('Whale Song',0,100000,'Status','Water',0,[])\n\n@Increment(Livyatan)\ndef move_3(self): # Whale Song\n    self.set_boost('atk',+1,'self')\n    self.set_boost('spe',+1,'self')\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Dark Surge\": {\n    \"power\": 80,\n    \"accuracy\": 100,\n    \"category\": \"Special\",\n    \"type\": \"Dark\",\n    \"effect\": \"Has a 30% chance to make the target flinch.\"\n  }\n}\n```",
        "response": "```python\n@Increment(Livyatan,'_move_4')\ndef value():\n    return ('Dark Surge',80,100,'Special','Dark',0,[])\n\n@Increment(Livyatan)\ndef move_4(self): # Dark Surge\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint() and rnd()<30/100:\n            self.target.set_condition('FLINCH',counter=0)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Livyatan\",\n  \"types\": [\n    \"Water\",\n    \"Dark\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Apex Predator\": \"This Pokemon's moves have 1.3x power to Pokemon with lower Speed stat.\"\n  },\n  \"moves\": {\n    \"Tidal Crush\": {\n      \"power\": 85,\n      \"accuracy\": 90,\n      \"category\": \"Physical\",\n      \"type\": \"Water\",\n      \"effect\": \"Has a 20% chance to confuse the target.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Abyssal Bite\": {\n      \"power\": 100,\n      \"accuracy\": 95,\n      \"category\": \"Physical\",\n      \"type\": \"Dark\",\n      \"effect\": \"Has a 50% chance to lower the target's Defense by 1 stage.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Whale Song\": {\n      \"power\": 0,\n      \"accuracy\": 100000,\n      \"category\": \"Status\",\n      \"type\": \"Water\",\n      \"effect\": \"Increases the user's Attack and Speed by 1 stage each.\"\n    },\n    \"Dark Surge\": {\n      \"power\": 80,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Dark\",\n      \"effect\": \"Has a 30% chance to make the target flinch.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Livyatan(PokemonBase):\n    _species='Livyatan'\n    _types=['Water','Dark']\n    _gender='Male'\n    _ability=['Apex Predator']\n    _move_1=('Tidal Crush',85,90,'Physical','Water',0,['contact'])\n    _move_2=('Abyssal Bite',100,95,'Physical','Dark',0,['contact'])\n    def __init__(self):\n        super().__init__()\n\n    def get_power(self):\n        power=self['act']['power']\n        if self.target['stats']['spe']<self['stats']['spe']:\n            power*=1.3\n        return int(power*self.get_weather_power_mult())\n\n    def move_1(self): # Tidal Crush\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<20/100:\n                self.target.set_condition('CONFUSION',counter=0)\n\n    def move_2(self): # Abyssal Bite\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<50/100:\n                self.target.set_boost('def',-1)\n\n@Increment(Livyatan,'_move_3')\ndef value():\n    return ('Whale Song',0,100000,'Status','Water',0,[])\n\n@Increment(Livyatan)\ndef move_3(self): # Whale Song\n    self.set_boost('atk',+1,'self')\n    self.set_boost('spe',+1,'self')\n\n@Increment(Livyatan,'_move_4')\ndef value():\n    return ('Dark Surge',80,100,'Special','Dark',0,[])\n\n@Increment(Livyatan)\ndef move_4(self): # Dark Surge\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint() and rnd()<30/100:\n            self.target.set_condition('FLINCH',counter=0)\n```\n\nThis role is gonna learn a new ability:\n```json\n{\n  \"Enamel Armor\": \"Reduces damage from Physical moves by 25%. If hit by a contact move, has a 20% chance to reduce target's Defense by 1 stage.\"\n}\n```",
        "response": "```python\n@Increment(Livyatan,'_ability')\ndef value():\n    return ['Apex Predator','Enamel Armor']\n\n@Increment(Livyatan)\ndef _take_damage_attack(self,x):\n    self.register_act_taken()\n    if self['act_taken']['category']=='Physical':\n        x=int(x*0.75)\n    self.state['hp']=max(0,self['hp']-x)\n    if 'property' in self['act_taken'] and 'contact' in self['act_taken']['property'] and rnd()<20/100:\n        self.target.set_boost('def',-1)\n    if self['hp']==0:\n        self.state['status']='FNT'\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Livyatan\",\n  \"types\": [\n    \"Water\",\n    \"Dark\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Apex Predator\": \"This Pokemon's moves have 1.3x power to Pokemon with lower Speed stat.\",\n    \"Enamel Armor\": \"Reduces damage from Physical moves by 25%. If hit by a contact move, has a 20% chance to reduce target's Defense by 1 stage.\"\n  },\n  \"moves\": {\n    \"Tidal Crush\": {\n      \"power\": 85,\n      \"accuracy\": 90,\n      \"category\": \"Physical\",\n      \"type\": \"Water\",\n      \"effect\": \"Has a 20% chance to confuse the target.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Abyssal Bite\": {\n      \"power\": 100,\n      \"accuracy\": 95,\n      \"category\": \"Physical\",\n      \"type\": \"Dark\",\n      \"effect\": \"Has a 50% chance to lower the target's Defense by 1 stage.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Whale Song\": {\n      \"power\": 0,\n      \"accuracy\": 100000,\n      \"category\": \"Status\",\n      \"type\": \"Water\",\n      \"effect\": \"Increases the user's Attack and Speed by 1 stage each.\"\n    },\n    \"Dark Surge\": {\n      \"power\": 80,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Dark\",\n      \"effect\": \"Has a 30% chance to make the target flinch.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Livyatan(PokemonBase):\n    _species='Livyatan'\n    _types=['Water','Dark']\n    _gender='Male'\n    _ability=['Apex Predator']\n    _move_1=('Tidal Crush',85,90,'Physical','Water',0,['contact'])\n    _move_2=('Abyssal Bite',100,95,'Physical','Dark',0,['contact'])\n    def __init__(self):\n        super().__init__()\n\n    def get_power(self):\n        power=self['act']['power']\n        if self.target['stats']['spe']<self['stats']['spe']:\n            power*=1.3\n        return int(power*self.get_weather_power_mult())\n\n    def move_1(self): # Tidal Crush\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<20/100:\n                self.target.set_condition('CONFUSION',counter=0)\n\n    def move_2(self): # Abyssal Bite\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<50/100:\n                self.target.set_boost('def',-1)\n\n@Increment(Livyatan,'_move_3')\ndef value():\n    return ('Whale Song',0,100000,'Status','Water',0,[])\n\n@Increment(Livyatan)\ndef move_3(self): # Whale Song\n    self.set_boost('atk',+1,'self')\n    self.set_boost('spe',+1,'self')\n\n@Increment(Livyatan,'_move_4')\ndef value():\n    return ('Dark Surge',80,100,'Special','Dark',0,[])\n\n@Increment(Livyatan)\ndef move_4(self): # Dark Surge\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint() and rnd()<30/100:\n            self.target.set_condition('FLINCH',counter=0)\n\n@Increment(Livyatan,'_ability')\ndef value():\n    return ['Apex Predator','Enamel Armor']\n\n@Increment(Livyatan)\ndef _take_damage_attack(self,x):\n    self.register_act_taken()\n    if self['act_taken']['category']=='Physical':\n        x=int(x*0.75)\n    self.state['hp']=max(0,self['hp']-x)\n    if 'property' in self['act_taken'] and 'contact' in self['act_taken']['property'] and rnd()<20/100:\n        self.target.set_boost('def',-1)\n    if self['hp']==0:\n        self.state['status']='FNT'\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Hydro Blast\": {\n    \"power\": 110,\n    \"accuracy\": 80,\n    \"category\": \"Special\",\n    \"type\": \"Water\",\n    \"effect\": \"Has a 10% chance to confuse the target.\"\n  }\n}\n```",
        "response": "```python\n@Increment(Livyatan,'_move_5')\ndef value():\n    return ('Hydro Blast',110,80,'Special','Water',0,[])\n\n@Increment(Livyatan)\ndef move_5(self): # Hydro Blast\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint() and rnd()<10/100:\n            self.target.set_condition('CONFUSION',counter=0)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Lucario\",\n  \"types\": [\n    \"Fighting\",\n    \"Steel\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Adaptability\": \"This Pokemon's same-type attack bonus (STAB) is 2 instead of 1.5.\"\n  },\n  \"moves\": {\n    \"Aura Sphere\": {\n      \"power\": 80,\n      \"accuracy\": 100000,\n      \"category\": \"Special\",\n      \"type\": \"Fighting\",\n      \"effect\": \"This move does not check accuracy.\"\n    },\n    \"Metal Claw\": {\n      \"power\": 50,\n      \"accuracy\": 95,\n      \"category\": \"Physical\",\n      \"type\": \"Steel\",\n      \"effect\": \"Has a 10% chance to raise the user's Attack by 1 stage.\",\n      \"property\": [\n        \"contact\"\n      ]\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass Lucario(PokemonBase):\n    _species='Lucario'\n    _types=['Fighting','Steel']\n    _gender='Male'\n    _ability=['Adaptability']\n    _move_1=('Aura Sphere',80,100000,'Special','Fighting',0,[])\n    _move_2=('Metal Claw',50,95,'Physical','Steel',0,['contact'])\n    def __init__(self):\n        super().__init__()\n\n    def get_stab(self):\n        stab=1\n        if self['act']['type'] in self['types']:\n            stab=2\n        return stab\n    \n    def move_1(self): # Aura Sphere\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n    \n    def move_2(self): # Metal Claw\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if rnd()<10/100: self.set_boost('atk',1,'self')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Lucario\",\n  \"types\": [\n    \"Fighting\",\n    \"Steel\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Adaptability\": \"This Pokemon's same-type attack bonus (STAB) is 2 instead of 1.5.\"\n  },\n  \"moves\": {\n    \"Aura Blade\": {\n      \"power\": 90,\n      \"accuracy\": 100,\n      \"priority\": 0,\n      \"category\": \"Physical\",\n      \"type\": \"Fighting\",\n      \"effect\": \"Has a 30% chance to make the target flinch and the ratio for critical hit +1.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Bullet Punch\": {\n      \"power\": 40,\n      \"accuracy\": 100,\n      \"priority\": 1,\n      \"category\": \"Physical\",\n      \"type\": \"Steel\",\n      \"effect\": \"Has a 10% chance to lower the target's Defense by 1 stage. Usually goes first.\",\n      \"property\": [\n        \"contact\"\n      ]\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass Lucario(PokemonBase):\n    _species='Lucario'\n    _types=['Fighting','Steel']\n    _gender='Male'\n    _ability=['Adaptability']\n    _move_1=('Aura Blade',90,100,'Physical','Fighting',0,['contact'])\n    _move_2=('Bullet Punch',40,100,'Physical','Steel',1,['contact'])\n    def __init__(self):\n        super().__init__()\n\n    def get_stab(self):\n        stab=1\n        if self['act']['type'] in self['types']:\n            stab=2\n        return stab\n    \n    def get_crit(self):\n        crit_mult=[0,24,8,2,1]\n        crit_ratio=self['boosts']['crit']\n        if self['act']['id']=='Aura Blade':\n            crit_ratio=min(3,crit_ratio+1)\n        crit=False\n        if rnd()*crit_mult[crit_ratio+1]<1:\n            crit=True\n        return crit\n    \n    def move_1(self): # Aura Blade\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100: \n                self.target.set_condition('FLINCH',counter=0)\n    \n    def move_2(self): # Bullet Punch\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<10/100:\n                self.target.set_boost('def',-1)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Luminarae\",\n  \"types\": [\n    \"Electric\",\n    \"Fairy\"\n  ],\n  \"gender\": \"Female\",\n  \"ability\": {\n    \"Aegis Shield\": \"Reduces 20% of damage taken if this Pokemon has any status condition.\"\n  },\n  \"moves\": {\n    \"Thunderbolt\": {\n      \"power\": 90,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Electric\",\n      \"effect\": \"Has a 10% chance to paralyze the target.\"\n    },\n    \"Mystic Gleam\": {\n      \"power\": 90,\n      \"accuracy\": 95,\n      \"category\": \"Special\",\n      \"type\": \"Fairy\",\n      \"effect\": \"Has a 20% chance to raise the user's Special Attack by 1 stage.\"\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass Luminarae(PokemonBase):\n    _species='Luminarae'\n    _types=['Electric','Fairy']\n    _gender='Female'\n    _ability=['Aegis Shield']\n    _move_1=('Thunderbolt',90,100,'Special','Electric',0,[])\n    _move_2=('Mystic Gleam',90,95,'Special','Fairy',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def _take_damage_attack(self,x):\n        self.register_act_taken()\n        if self.state['status']:\n            x=int(x*0.8)\n        self.state['hp']=max(0,self['hp']-x)\n        if self['hp']==0:\n            self.state['status']='FNT'\n            return\n    \n    def move_1(self): # Thunderbolt\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if rnd()<10/100:\n                self.target.set_status('PAR')\n\n    def move_2(self): # Mystic Gleam\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if rnd()<20/100:\n                self.set_boost('spa', 1)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Lumina\",\n  \"types\": [\n    \"Psychic\",\n    \"Fairy\"\n  ],\n  \"gender\": \"Female\",\n  \"ability\": {\n    \"Empathic Link\": \"When this Pokemon takes damage from attacks at full HP, the opponent receives the same amount of damage.\"\n  },\n  \"moves\": {\n    \"Prismatic Beam\": {\n      \"power\": 100,\n      \"accuracy\": 90,\n      \"category\": \"Special\",\n      \"type\": \"Psychic\",\n      \"effect\": \"Has a 20% chance to lower the target's accuracy by 1 stage.\"\n    },\n    \"Fairy Glow\": {\n      \"power\": 0,\n      \"accuracy\": 100,\n      \"category\": \"Status\",\n      \"type\": \"Fairy\",\n      \"effect\": \"Raises the user's Special Attack and Special Defense by 1 stage.\"\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass Lumina(PokemonBase):\n    _species='Lumina'\n    _types=['Psychic','Fairy']\n    _gender='Female'\n    _ability=['Empathic Link']\n    _move_1=('Prismatic Beam',100,90,'Special','Psychic',0,[])\n    _move_2=('Fairy Glow',0,100,'Status','Fairy',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def _take_damage_attack(self,x):\n        self.register_act_taken()\n        if self['hp']==self['max_hp']:\n            self.target.take_damage(x,'loss')\n        self.state['hp']=max(0,self['hp']-x)\n        if self['hp']==0:\n            self.state['status']='FNT'\n\n    def move_1(self): # Prismatic Beam\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<20/100:\n                self.target.set_boost('accuracy',-1)\n\n    def move_2(self): # Fairy Glow  \n        self.set_boost('spa',1,'self')\n        self.set_boost('spd',1,'self')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Lumina\",\n  \"types\": [\n    \"Psychic\",\n    \"Fairy\"\n  ],\n  \"gender\": \"Female\",\n  \"ability\": {\n    \"Empathic Link\": \"When this Pokemon takes damage from attacks at full HP, the opponent receives the same amount of damage.\"\n  },\n  \"moves\": {\n    \"Prismatic Beam\": {\n      \"power\": 100,\n      \"accuracy\": 90,\n      \"category\": \"Special\",\n      \"type\": \"Psychic\",\n      \"effect\": \"Has a 20% chance to lower the target's accuracy by 1 stage.\"\n    },\n    \"Fairy Glow\": {\n      \"power\": 0,\n      \"accuracy\": 100,\n      \"category\": \"Status\",\n      \"type\": \"Fairy\",\n      \"effect\": \"Raises the user's Special Attack and Special Defense by 1 stage.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Lumina(PokemonBase):\n    _species='Lumina'\n    _types=['Psychic','Fairy']\n    _gender='Female'\n    _ability=['Empathic Link']\n    _move_1=('Prismatic Beam',100,90,'Special','Psychic',0,[])\n    _move_2=('Fairy Glow',0,100,'Status','Fairy',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def _take_damage_attack(self,x):\n        self.register_act_taken()\n        if self['hp']==self['max_hp']:\n            self.target.take_damage(x,'loss')\n        self.state['hp']=max(0,self['hp']-x)\n        if self['hp']==0:\n            self.state['status']='FNT'\n\n    def move_1(self): # Prismatic Beam\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<20/100:\n                self.target.set_boost('accuracy',-1)\n\n    def move_2(self): # Fairy Glow  \n        self.set_boost('spa',1,'self')\n        self.set_boost('spd',1,'self')\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Dazzling Gleam\": {\n    \"power\": 80,\n    \"accuracy\": 100,\n    \"category\": \"Special\",\n    \"type\": \"Fairy\",\n    \"effect\": \"No additional effect.\"\n  }\n}\n```",
        "response": "```python\n@Increment(Lumina,'_move_3')\ndef value():\n    return ('Dazzling Gleam',80,100,'Special','Fairy',0,[])\n\n@Increment(Lumina)\ndef move_3(self): # Dazzling Gleam\n    damage_ret=self.get_damage() \n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Lumina\",\n  \"types\": [\n    \"Psychic\",\n    \"Fairy\"\n  ],\n  \"gender\": \"Female\",\n  \"ability\": {\n    \"Empathic Link\": \"When this Pokemon takes damage from attacks at full HP, the opponent receives the same amount of damage.\"\n  },\n  \"moves\": {\n    \"Prismatic Beam\": {\n      \"power\": 100,\n      \"accuracy\": 90,\n      \"category\": \"Special\",\n      \"type\": \"Psychic\",\n      \"effect\": \"Has a 20% chance to lower the target's accuracy by 1 stage.\"\n    },\n    \"Fairy Glow\": {\n      \"power\": 0,\n      \"accuracy\": 100,\n      \"category\": \"Status\",\n      \"type\": \"Fairy\",\n      \"effect\": \"Raises the user's Special Attack and Special Defense by 1 stage.\"\n    },\n    \"Dazzling Gleam\": {\n      \"power\": 80,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Fairy\",\n      \"effect\": \"No additional effect.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Lumina(PokemonBase):\n    _species='Lumina'\n    _types=['Psychic','Fairy']\n    _gender='Female'\n    _ability=['Empathic Link']\n    _move_1=('Prismatic Beam',100,90,'Special','Psychic',0,[])\n    _move_2=('Fairy Glow',0,100,'Status','Fairy',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def _take_damage_attack(self,x):\n        self.register_act_taken()\n        if self['hp']==self['max_hp']:\n            self.target.take_damage(x,'loss')\n        self.state['hp']=max(0,self['hp']-x)\n        if self['hp']==0:\n            self.state['status']='FNT'\n\n    def move_1(self): # Prismatic Beam\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<20/100:\n                self.target.set_boost('accuracy',-1)\n\n    def move_2(self): # Fairy Glow  \n        self.set_boost('spa',1,'self')\n        self.set_boost('spd',1,'self')\n\n@Increment(Lumina,'_move_3')\ndef value():\n    return ('Dazzling Gleam',80,100,'Special','Fairy',0,[])\n\n@Increment(Lumina)\ndef move_3(self): # Dazzling Gleam\n    damage_ret=self.get_damage() \n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Psycho Shift\": {\n    \"power\": 0,\n    \"accuracy\": 100,\n    \"category\": \"Status\",\n    \"type\": \"Psychic\",\n    \"effect\": \"Transfers the user's status condition to the target.\"\n  }\n}\n```",
        "response": "```python\n@Increment(Lumina,'_move_4')\ndef value():\n    return ('Psycho Shift',0,100,'Status','Psychic',0,[])\n\n@Increment(Lumina)\ndef move_4(self): # Psycho Shift\n    if self['status']:\n        for k, _ in self['status'].items():\n            break\n        self.target.set_status(k)\n        self.state['status']=None\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Lunagaron\",\n  \"types\": [\n    \"Ice\",\n    \"Fighting\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Frost Armor\": \"This Pokemon forms an ice armor that reduces damage from non-Fire-type attacks by 20%. Additionally, the ice armor has a 30% chance to freeze any Pokemon that makes contact.\"\n  },\n  \"moves\": {\n    \"Glacial Claws\": {\n      \"power\": 95,\n      \"accuracy\": 90,\n      \"category\": \"Physical\",\n      \"type\": \"Ice\",\n      \"effect\": \"Has a 20% chance to freeze the target. Always results in a critical hit.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Icicle Barrage\": {\n      \"power\": 70,\n      \"accuracy\": 90,\n      \"category\": \"Physical\",\n      \"type\": \"Ice\",\n      \"effect\": \"Hits 2-5 times in one turn.\",\n      \"property\": [\n        \"contact\"\n      ]\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass Lunagaron(PokemonBase):\n    _species='Lunagaron'\n    _types=['Ice','Fighting']\n    _gender='Male'\n    _ability=['Frost Armor']\n    _move_1=('Glacial Claws',95,90,'Physical','Ice',0,['contact'])\n    _move_2=('Icicle Barrage',70,90,'Physical','Ice',0,['contact'])\n    def __init__(self):\n        super().__init__()\n    \n    def _take_damage_attack(self,x):\n        self.register_act_taken()\n        damage=x\n        if self['act_taken']['type']!='Fire':\n            damage=int(damage*0.8)\n        self.state['hp']=max(0,self['hp']-damage)\n        if self['hp']==0:\n            self.state['status']='FNT'\n            return\n        if 'contact' in self['act_taken']['property']:\n            if rnd()<30/100:\n                self.target.set_status('FRZ')\n\n    def get_crit(self):\n        if self['act']['id']=='Glacial Claws':\n            return True\n        crit_mult=[0,24,8,2,1]\n        crit_ratio=self['boosts']['crit']\n        crit=False\n        if rnd()*crit_mult[crit_ratio+1]<1:\n            crit=True\n        return crit\n\n    def move_1(self): # Glacial Claws\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<20/100:\n                self.target.set_status('FRZ')\n\n    def move_2(self): # Icicle Barrage\n        hits=rndc([2,3,4,5])\n        for i in range(hits):\n            damage_ret=self.get_damage()\n            if damage_ret['miss']: break\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if self.target.isfaint(): break\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Lunagaron\",\n  \"types\": [\n    \"Ice\",\n    \"Fighting\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Frost Armor\": \"This Pokemon forms an ice armor that reduces damage from non-Fire-type attacks by 20%. Additionally, the ice armor has a 30% chance to freeze any Pokemon that makes contact.\"\n  },\n  \"moves\": {\n    \"Glacial Claws\": {\n      \"power\": 95,\n      \"accuracy\": 90,\n      \"category\": \"Physical\",\n      \"type\": \"Ice\",\n      \"effect\": \"Has a 20% chance to freeze the target. Always results in a critical hit.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Icicle Barrage\": {\n      \"power\": 70,\n      \"accuracy\": 90,\n      \"category\": \"Physical\",\n      \"type\": \"Ice\",\n      \"effect\": \"Hits 2-5 times in one turn.\",\n      \"property\": [\n        \"contact\"\n      ]\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Lunagaron(PokemonBase):\n    _species='Lunagaron'\n    _types=['Ice','Fighting']\n    _gender='Male'\n    _ability=['Frost Armor']\n    _move_1=('Glacial Claws',95,90,'Physical','Ice',0,['contact'])\n    _move_2=('Icicle Barrage',70,90,'Physical','Ice',0,['contact'])\n    def __init__(self):\n        super().__init__()\n    \n    def _take_damage_attack(self,x):\n        self.register_act_taken()\n        damage=x\n        if self['act_taken']['type']!='Fire':\n            damage=int(damage*0.8)\n        self.state['hp']=max(0,self['hp']-damage)\n        if self['hp']==0:\n            self.state['status']='FNT'\n            return\n        if 'contact' in self['act_taken']['property']:\n            if rnd()<30/100:\n                self.target.set_status('FRZ')\n\n    def get_crit(self):\n        if self['act']['id']=='Glacial Claws':\n            return True\n        crit_mult=[0,24,8,2,1]\n        crit_ratio=self['boosts']['crit']\n        crit=False\n        if rnd()*crit_mult[crit_ratio+1]<1:\n            crit=True\n        return crit\n\n    def move_1(self): # Glacial Claws\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<20/100:\n                self.target.set_status('FRZ')\n\n    def move_2(self): # Icicle Barrage\n        hits=rndc([2,3,4,5])\n        for i in range(hits):\n            damage_ret=self.get_damage()\n            if damage_ret['miss']: break\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if self.target.isfaint(): break\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Close Combat\": {\n    \"power\": 120,\n    \"accuracy\": 100,\n    \"category\": \"Physical\",\n    \"type\": \"Fighting\",\n    \"effect\": \"Lowers the user's Defense and Special Defense by 1 stage.\",\n    \"property\": [\n      \"contact\"\n    ]\n  }\n}\n```",
        "response": "```python\n@Increment(Lunagaron,'_move_3')\ndef value():\n    return ('Close Combat',120,100,'Physical','Fighting',0,['contact'])\n\n@Increment(Lunagaron)\ndef move_3(self): # Close Combat\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        self.set_boost('def',-1,'self')\n        self.set_boost('spd',-1,'self')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Lunagaron\",\n  \"types\": [\n    \"Ice\",\n    \"Fighting\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Frost Armor\": \"This Pokemon forms an ice armor that reduces damage from non-Fire-type attacks by 20%. Additionally, the ice armor has a 30% chance to freeze any Pokemon that makes contact.\"\n  },\n  \"moves\": {\n    \"Glacial Claws\": {\n      \"power\": 95,\n      \"accuracy\": 90,\n      \"category\": \"Physical\",\n      \"type\": \"Ice\",\n      \"effect\": \"Has a 20% chance to freeze the target. Always results in a critical hit.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Icicle Barrage\": {\n      \"power\": 70,\n      \"accuracy\": 90,\n      \"category\": \"Physical\",\n      \"type\": \"Ice\",\n      \"effect\": \"Hits 2-5 times in one turn.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Close Combat\": {\n      \"power\": 120,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Fighting\",\n      \"effect\": \"Lowers the user's Defense and Special Defense by 1 stage.\",\n      \"property\": [\n        \"contact\"\n      ]\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Lunagaron(PokemonBase):\n    _species='Lunagaron'\n    _types=['Ice','Fighting']\n    _gender='Male'\n    _ability=['Frost Armor']\n    _move_1=('Glacial Claws',95,90,'Physical','Ice',0,['contact'])\n    _move_2=('Icicle Barrage',70,90,'Physical','Ice',0,['contact'])\n    def __init__(self):\n        super().__init__()\n    \n    def _take_damage_attack(self,x):\n        self.register_act_taken()\n        damage=x\n        if self['act_taken']['type']!='Fire':\n            damage=int(damage*0.8)\n        self.state['hp']=max(0,self['hp']-damage)\n        if self['hp']==0:\n            self.state['status']='FNT'\n            return\n        if 'contact' in self['act_taken']['property']:\n            if rnd()<30/100:\n                self.target.set_status('FRZ')\n\n    def get_crit(self):\n        if self['act']['id']=='Glacial Claws':\n            return True\n        crit_mult=[0,24,8,2,1]\n        crit_ratio=self['boosts']['crit']\n        crit=False\n        if rnd()*crit_mult[crit_ratio+1]<1:\n            crit=True\n        return crit\n\n    def move_1(self): # Glacial Claws\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<20/100:\n                self.target.set_status('FRZ')\n\n    def move_2(self): # Icicle Barrage\n        hits=rndc([2,3,4,5])\n        for i in range(hits):\n            damage_ret=self.get_damage()\n            if damage_ret['miss']: break\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if self.target.isfaint(): break\n\n@Increment(Lunagaron,'_move_3')\ndef value():\n    return ('Close Combat',120,100,'Physical','Fighting',0,['contact'])\n\n@Increment(Lunagaron)\ndef move_3(self): # Close Combat\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        self.set_boost('def',-1,'self')\n        self.set_boost('spd',-1,'self')\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Swords Dance\": {\n    \"power\": 0,\n    \"accuracy\": 100000,\n    \"category\": \"Status\",\n    \"type\": \"Normal\",\n    \"effect\": \"Raises the user's Attack by 2 stages.\"\n  }\n}\n```",
        "response": "```python\n@Increment(Lunagaron,'_move_4')\ndef value():\n    return ('Swords Dance',0,100000,'Status','Normal',0,[])\n\n@Increment(Lunagaron)\ndef move_4(self): # Swords Dance\n    self.set_boost('atk',2,'self')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Lunagaron\",\n  \"types\": [\n    \"Ice\",\n    \"Fighting\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Frost Armor\": \"This Pokemon forms an ice armor that reduces damage from non-Fire-type attacks by 20%. Additionally, the ice armor has a 30% chance to freeze any Pokemon that makes contact.\"\n  },\n  \"moves\": {\n    \"Glacial Claws\": {\n      \"power\": 95,\n      \"accuracy\": 90,\n      \"category\": \"Physical\",\n      \"type\": \"Ice\",\n      \"effect\": \"Has a 20% chance to freeze the target. Always results in a critical hit.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Icicle Barrage\": {\n      \"power\": 70,\n      \"accuracy\": 90,\n      \"category\": \"Physical\",\n      \"type\": \"Ice\",\n      \"effect\": \"Hits 2-5 times in one turn.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Close Combat\": {\n      \"power\": 120,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Fighting\",\n      \"effect\": \"Lowers the user's Defense and Special Defense by 1 stage.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Swords Dance\": {\n      \"power\": 0,\n      \"accuracy\": 100000,\n      \"category\": \"Status\",\n      \"type\": \"Normal\",\n      \"effect\": \"Raises the user's Attack by 2 stages.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Lunagaron(PokemonBase):\n    _species='Lunagaron'\n    _types=['Ice','Fighting']\n    _gender='Male'\n    _ability=['Frost Armor']\n    _move_1=('Glacial Claws',95,90,'Physical','Ice',0,['contact'])\n    _move_2=('Icicle Barrage',70,90,'Physical','Ice',0,['contact'])\n    def __init__(self):\n        super().__init__()\n    \n    def _take_damage_attack(self,x):\n        self.register_act_taken()\n        damage=x\n        if self['act_taken']['type']!='Fire':\n            damage=int(damage*0.8)\n        self.state['hp']=max(0,self['hp']-damage)\n        if self['hp']==0:\n            self.state['status']='FNT'\n            return\n        if 'contact' in self['act_taken']['property']:\n            if rnd()<30/100:\n                self.target.set_status('FRZ')\n\n    def get_crit(self):\n        if self['act']['id']=='Glacial Claws':\n            return True\n        crit_mult=[0,24,8,2,1]\n        crit_ratio=self['boosts']['crit']\n        crit=False\n        if rnd()*crit_mult[crit_ratio+1]<1:\n            crit=True\n        return crit\n\n    def move_1(self): # Glacial Claws\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<20/100:\n                self.target.set_status('FRZ')\n\n    def move_2(self): # Icicle Barrage\n        hits=rndc([2,3,4,5])\n        for i in range(hits):\n            damage_ret=self.get_damage()\n            if damage_ret['miss']: break\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if self.target.isfaint(): break\n\n@Increment(Lunagaron,'_move_3')\ndef value():\n    return ('Close Combat',120,100,'Physical','Fighting',0,['contact'])\n\n@Increment(Lunagaron)\ndef move_3(self): # Close Combat\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        self.set_boost('def',-1,'self')\n        self.set_boost('spd',-1,'self')\n\n@Increment(Lunagaron,'_move_4')\ndef value():\n    return ('Swords Dance',0,100000,'Status','Normal',0,[])\n\n@Increment(Lunagaron)\ndef move_4(self): # Swords Dance\n    self.set_boost('atk',2,'self')\n```\n\nThis role is gonna learn a new ability:\n```json\n{\n  \"Chilled Circulation\": \"At the end of turn using an Ice-type move, boost its Speed by one stage.\"\n}\n```",
        "response": "```python\n@Increment(Lunagaron,'_ability')\ndef value():\n    return ['Frost Armor','Chilled Circulation']\n\n@Increment(Lunagaron)\ndef endturn(self):\n    if self['act'] and self['act']['type']=='Ice':\n        self.set_boost('spe',1,'self')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Lunala\",\n  \"types\": [\n    \"Psychic\",\n    \"Ghost\"\n  ],\n  \"gender\": \"Female\",\n  \"ability\": {\n    \"Shadow Shield\": \"If this Pokemon is at full HP, damage taken from attacks is halved.\"\n  },\n  \"moves\": {\n    \"Psychic\": {\n      \"power\": 90,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Psychic\",\n      \"effect\": \"Has a 10% chance to lower the target's Spe by 1 stage.\"\n    },\n    \"Moonblast\": {\n      \"power\": 95,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Fairy\",\n      \"effect\": \"Has a 30% chance to lower the target's SpA by 1 stage.\"\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass Lunala(PokemonBase):\n    _species='Lunala'\n    _types=['Psychic','Ghost']\n    _gender='Female'\n    _ability=['Shadow Shield']\n    _move_1=('Psychic',90,100,'Special','Psychic',0,[])\n    _move_2=('Moonblast',95,100,'Special','Fairy',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def _take_damage_attack(self,x):\n        self.register_act_taken()\n        if self['hp']==self['max_hp']:\n            x//=2\n        self.state['hp']=max(0,self['hp']-x)\n        if self['hp']==0:\n            self.state['status']='FNT'\n\n    def move_1(self): # Psychic\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<10/100:\n                self.target.set_boost('spe',-1)\n\n    def move_2(self): # Moonblast\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100:\n                self.target.set_boost('spa',-1)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Lunala\",\n  \"types\": [\n    \"Psychic\",\n    \"Ghost\"\n  ],\n  \"gender\": \"Female\",\n  \"ability\": {\n    \"Shadow Shield\": \"If this Pokemon is at full HP, damage taken from attacks is halved.\"\n  },\n  \"moves\": {\n    \"Psychic\": {\n      \"power\": 90,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Psychic\",\n      \"effect\": \"Has a 10% chance to lower the target's Spe by 1 stage.\"\n    },\n    \"Moonblast\": {\n      \"power\": 95,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Fairy\",\n      \"effect\": \"Has a 30% chance to lower the target's SpA by 1 stage.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Lunala(PokemonBase):\n    _species='Lunala'\n    _types=['Psychic','Ghost']\n    _gender='Female'\n    _ability=['Shadow Shield']\n    _move_1=('Psychic',90,100,'Special','Psychic',0,[])\n    _move_2=('Moonblast',95,100,'Special','Fairy',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def _take_damage_attack(self,x):\n        self.register_act_taken()\n        if self['hp']==self['max_hp']:\n            x//=2\n        self.state['hp']=max(0,self['hp']-x)\n        if self['hp']==0:\n            self.state['status']='FNT'\n\n    def move_1(self): # Psychic\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<10/100:\n                self.target.set_boost('spe',-1)\n\n    def move_2(self): # Moonblast\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100:\n                self.target.set_boost('spa',-1)\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Phantom Wave\": {\n    \"power\": 80,\n    \"accuracy\": 100,\n    \"category\": \"Special\",\n    \"type\": \"Ghost\",\n    \"effect\": \"Has a 20% chance to confuse the target.\"\n  }\n}\n```",
        "response": "```python\n@Increment(Lunala,'_move_3')\ndef value():\n    return ('Phantom Wave',80,100,'Special','Ghost',0,[])\n\n@Increment(Lunala)\ndef move_3(self): # Phantom Wave\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint() and rnd()<20/100:\n            self.target.set_condition('CONFUSION',counter=0)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Lunala\",\n  \"types\": [\n    \"Psychic\",\n    \"Ghost\"\n  ],\n  \"gender\": \"Female\",\n  \"ability\": {\n    \"Shadow Shield\": \"If this Pokemon is at full HP, damage taken from attacks is halved.\"\n  },\n  \"moves\": {\n    \"Psychic\": {\n      \"power\": 90,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Psychic\",\n      \"effect\": \"Has a 10% chance to lower the target's Spe by 1 stage.\"\n    },\n    \"Moonblast\": {\n      \"power\": 95,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Fairy\",\n      \"effect\": \"Has a 30% chance to lower the target's SpA by 1 stage.\"\n    },\n    \"Phantom Wave\": {\n      \"power\": 80,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Ghost\",\n      \"effect\": \"Has a 20% chance to confuse the target.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Lunala(PokemonBase):\n    _species='Lunala'\n    _types=['Psychic','Ghost']\n    _gender='Female'\n    _ability=['Shadow Shield']\n    _move_1=('Psychic',90,100,'Special','Psychic',0,[])\n    _move_2=('Moonblast',95,100,'Special','Fairy',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def _take_damage_attack(self,x):\n        self.register_act_taken()\n        if self['hp']==self['max_hp']:\n            x//=2\n        self.state['hp']=max(0,self['hp']-x)\n        if self['hp']==0:\n            self.state['status']='FNT'\n\n    def move_1(self): # Psychic\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<10/100:\n                self.target.set_boost('spe',-1)\n\n    def move_2(self): # Moonblast\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100:\n                self.target.set_boost('spa',-1)\n\n@Increment(Lunala,'_move_3')\ndef value():\n    return ('Phantom Wave',80,100,'Special','Ghost',0,[])\n\n@Increment(Lunala)\ndef move_3(self): # Phantom Wave\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint() and rnd()<20/100:\n            self.target.set_condition('CONFUSION',counter=0)\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Lunar Barrier\": {\n    \"power\": 0,\n    \"accuracy\": 100000,\n    \"category\": \"Status\",\n    \"type\": \"Psychic\",\n    \"effect\": \"Raises the user's special defense and defense by 1 stage for three turns.\"\n  }\n}\n```",
        "response": "```python\n@Increment(Lunala,'_move_4')\ndef value():\n    return ('Lunar Barrier',0,100000,'Status','Psychic',0,[])\n\n@Increment(Lunala)\ndef move_4(self): # Lunar Barrier\n    self.set_boost('spd',+1,'self')\n    self.set_boost('def',+1,'self')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Lunala\",\n  \"types\": [\n    \"Psychic\",\n    \"Ghost\"\n  ],\n  \"gender\": \"Female\",\n  \"ability\": {\n    \"Shadow Shield\": \"If this Pokemon is at full HP, damage taken from attacks is halved.\"\n  },\n  \"moves\": {\n    \"Psychic\": {\n      \"power\": 90,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Psychic\",\n      \"effect\": \"Has a 10% chance to lower the target's Spe by 1 stage.\"\n    },\n    \"Moonblast\": {\n      \"power\": 95,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Fairy\",\n      \"effect\": \"Has a 30% chance to lower the target's SpA by 1 stage.\"\n    },\n    \"Phantom Wave\": {\n      \"power\": 80,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Ghost\",\n      \"effect\": \"Has a 20% chance to confuse the target.\"\n    },\n    \"Lunar Barrier\": {\n      \"power\": 0,\n      \"accuracy\": 100000,\n      \"category\": \"Status\",\n      \"type\": \"Psychic\",\n      \"effect\": \"Raises the user's special defense and defense by 1 stage for three turns.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Lunala(PokemonBase):\n    _species='Lunala'\n    _types=['Psychic','Ghost']\n    _gender='Female'\n    _ability=['Shadow Shield']\n    _move_1=('Psychic',90,100,'Special','Psychic',0,[])\n    _move_2=('Moonblast',95,100,'Special','Fairy',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def _take_damage_attack(self,x):\n        self.register_act_taken()\n        if self['hp']==self['max_hp']:\n            x//=2\n        self.state['hp']=max(0,self['hp']-x)\n        if self['hp']==0:\n            self.state['status']='FNT'\n\n    def move_1(self): # Psychic\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<10/100:\n                self.target.set_boost('spe',-1)\n\n    def move_2(self): # Moonblast\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100:\n                self.target.set_boost('spa',-1)\n\n@Increment(Lunala,'_move_3')\ndef value():\n    return ('Phantom Wave',80,100,'Special','Ghost',0,[])\n\n@Increment(Lunala)\ndef move_3(self): # Phantom Wave\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint() and rnd()<20/100:\n            self.target.set_condition('CONFUSION',counter=0)\n\n@Increment(Lunala,'_move_4')\ndef value():\n    return ('Lunar Barrier',0,100000,'Status','Psychic',0,[])\n\n@Increment(Lunala)\ndef move_4(self): # Lunar Barrier\n    self.set_boost('spd',+1,'self')\n    self.set_boost('def',+1,'self')\n```\n\nThis role is gonna learn a new ability:\n```json\n{\n  \"Spectral Boost\": \"When this Pokemon lands a hit, it raises its Special Attack by 1 stage.\"\n}\n```",
        "response": "```python\n@Increment(Lunala,'_ability')\ndef value():\n    return ['Shadow Shield','Spectral Boost']\n\n@Increment(Lunala)\ndef land_hit_effect(self):\n    self.set_boost('spa',+1,'self')\n\n@Increment(Lunala)\ndef move_1(self): # Psychic\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        self.land_hit_effect()\n        if not self.target.isfaint() and rnd()<10/100:\n            self.target.set_boost('spe',-1)\n\n@Increment(Lunala)\ndef move_2(self): # Moonblast\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        self.land_hit_effect()\n        if not self.target.isfaint() and rnd()<30/100:\n            self.target.set_boost('spa',-1)\n\n@Increment(Lunala)\ndef move_3(self): # Phantom Wave\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        self.land_hit_effect()\n        if not self.target.isfaint() and rnd()<20/100:\n            self.target.set_condition('CONFUSION',counter=0)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Lunala\",\n  \"types\": [\n    \"Psychic\",\n    \"Ghost\"\n  ],\n  \"gender\": \"Female\",\n  \"ability\": {\n    \"Shadow Shield\": \"If this Pokemon is at full HP, damage taken from attacks is halved.\",\n    \"Spectral Boost\": \"When this Pokemon lands a hit, it raises its Special Attack by 1 stage.\"\n  },\n  \"moves\": {\n    \"Psychic\": {\n      \"power\": 90,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Psychic\",\n      \"effect\": \"Has a 10% chance to lower the target's Spe by 1 stage.\"\n    },\n    \"Moonblast\": {\n      \"power\": 95,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Fairy\",\n      \"effect\": \"Has a 30% chance to lower the target's SpA by 1 stage.\"\n    },\n    \"Phantom Wave\": {\n      \"power\": 80,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Ghost\",\n      \"effect\": \"Has a 20% chance to confuse the target.\"\n    },\n    \"Lunar Barrier\": {\n      \"power\": 0,\n      \"accuracy\": 100000,\n      \"category\": \"Status\",\n      \"type\": \"Psychic\",\n      \"effect\": \"Raises the user's special defense and defense by 1 stage for three turns.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Lunala(PokemonBase):\n    _species='Lunala'\n    _types=['Psychic','Ghost']\n    _gender='Female'\n    _ability=['Shadow Shield']\n    _move_1=('Psychic',90,100,'Special','Psychic',0,[])\n    _move_2=('Moonblast',95,100,'Special','Fairy',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def _take_damage_attack(self,x):\n        self.register_act_taken()\n        if self['hp']==self['max_hp']:\n            x//=2\n        self.state['hp']=max(0,self['hp']-x)\n        if self['hp']==0:\n            self.state['status']='FNT'\n\n    def move_1(self): # Psychic\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<10/100:\n                self.target.set_boost('spe',-1)\n\n    def move_2(self): # Moonblast\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100:\n                self.target.set_boost('spa',-1)\n\n@Increment(Lunala,'_move_3')\ndef value():\n    return ('Phantom Wave',80,100,'Special','Ghost',0,[])\n\n@Increment(Lunala)\ndef move_3(self): # Phantom Wave\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint() and rnd()<20/100:\n            self.target.set_condition('CONFUSION',counter=0)\n\n@Increment(Lunala,'_move_4')\ndef value():\n    return ('Lunar Barrier',0,100000,'Status','Psychic',0,[])\n\n@Increment(Lunala)\ndef move_4(self): # Lunar Barrier\n    self.set_boost('spd',+1,'self')\n    self.set_boost('def',+1,'self')\n\n@Increment(Lunala,'_ability')\ndef value():\n    return ['Shadow Shield','Spectral Boost']\n\n@Increment(Lunala)\ndef land_hit_effect(self):\n    self.set_boost('spa',+1,'self')\n\n@Increment(Lunala)\ndef move_1(self): # Psychic\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        self.land_hit_effect()\n        if not self.target.isfaint() and rnd()<10/100:\n            self.target.set_boost('spe',-1)\n\n@Increment(Lunala)\ndef move_2(self): # Moonblast\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        self.land_hit_effect()\n        if not self.target.isfaint() and rnd()<30/100:\n            self.target.set_boost('spa',-1)\n\n@Increment(Lunala)\ndef move_3(self): # Phantom Wave\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        self.land_hit_effect()\n        if not self.target.isfaint() and rnd()<20/100:\n            self.target.set_condition('CONFUSION',counter=0)\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Soul Drain\": {\n    \"power\": 70,\n    \"accuracy\": 100,\n    \"category\": \"Special\",\n    \"type\": \"Ghost\",\n    \"effect\": \"Heals the user for half the damage dealt.\"\n  }\n}\n```",
        "response": "```python\n@Increment(Lunala,'_move_5')\ndef value():\n    return ('Soul Drain',70,100,'Special','Ghost',0,[])\n\n@Increment(Lunala)\ndef move_5(self): # Soul Drain\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        self.land_hit_effect()\n        self.restore(damage//2,'drain')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Luxray\",\n  \"types\": [\n    \"Electric\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Guts\": \"If this Pokemon is in a status, its Attack is 1.5x, ignoring burn halving physical damage.\"\n  },\n  \"moves\": {\n    \"Wild Charge\": {\n      \"power\": 90,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Electric\",\n      \"effect\": \"The user takes 1/4 of the damage dealt in recoil.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Crunch\": {\n      \"power\": 80,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Dark\",\n      \"effect\": \"Has a 20% chance to lower the target's Defense by 1 stage.\",\n      \"property\": [\n        \"contact\"\n      ]\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass Luxray(PokemonBase):\n    _species='Luxray'\n    _types=['Electric']\n    _gender='Male'\n    _ability=['Guts']\n    _move_1=('Wild Charge',90,100,'Physical','Electric',0,['contact'])\n    _move_2=('Crunch',80,100,'Physical','Dark',0,['contact'])\n    def __init__(self):\n        super().__init__()\n\n    def get_other_mult(self):\n        return 1.\n    \n    def get_stat(self,key,boost=None):\n        stat=self['stats'][key]\n        boost=self['boosts'][key] if not boost else boost\n        stat_ratio={0:1,1:1.5,2:2,3:2.5,4:3,5:3.5,6:4}[min(6,abs(boost))]\n        if boost<0:\n            stat_ratio=1/stat_ratio\n        stat_ratio*=self.get_weather_stat_mult(key)\n        if key=='spe' and self.isstatus('PAR'):\n            stat_ratio*=0.5\n        if key=='atk' and self['status']:\n            stat_ratio*=1.5\n        return int(stat*stat_ratio)\n\n    def move_1(self): # Wild Charge  \n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            recoil_damage=int(damage*0.25)\n            self.take_damage(recoil_damage,'recoil')\n\n    def move_2(self): # Crunch\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<20/100:\n                self.target.set_boost('def',-1)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Luxray\",\n  \"types\": [\n    \"Electric\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Guts\": \"If this Pokemon is in a status, its Attack is 1.5x, ignoring burn halving physical damage.\"\n  },\n  \"moves\": {\n    \"Wild Charge\": {\n      \"power\": 90,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Electric\",\n      \"effect\": \"The user takes 1/4 of the damage dealt in recoil.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Crunch\": {\n      \"power\": 80,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Dark\",\n      \"effect\": \"Has a 20% chance to lower the target's Defense by 1 stage.\",\n      \"property\": [\n        \"contact\"\n      ]\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Luxray(PokemonBase):\n    _species='Luxray'\n    _types=['Electric']\n    _gender='Male'\n    _ability=['Guts']\n    _move_1=('Wild Charge',90,100,'Physical','Electric',0,['contact'])\n    _move_2=('Crunch',80,100,'Physical','Dark',0,['contact'])\n    def __init__(self):\n        super().__init__()\n\n    def get_other_mult(self):\n        return 1.\n    \n    def get_stat(self,key,boost=None):\n        stat=self['stats'][key]\n        boost=self['boosts'][key] if not boost else boost\n        stat_ratio={0:1,1:1.5,2:2,3:2.5,4:3,5:3.5,6:4}[min(6,abs(boost))]\n        if boost<0:\n            stat_ratio=1/stat_ratio\n        stat_ratio*=self.get_weather_stat_mult(key)\n        if key=='spe' and self.isstatus('PAR'):\n            stat_ratio*=0.5\n        if key=='atk' and self['status']:\n            stat_ratio*=1.5\n        return int(stat*stat_ratio)\n\n    def move_1(self): # Wild Charge  \n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            recoil_damage=int(damage*0.25)\n            self.take_damage(recoil_damage,'recoil')\n\n    def move_2(self): # Crunch\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<20/100:\n                self.target.set_boost('def',-1)\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Ice Fang\": {\n    \"power\": 65,\n    \"accuracy\": 95,\n    \"category\": \"Physical\",\n    \"type\": \"Ice\",\n    \"effect\": \"Has a 10% chance to freeze the target and a separate 10% chance to make it flinch.\",\n    \"property\": [\n      \"contact\"\n    ]\n  }\n}\n```",
        "response": "```python\n@Increment(Luxray,'_move_3')\ndef value():\n    return ('Ice Fang',65,95,'Physical','Ice',0,['contact'])\n\n@Increment(Luxray)\ndef move_3(self): # Ice Fang\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint():\n            if rnd()<10/100:\n                self.target.set_condition('FLINCH',counter=0)\n            if rnd()<10/100: \n                self.target.set_status('FRZ')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Lycanroc\",\n  \"types\": [\n    \"Rock\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Tough Claws\": \"This Pokemon's contact moves have 1.3x power.\"\n  },\n  \"moves\": {\n    \"Psychic Fangs\": {\n      \"power\": 85,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Psychic\",\n      \"effect\": \"Destroys the effects of Reflect, Light Screen, and Aurora Veil on the target side of the field.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Stone Edge\": {\n      \"power\": 100,\n      \"accuracy\": 80,\n      \"category\": \"Physical\",\n      \"type\": \"Rock\",\n      \"effect\": \"One mroe critical hit ratio.\",\n      \"property\": [\n        \"contact\"\n      ]\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass Lycanroc(PokemonBase):\n    _species='Lycanroc'\n    _types=['Rock']\n    _gender='Male'\n    _ability=['Tough Claws']\n    _move_1=('Psychic Fangs',85,100,'Physical','Psychic',0,['contact'])\n    _move_2=('Stone Edge',100,80,'Physical','Rock',0,['contact'])\n    def __init__(self):\n        super().__init__()\n\n    def get_power(self):        \n        power=self['act']['power']\n        if 'contact' in self['act']['property']:\n            power*=1.3\n        return int(power*self.get_weather_power_mult())\n    \n    def get_crit(self):\n        crit_mult=[0,24,8,2,1]\n        crit_ratio=self['boosts']['crit']\n        if self['act']['id']=='Stone Edge':\n            crit_ratio=min(3,crit_ratio+1)\n        crit=False\n        if rnd()*crit_mult[crit_ratio+1]<1:\n            crit=True\n        return crit\n\n    def move_1(self): # Psychic Fangs\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage*1.3)\n            for t in ['REFLECT','LIGHT_SCREEN','AURORA_VEIL']:\n                if self.target['side_conditions'].get(t):\n                    del self.target['side_conditions'][t]\n\n    def move_2(self): # Stone Edge\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage*1.3)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Lycanroc\",\n  \"types\": [\n    \"Rock\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Tough Claws\": \"This Pokemon's contact moves have 1.3x power.\"\n  },\n  \"moves\": {\n    \"Psychic Fangs\": {\n      \"power\": 85,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Psychic\",\n      \"effect\": \"Destroys the effects of Reflect, Light Screen, and Aurora Veil on the target side of the field.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Stone Edge\": {\n      \"power\": 100,\n      \"accuracy\": 80,\n      \"category\": \"Physical\",\n      \"type\": \"Rock\",\n      \"effect\": \"One mroe critical hit ratio.\",\n      \"property\": [\n        \"contact\"\n      ]\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Lycanroc(PokemonBase):\n    _species='Lycanroc'\n    _types=['Rock']\n    _gender='Male'\n    _ability=['Tough Claws']\n    _move_1=('Psychic Fangs',85,100,'Physical','Psychic',0,['contact'])\n    _move_2=('Stone Edge',100,80,'Physical','Rock',0,['contact'])\n    def __init__(self):\n        super().__init__()\n\n    def get_power(self):        \n        power=self['act']['power']\n        if 'contact' in self['act']['property']:\n            power*=1.3\n        return int(power*self.get_weather_power_mult())\n    \n    def get_crit(self):\n        crit_mult=[0,24,8,2,1]\n        crit_ratio=self['boosts']['crit']\n        if self['act']['id']=='Stone Edge':\n            crit_ratio=min(3,crit_ratio+1)\n        crit=False\n        if rnd()*crit_mult[crit_ratio+1]<1:\n            crit=True\n        return crit\n\n    def move_1(self): # Psychic Fangs\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage*1.3)\n            for t in ['REFLECT','LIGHT_SCREEN','AURORA_VEIL']:\n                if self.target['side_conditions'].get(t):\n                    del self.target['side_conditions'][t]\n\n    def move_2(self): # Stone Edge\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage*1.3)\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Zen Headbutt\": {\n    \"power\": 80,\n    \"accuracy\": 90,\n    \"category\": \"Physical\",\n    \"type\": \"Psychic\",\n    \"effect\": \"Has a 20% chance to flinch the target.\",\n    \"property\": [\n      \"contact\"\n    ]\n  }\n}\n```",
        "response": "```python\n@Increment(Lycanroc,'_move_3')\ndef value():\n    return ('Zen Headbutt',80,90,'Physical','Psychic',0,['contact'])\n\n@Increment(Lycanroc)\ndef move_3(self): # Zen Headbutt\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint() and rnd()<20/100:\n            self.target.set_condition('FLINCH',counter=0)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Lycanroc\",\n  \"types\": [\n    \"Rock\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Tough Claws\": \"This Pokemon's contact moves have 1.3x power.\"\n  },\n  \"moves\": {\n    \"Psychic Fangs\": {\n      \"power\": 85,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Psychic\",\n      \"effect\": \"Destroys the effects of Reflect, Light Screen, and Aurora Veil on the target side of the field.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Stone Edge\": {\n      \"power\": 100,\n      \"accuracy\": 80,\n      \"category\": \"Physical\",\n      \"type\": \"Rock\",\n      \"effect\": \"One mroe critical hit ratio.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Zen Headbutt\": {\n      \"power\": 80,\n      \"accuracy\": 90,\n      \"category\": \"Physical\",\n      \"type\": \"Psychic\",\n      \"effect\": \"Has a 20% chance to flinch the target.\",\n      \"property\": [\n        \"contact\"\n      ]\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Lycanroc(PokemonBase):\n    _species='Lycanroc'\n    _types=['Rock']\n    _gender='Male'\n    _ability=['Tough Claws']\n    _move_1=('Psychic Fangs',85,100,'Physical','Psychic',0,['contact'])\n    _move_2=('Stone Edge',100,80,'Physical','Rock',0,['contact'])\n    def __init__(self):\n        super().__init__()\n\n    def get_power(self):        \n        power=self['act']['power']\n        if 'contact' in self['act']['property']:\n            power*=1.3\n        return int(power*self.get_weather_power_mult())\n    \n    def get_crit(self):\n        crit_mult=[0,24,8,2,1]\n        crit_ratio=self['boosts']['crit']\n        if self['act']['id']=='Stone Edge':\n            crit_ratio=min(3,crit_ratio+1)\n        crit=False\n        if rnd()*crit_mult[crit_ratio+1]<1:\n            crit=True\n        return crit\n\n    def move_1(self): # Psychic Fangs\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage*1.3)\n            for t in ['REFLECT','LIGHT_SCREEN','AURORA_VEIL']:\n                if self.target['side_conditions'].get(t):\n                    del self.target['side_conditions'][t]\n\n    def move_2(self): # Stone Edge\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage*1.3)\n\n@Increment(Lycanroc,'_move_3')\ndef value():\n    return ('Zen Headbutt',80,90,'Physical','Psychic',0,['contact'])\n\n@Increment(Lycanroc)\ndef move_3(self): # Zen Headbutt\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint() and rnd()<20/100:\n            self.target.set_condition('FLINCH',counter=0)\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Earthquake\": {\n    \"power\": 100,\n    \"accuracy\": 100,\n    \"category\": \"Physical\",\n    \"type\": \"Ground\",\n    \"effect\": \"\"\n  }\n}\n```",
        "response": "```python\n@Increment(Lycanroc,'_move_4')\ndef value():\n    return ('Earthquake',100,100,'Physical','Ground',0,[])\n\n@Increment(Lycanroc)\ndef move_4(self): # Earthquake\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Lycanroc\",\n  \"types\": [\n    \"Rock\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Tough Claws\": \"This Pokemon's contact moves have 1.3x power.\"\n  },\n  \"moves\": {\n    \"Psychic Fangs\": {\n      \"power\": 85,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Psychic\",\n      \"effect\": \"Destroys the effects of Reflect, Light Screen, and Aurora Veil on the target side of the field.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Stone Edge\": {\n      \"power\": 100,\n      \"accuracy\": 80,\n      \"category\": \"Physical\",\n      \"type\": \"Rock\",\n      \"effect\": \"One mroe critical hit ratio.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Zen Headbutt\": {\n      \"power\": 80,\n      \"accuracy\": 90,\n      \"category\": \"Physical\",\n      \"type\": \"Psychic\",\n      \"effect\": \"Has a 20% chance to flinch the target.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Earthquake\": {\n      \"power\": 100,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Ground\",\n      \"effect\": \"\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Lycanroc(PokemonBase):\n    _species='Lycanroc'\n    _types=['Rock']\n    _gender='Male'\n    _ability=['Tough Claws']\n    _move_1=('Psychic Fangs',85,100,'Physical','Psychic',0,['contact'])\n    _move_2=('Stone Edge',100,80,'Physical','Rock',0,['contact'])\n    def __init__(self):\n        super().__init__()\n\n    def get_power(self):        \n        power=self['act']['power']\n        if 'contact' in self['act']['property']:\n            power*=1.3\n        return int(power*self.get_weather_power_mult())\n    \n    def get_crit(self):\n        crit_mult=[0,24,8,2,1]\n        crit_ratio=self['boosts']['crit']\n        if self['act']['id']=='Stone Edge':\n            crit_ratio=min(3,crit_ratio+1)\n        crit=False\n        if rnd()*crit_mult[crit_ratio+1]<1:\n            crit=True\n        return crit\n\n    def move_1(self): # Psychic Fangs\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage*1.3)\n            for t in ['REFLECT','LIGHT_SCREEN','AURORA_VEIL']:\n                if self.target['side_conditions'].get(t):\n                    del self.target['side_conditions'][t]\n\n    def move_2(self): # Stone Edge\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage*1.3)\n\n@Increment(Lycanroc,'_move_3')\ndef value():\n    return ('Zen Headbutt',80,90,'Physical','Psychic',0,['contact'])\n\n@Increment(Lycanroc)\ndef move_3(self): # Zen Headbutt\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint() and rnd()<20/100:\n            self.target.set_condition('FLINCH',counter=0)\n\n@Increment(Lycanroc,'_move_4')\ndef value():\n    return ('Earthquake',100,100,'Physical','Ground',0,[])\n\n@Increment(Lycanroc)\ndef move_4(self): # Earthquake\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n```\n\nThis role is gonna learn a new ability:\n```json\n{\n  \"Keen Eye\": \"Prevents other Pokemon from lowering this Pokemon's accuracy.\"\n}\n```",
        "response": "```python\n@Increment(Lycanroc,'_ability')\ndef value():\n    return ['Tough Claws','Keen Eye']\n\n@Increment(Lycanroc)\ndef set_boost(self,key,x,from_='target'):\n    if key=='accuracy' and x<0 and from_=='target':\n        return\n    bar=6 if key in ['atk','def','spa','spd','spe'] else 3\n    if x>0:\n        self['boosts'][key]=min(bar,self['boosts'][key]+x)\n    else:\n        self['boosts'][key]=max(-bar,self['boosts'][key]+x)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Lycanroc\",\n  \"types\": [\n    \"Rock\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Tough Claws\": \"This Pokemon's contact moves have 1.3x power.\",\n    \"Keen Eye\": \"Prevents other Pokemon from lowering this Pokemon's accuracy.\"\n  },\n  \"moves\": {\n    \"Psychic Fangs\": {\n      \"power\": 85,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Psychic\",\n      \"effect\": \"Destroys the effects of Reflect, Light Screen, and Aurora Veil on the target side of the field.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Stone Edge\": {\n      \"power\": 100,\n      \"accuracy\": 80,\n      \"category\": \"Physical\",\n      \"type\": \"Rock\",\n      \"effect\": \"One mroe critical hit ratio.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Zen Headbutt\": {\n      \"power\": 80,\n      \"accuracy\": 90,\n      \"category\": \"Physical\",\n      \"type\": \"Psychic\",\n      \"effect\": \"Has a 20% chance to flinch the target.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Earthquake\": {\n      \"power\": 100,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Ground\",\n      \"effect\": \"\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Lycanroc(PokemonBase):\n    _species='Lycanroc'\n    _types=['Rock']\n    _gender='Male'\n    _ability=['Tough Claws']\n    _move_1=('Psychic Fangs',85,100,'Physical','Psychic',0,['contact'])\n    _move_2=('Stone Edge',100,80,'Physical','Rock',0,['contact'])\n    def __init__(self):\n        super().__init__()\n\n    def get_power(self):        \n        power=self['act']['power']\n        if 'contact' in self['act']['property']:\n            power*=1.3\n        return int(power*self.get_weather_power_mult())\n    \n    def get_crit(self):\n        crit_mult=[0,24,8,2,1]\n        crit_ratio=self['boosts']['crit']\n        if self['act']['id']=='Stone Edge':\n            crit_ratio=min(3,crit_ratio+1)\n        crit=False\n        if rnd()*crit_mult[crit_ratio+1]<1:\n            crit=True\n        return crit\n\n    def move_1(self): # Psychic Fangs\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage*1.3)\n            for t in ['REFLECT','LIGHT_SCREEN','AURORA_VEIL']:\n                if self.target['side_conditions'].get(t):\n                    del self.target['side_conditions'][t]\n\n    def move_2(self): # Stone Edge\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage*1.3)\n\n@Increment(Lycanroc,'_move_3')\ndef value():\n    return ('Zen Headbutt',80,90,'Physical','Psychic',0,['contact'])\n\n@Increment(Lycanroc)\ndef move_3(self): # Zen Headbutt\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint() and rnd()<20/100:\n            self.target.set_condition('FLINCH',counter=0)\n\n@Increment(Lycanroc,'_move_4')\ndef value():\n    return ('Earthquake',100,100,'Physical','Ground',0,[])\n\n@Increment(Lycanroc)\ndef move_4(self): # Earthquake\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n\n@Increment(Lycanroc,'_ability')\ndef value():\n    return ['Tough Claws','Keen Eye']\n\n@Increment(Lycanroc)\ndef set_boost(self,key,x,from_='target'):\n    if key=='accuracy' and x<0 and from_=='target':\n        return\n    bar=6 if key in ['atk','def','spa','spd','spe'] else 3\n    if x>0:\n        self['boosts'][key]=min(bar,self['boosts'][key]+x)\n    else:\n        self['boosts'][key]=max(-bar,self['boosts'][key]+x)\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Swords Dance\": {\n    \"power\": 0,\n    \"accuracy\": 100000,\n    \"category\": \"Status\",\n    \"type\": \"Normal\",\n    \"effect\": \"Raises the user's Attack by 2 stages.\"\n  }\n}\n```",
        "response": "```python\n@Increment(Lycanroc,'_move_5')\ndef value():\n    return ('Swords Dance',0,100000,'Status','Normal',0,[])\n\n@Increment(Lycanroc)\ndef move_5(self): # Swords Dance\n    self.set_boost('atk',+2,'self')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Magnamalo\",\n  \"types\": [\n    \"Fire\",\n    \"Poison\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Hellfire Metabolism\": \"This Pokemon's Special Attack increases by 1 stage when it uses a Fire-type move, but takes damage equal to 1/16 of its max HP.\"\n  },\n  \"moves\": {\n    \"Hellfire Blast\": {\n      \"power\": 100,\n      \"accuracy\": 90,\n      \"category\": \"Special\",\n      \"type\": \"Fire\",\n      \"effect\": \"\"\n    },\n    \"Poison Vents\": {\n      \"power\": 70,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Poison\",\n      \"effect\": \"Has a 30% chance to poison the target.\"\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass Magnamalo(PokemonBase):\n    _species='Magnamalo'\n    _types=['Fire','Poison']\n    _gender='Male'\n    _ability=['Hellfire Metabolism']\n    _move_1=('Hellfire Blast',100,90,'Special','Fire',0,[])\n    _move_2=('Poison Vents',70,100,'Special','Poison',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def move_1(self): # Hellfire Blast\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            self.set_boost('spa',+1,'self')\n            self.take_damage(self['max_hp']//16,'loss')\n\n    def move_2(self): # Poison Vents\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100:\n                self.target.set_status('PSN')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Magnamalo\",\n  \"types\": [\n    \"Fire\",\n    \"Poison\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Hellfire Metabolism\": \"This Pokemon's Special Attack increases by 1 stage when it uses a Fire-type move, but takes damage equal to 1/16 of its max HP.\"\n  },\n  \"moves\": {\n    \"Hellfire Blast\": {\n      \"power\": 100,\n      \"accuracy\": 90,\n      \"category\": \"Special\",\n      \"type\": \"Fire\",\n      \"effect\": \"\"\n    },\n    \"Poison Vents\": {\n      \"power\": 70,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Poison\",\n      \"effect\": \"Has a 30% chance to poison the target.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Magnamalo(PokemonBase):\n    _species='Magnamalo'\n    _types=['Fire','Poison']\n    _gender='Male'\n    _ability=['Hellfire Metabolism']\n    _move_1=('Hellfire Blast',100,90,'Special','Fire',0,[])\n    _move_2=('Poison Vents',70,100,'Special','Poison',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def move_1(self): # Hellfire Blast\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            self.set_boost('spa',+1,'self')\n            self.take_damage(self['max_hp']//16,'loss')\n\n    def move_2(self): # Poison Vents\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100:\n                self.target.set_status('PSN')\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Explosive Strike\": {\n    \"power\": 80,\n    \"accuracy\": 100,\n    \"category\": \"Physical\",\n    \"type\": \"Fire\",\n    \"effect\": \"Deals additional damage equal to 10% of the target's max HP, but the user takes 10% of its own max HP as recoil.\"\n  }\n}\n```",
        "response": "```python\n@Increment(Magnamalo,'_move_3')\ndef value():\n    return ('Explosive Strike',80,100,'Physical','Fire',0,[])\n\n@Increment(Magnamalo)\ndef move_3(self): # Explosive Strike\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        self.target.take_damage(self.target['max_hp']//10,'loss')\n        self.take_damage(self['max_hp']//10,'recoil')\n        self.set_boost('spa',+1,'self')\n        self.take_damage(self['max_hp']//16,'loss')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Magnamalo\",\n  \"types\": [\n    \"Fire\",\n    \"Poison\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Hellfire Metabolism\": \"This Pokemon's Special Attack increases by 1 stage when it uses a Fire-type move, but takes damage equal to 1/16 of its max HP.\"\n  },\n  \"moves\": {\n    \"Hellfire Blast\": {\n      \"power\": 100,\n      \"accuracy\": 90,\n      \"category\": \"Special\",\n      \"type\": \"Fire\",\n      \"effect\": \"\"\n    },\n    \"Poison Vents\": {\n      \"power\": 70,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Poison\",\n      \"effect\": \"Has a 30% chance to poison the target.\"\n    },\n    \"Explosive Strike\": {\n      \"power\": 80,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Fire\",\n      \"effect\": \"Deals additional damage equal to 10% of the target's max HP, but the user takes 10% of its own max HP as recoil.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Magnamalo(PokemonBase):\n    _species='Magnamalo'\n    _types=['Fire','Poison']\n    _gender='Male'\n    _ability=['Hellfire Metabolism']\n    _move_1=('Hellfire Blast',100,90,'Special','Fire',0,[])\n    _move_2=('Poison Vents',70,100,'Special','Poison',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def move_1(self): # Hellfire Blast\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            self.set_boost('spa',+1,'self')\n            self.take_damage(self['max_hp']//16,'loss')\n\n    def move_2(self): # Poison Vents\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100:\n                self.target.set_status('PSN')\n\n@Increment(Magnamalo,'_move_3')\ndef value():\n    return ('Explosive Strike',80,100,'Physical','Fire',0,[])\n\n@Increment(Magnamalo)\ndef move_3(self): # Explosive Strike\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        self.target.take_damage(self.target['max_hp']//10,'loss')\n        self.take_damage(self['max_hp']//10,'recoil')\n        self.set_boost('spa',+1,'self')\n        self.take_damage(self['max_hp']//16,'loss')\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Gas Cloud\": {\n    \"power\": 0,\n    \"accuracy\": 100000,\n    \"category\": \"Status\",\n    \"type\": \"Poison\",\n    \"effect\": \"Creates a gas cloud in the opponent's field that lasts for 2 turns, lowering the accuracy of all non-Poison-type Pokemon by 1 stage each end of the turn.\"\n  }\n}\n```",
        "response": "```python\n@Increment(Magnamalo,'_move_4')\ndef value():\n    return ('Gas Cloud',0,100000,'Status','Poison',0,[])\n\n@Increment(Magnamalo)\ndef move_4(self): # Gas Cloud\n    self.target.set_side_condition('GAS_CLOUD',counter=0)\n\n@Increment(Magnamalo)\ndef endturn(self):\n    if self.target['side_conditions'].get('GAS_CLOUD'):\n        self.target['side_conditions']['GAS_CLOUD']['counter']+=1\n        if self.target['side_conditions']['GAS_CLOUD']['counter']==2:\n            del self.target['side_conditions']['GAS_CLOUD']\n    if self.target['side_conditions'].get('GAS_CLOUD'):\n        if not self.target.istype('Poison'):\n            self.target.set_boost('accuracy',-1)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Magnamalo\",\n  \"types\": [\n    \"Fire\",\n    \"Poison\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Hellfire Metabolism\": \"This Pokemon's Special Attack increases by 1 stage when it uses a Fire-type move, but takes damage equal to 1/16 of its max HP.\"\n  },\n  \"moves\": {\n    \"Hellfire Blast\": {\n      \"power\": 100,\n      \"accuracy\": 90,\n      \"category\": \"Special\",\n      \"type\": \"Fire\",\n      \"effect\": \"\"\n    },\n    \"Poison Vents\": {\n      \"power\": 70,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Poison\",\n      \"effect\": \"Has a 30% chance to poison the target.\"\n    },\n    \"Explosive Strike\": {\n      \"power\": 80,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Fire\",\n      \"effect\": \"Deals additional damage equal to 10% of the target's max HP, but the user takes 10% of its own max HP as recoil.\"\n    },\n    \"Gas Cloud\": {\n      \"power\": 0,\n      \"accuracy\": 100000,\n      \"category\": \"Status\",\n      \"type\": \"Poison\",\n      \"effect\": \"Creates a gas cloud in the opponent's field that lasts for 2 turns, lowering the accuracy of all non-Poison-type Pokemon by 1 stage each end of the turn.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Magnamalo(PokemonBase):\n    _species='Magnamalo'\n    _types=['Fire','Poison']\n    _gender='Male'\n    _ability=['Hellfire Metabolism']\n    _move_1=('Hellfire Blast',100,90,'Special','Fire',0,[])\n    _move_2=('Poison Vents',70,100,'Special','Poison',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def move_1(self): # Hellfire Blast\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            self.set_boost('spa',+1,'self')\n            self.take_damage(self['max_hp']//16,'loss')\n\n    def move_2(self): # Poison Vents\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100:\n                self.target.set_status('PSN')\n\n@Increment(Magnamalo,'_move_3')\ndef value():\n    return ('Explosive Strike',80,100,'Physical','Fire',0,[])\n\n@Increment(Magnamalo)\ndef move_3(self): # Explosive Strike\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        self.target.take_damage(self.target['max_hp']//10,'loss')\n        self.take_damage(self['max_hp']//10,'recoil')\n        self.set_boost('spa',+1,'self')\n        self.take_damage(self['max_hp']//16,'loss')\n\n@Increment(Magnamalo,'_move_4')\ndef value():\n    return ('Gas Cloud',0,100000,'Status','Poison',0,[])\n\n@Increment(Magnamalo)\ndef move_4(self): # Gas Cloud\n    self.target.set_side_condition('GAS_CLOUD',counter=0)\n\n@Increment(Magnamalo)\ndef endturn(self):\n    if self.target['side_conditions'].get('GAS_CLOUD'):\n        self.target['side_conditions']['GAS_CLOUD']['counter']+=1\n        if self.target['side_conditions']['GAS_CLOUD']['counter']==2:\n            del self.target['side_conditions']['GAS_CLOUD']\n    if self.target['side_conditions'].get('GAS_CLOUD'):\n        if not self.target.istype('Poison'):\n            self.target.set_boost('accuracy',-1)\n```\n\nThis role is gonna learn a new ability:\n```json\n{\n  \"Volatile Flame\": \"This Pokemon's Fire-type attacks have a 50% chance to cause an explosion to the target, dealing additional damage of 1/16 of its max HP.\"\n}\n```",
        "response": "```python\n@Increment(Magnamalo,'_ability')\ndef value():\n    return ['Hellfire Metabolism','Volatile Flame']\n\n@Increment(Magnamalo)\ndef move_1(self): # Hellfire Blast\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint() and rnd()<50/100:\n            self.target.take_damage(self.target['max_hp']//16,'loss')\n        self.set_boost('spa',+1,'self')\n        self.take_damage(self['max_hp']//16,'loss')\n\n@Increment(Magnamalo)\ndef move_3(self): # Explosive Strike\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        self.target.take_damage(self.target['max_hp']//10,'loss')\n        self.take_damage(self['max_hp']//10,'recoil')\n        if not self.target.isfaint() and rnd()<50/100:\n            self.target.take_damage(self.target['max_hp']//16,'loss')\n        self.set_boost('spa',+1,'self')\n        self.take_damage(self['max_hp']//16,'loss')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Malzeno\",\n  \"types\": [\n    \"Dragon\",\n    \"Dark\"\n  ],\n  \"gender\": \"Neutral\",\n  \"ability\": {\n    \"Symbiotic Control\": \"Increases the power of draining moves by 25%.\"\n  },\n  \"moves\": {\n    \"Bloodblight Strike\": {\n      \"power\": 90,\n      \"accuracy\": 95,\n      \"category\": \"Physical\",\n      \"type\": \"Dark\",\n      \"effect\": \"Drains 1/8 of the target's max HP and gains additional one rechage.\"\n    },\n    \"Dragon Breath\": {\n      \"power\": 80,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Dragon\",\n      \"effect\": \"Has a 20% chance to paralyze the target.\"\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass Malzeno(PokemonBase):\n    _species='Malzeno'\n    _types=['Dragon','Dark']\n    _gender='Neutral'\n    _ability=['Symbiotic Control']\n    _move_1=('Bloodblight Strike',90,95,'Physical','Dark',0,[])\n    _move_2=('Dragon Breath',80,100,'Special','Dragon',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def get_power(self):\n        power=self['act']['power']\n        if self['act']['id'] in ['Bloodblight Strike','Quirio Beam']:\n            power*=1.25\n        return int(power*self.get_weather_power_mult())\n\n    def move_1(self): # Bloodblight Strike\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            self.restore(int(self.target['max_hp']*0.125),'drain')\n            self.recharge()\n    \n    def move_2(self): # Dragon Breath\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if rnd()<20/100:\n                self.target.set_status('PAR')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Malzeno\",\n  \"types\": [\n    \"Dragon\",\n    \"Dark\"\n  ],\n  \"gender\": \"Neutral\",\n  \"ability\": {\n    \"Symbiotic Control\": \"Increases the power of draining moves by 25%.\"\n  },\n  \"moves\": {\n    \"Bloodblight Strike\": {\n      \"power\": 90,\n      \"accuracy\": 95,\n      \"category\": \"Physical\",\n      \"type\": \"Dark\",\n      \"effect\": \"Drains 1/8 of the target's max HP and gains additional one rechage.\"\n    },\n    \"Dragon Breath\": {\n      \"power\": 80,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Dragon\",\n      \"effect\": \"Has a 20% chance to paralyze the target.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Malzeno(PokemonBase):\n    _species='Malzeno'\n    _types=['Dragon','Dark']\n    _gender='Neutral'\n    _ability=['Symbiotic Control']\n    _move_1=('Bloodblight Strike',90,95,'Physical','Dark',0,[])\n    _move_2=('Dragon Breath',80,100,'Special','Dragon',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def get_power(self):\n        power=self['act']['power']\n        if self['act']['id'] in ['Bloodblight Strike','Quirio Beam']:\n            power*=1.25\n        return int(power*self.get_weather_power_mult())\n\n    def move_1(self): # Bloodblight Strike\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            self.restore(int(self.target['max_hp']*0.125),'drain')\n            self.recharge()\n    \n    def move_2(self): # Dragon Breath\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if rnd()<20/100:\n                self.target.set_status('PAR')\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Quirio Beam\": {\n    \"power\": 80,\n    \"accuracy\": 100,\n    \"category\": \"Special\",\n    \"type\": \"Dragon\",\n    \"effect\": \"The user recovers 1/2 the HP lost by the target.\"\n  }\n}\n```",
        "response": "```python\n@Increment(Malzeno,'_move_3')\ndef value():\n    return ('Quirio Beam',80,100,'Special','Dragon',0,[])\n\n@Increment(Malzeno)\ndef move_3(self): # Quirio Beam\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        self.restore(int(damage//2),'drain')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Malzeno\",\n  \"types\": [\n    \"Dragon\",\n    \"Dark\"\n  ],\n  \"gender\": \"Neutral\",\n  \"ability\": {\n    \"Symbiotic Control\": \"Increases the power of draining moves by 25%.\"\n  },\n  \"moves\": {\n    \"Bloodblight Strike\": {\n      \"power\": 90,\n      \"accuracy\": 95,\n      \"category\": \"Physical\",\n      \"type\": \"Dark\",\n      \"effect\": \"Drains 1/8 of the target's max HP and gains additional one rechage.\"\n    },\n    \"Dragon Breath\": {\n      \"power\": 80,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Dragon\",\n      \"effect\": \"Has a 20% chance to paralyze the target.\"\n    },\n    \"Quirio Beam\": {\n      \"power\": 80,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Dragon\",\n      \"effect\": \"The user recovers 1/2 the HP lost by the target.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Malzeno(PokemonBase):\n    _species='Malzeno'\n    _types=['Dragon','Dark']\n    _gender='Neutral'\n    _ability=['Symbiotic Control']\n    _move_1=('Bloodblight Strike',90,95,'Physical','Dark',0,[])\n    _move_2=('Dragon Breath',80,100,'Special','Dragon',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def get_power(self):\n        power=self['act']['power']\n        if self['act']['id'] in ['Bloodblight Strike','Quirio Beam']:\n            power*=1.25\n        return int(power*self.get_weather_power_mult())\n\n    def move_1(self): # Bloodblight Strike\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            self.restore(int(self.target['max_hp']*0.125),'drain')\n            self.recharge()\n    \n    def move_2(self): # Dragon Breath\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if rnd()<20/100:\n                self.target.set_status('PAR')\n\n@Increment(Malzeno,'_move_3')\ndef value():\n    return ('Quirio Beam',80,100,'Special','Dragon',0,[])\n\n@Increment(Malzeno)\ndef move_3(self): # Quirio Beam\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        self.restore(int(damage//2),'drain')\n```\n\nThis role is gonna learn a new ability:\n```json\n{\n  \"Bloodening Surge\": \"This Pokemon's each drain recharges itself once. After reaching 5, it will enter Bloodening condition, its attack and special attack is increased by 50%.\"\n}\n```",
        "response": "```python\n@Increment(Malzeno,'_ability')\ndef value():\n    return ['Symbiotic Control','Bloodening Surge']\n\n@Increment(Malzeno)\ndef onswitch(self):\n    self.set_condition('RECHARGE',counter=0)\n\n@Increment(Malzeno)\ndef recharge(self):\n    self['conditions']['RECHARGE']['counter']+=1\n    if self['conditions']['RECHARGE']['counter']==5:\n        self.set_condition('BLOODENING',counter=0)\n\n@Increment(Malzeno)\ndef _restore_drain(self,x):\n    self.state['hp']=min(self['max_hp'],self['hp']+x)\n    self.recharge()\n\n@Increment(Malzeno)\ndef get_stat(self,key,boost=None):\n    stat=self['stats'][key]\n    boost=self['boosts'][key] if not boost else boost\n    stat_ratio={0:1,1:1.5,2:2,3:2.5,4:3,5:3.5,6:4}[min(6,abs(boost))]\n    if boost<0:\n        stat_ratio=1/stat_ratio\n    stat_ratio*=self.get_weather_stat_mult(key)\n    if key=='spe' and self.isstatus('PAR'):\n        stat_ratio*=0.5\n    if key in ['atk','spa'] and self['conditions'].get('BLOODENING'):\n        stat_ratio*=1.5\n    return int(stat*stat_ratio)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Medicham\",\n  \"types\": [\n    \"Fighting\",\n    \"Psychic\"\n  ],\n  \"gender\": \"Female\",\n  \"ability\": {\n    \"Pure Power\": \"This Pokemon's Attack is doubled.\"\n  },\n  \"moves\": {\n    \"High Jump Kick\": {\n      \"power\": 130,\n      \"accuracy\": 90,\n      \"category\": \"Physical\",\n      \"type\": \"Fighting\",\n      \"effect\": \"If this move misses, the user loses half of its maximum HP rounded down.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Zen Headbutt\": {\n      \"power\": 80,\n      \"accuracy\": 90,\n      \"category\": \"Physical\",\n      \"type\": \"Psychic\",\n      \"effect\": \"Has a 20% chance to make the target flinch.\",\n      \"property\": [\n        \"contact\"\n      ]\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass Medicham(PokemonBase):\n    _species='Medicham'\n    _types=['Fighting','Psychic']\n    _gender='Female'\n    _ability=['Pure Power']\n    _move_1=('High Jump Kick',130,90,'Physical','Fighting',0,['contact'])\n    _move_2=('Zen Headbutt',80,90,'Physical','Psychic',0,['contact'])\n    def __init__(self):\n        super().__init__()\n\n    def onswitch(self):\n        self.set_stat('atk',2)\n    \n    def move_1(self): # High Jump Kick\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n        else:\n            self.take_damage(self['max_hp']//2,'recoil')\n    \n    def move_2(self): # Zen Headbutt\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<20/100:\n                self.target.set_condition('FLINCH',counter=0)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Medicham\",\n  \"types\": [\n    \"Fighting\",\n    \"Psychic\"\n  ],\n  \"gender\": \"Female\",\n  \"ability\": {\n    \"Pure Power\": \"This Pokemon's Attack is doubled.\"\n  },\n  \"moves\": {\n    \"High Jump Kick\": {\n      \"power\": 130,\n      \"accuracy\": 90,\n      \"category\": \"Physical\",\n      \"type\": \"Fighting\",\n      \"effect\": \"If this move misses, the user loses half of its maximum HP rounded down.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Zen Headbutt\": {\n      \"power\": 80,\n      \"accuracy\": 90,\n      \"category\": \"Physical\",\n      \"type\": \"Psychic\",\n      \"effect\": \"Has a 20% chance to make the target flinch.\",\n      \"property\": [\n        \"contact\"\n      ]\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Medicham(PokemonBase):\n    _species='Medicham'\n    _types=['Fighting','Psychic']\n    _gender='Female'\n    _ability=['Pure Power']\n    _move_1=('High Jump Kick',130,90,'Physical','Fighting',0,['contact'])\n    _move_2=('Zen Headbutt',80,90,'Physical','Psychic',0,['contact'])\n    def __init__(self):\n        super().__init__()\n\n    def onswitch(self):\n        self.set_stat('atk',2)\n    \n    def move_1(self): # High Jump Kick\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n        else:\n            self.take_damage(self['max_hp']//2,'recoil')\n    \n    def move_2(self): # Zen Headbutt\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<20/100:\n                self.target.set_condition('FLINCH',counter=0)\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Ice Punch\": {\n    \"power\": 75,\n    \"accuracy\": 100,\n    \"category\": \"Physical\",\n    \"type\": \"Ice\",\n    \"effect\": \"Has a 10% chance to freeze the target.\",\n    \"property\": [\n      \"contact\",\n      \"punch\"\n    ]\n  }\n}\n```",
        "response": "```python\n@Increment(Medicham,'_move_3')\ndef value():\n    return ('Ice Punch',75,100,'Physical','Ice',0,['contact','punch'])\n\n@Increment(Medicham)\ndef move_3(self): # Ice Punch\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint() and rnd()<10/100:\n            self.target.set_status('FRZ')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Medicham\",\n  \"types\": [\n    \"Fighting\",\n    \"Psychic\"\n  ],\n  \"gender\": \"Female\",\n  \"ability\": {\n    \"Pure Power\": \"This Pokemon's Attack is doubled.\"\n  },\n  \"moves\": {\n    \"High Jump Kick\": {\n      \"power\": 130,\n      \"accuracy\": 90,\n      \"category\": \"Physical\",\n      \"type\": \"Fighting\",\n      \"effect\": \"If this move misses, the user loses half of its maximum HP rounded down.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Zen Headbutt\": {\n      \"power\": 80,\n      \"accuracy\": 90,\n      \"category\": \"Physical\",\n      \"type\": \"Psychic\",\n      \"effect\": \"Has a 20% chance to make the target flinch.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Ice Punch\": {\n      \"power\": 75,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Ice\",\n      \"effect\": \"Has a 10% chance to freeze the target.\",\n      \"property\": [\n        \"contact\",\n        \"punch\"\n      ]\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Medicham(PokemonBase):\n    _species='Medicham'\n    _types=['Fighting','Psychic']\n    _gender='Female'\n    _ability=['Pure Power']\n    _move_1=('High Jump Kick',130,90,'Physical','Fighting',0,['contact'])\n    _move_2=('Zen Headbutt',80,90,'Physical','Psychic',0,['contact'])\n    def __init__(self):\n        super().__init__()\n\n    def onswitch(self):\n        self.set_stat('atk',2)\n    \n    def move_1(self): # High Jump Kick\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n        else:\n            self.take_damage(self['max_hp']//2,'recoil')\n    \n    def move_2(self): # Zen Headbutt\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<20/100:\n                self.target.set_condition('FLINCH',counter=0)\n\n@Increment(Medicham,'_move_3')\ndef value():\n    return ('Ice Punch',75,100,'Physical','Ice',0,['contact','punch'])\n\n@Increment(Medicham)\ndef move_3(self): # Ice Punch\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint() and rnd()<10/100:\n            self.target.set_status('FRZ')\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Thunder Punch\": {\n    \"power\": 75,\n    \"accuracy\": 100,\n    \"category\": \"Physical\",\n    \"type\": \"Electric\",\n    \"effect\": \"Has a 10% chance to paralyze the target.\",\n    \"property\": [\n      \"contact\",\n      \"punch\"\n    ]\n  }\n}\n```",
        "response": "```python\n@Increment(Medicham,'_move_4')\ndef value():\n    return ('Thunder Punch',75,100,'Physical','Electric',0,['contact','punch'])\n\n@Increment(Medicham)\ndef move_4(self): # Thunder Punch\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)  \n        if not self.target.isfaint() and rnd()<10/100:\n            self.target.set_status('PAR')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Mew\",\n  \"types\": [\n    \"Psychic\"\n  ],\n  \"gender\": \"Genderless\",\n  \"ability\": {\n    \"Moody\": \"Raises a random stat by 2 stages and lowers another stat by 1 stage at the end of each turn.\"\n  },\n  \"moves\": {\n    \"Psychic\": {\n      \"power\": 90,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Psychic\",\n      \"effect\": \"Has a 10% chance to lower the target's Special Defense by 1 stage.\"\n    },\n    \"Play Rough\": {\n      \"power\": 90,\n      \"accuracy\": 90,\n      \"category\": \"Physical\",\n      \"type\": \"Fairy\",\n      \"effect\": \"Has a 10% chance to lower the target's Attack by 1 stage.\",\n      \"property\": [\n        \"contact\"\n      ]\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass Mew(PokemonBase):\n    _species='Mew'\n    _types=['Psychic']\n    _gender='Genderless'\n    _ability=['Moody']\n    _move_1=('Psychic',90,100,'Special','Psychic',0,[])\n    _move_2=('Play Rough',90,90,'Physical','Fairy',0,['contact'])\n    def __init__(self):\n        super().__init__()\n    \n    def endturn(self):\n        t1,t2=rndc(['atk','def','spa','spd','spe'],2)\n        self.set_boost(t1,+2)\n        self.set_boost(t2,-1)\n\n    def move_1(self): # Psychic\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<0.1:\n                self.target.set_boost('spd',-1)\n    \n    def move_2(self): # Play Rough\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<0.1:\n                self.target.set_boost('atk',-1)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Mew\",\n  \"types\": [\n    \"Psychic\"\n  ],\n  \"gender\": \"Genderless\",\n  \"ability\": {\n    \"Moody\": \"Raises a random stat by 2 stages and lowers another stat by 1 stage at the end of each turn.\"\n  },\n  \"moves\": {\n    \"Psychic\": {\n      \"power\": 90,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Psychic\",\n      \"effect\": \"Has a 10% chance to lower the target's Special Defense by 1 stage.\"\n    },\n    \"Play Rough\": {\n      \"power\": 90,\n      \"accuracy\": 90,\n      \"category\": \"Physical\",\n      \"type\": \"Fairy\",\n      \"effect\": \"Has a 10% chance to lower the target's Attack by 1 stage.\",\n      \"property\": [\n        \"contact\"\n      ]\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Mew(PokemonBase):\n    _species='Mew'\n    _types=['Psychic']\n    _gender='Genderless'\n    _ability=['Moody']\n    _move_1=('Psychic',90,100,'Special','Psychic',0,[])\n    _move_2=('Play Rough',90,90,'Physical','Fairy',0,['contact'])\n    def __init__(self):\n        super().__init__()\n    \n    def endturn(self):\n        t1,t2=rndc(['atk','def','spa','spd','spe'],2)\n        self.set_boost(t1,+2)\n        self.set_boost(t2,-1)\n\n    def move_1(self): # Psychic\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<0.1:\n                self.target.set_boost('spd',-1)\n    \n    def move_2(self): # Play Rough\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<0.1:\n                self.target.set_boost('atk',-1)\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Astral Beam\": {\n    \"power\": 120,\n    \"accuracy\": 85,\n    \"category\": \"Special\",\n    \"type\": \"Psychic\",\n    \"effect\": \"Has a 20% chance to confuse the target.\"\n  }\n}\n```",
        "response": "```python\n@Increment(Mew,'_move_3')\ndef value():\n    return ('Astral Beam',120,85,'Special','Psychic',0,[])\n\n@Increment(Mew)\ndef move_3(self): # Astral Beam\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint() and rnd()<0.2:\n            self.target.set_condition('CONFUSION',counter=0)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Mew\",\n  \"types\": [\n    \"Psychic\"\n  ],\n  \"gender\": \"Genderless\",\n  \"ability\": {\n    \"Moody\": \"Raises a random stat by 2 stages and lowers another stat by 1 stage at the end of each turn.\"\n  },\n  \"moves\": {\n    \"Psychic\": {\n      \"power\": 90,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Psychic\",\n      \"effect\": \"Has a 10% chance to lower the target's Special Defense by 1 stage.\"\n    },\n    \"Play Rough\": {\n      \"power\": 90,\n      \"accuracy\": 90,\n      \"category\": \"Physical\",\n      \"type\": \"Fairy\",\n      \"effect\": \"Has a 10% chance to lower the target's Attack by 1 stage.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Astral Beam\": {\n      \"power\": 120,\n      \"accuracy\": 85,\n      \"category\": \"Special\",\n      \"type\": \"Psychic\",\n      \"effect\": \"Has a 20% chance to confuse the target.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Mew(PokemonBase):\n    _species='Mew'\n    _types=['Psychic']\n    _gender='Genderless'\n    _ability=['Moody']\n    _move_1=('Psychic',90,100,'Special','Psychic',0,[])\n    _move_2=('Play Rough',90,90,'Physical','Fairy',0,['contact'])\n    def __init__(self):\n        super().__init__()\n    \n    def endturn(self):\n        t1,t2=rndc(['atk','def','spa','spd','spe'],2)\n        self.set_boost(t1,+2)\n        self.set_boost(t2,-1)\n\n    def move_1(self): # Psychic\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<0.1:\n                self.target.set_boost('spd',-1)\n    \n    def move_2(self): # Play Rough\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<0.1:\n                self.target.set_boost('atk',-1)\n\n@Increment(Mew,'_move_3')\ndef value():\n    return ('Astral Beam',120,85,'Special','Psychic',0,[])\n\n@Increment(Mew)\ndef move_3(self): # Astral Beam\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint() and rnd()<0.2:\n            self.target.set_condition('CONFUSION',counter=0)\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Mind Shield\": {\n    \"power\": 0,\n    \"accuracy\": 1000000,\n    \"category\": \"Status\",\n    \"type\": \"Psychic\",\n    \"effect\": \"Raises the user's Defense and Special Defense by 1 stage.\"\n  }\n}\n```",
        "response": "```python\n@Increment(Mew,'_move_4')\ndef value():\n    return ('Mind Shield',0,1000000,'Status','Psychic',0,[])\n\n@Increment(Mew)\ndef move_4(self): # Mind Shield\n    self.set_boost('def',+1,'self')\n    self.set_boost('spd',+1,'self')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Mew\",\n  \"types\": [\n    \"Psychic\"\n  ],\n  \"gender\": \"Genderless\",\n  \"ability\": {\n    \"Moody\": \"Raises a random stat by 2 stages and lowers another stat by 1 stage at the end of each turn.\"\n  },\n  \"moves\": {\n    \"Psychic\": {\n      \"power\": 90,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Psychic\",\n      \"effect\": \"Has a 10% chance to lower the target's Special Defense by 1 stage.\"\n    },\n    \"Play Rough\": {\n      \"power\": 90,\n      \"accuracy\": 90,\n      \"category\": \"Physical\",\n      \"type\": \"Fairy\",\n      \"effect\": \"Has a 10% chance to lower the target's Attack by 1 stage.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Astral Beam\": {\n      \"power\": 120,\n      \"accuracy\": 85,\n      \"category\": \"Special\",\n      \"type\": \"Psychic\",\n      \"effect\": \"Has a 20% chance to confuse the target.\"\n    },\n    \"Mind Shield\": {\n      \"power\": 0,\n      \"accuracy\": 1000000,\n      \"category\": \"Status\",\n      \"type\": \"Psychic\",\n      \"effect\": \"Raises the user's Defense and Special Defense by 1 stage.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Mew(PokemonBase):\n    _species='Mew'\n    _types=['Psychic']\n    _gender='Genderless'\n    _ability=['Moody']\n    _move_1=('Psychic',90,100,'Special','Psychic',0,[])\n    _move_2=('Play Rough',90,90,'Physical','Fairy',0,['contact'])\n    def __init__(self):\n        super().__init__()\n    \n    def endturn(self):\n        t1,t2=rndc(['atk','def','spa','spd','spe'],2)\n        self.set_boost(t1,+2)\n        self.set_boost(t2,-1)\n\n    def move_1(self): # Psychic\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<0.1:\n                self.target.set_boost('spd',-1)\n    \n    def move_2(self): # Play Rough\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<0.1:\n                self.target.set_boost('atk',-1)\n\n@Increment(Mew,'_move_3')\ndef value():\n    return ('Astral Beam',120,85,'Special','Psychic',0,[])\n\n@Increment(Mew)\ndef move_3(self): # Astral Beam\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint() and rnd()<0.2:\n            self.target.set_condition('CONFUSION',counter=0)\n\n@Increment(Mew,'_move_4')\ndef value():\n    return ('Mind Shield',0,1000000,'Status','Psychic',0,[])\n\n@Increment(Mew)\ndef move_4(self): # Mind Shield\n    self.set_boost('def',+1,'self')\n    self.set_boost('spd',+1,'self')\n```\n\nThis role is gonna learn a new ability:\n```json\n{\n  \"Mirage Shield\": \"Any damage over 50% of this Pokemon's maximum HP is reduced by half.\"\n}\n```",
        "response": "```python\n@Increment(Mew,'_ability')\ndef value():\n    return ['Moody','Mirage Shield']\n\n@Increment(Mew)\ndef _take_damage_attack(self,x):\n    self.register_act_taken()\n    if x>self['max_hp']//2:\n        x//=2\n    self.state['hp']=max(0,self['hp']-x)\n    if self['hp']==0:\n        self.state['status']='FNT'\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Milotic\",\n  \"types\": [\n    \"Water\"\n  ],\n  \"gender\": \"Female\",\n  \"ability\": {\n    \"Competitive\": \"Raises Special Attack by 2 stages for each stat lowered by an opposing Pokemon.\"\n  },\n  \"moves\": {\n    \"Scald\": {\n      \"power\": 80,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Water\",\n      \"effect\": \"Has a 30% chance to burn the target.\"\n    },\n    \"Leaf Storm\": {\n      \"power\": 130,\n      \"accuracy\": 90,\n      \"category\": \"Special\",\n      \"type\": \"Grass\",\n      \"effect\": \"Lowers the user's Special Attack by two stages.\"\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass Milotic(PokemonBase):\n    _species='Milotic'\n    _types=['Water']\n    _gender='Female'\n    _ability=['Competitive']\n    _move_1=('Scald',80,100,'Special','Water',0,[])\n    _move_2=('Leaf Storm',130,90,'Special','Grass',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def set_boost(self,key,x,from_='target'):\n        if x<0:\n            self.set_boost('spa',2)\n        bar=6 if key in ['atk','def','spa','spd','spe'] else 3\n        if x>0:\n            self['boosts'][key]=min(bar,self['boosts'][key]+x)\n        else:\n            self['boosts'][key]=max(-bar,self['boosts'][key]+x)\n\n    def move_1(self): # Scald\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if rnd()<0.3:\n                self.target.set_status('BRN')\n\n    def move_2(self): # Leaf Storm\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            self['boosts']['spa']=max(-6,self['boosts']['spa']-2)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Mimikyu\",\n  \"types\": [\n    \"Ghost\",\n    \"Fairy\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Disguise\": \"This Pokemon has Disguise on switch-in. It will be busted when it takes damage from attack. After Disguise is busted, the Pokemon takes damage normally.\"\n  },\n  \"moves\": {\n    \"Play Rough\": {\n      \"power\": 90,\n      \"accuracy\": 90,\n      \"category\": \"Physical\",\n      \"type\": \"Fairy\",\n      \"effect\": \"Has a 10% chance to lower the target's atk by 1 stage.\"\n    },\n    \"Shadow Claw\": {\n      \"power\": 70,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Ghost\",\n      \"effect\": \"This move's critical ratio +1.\"\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass Mimikyu(PokemonBase):\n    _species='Mimikyu'\n    _types=['Ghost','Fairy']\n    _gender='Male'\n    _ability=['Disguise']\n    _move_1=('Play Rough',90,90,'Physical','Fairy',0,[])\n    _move_2=('Shadow Claw',70,100,'Physical','Ghost',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def onswitch(self):\n        self.set_condition('DISGUISE',counter=0)\n\n    def _take_damage_attack(self,x):\n        if self['conditions'].get('DISGUISE'):\n            del self['conditions']['DISGUISE']\n        else:\n            self.register_act_taken()\n            self.state['hp']=max(0,self['hp']-x)\n            if self['hp']==0:\n                self.state['status']='FNT'\n\n    def get_crit(self):\n        crit_mult=[0,24,8,2,1]\n        crit_ratio=self['boosts']['crit']\n        if self['act']['id']=='Shadow Claw':\n            crit_ratio=min(3,crit_ratio+1)\n        crit=False\n        if rnd()*crit_mult[crit_ratio+1]<1:\n            crit=True\n        return crit\n\n    def move_1(self): # Energy Ball\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<10/100:\n                self.target.set_boost('atk',-1)\n\n    def move_2(self): # Shadow Claw\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Moltaroth\",\n  \"types\": [\n    \"Fire\",\n    \"Steel\"\n  ],\n  \"gender\": \"Neutral\",\n  \"ability\": {\n    \"Magma Armor\": \"Prevents the Pokemon from being frozen and increases its Fire-type move power by 30% when its HP is below 50%.\"\n  },\n  \"moves\": {\n    \"Molten Breath\": {\n      \"power\": 110,\n      \"accuracy\": 85,\n      \"category\": \"Special\",\n      \"type\": \"Fire\",\n      \"effect\": \"Has a 30% chance to burn the target.\"\n    },\n    \"Gold Meltdown\": {\n      \"power\": 90,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Steel\",\n      \"effect\": \"\"\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass Moltaroth(PokemonBase):\n    _species='Moltaroth'\n    _types=['Fire','Steel']\n    _gender='Neutral'\n    _ability=['Magma Armor']\n    _move_1=('Molten Breath',110,85,'Special','Fire',0,[])\n    _move_2=('Gold Meltdown',90,100,'Special','Steel',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def set_status(self,x):\n        if self['status'] or self.env.get('MISTY_TERRAIN'):\n            return\n        if x=='BRN':\n            if not self.istype('Fire'):\n                self.state['status']={x:{'counter':0}}\n        elif x=='PAR':\n            if not self.istype('Electric'):\n                self.state['status']={x:{'counter':0}}\n        elif x=='PSN':\n            if not self.istype('Poison') and not self.istype('Steel'):\n                self.state['status']={x:{'counter':0}}\n        elif x=='TOX':\n            if not self.istype('Poison') and not self.istype('Steel'):\n                self.state['status']={x:{'counter':0}}\n        elif x=='SLP':\n            self.state['status']={x:{'counter':0}}\n\n    def get_power(self):\n        power=self['act']['power']\n        if self['act']['type']=='Fire' and self['hp']<self['max_hp']//2:\n            power=int(power*1.3)\n        return int(power*self.get_weather_power_mult())\n\n    def move_1(self): # Molten Breath\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if rnd()<30/100:\n                self.target.set_status('BRN')\n\n    def move_2(self): # Gold Meltdown\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Moltaroth\",\n  \"types\": [\n    \"Fire\",\n    \"Steel\"\n  ],\n  \"gender\": \"Neutral\",\n  \"ability\": {\n    \"Magma Armor\": \"Prevents the Pokemon from being frozen and increases its Fire-type move power by 30% when its HP is below 50%.\"\n  },\n  \"moves\": {\n    \"Molten Breath\": {\n      \"power\": 110,\n      \"accuracy\": 85,\n      \"category\": \"Special\",\n      \"type\": \"Fire\",\n      \"effect\": \"Has a 30% chance to burn the target.\"\n    },\n    \"Gold Meltdown\": {\n      \"power\": 90,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Steel\",\n      \"effect\": \"\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Moltaroth(PokemonBase):\n    _species='Moltaroth'\n    _types=['Fire','Steel']\n    _gender='Neutral'\n    _ability=['Magma Armor']\n    _move_1=('Molten Breath',110,85,'Special','Fire',0,[])\n    _move_2=('Gold Meltdown',90,100,'Special','Steel',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def set_status(self,x):\n        if self['status'] or self.env.get('MISTY_TERRAIN'):\n            return\n        if x=='BRN':\n            if not self.istype('Fire'):\n                self.state['status']={x:{'counter':0}}\n        elif x=='PAR':\n            if not self.istype('Electric'):\n                self.state['status']={x:{'counter':0}}\n        elif x=='PSN':\n            if not self.istype('Poison') and not self.istype('Steel'):\n                self.state['status']={x:{'counter':0}}\n        elif x=='TOX':\n            if not self.istype('Poison') and not self.istype('Steel'):\n                self.state['status']={x:{'counter':0}}\n        elif x=='SLP':\n            self.state['status']={x:{'counter':0}}\n\n    def get_power(self):\n        power=self['act']['power']\n        if self['act']['type']=='Fire' and self['hp']<self['max_hp']//2:\n            power=int(power*1.3)\n        return int(power*self.get_weather_power_mult())\n\n    def move_1(self): # Molten Breath\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if rnd()<30/100:\n                self.target.set_status('BRN')\n\n    def move_2(self): # Gold Meltdown\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Fury Charge\": {\n    \"power\": 130,\n    \"accuracy\": 100,\n    \"category\": \"Physical\",\n    \"type\": \"Steel\",\n    \"effect\": \"The user takes recoil damage equal to 33% of the damage dealt.\"\n  }\n}\n```",
        "response": "```python\n@Increment(Moltaroth,'_move_3')\ndef value():\n    return ('Fury Charge',130,100,'Physical','Steel',0,[])\n\n@Increment(Moltaroth)\ndef move_3(self): # Fury Charge\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        self.take_damage(int(0.33*damage),'recoil')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Moltaroth\",\n  \"types\": [\n    \"Fire\",\n    \"Steel\"\n  ],\n  \"gender\": \"Neutral\",\n  \"ability\": {\n    \"Magma Armor\": \"Prevents the Pokemon from being frozen and increases its Fire-type move power by 30% when its HP is below 50%.\"\n  },\n  \"moves\": {\n    \"Molten Breath\": {\n      \"power\": 110,\n      \"accuracy\": 85,\n      \"category\": \"Special\",\n      \"type\": \"Fire\",\n      \"effect\": \"Has a 30% chance to burn the target.\"\n    },\n    \"Gold Meltdown\": {\n      \"power\": 90,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Steel\",\n      \"effect\": \"\"\n    },\n    \"Fury Charge\": {\n      \"power\": 130,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Steel\",\n      \"effect\": \"The user takes recoil damage equal to 33% of the damage dealt.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Moltaroth(PokemonBase):\n    _species='Moltaroth'\n    _types=['Fire','Steel']\n    _gender='Neutral'\n    _ability=['Magma Armor']\n    _move_1=('Molten Breath',110,85,'Special','Fire',0,[])\n    _move_2=('Gold Meltdown',90,100,'Special','Steel',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def set_status(self,x):\n        if self['status'] or self.env.get('MISTY_TERRAIN'):\n            return\n        if x=='BRN':\n            if not self.istype('Fire'):\n                self.state['status']={x:{'counter':0}}\n        elif x=='PAR':\n            if not self.istype('Electric'):\n                self.state['status']={x:{'counter':0}}\n        elif x=='PSN':\n            if not self.istype('Poison') and not self.istype('Steel'):\n                self.state['status']={x:{'counter':0}}\n        elif x=='TOX':\n            if not self.istype('Poison') and not self.istype('Steel'):\n                self.state['status']={x:{'counter':0}}\n        elif x=='SLP':\n            self.state['status']={x:{'counter':0}}\n\n    def get_power(self):\n        power=self['act']['power']\n        if self['act']['type']=='Fire' and self['hp']<self['max_hp']//2:\n            power=int(power*1.3)\n        return int(power*self.get_weather_power_mult())\n\n    def move_1(self): # Molten Breath\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if rnd()<30/100:\n                self.target.set_status('BRN')\n\n    def move_2(self): # Gold Meltdown\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n\n@Increment(Moltaroth,'_move_3')\ndef value():\n    return ('Fury Charge',130,100,'Physical','Steel',0,[])\n\n@Increment(Moltaroth)\ndef move_3(self): # Fury Charge\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        self.take_damage(int(0.33*damage),'recoil')\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Enrage\": {\n    \"power\": 0,\n    \"accuracy\": 100,\n    \"category\": \"Status\",\n    \"type\": \"Normal\",\n    \"effect\": \"Raises the user's Attack and Speed stats by 1 stage.\"\n  }\n}\n```",
        "response": "```python\n@Increment(Moltaroth,'_move_4')\ndef value():\n    return ('Enrage',0,100,'Status','Normal',0,[])\n\n@Increment(Moltaroth)\ndef move_4(self): # Enrage\n    self.set_boost('atk',+1,'self')\n    self.set_boost('spe',+1,'self')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Moltaroth\",\n  \"types\": [\n    \"Fire\",\n    \"Steel\"\n  ],\n  \"gender\": \"Neutral\",\n  \"ability\": {\n    \"Magma Armor\": \"Prevents the Pokemon from being frozen and increases its Fire-type move power by 30% when its HP is below 50%.\"\n  },\n  \"moves\": {\n    \"Molten Breath\": {\n      \"power\": 110,\n      \"accuracy\": 85,\n      \"category\": \"Special\",\n      \"type\": \"Fire\",\n      \"effect\": \"Has a 30% chance to burn the target.\"\n    },\n    \"Gold Meltdown\": {\n      \"power\": 90,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Steel\",\n      \"effect\": \"\"\n    },\n    \"Fury Charge\": {\n      \"power\": 130,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Steel\",\n      \"effect\": \"The user takes recoil damage equal to 33% of the damage dealt.\"\n    },\n    \"Enrage\": {\n      \"power\": 0,\n      \"accuracy\": 100,\n      \"category\": \"Status\",\n      \"type\": \"Normal\",\n      \"effect\": \"Raises the user's Attack and Speed stats by 1 stage.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Moltaroth(PokemonBase):\n    _species='Moltaroth'\n    _types=['Fire','Steel']\n    _gender='Neutral'\n    _ability=['Magma Armor']\n    _move_1=('Molten Breath',110,85,'Special','Fire',0,[])\n    _move_2=('Gold Meltdown',90,100,'Special','Steel',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def set_status(self,x):\n        if self['status'] or self.env.get('MISTY_TERRAIN'):\n            return\n        if x=='BRN':\n            if not self.istype('Fire'):\n                self.state['status']={x:{'counter':0}}\n        elif x=='PAR':\n            if not self.istype('Electric'):\n                self.state['status']={x:{'counter':0}}\n        elif x=='PSN':\n            if not self.istype('Poison') and not self.istype('Steel'):\n                self.state['status']={x:{'counter':0}}\n        elif x=='TOX':\n            if not self.istype('Poison') and not self.istype('Steel'):\n                self.state['status']={x:{'counter':0}}\n        elif x=='SLP':\n            self.state['status']={x:{'counter':0}}\n\n    def get_power(self):\n        power=self['act']['power']\n        if self['act']['type']=='Fire' and self['hp']<self['max_hp']//2:\n            power=int(power*1.3)\n        return int(power*self.get_weather_power_mult())\n\n    def move_1(self): # Molten Breath\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if rnd()<30/100:\n                self.target.set_status('BRN')\n\n    def move_2(self): # Gold Meltdown\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n\n@Increment(Moltaroth,'_move_3')\ndef value():\n    return ('Fury Charge',130,100,'Physical','Steel',0,[])\n\n@Increment(Moltaroth)\ndef move_3(self): # Fury Charge\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        self.take_damage(int(0.33*damage),'recoil')\n\n@Increment(Moltaroth,'_move_4')\ndef value():\n    return ('Enrage',0,100,'Status','Normal',0,[])\n\n@Increment(Moltaroth)\ndef move_4(self): # Enrage\n    self.set_boost('atk',+1,'self')\n    self.set_boost('spe',+1,'self')\n```\n\nThis role is gonna learn a new ability:\n```json\n{\n  \"Proten\": \"This Pokemon's type changes to the type of the move it is using.\"\n}\n```",
        "response": "```python\n@Increment(Moltaroth,'_ability')\ndef value():\n    return ['Magma Armor','Proten']\n\n@Increment(Moltaroth)\ndef type_change(self):\n    self.state['types']=[self['act']['type']]\n\n@Increment(Moltaroth)\ndef move_1(self): # Molten Breath\n    self.type_change()\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if rnd()<30/100:\n            self.target.set_status('BRN')\n\n@Increment(Moltaroth)\ndef move_2(self): # Gold Meltdown\n    self.type_change()\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n\n@Increment(Moltaroth)\ndef move_3(self): # Fury Charge\n    self.type_change()\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        self.take_damage(int(0.33*damage),'recoil')\n\n@Increment(Moltaroth)\ndef move_4(self): # Enrage\n    self.type_change()\n    self.set_boost('atk',+1,'self')\n    self.set_boost('spe',+1,'self')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Moltres\",\n  \"types\": [\n    \"Dark\",\n    \"Flying\"\n  ],\n  \"gender\": \"Neutral\",\n  \"ability\": {\n    \"Berserk\": \"This Pokemon's Sp. Atk is raised by 1 when it reaches 1/2 or less max HP.\"\n  },\n  \"moves\": {\n    \"Fiery Wrath\": {\n      \"power\": 90,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"priority\": 0,\n      \"type\": \"Dark\",\n      \"effect\": \"Has a 20% chance to make the target flinch.\"\n    },\n    \"Nasty Plot\": {\n      \"power\": 0,\n      \"accuracy\": 100000,\n      \"category\": \"Status\",\n      \"priority\": 0,\n      \"type\": \"Dark\",\n      \"effect\": \"Raises the user's Special Attack by 2 stages.\"\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass Moltres(PokemonBase):\n    _species='Moltres'\n    _types=['Dark','Flying']\n    _gender='Neutral'\n    _ability=['Berserk']\n    _move_1=('Fiery Wrath',90,100,'Special','Dark',0,[])\n    _move_2=('Nasty Plot',0,100000,'Status','Dark',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def take_damage(self,x,from_='attack'):\n        prev_hp=self['hp']\n        if from_=='attack':\n            self._take_damage_attack(x)\n        elif from_=='loss':\n            self._take_damage_loss(x)\n        elif from_=='recoil':\n            self._take_damage_recoil(x)\n        if prev_hp>self['max_hp']//2 and self['hp']<=self['max_hp']//2:\n            self.set_boost('spa',1,'self')\n\n    def move_1(self): # Fiery Wrath\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<20/100:\n                self.target.set_condition('FLINCH',counter=0)\n\n    def move_2(self): # Nasty Plot\n        self.set_boost('spa',+2,'self')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Moltres\",\n  \"types\": [\n    \"Dark\",\n    \"Flying\"\n  ],\n  \"gender\": \"Neutral\",\n  \"ability\": {\n    \"Berserk\": \"This Pokemon's Sp. Atk is raised by 1 when it reaches 1/2 or less max HP.\"\n  },\n  \"moves\": {\n    \"Fiery Wrath\": {\n      \"power\": 90,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"priority\": 0,\n      \"type\": \"Dark\",\n      \"effect\": \"Has a 20% chance to make the target flinch.\"\n    },\n    \"Nasty Plot\": {\n      \"power\": 0,\n      \"accuracy\": 100000,\n      \"category\": \"Status\",\n      \"priority\": 0,\n      \"type\": \"Dark\",\n      \"effect\": \"Raises the user's Special Attack by 2 stages.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Moltres(PokemonBase):\n    _species='Moltres'\n    _types=['Dark','Flying']\n    _gender='Neutral'\n    _ability=['Berserk']\n    _move_1=('Fiery Wrath',90,100,'Special','Dark',0,[])\n    _move_2=('Nasty Plot',0,100000,'Status','Dark',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def take_damage(self,x,from_='attack'):\n        prev_hp=self['hp']\n        if from_=='attack':\n            self._take_damage_attack(x)\n        elif from_=='loss':\n            self._take_damage_loss(x)\n        elif from_=='recoil':\n            self._take_damage_recoil(x)\n        if prev_hp>self['max_hp']//2 and self['hp']<=self['max_hp']//2:\n            self.set_boost('spa',1,'self')\n\n    def move_1(self): # Fiery Wrath\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<20/100:\n                self.target.set_condition('FLINCH',counter=0)\n\n    def move_2(self): # Nasty Plot\n        self.set_boost('spa',+2,'self')\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Air Slash\": {\n    \"power\": 75,\n    \"accuracy\": 95,\n    \"category\": \"Special\",\n    \"priority\": 0,\n    \"type\": \"Flying\",\n    \"effect\": \"Has a 30% chance to make the target flinch.\"\n  }\n}\n```",
        "response": "```python\n@Increment(Moltres,'_move_3')\ndef value():\n    return ('Air Slash',75,95,'Special','Flying',0,[])\n\n@Increment(Moltres)\ndef move_3(self): # Air Slash\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint() and rnd()<30/100:\n            self.target.set_condition('FLINCH',counter=0)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Moltres\",\n  \"types\": [\n    \"Dark\",\n    \"Flying\"\n  ],\n  \"gender\": \"Neutral\",\n  \"ability\": {\n    \"Berserk\": \"This Pokemon's Sp. Atk is raised by 1 when it reaches 1/2 or less max HP.\"\n  },\n  \"moves\": {\n    \"Fiery Wrath\": {\n      \"power\": 90,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"priority\": 0,\n      \"type\": \"Dark\",\n      \"effect\": \"Has a 20% chance to make the target flinch.\"\n    },\n    \"Nasty Plot\": {\n      \"power\": 0,\n      \"accuracy\": 100000,\n      \"category\": \"Status\",\n      \"priority\": 0,\n      \"type\": \"Dark\",\n      \"effect\": \"Raises the user's Special Attack by 2 stages.\"\n    },\n    \"Air Slash\": {\n      \"power\": 75,\n      \"accuracy\": 95,\n      \"category\": \"Special\",\n      \"priority\": 0,\n      \"type\": \"Flying\",\n      \"effect\": \"Has a 30% chance to make the target flinch.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Moltres(PokemonBase):\n    _species='Moltres'\n    _types=['Dark','Flying']\n    _gender='Neutral'\n    _ability=['Berserk']\n    _move_1=('Fiery Wrath',90,100,'Special','Dark',0,[])\n    _move_2=('Nasty Plot',0,100000,'Status','Dark',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def take_damage(self,x,from_='attack'):\n        prev_hp=self['hp']\n        if from_=='attack':\n            self._take_damage_attack(x)\n        elif from_=='loss':\n            self._take_damage_loss(x)\n        elif from_=='recoil':\n            self._take_damage_recoil(x)\n        if prev_hp>self['max_hp']//2 and self['hp']<=self['max_hp']//2:\n            self.set_boost('spa',1,'self')\n\n    def move_1(self): # Fiery Wrath\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<20/100:\n                self.target.set_condition('FLINCH',counter=0)\n\n    def move_2(self): # Nasty Plot\n        self.set_boost('spa',+2,'self')\n\n@Increment(Moltres,'_move_3')\ndef value():\n    return ('Air Slash',75,95,'Special','Flying',0,[])\n\n@Increment(Moltres)\ndef move_3(self): # Air Slash\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint() and rnd()<30/100:\n            self.target.set_condition('FLINCH',counter=0)\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Protect\": {\n    \"power\": 0,\n    \"accuracy\": 100000,\n    \"category\": \"Status\",\n    \"priority\": 4,\n    \"type\": \"Normal\",\n    \"effect\": \"The user is protected from attacks made by other Pokemon during this turn. Fails if the user uses this move last turn.\"\n  }\n}\n```",
        "response": "```python\n@Increment(Moltres,'_move_4')\ndef value():\n    return ('Protect',0,100000,'Status','Normal',4,[])\n\n@Increment(Moltres)\ndef move_4(self): # Protect\n    if self['last_act'] and self['last_act']['id']=='Protect':\n        return\n    self.set_condition('PROTECT',counter=0)\n\n@Increment(Moltres)\ndef _take_damage_attack(self,x):\n    if self['conditions'].get('PROTECT'):\n        del self['conditions']['PROTECT']\n        return\n    self.register_act_taken()\n    self.state['hp']=max(0,self['hp']-x)\n    if self['hp']==0:\n        self.state['status']='FNT'\n\n@Increment(Moltres)\ndef endturn(self):\n    if self['conditions'].get('PROTECT'):\n        del self['conditions']['PROTECT']\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Moltres\",\n  \"types\": [\n    \"Dark\",\n    \"Flying\"\n  ],\n  \"gender\": \"Neutral\",\n  \"ability\": {\n    \"Berserk\": \"This Pokemon's Sp. Atk is raised by 1 when it reaches 1/2 or less max HP.\"\n  },\n  \"moves\": {\n    \"Fiery Wrath\": {\n      \"power\": 90,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"priority\": 0,\n      \"type\": \"Dark\",\n      \"effect\": \"Has a 20% chance to make the target flinch.\"\n    },\n    \"Nasty Plot\": {\n      \"power\": 0,\n      \"accuracy\": 100000,\n      \"category\": \"Status\",\n      \"priority\": 0,\n      \"type\": \"Dark\",\n      \"effect\": \"Raises the user's Special Attack by 2 stages.\"\n    },\n    \"Air Slash\": {\n      \"power\": 75,\n      \"accuracy\": 95,\n      \"category\": \"Special\",\n      \"priority\": 0,\n      \"type\": \"Flying\",\n      \"effect\": \"Has a 30% chance to make the target flinch.\"\n    },\n    \"Protect\": {\n      \"power\": 0,\n      \"accuracy\": 100000,\n      \"category\": \"Status\",\n      \"priority\": 4,\n      \"type\": \"Normal\",\n      \"effect\": \"The user is protected from attacks made by other Pokemon during this turn. Fails if the user uses this move last turn.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Moltres(PokemonBase):\n    _species='Moltres'\n    _types=['Dark','Flying']\n    _gender='Neutral'\n    _ability=['Berserk']\n    _move_1=('Fiery Wrath',90,100,'Special','Dark',0,[])\n    _move_2=('Nasty Plot',0,100000,'Status','Dark',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def take_damage(self,x,from_='attack'):\n        prev_hp=self['hp']\n        if from_=='attack':\n            self._take_damage_attack(x)\n        elif from_=='loss':\n            self._take_damage_loss(x)\n        elif from_=='recoil':\n            self._take_damage_recoil(x)\n        if prev_hp>self['max_hp']//2 and self['hp']<=self['max_hp']//2:\n            self.set_boost('spa',1,'self')\n\n    def move_1(self): # Fiery Wrath\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<20/100:\n                self.target.set_condition('FLINCH',counter=0)\n\n    def move_2(self): # Nasty Plot\n        self.set_boost('spa',+2,'self')\n\n@Increment(Moltres,'_move_3')\ndef value():\n    return ('Air Slash',75,95,'Special','Flying',0,[])\n\n@Increment(Moltres)\ndef move_3(self): # Air Slash\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint() and rnd()<30/100:\n            self.target.set_condition('FLINCH',counter=0)\n\n@Increment(Moltres,'_move_4')\ndef value():\n    return ('Protect',0,100000,'Status','Normal',4,[])\n\n@Increment(Moltres)\ndef move_4(self): # Protect\n    if self['last_act'] and self['last_act']['id']=='Protect':\n        return\n    self.set_condition('PROTECT',counter=0)\n\n@Increment(Moltres)\ndef _take_damage_attack(self,x):\n    if self['conditions'].get('PROTECT'):\n        del self['conditions']['PROTECT']\n        return\n    self.register_act_taken()\n    self.state['hp']=max(0,self['hp']-x)\n    if self['hp']==0:\n        self.state['status']='FNT'\n\n@Increment(Moltres)\ndef endturn(self):\n    if self['conditions'].get('PROTECT'):\n        del self['conditions']['PROTECT']\n```\n\nThis role is gonna learn a new ability:\n```json\n{\n  \"Competitive\": \"This Pokemon's Sp. Atk is raised by 2 for each of its stats that is lowered by the target.\"\n}\n```",
        "response": "```python\n@Increment(Moltres,'_ability')\ndef value():\n    return ['Berserk','Competitive']\n\n@Increment(Moltres)\ndef set_boost(self,key,x,from_='target'):\n    bar=6 if key in ['atk','def','spa','spd','spe'] else 3\n    if x>0:\n        self['boosts'][key]=min(bar,self['boosts'][key]+x)\n    else:\n        self['boosts'][key]=max(-bar,self['boosts'][key]+x)\n        if from_=='target':\n            for _ in range(x):\n                self['boosts']['spa']=min(bar,self['boosts'][key]+2)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Moltres\",\n  \"types\": [\n    \"Dark\",\n    \"Flying\"\n  ],\n  \"gender\": \"Neutral\",\n  \"ability\": {\n    \"Berserk\": \"This Pokemon's Sp. Atk is raised by 1 when it reaches 1/2 or less max HP.\",\n    \"Competitive\": \"This Pokemon's Sp. Atk is raised by 2 for each of its stats that is lowered by the target.\"\n  },\n  \"moves\": {\n    \"Fiery Wrath\": {\n      \"power\": 90,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"priority\": 0,\n      \"type\": \"Dark\",\n      \"effect\": \"Has a 20% chance to make the target flinch.\"\n    },\n    \"Nasty Plot\": {\n      \"power\": 0,\n      \"accuracy\": 100000,\n      \"category\": \"Status\",\n      \"priority\": 0,\n      \"type\": \"Dark\",\n      \"effect\": \"Raises the user's Special Attack by 2 stages.\"\n    },\n    \"Air Slash\": {\n      \"power\": 75,\n      \"accuracy\": 95,\n      \"category\": \"Special\",\n      \"priority\": 0,\n      \"type\": \"Flying\",\n      \"effect\": \"Has a 30% chance to make the target flinch.\"\n    },\n    \"Protect\": {\n      \"power\": 0,\n      \"accuracy\": 100000,\n      \"category\": \"Status\",\n      \"priority\": 4,\n      \"type\": \"Normal\",\n      \"effect\": \"The user is protected from attacks made by other Pokemon during this turn. Fails if the user uses this move last turn.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Moltres(PokemonBase):\n    _species='Moltres'\n    _types=['Dark','Flying']\n    _gender='Neutral'\n    _ability=['Berserk']\n    _move_1=('Fiery Wrath',90,100,'Special','Dark',0,[])\n    _move_2=('Nasty Plot',0,100000,'Status','Dark',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def take_damage(self,x,from_='attack'):\n        prev_hp=self['hp']\n        if from_=='attack':\n            self._take_damage_attack(x)\n        elif from_=='loss':\n            self._take_damage_loss(x)\n        elif from_=='recoil':\n            self._take_damage_recoil(x)\n        if prev_hp>self['max_hp']//2 and self['hp']<=self['max_hp']//2:\n            self.set_boost('spa',1,'self')\n\n    def move_1(self): # Fiery Wrath\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<20/100:\n                self.target.set_condition('FLINCH',counter=0)\n\n    def move_2(self): # Nasty Plot\n        self.set_boost('spa',+2,'self')\n\n@Increment(Moltres,'_move_3')\ndef value():\n    return ('Air Slash',75,95,'Special','Flying',0,[])\n\n@Increment(Moltres)\ndef move_3(self): # Air Slash\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint() and rnd()<30/100:\n            self.target.set_condition('FLINCH',counter=0)\n\n@Increment(Moltres,'_move_4')\ndef value():\n    return ('Protect',0,100000,'Status','Normal',4,[])\n\n@Increment(Moltres)\ndef move_4(self): # Protect\n    if self['last_act'] and self['last_act']['id']=='Protect':\n        return\n    self.set_condition('PROTECT',counter=0)\n\n@Increment(Moltres)\ndef _take_damage_attack(self,x):\n    if self['conditions'].get('PROTECT'):\n        del self['conditions']['PROTECT']\n        return\n    self.register_act_taken()\n    self.state['hp']=max(0,self['hp']-x)\n    if self['hp']==0:\n        self.state['status']='FNT'\n\n@Increment(Moltres)\ndef endturn(self):\n    if self['conditions'].get('PROTECT'):\n        del self['conditions']['PROTECT']\n\n@Increment(Moltres,'_ability')\ndef value():\n    return ['Berserk','Competitive']\n\n@Increment(Moltres)\ndef set_boost(self,key,x,from_='target'):\n    bar=6 if key in ['atk','def','spa','spd','spe'] else 3\n    if x>0:\n        self['boosts'][key]=min(bar,self['boosts'][key]+x)\n    else:\n        self['boosts'][key]=max(-bar,self['boosts'][key]+x)\n        if from_=='target':\n            for _ in range(x):\n                self['boosts']['spa']=min(bar,self['boosts'][key]+2)\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Roost\": {\n    \"power\": 0,\n    \"accuracy\": 100000,\n    \"category\": \"Status\",\n    \"priority\": 0,\n    \"type\": \"Flying\",\n    \"effect\": \"The user restores 1/2 of its maximum HP.\"\n  }\n}\n```",
        "response": "```python\n@Increment(Moltres,'_move_5')\ndef value():\n    return ('Roost',0,100000,'Status','Flying',0,[])\n\n@Increment(Moltres)\ndef move_5(self): # Roost\n    self.restore(self['max_hp']//2,'heal')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Muk\",\n  \"types\": [\n    \"Poison\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Stench\": \"This Pokemon's attacks without a chance to flinch gain a 10% chance to flinch.\"\n  },\n  \"moves\": {\n    \"Sludge Wave\": {\n      \"power\": 95,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Poison\",\n      \"effect\": \"Has a 30% chance to poison the target.\"\n    },\n    \"Lunge\": {\n      \"power\": 80,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Bug\",\n      \"effect\": \"Has a 100% chance to lower the target's Attack by 1 stage.\",\n      \"property\": [\n        \"contact\"\n      ]\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass Muk(PokemonBase):\n    _species='Muk'\n    _types=['Poison']\n    _gender='Male'\n    _ability=['Stench']\n    _move_1=('Sludge Wave',95,100,'Special','Poison',0,[])\n    _move_2=('Lunge',80,100,'Physical','Bug',0,['contact'])\n    def __init__(self):\n        super().__init__()\n\n    def move_1(self): # Sludge Wave\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100:\n                self.target.set_status('PSN')\n            if not self.target.isfaint() and rnd()<10/100:\n                self.target.set_condition('FLINCH',counter=0)\n\n    def move_2(self): # Lunge\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint():\n                self.target.set_boost('atk',-1)\n            if not self.target.isfaint() and rnd()<10/100:\n                self.target.set_condition('FLINCH',counter=0)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Nebulazoid\",\n  \"types\": [\n    \"Psychic\",\n    \"Dark\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Mind Surge\": \"This Pokemon's Psychic-type moves have a 20% chance to confuse the target. If the target is already confused, damage from Psychic-type moves is doubled.\"\n  },\n  \"moves\": {\n    \"Void Beam\": {\n      \"power\": 100,\n      \"accuracy\": 95,\n      \"category\": \"Special\",\n      \"type\": \"Dark\",\n      \"effect\": \"Has a 30% chance to lower the target's Special Defense by 1 stage.\"\n    },\n    \"Psychic\": {\n      \"power\": 90,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Psychic\",\n      \"effect\": \"Has a 10% chance to lower the target's Special Defense by 1 stage.\"\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass Nebulazoid(PokemonBase):\n    _species='Nebulazoid'\n    _types=['Psychic','Dark']\n    _gender='Male'\n    _ability=['Mind Surge']\n    _move_1=('Void Beam',100,95,'Special','Dark',0,[])\n    _move_2=('Psychic',90,100,'Special','Psychic',0,[])\n    def __init__(self):\n        super().__init__()\n    \n    def get_other_mult(self):\n        if self.target['conditions'].get('CONFUSION') and self['act']['type']=='Psychic':\n            return 2.0\n        return 1.0\n\n    def move_1(self): # Void Beam\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100:\n                self.target.set_boost('spd',-1)\n\n    def move_2(self): # Psychic\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<10/100:\n                self.target.set_boost('spd',-1)\n            if not self.target.isfaint() and rnd()<20/100:\n                self.target.set_condition('CONFUSION',counter=0)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Nebulazoid\",\n  \"types\": [\n    \"Psychic\",\n    \"Dark\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Mind Surge\": \"This Pokemon's Psychic-type moves have a 20% chance to confuse the target. If the target is already confused, damage from Psychic-type moves is doubled.\"\n  },\n  \"moves\": {\n    \"Void Beam\": {\n      \"power\": 100,\n      \"accuracy\": 95,\n      \"category\": \"Special\",\n      \"type\": \"Dark\",\n      \"effect\": \"Has a 30% chance to lower the target's Special Defense by 1 stage.\"\n    },\n    \"Psychic\": {\n      \"power\": 90,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Psychic\",\n      \"effect\": \"Has a 10% chance to lower the target's Special Defense by 1 stage.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Nebulazoid(PokemonBase):\n    _species='Nebulazoid'\n    _types=['Psychic','Dark']\n    _gender='Male'\n    _ability=['Mind Surge']\n    _move_1=('Void Beam',100,95,'Special','Dark',0,[])\n    _move_2=('Psychic',90,100,'Special','Psychic',0,[])\n    def __init__(self):\n        super().__init__()\n    \n    def get_other_mult(self):\n        if self.target['conditions'].get('CONFUSION') and self['act']['type']=='Psychic':\n            return 2.0\n        return 1.0\n\n    def move_1(self): # Void Beam\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100:\n                self.target.set_boost('spd',-1)\n\n    def move_2(self): # Psychic\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<10/100:\n                self.target.set_boost('spd',-1)\n            if not self.target.isfaint() and rnd()<20/100:\n                self.target.set_condition('CONFUSION',counter=0)\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Nightmare Pulse\": {\n    \"power\": 80,\n    \"accuracy\": 100,\n    \"category\": \"Special\",\n    \"type\": \"Dark\",\n    \"effect\": \"Has a 20% chance to make the target flinch.\"\n  }\n}\n```",
        "response": "```python\n@Increment(Nebulazoid,'_move_3')\ndef value():\n    return ('Nightmare Pulse',80,100,'Special','Dark',0,[])\n\n@Increment(Nebulazoid)\ndef move_3(self): # Nightmare Pulse\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint() and rnd()<20/100:\n            self.target.set_condition('CONFUSION',counter=0)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Nebulazoid\",\n  \"types\": [\n    \"Psychic\",\n    \"Dark\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Mind Surge\": \"This Pokemon's Psychic-type moves have a 20% chance to confuse the target. If the target is already confused, damage from Psychic-type moves is doubled.\"\n  },\n  \"moves\": {\n    \"Void Beam\": {\n      \"power\": 100,\n      \"accuracy\": 95,\n      \"category\": \"Special\",\n      \"type\": \"Dark\",\n      \"effect\": \"Has a 30% chance to lower the target's Special Defense by 1 stage.\"\n    },\n    \"Psychic\": {\n      \"power\": 90,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Psychic\",\n      \"effect\": \"Has a 10% chance to lower the target's Special Defense by 1 stage.\"\n    },\n    \"Nightmare Pulse\": {\n      \"power\": 80,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Dark\",\n      \"effect\": \"Has a 20% chance to make the target flinch.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Nebulazoid(PokemonBase):\n    _species='Nebulazoid'\n    _types=['Psychic','Dark']\n    _gender='Male'\n    _ability=['Mind Surge']\n    _move_1=('Void Beam',100,95,'Special','Dark',0,[])\n    _move_2=('Psychic',90,100,'Special','Psychic',0,[])\n    def __init__(self):\n        super().__init__()\n    \n    def get_other_mult(self):\n        if self.target['conditions'].get('CONFUSION') and self['act']['type']=='Psychic':\n            return 2.0\n        return 1.0\n\n    def move_1(self): # Void Beam\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100:\n                self.target.set_boost('spd',-1)\n\n    def move_2(self): # Psychic\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<10/100:\n                self.target.set_boost('spd',-1)\n            if not self.target.isfaint() and rnd()<20/100:\n                self.target.set_condition('CONFUSION',counter=0)\n\n@Increment(Nebulazoid,'_move_3')\ndef value():\n    return ('Nightmare Pulse',80,100,'Special','Dark',0,[])\n\n@Increment(Nebulazoid)\ndef move_3(self): # Nightmare Pulse\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint() and rnd()<20/100:\n            self.target.set_condition('CONFUSION',counter=0)\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Astral Gaze\": {\n    \"power\": 0,\n    \"accuracy\": 1000000,\n    \"category\": \"Status\",\n    \"type\": \"Psychic\",\n    \"effect\": \"Raises the user's Special Attack and Speed by 1 stage.\"\n  }\n}\n```",
        "response": "```python\n@Increment(Nebulazoid,'_move_4')\ndef value():\n    return ('Astral Gaze',0,1000000,'Status','Psychic',0,[])\n\n@Increment(Nebulazoid)\ndef move_4(self): # Astral Gaze\n    self.set_boost('spa',+1,'self')\n    self.set_boost('spe',+1,'self')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Nebulazoid\",\n  \"types\": [\n    \"Psychic\",\n    \"Dark\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Mind Surge\": \"This Pokemon's Psychic-type moves have a 20% chance to confuse the target. If the target is already confused, damage from Psychic-type moves is doubled.\"\n  },\n  \"moves\": {\n    \"Void Beam\": {\n      \"power\": 100,\n      \"accuracy\": 95,\n      \"category\": \"Special\",\n      \"type\": \"Dark\",\n      \"effect\": \"Has a 30% chance to lower the target's Special Defense by 1 stage.\"\n    },\n    \"Psychic\": {\n      \"power\": 90,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Psychic\",\n      \"effect\": \"Has a 10% chance to lower the target's Special Defense by 1 stage.\"\n    },\n    \"Nightmare Pulse\": {\n      \"power\": 80,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Dark\",\n      \"effect\": \"Has a 20% chance to make the target flinch.\"\n    },\n    \"Astral Gaze\": {\n      \"power\": 0,\n      \"accuracy\": 1000000,\n      \"category\": \"Status\",\n      \"type\": \"Psychic\",\n      \"effect\": \"Raises the user's Special Attack and Speed by 1 stage.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Nebulazoid(PokemonBase):\n    _species='Nebulazoid'\n    _types=['Psychic','Dark']\n    _gender='Male'\n    _ability=['Mind Surge']\n    _move_1=('Void Beam',100,95,'Special','Dark',0,[])\n    _move_2=('Psychic',90,100,'Special','Psychic',0,[])\n    def __init__(self):\n        super().__init__()\n    \n    def get_other_mult(self):\n        if self.target['conditions'].get('CONFUSION') and self['act']['type']=='Psychic':\n            return 2.0\n        return 1.0\n\n    def move_1(self): # Void Beam\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100:\n                self.target.set_boost('spd',-1)\n\n    def move_2(self): # Psychic\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<10/100:\n                self.target.set_boost('spd',-1)\n            if not self.target.isfaint() and rnd()<20/100:\n                self.target.set_condition('CONFUSION',counter=0)\n\n@Increment(Nebulazoid,'_move_3')\ndef value():\n    return ('Nightmare Pulse',80,100,'Special','Dark',0,[])\n\n@Increment(Nebulazoid)\ndef move_3(self): # Nightmare Pulse\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint() and rnd()<20/100:\n            self.target.set_condition('CONFUSION',counter=0)\n\n@Increment(Nebulazoid,'_move_4')\ndef value():\n    return ('Astral Gaze',0,1000000,'Status','Psychic',0,[])\n\n@Increment(Nebulazoid)\ndef move_4(self): # Astral Gaze\n    self.set_boost('spa',+1,'self')\n    self.set_boost('spe',+1,'self')\n```\n\nThis role is gonna learn a new ability:\n```json\n{\n  \"Dark Aura\": \"Raises the power of Dark-type moves by 33%.\"\n}\n```",
        "response": "```python\n@Increment(Nebulazoid,'_ability')\ndef value():\n    return ['Mind Surge','Dark Aura']\n\n@Increment(Nebulazoid)\ndef get_power(self):\n    power=self['act']['power']\n    if self['act']['type']=='Dark':\n        power*=1.33\n    return int(power*self.get_weather_power_mult())\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Nebulazoid\",\n  \"types\": [\n    \"Psychic\",\n    \"Dark\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Mind Surge\": \"This Pokemon's Psychic-type moves have a 20% chance to confuse the target. If the target is already confused, damage from Psychic-type moves is doubled.\",\n    \"Dark Aura\": \"Raises the power of Dark-type moves by 33%.\"\n  },\n  \"moves\": {\n    \"Void Beam\": {\n      \"power\": 100,\n      \"accuracy\": 95,\n      \"category\": \"Special\",\n      \"type\": \"Dark\",\n      \"effect\": \"Has a 30% chance to lower the target's Special Defense by 1 stage.\"\n    },\n    \"Psychic\": {\n      \"power\": 90,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Psychic\",\n      \"effect\": \"Has a 10% chance to lower the target's Special Defense by 1 stage.\"\n    },\n    \"Nightmare Pulse\": {\n      \"power\": 80,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Dark\",\n      \"effect\": \"Has a 20% chance to make the target flinch.\"\n    },\n    \"Astral Gaze\": {\n      \"power\": 0,\n      \"accuracy\": 1000000,\n      \"category\": \"Status\",\n      \"type\": \"Psychic\",\n      \"effect\": \"Raises the user's Special Attack and Speed by 1 stage.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Nebulazoid(PokemonBase):\n    _species='Nebulazoid'\n    _types=['Psychic','Dark']\n    _gender='Male'\n    _ability=['Mind Surge']\n    _move_1=('Void Beam',100,95,'Special','Dark',0,[])\n    _move_2=('Psychic',90,100,'Special','Psychic',0,[])\n    def __init__(self):\n        super().__init__()\n    \n    def get_other_mult(self):\n        if self.target['conditions'].get('CONFUSION') and self['act']['type']=='Psychic':\n            return 2.0\n        return 1.0\n\n    def move_1(self): # Void Beam\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100:\n                self.target.set_boost('spd',-1)\n\n    def move_2(self): # Psychic\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<10/100:\n                self.target.set_boost('spd',-1)\n            if not self.target.isfaint() and rnd()<20/100:\n                self.target.set_condition('CONFUSION',counter=0)\n\n@Increment(Nebulazoid,'_move_3')\ndef value():\n    return ('Nightmare Pulse',80,100,'Special','Dark',0,[])\n\n@Increment(Nebulazoid)\ndef move_3(self): # Nightmare Pulse\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint() and rnd()<20/100:\n            self.target.set_condition('CONFUSION',counter=0)\n\n@Increment(Nebulazoid,'_move_4')\ndef value():\n    return ('Astral Gaze',0,1000000,'Status','Psychic',0,[])\n\n@Increment(Nebulazoid)\ndef move_4(self): # Astral Gaze\n    self.set_boost('spa',+1,'self')\n    self.set_boost('spe',+1,'self')\n\n@Increment(Nebulazoid,'_ability')\ndef value():\n    return ['Mind Surge','Dark Aura']\n\n@Increment(Nebulazoid)\ndef get_power(self):\n    power=self['act']['power']\n    if self['act']['type']=='Dark':\n        power*=1.33\n    return int(power*self.get_weather_power_mult())\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Shadow Blast\": {\n    \"power\": 110,\n    \"accuracy\": 85,\n    \"category\": \"Special\",\n    \"type\": \"Dark\",\n    \"effect\": \"Has a 20% chance to confuse the target.\"\n  }\n}\n```",
        "response": "```python\n@Increment(Nebulazoid,'_move_5')\ndef value():\n    return ('Shadow Blast',110,85,'Special','Dark',0,[])\n\n@Increment(Nebulazoid)\ndef move_5(self): # Shadow Blast\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint() and rnd()<20/100:\n            self.target.set_condition('CONFUSION',counter=0)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Nergigante\",\n  \"types\": [\n    \"Dragon\",\n    \"Steel\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Regenerative Spikes\": \"On switch-in, this Pokemon is covered with spikes. It restores 1/10 of its max HP at the end of each turn if its spikes are intact.\"\n  },\n  \"moves\": {\n    \"Spike Slam\": {\n      \"power\": 100,\n      \"accuracy\": 95,\n      \"category\": \"Physical\",\n      \"type\": \"Steel\",\n      \"effect\": \"If the user's spikes are intact, break the spikes, dealing additional damage of 1/16 of the target's max HP.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Dragon Dive\": {\n      \"power\": 120,\n      \"accuracy\": 90,\n      \"category\": \"Physical\",\n      \"type\": \"Dragon\",\n      \"effect\": \"The user takes recoil damage equal to 1/3 of the damage dealt.\",\n      \"property\": [\n        \"contact\"\n      ]\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass Nergigante(PokemonBase):\n    _species='Nergigante'\n    _types=['Dragon','Steel']\n    _gender='Male'\n    _ability=['Regenerative Spikes']\n    _move_1=('Spike Slam',100,95,'Physical','Steel',0,['contact'])\n    _move_2=('Dragon Dive',120,90,'Physical','Dragon',0,['contact'])\n    def __init__(self):\n        super().__init__()\n\n    def onswitch(self):\n        self.set_condition('SPIKES',counter=0)\n\n    def endturn(self):\n        if self['conditions'].get('SPIKES'):\n            self.restore(self['max_hp']//10,'heal')\n\n    def move_1(self): # Spike Slam\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if self['conditions'].get('SPIKES'):\n                self.target.take_damage(self.target['max_hp']//16,'loss')\n                del self['conditions']['SPIKES']\n\n    def move_2(self): # Dragon Dive\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            recoil=int(damage*1/3)\n            self.take_damage(recoil,'recoil')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Nergigante\",\n  \"types\": [\n    \"Dragon\",\n    \"Steel\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Regenerative Spikes\": \"On switch-in, this Pokemon is covered with spikes. It restores 1/10 of its max HP at the end of each turn if its spikes are intact.\"\n  },\n  \"moves\": {\n    \"Spike Slam\": {\n      \"power\": 100,\n      \"accuracy\": 95,\n      \"category\": \"Physical\",\n      \"type\": \"Steel\",\n      \"effect\": \"If the user's spikes are intact, break the spikes, dealing additional damage of 1/16 of the target's max HP.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Dragon Dive\": {\n      \"power\": 120,\n      \"accuracy\": 90,\n      \"category\": \"Physical\",\n      \"type\": \"Dragon\",\n      \"effect\": \"The user takes recoil damage equal to 1/3 of the damage dealt.\",\n      \"property\": [\n        \"contact\"\n      ]\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Nergigante(PokemonBase):\n    _species='Nergigante'\n    _types=['Dragon','Steel']\n    _gender='Male'\n    _ability=['Regenerative Spikes']\n    _move_1=('Spike Slam',100,95,'Physical','Steel',0,['contact'])\n    _move_2=('Dragon Dive',120,90,'Physical','Dragon',0,['contact'])\n    def __init__(self):\n        super().__init__()\n\n    def onswitch(self):\n        self.set_condition('SPIKES',counter=0)\n\n    def endturn(self):\n        if self['conditions'].get('SPIKES'):\n            self.restore(self['max_hp']//10,'heal')\n\n    def move_1(self): # Spike Slam\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if self['conditions'].get('SPIKES'):\n                self.target.take_damage(self.target['max_hp']//16,'loss')\n                del self['conditions']['SPIKES']\n\n    def move_2(self): # Dragon Dive\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            recoil=int(damage*1/3)\n            self.take_damage(recoil,'recoil')\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Regenerate\": {\n    \"power\": 0,\n    \"accuracy\": 100000,\n    \"category\": \"Status\",\n    \"type\": \"Normal\",\n    \"effect\": \"The user heals 50% of its max HP and regenerates spikes if broken.\",\n    \"property\": []\n  }\n}\n```",
        "response": "```python\n@Increment(Nergigante,'_move_3')\ndef value():\n    return ('Regenerate',0,100000,'Status','Normal',0,[])\n\n@Increment(Nergigante)\ndef move_3(self): # Regenerate\n    self.restore(self['max_hp']//2,'heal')\n    self.set_condition('SPIKES',counter=0)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Nergigante\",\n  \"types\": [\n    \"Dragon\",\n    \"Steel\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Regenerative Spikes\": \"On switch-in, this Pokemon is covered with spikes. It restores 1/10 of its max HP at the end of each turn if its spikes are intact.\"\n  },\n  \"moves\": {\n    \"Spike Slam\": {\n      \"power\": 100,\n      \"accuracy\": 95,\n      \"category\": \"Physical\",\n      \"type\": \"Steel\",\n      \"effect\": \"If the user's spikes are intact, break the spikes, dealing additional damage of 1/16 of the target's max HP.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Dragon Dive\": {\n      \"power\": 120,\n      \"accuracy\": 90,\n      \"category\": \"Physical\",\n      \"type\": \"Dragon\",\n      \"effect\": \"The user takes recoil damage equal to 1/3 of the damage dealt.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Regenerate\": {\n      \"power\": 0,\n      \"accuracy\": 100000,\n      \"category\": \"Status\",\n      \"type\": \"Normal\",\n      \"effect\": \"The user heals 50% of its max HP and regenerates spikes if broken.\",\n      \"property\": []\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Nergigante(PokemonBase):\n    _species='Nergigante'\n    _types=['Dragon','Steel']\n    _gender='Male'\n    _ability=['Regenerative Spikes']\n    _move_1=('Spike Slam',100,95,'Physical','Steel',0,['contact'])\n    _move_2=('Dragon Dive',120,90,'Physical','Dragon',0,['contact'])\n    def __init__(self):\n        super().__init__()\n\n    def onswitch(self):\n        self.set_condition('SPIKES',counter=0)\n\n    def endturn(self):\n        if self['conditions'].get('SPIKES'):\n            self.restore(self['max_hp']//10,'heal')\n\n    def move_1(self): # Spike Slam\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if self['conditions'].get('SPIKES'):\n                self.target.take_damage(self.target['max_hp']//16,'loss')\n                del self['conditions']['SPIKES']\n\n    def move_2(self): # Dragon Dive\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            recoil=int(damage*1/3)\n            self.take_damage(recoil,'recoil')\n\n@Increment(Nergigante,'_move_3')\ndef value():\n    return ('Regenerate',0,100000,'Status','Normal',0,[])\n\n@Increment(Nergigante)\ndef move_3(self): # Regenerate\n    self.restore(self['max_hp']//2,'heal')\n    self.set_condition('SPIKES',counter=0)\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Dragon Dance\": {\n    \"power\": 0,\n    \"accuracy\": 100000,\n    \"category\": \"Status\",\n    \"type\": \"Dragon\",\n    \"effect\": \"Raises the user's Attack and Speed by 1 stage.\"\n  }\n}\n```",
        "response": "```python\n@Increment(Nergigante,'_move_4')\ndef value():\n    return ('Dragon Dance',0,100000,'Status','Dragon',0,[])\n\n@Increment(Nergigante)\ndef move_4(self): # Dragon Dance\n    self.set_boost('atk',1,'self')\n    self.set_boost('spe',1,'self')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Nergigante\",\n  \"types\": [\n    \"Dragon\",\n    \"Steel\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Regenerative Spikes\": \"On switch-in, this Pokemon is covered with spikes. It restores 1/10 of its max HP at the end of each turn if its spikes are intact.\"\n  },\n  \"moves\": {\n    \"Spike Slam\": {\n      \"power\": 100,\n      \"accuracy\": 95,\n      \"category\": \"Physical\",\n      \"type\": \"Steel\",\n      \"effect\": \"If the user's spikes are intact, break the spikes, dealing additional damage of 1/16 of the target's max HP.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Dragon Dive\": {\n      \"power\": 120,\n      \"accuracy\": 90,\n      \"category\": \"Physical\",\n      \"type\": \"Dragon\",\n      \"effect\": \"The user takes recoil damage equal to 1/3 of the damage dealt.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Regenerate\": {\n      \"power\": 0,\n      \"accuracy\": 100000,\n      \"category\": \"Status\",\n      \"type\": \"Normal\",\n      \"effect\": \"The user heals 50% of its max HP and regenerates spikes if broken.\",\n      \"property\": []\n    },\n    \"Dragon Dance\": {\n      \"power\": 0,\n      \"accuracy\": 100000,\n      \"category\": \"Status\",\n      \"type\": \"Dragon\",\n      \"effect\": \"Raises the user's Attack and Speed by 1 stage.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Nergigante(PokemonBase):\n    _species='Nergigante'\n    _types=['Dragon','Steel']\n    _gender='Male'\n    _ability=['Regenerative Spikes']\n    _move_1=('Spike Slam',100,95,'Physical','Steel',0,['contact'])\n    _move_2=('Dragon Dive',120,90,'Physical','Dragon',0,['contact'])\n    def __init__(self):\n        super().__init__()\n\n    def onswitch(self):\n        self.set_condition('SPIKES',counter=0)\n\n    def endturn(self):\n        if self['conditions'].get('SPIKES'):\n            self.restore(self['max_hp']//10,'heal')\n\n    def move_1(self): # Spike Slam\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if self['conditions'].get('SPIKES'):\n                self.target.take_damage(self.target['max_hp']//16,'loss')\n                del self['conditions']['SPIKES']\n\n    def move_2(self): # Dragon Dive\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            recoil=int(damage*1/3)\n            self.take_damage(recoil,'recoil')\n\n@Increment(Nergigante,'_move_3')\ndef value():\n    return ('Regenerate',0,100000,'Status','Normal',0,[])\n\n@Increment(Nergigante)\ndef move_3(self): # Regenerate\n    self.restore(self['max_hp']//2,'heal')\n    self.set_condition('SPIKES',counter=0)\n\n@Increment(Nergigante,'_move_4')\ndef value():\n    return ('Dragon Dance',0,100000,'Status','Dragon',0,[])\n\n@Increment(Nergigante)\ndef move_4(self): # Dragon Dance\n    self.set_boost('atk',1,'self')\n    self.set_boost('spe',1,'self')\n```\n\nThis role is gonna learn a new ability:\n```json\n{\n  \"Spike Burst\": \"When this Pokemon's spikes are broken, it releases damage to all opponents of 1/8 of their max HP and lowers their Defense by 1 stage.\"\n}\n```",
        "response": "```python\n@Increment(Nergigante,'_ability')\ndef value():\n    return ['Regenerative Spikes','Spike Burst']\n\n@Increment(Nergigante)\ndef move_1(self): # Spike Slam\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if self['conditions'].get('SPIKES'):\n            self.target.take_damage(self.target['max_hp']//16,'loss')\n            del self['conditions']['SPIKES']\n            self.target.take_damage(self.target['max_hp']//8,'loss')\n            self.set_boost('def',-1)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Pelipper\",\n  \"types\": [\n    \"Water\",\n    \"Flying\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Rain Dish\": \"This Pokemon restores 1/16 of its max HP at the end of each turn during Rain.\"\n  },\n  \"moves\": {\n    \"Hydro Pump\": {\n      \"power\": 110,\n      \"accuracy\": 80,\n      \"category\": \"Special\",\n      \"type\": \"Water\",\n      \"effect\": \"Has a 30% chance to lower the target's Speed by 1 stage.\"\n    },\n    \"Hurricane\": {\n      \"power\": 110,\n      \"accuracy\": 70,\n      \"category\": \"Special\",\n      \"type\": \"Flying\",\n      \"effect\": \"Has a 30% chance to confuse the target. If the weather is Rain Dance, this move does not check accuracy. If the weather is Sunny Day, this move's accuracy is 50%.\"\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass Pelipper(PokemonBase):\n    _species='Pelipper'\n    _types=['Water','Flying']\n    _gender='Male'\n    _ability=['Rain Dish']\n    _move_1=('Hydro Pump',110,80,'Special','Water',0,[])\n    _move_2=('Hurricane',110,70,'Special','Flying',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def endturn(self):\n        if self.env.get('RAINDANCE'):\n            self.restore(self['max_hp']//16,'heal')\n\n    def get_accuracy(self):\n        acc=self['act']['accuracy']\n        if self['act']['id']=='Hurricane':\n            if self.env.get('RAINDANCE'):\n                acc=1e5\n            elif self.env.get('SUNNYDAY'):\n                acc=50\n        acc_mult=[1.0,1.33,1.67,2.0]\n        if self['boosts']['accuracy']>=0:\n            acc*=acc_mult[self['boosts']['accuracy']]\n        else:\n            acc/=acc_mult[self['boosts']['accuracy']]\n        acc*=self.target.get_evasion()\n        return acc/100\n\n    def move_1(self): # Hydro Pump\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100:\n                self.target.set_boost('spe',-1)\n\n    def move_2(self): # Hurricane\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100:\n                self.target.set_condition('CONFUSION',counter=0)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Pelipper\",\n  \"types\": [\n    \"Water\",\n    \"Flying\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Rain Dish\": \"This Pokemon restores 1/16 of its max HP at the end of each turn during Rain.\"\n  },\n  \"moves\": {\n    \"Hydro Pump\": {\n      \"power\": 110,\n      \"accuracy\": 80,\n      \"category\": \"Special\",\n      \"type\": \"Water\",\n      \"effect\": \"Has a 30% chance to lower the target's Speed by 1 stage.\"\n    },\n    \"Hurricane\": {\n      \"power\": 110,\n      \"accuracy\": 70,\n      \"category\": \"Special\",\n      \"type\": \"Flying\",\n      \"effect\": \"Has a 30% chance to confuse the target. If the weather is Rain Dance, this move does not check accuracy. If the weather is Sunny Day, this move's accuracy is 50%.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Pelipper(PokemonBase):\n    _species='Pelipper'\n    _types=['Water','Flying']\n    _gender='Male'\n    _ability=['Rain Dish']\n    _move_1=('Hydro Pump',110,80,'Special','Water',0,[])\n    _move_2=('Hurricane',110,70,'Special','Flying',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def endturn(self):\n        if self.env.get('RAINDANCE'):\n            self.restore(self['max_hp']//16,'heal')\n\n    def get_accuracy(self):\n        acc=self['act']['accuracy']\n        if self['act']['id']=='Hurricane':\n            if self.env.get('RAINDANCE'):\n                acc=1e5\n            elif self.env.get('SUNNYDAY'):\n                acc=50\n        acc_mult=[1.0,1.33,1.67,2.0]\n        if self['boosts']['accuracy']>=0:\n            acc*=acc_mult[self['boosts']['accuracy']]\n        else:\n            acc/=acc_mult[self['boosts']['accuracy']]\n        acc*=self.target.get_evasion()\n        return acc/100\n\n    def move_1(self): # Hydro Pump\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100:\n                self.target.set_boost('spe',-1)\n\n    def move_2(self): # Hurricane\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100:\n                self.target.set_condition('CONFUSION',counter=0)\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Psychic\": {\n    \"power\": 90,\n    \"accuracy\": 100,\n    \"category\": \"Special\",\n    \"type\": \"Psychic\",\n    \"effect\": \"Has a 10% chance to lower the target's Special Defense by 1 stage.\"\n  }\n}\n```",
        "response": "```python\n@Increment(Pelipper,'_move_3')\ndef value():\n    return ('Psychic',90,100,'Special','Psychic',0,[])\n\n@Increment(Pelipper)\ndef move_3(self): # Psychic\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint() and rnd()<10/100:\n            self.target.set_boost('spd',-1)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Pidgeot\",\n  \"types\": [\n    \"Normal\",\n    \"Flying\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Keen Eye\": \"Prevents other Pokemon from lowering this Pokemon's accuracy stat.\"\n  },\n  \"moves\": {\n    \"Steel Wing\": {\n      \"power\": 70,\n      \"accuracy\": 90,\n      \"category\": \"Physical\",\n      \"type\": \"Steel\",\n      \"effect\": \"Has a 10% chance to raise the user's Defense by 1 stage.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Hyper Beam\": {\n      \"power\": 150,\n      \"accuracy\": 90,\n      \"category\": \"Special\",\n      \"type\": \"Normal\",\n      \"effect\": \"User cannot move next turn.\"\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass Pidgeot(PokemonBase):\n    _species='Pidgeot'\n    _types=['Normal','Flying']\n    _gender='Male'\n    _ability=['Keen Eye']\n    _move_1=('Steel Wing',70,90,'Physical','Steel',0,['contact'])\n    _move_2=('Hyper Beam',150,90,'Special','Normal',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def set_boost(self,key,x,from_='target'):\n        if key=='accuracy' and x<0:\n            return\n        bar=6 if key in ['atk','def','spa','spd','spe'] else 3\n        if x>0:\n            self['boosts'][key]=min(bar,self['boosts'][key]+x)\n        else:\n            self['boosts'][key]=max(-bar,self['boosts'][key]+x)\n\n    def endturn(self):\n        if self['conditions'].get('RECHARGE'):\n            if self['conditions']['RECHARGE']['counter']==0:\n                self['conditions']['RECHARGE']['counter']+=1\n            else:\n                del self['conditions']['RECHARGE']\n                self.state['canact']=True\n    \n    def move_1(self): # Steel Wing\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if rnd()<10/100: self.set_boost('def',1,'self')\n    \n    def move_2(self): # Hyper Beem\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n        if not self.target.isfaint():\n            self.set_condition('RECHARGE',counter=0)\n            self.state['canact']=False\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Porygon-Z\",\n  \"types\": [\n    \"Normal\"\n  ],\n  \"gender\": \"Genderless\",\n  \"ability\": {\n    \"Download\": \"On switch-in, this Pokemon raises its Attack by 1 stage if the opponent's Defense is lower than its Special Defense, or its Special Attack if the opponent's Special Defense is lower.\"\n  },\n  \"moves\": {\n    \"Thunderbolt\": {\n      \"power\": 90,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Electric\",\n      \"effect\": \"Has a 10% chance to paralyze the target.\"\n    },\n    \"Ice Beam\": {\n      \"power\": 90,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Ice\",\n      \"effect\": \"Has a 10% chance to freeze the target.\"\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass PorygonZ(PokemonBase):\n    _species='Porygon-Z'\n    _types=['Normal']\n    _gender='Genderless'\n    _ability=['Download']\n    _move_1=('Thunderbolt',90,100,'Special','Electric',0,[])\n    _move_2=('Ice Beam',90,100,'Special','Ice',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def onswitch(self):\n        if self.target['stats']['def']<self.target['stats']['spd']:\n            self.set_boost('atk',1,'self')\n        else:\n            self.set_boost('spa',1,'self')\n\n    def move_1(self): # Thunderbolt\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage'] \n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<10/100:\n                self.target.set_status('PAR')\n\n    def move_2(self): # Ice Beam\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<10/100:\n                self.target.set_status('FRZ')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Porygon-Z\",\n  \"types\": [\n    \"Normal\"\n  ],\n  \"gender\": \"Unknown\",\n  \"ability\": {\n    \"Galvanize\": \"Normal-type moves become Electric type and their power is boosted by 30%\"\n  },\n  \"moves\": {\n    \"Tri Attack\": {\n      \"power\": 80,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Normal\",\n      \"effect\": \"Has a 20% chance to paralyze or burn or freeze the target\"\n    },\n    \"Tri Beam\": {\n      \"power\": 45,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Normal\",\n      \"effect\": \"Hits 3 times in one turn\"\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass PorygonZ(PokemonBase):\n    _species='Porygon-Z'\n    _types=['Normal']\n    _gender='Unknown'\n    _ability=['Galvanize']\n    _move_1=('Tri Attack',80,100,'Special','Normal',0,[])\n    _move_2=('Tri Beam',45,100,'Special','Normal',0,[])\n    def __init__(self):\n        super().__init__()\n    \n    def get_power(self):        \n        power=self['act']['power']\n        if self['act']['type']=='Normal':\n            self['act']['type']='Electric'\n            power*=1.3\n        return int(power*self.get_weather_power_mult())\n    \n    def move_1(self): # Tri Attack\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage'] \n            self.target.take_damage(damage)\n            if not self.target.isfaint():\n                r=rnd()\n                if r<20/100:\n                    self.target.set_status(rndc(['PAR','BRN','FRZ']))\n    \n    def move_2(self): # Tri Beam\n        hit=True; i=0\n        while hit and i<3:\n            damage_ret=self.get_damage()\n            if damage_ret['miss']: break\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)  \n            i+=1; hit=False if self.target.isfaint() else True\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Red-Moon\",\n  \"types\": [\n    \"Dragon\",\n    \"Flying\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Intimidate\": \"On switch-in, this Pokemon lowers the Attack of opponents by 1 stage.\"\n  },\n  \"moves\": {\n    \"Red Dragon\": {\n      \"power\": 110,\n      \"accuracy\": 90,\n      \"category\": \"Physical\",\n      \"type\": \"Dragon\",\n      \"effect\": \"Has a 30% chance to burn the target.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Brave Bird\": {\n      \"power\": 120,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Flying\",\n      \"effect\": \"If the target lost HP, the user takes recoil damage equal to 33% the HP lost by the target.\",\n      \"property\": [\n        \"contact\"\n      ]\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass RedMoon(PokemonBase):\n    _species='Red-Moon'\n    _types=['Dragon','Flying']\n    _gender='Male'\n    _ability=['Intimidate']\n    _move_1=('Red Dragon',110,90,'Physical','Dragon',0,['contact'])\n    _move_2=('Brave Bird',120,100,'Physical','Flying',0,['contact'])\n    def __init__(self):\n        super().__init__()\n\n    def onswitch(self):\n        self.target.set_boost('atk',-1)\n    \n    def move_1(self): # Red Dragon\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100: self.target.set_status('BRN')\n    \n    def move_2(self): # Brave Bird\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if damage>0:\n                self.take_damage(int(0.33*damage),'recoil')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Red-Moon\",\n  \"types\": [\n    \"Dragon\",\n    \"Flying\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Intimidate\": \"On switch-in, this Pokemon lowers the Attack of opponents by 1 stage.\"\n  },\n  \"moves\": {\n    \"Red Dragon\": {\n      \"power\": 110,\n      \"accuracy\": 90,\n      \"category\": \"Physical\",\n      \"type\": \"Dragon\",\n      \"effect\": \"Has a 30% chance to burn the target.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Brave Bird\": {\n      \"power\": 120,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Flying\",\n      \"effect\": \"If the target lost HP, the user takes recoil damage equal to 33% the HP lost by the target.\",\n      \"property\": [\n        \"contact\"\n      ]\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass RedMoon(PokemonBase):\n    _species='Red-Moon'\n    _types=['Dragon','Flying']\n    _gender='Male'\n    _ability=['Intimidate']\n    _move_1=('Red Dragon',110,90,'Physical','Dragon',0,['contact'])\n    _move_2=('Brave Bird',120,100,'Physical','Flying',0,['contact'])\n    def __init__(self):\n        super().__init__()\n\n    def onswitch(self):\n        self.target.set_boost('atk',-1)\n    \n    def move_1(self): # Red Dragon\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100: self.target.set_status('BRN')\n    \n    def move_2(self): # Brave Bird\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if damage>0:\n                self.take_damage(int(0.33*damage),'recoil')\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Dragon Dance\": {\n    \"power\": 0,\n    \"accuracy\": 100000,\n    \"category\": \"Status\",\n    \"type\": \"Dragon\",\n    \"effect\": \"Raises the user's Attack and Speed by 1 stage.\"\n  }\n}\n```",
        "response": "```python\n@Increment(RedMoon,'_move_3')\ndef value():\n    return ('Dragon Dance',0,100000,'Status','Dragon',0,[])\n\n@Increment(RedMoon)\ndef move_3(self): # Dragon Dance\n    self.set_boost('atk',+1,'self')\n    self.set_boost('spe',+1,'self')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Red-Moon\",\n  \"types\": [\n    \"Dragon\",\n    \"Flying\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Intimidate\": \"On switch-in, this Pokemon lowers the Attack of opponents by 1 stage.\"\n  },\n  \"moves\": {\n    \"Red Dragon\": {\n      \"power\": 110,\n      \"accuracy\": 90,\n      \"category\": \"Physical\",\n      \"type\": \"Dragon\",\n      \"effect\": \"Has a 30% chance to burn the target.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Brave Bird\": {\n      \"power\": 120,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Flying\",\n      \"effect\": \"If the target lost HP, the user takes recoil damage equal to 33% the HP lost by the target.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Dragon Dance\": {\n      \"power\": 0,\n      \"accuracy\": 100000,\n      \"category\": \"Status\",\n      \"type\": \"Dragon\",\n      \"effect\": \"Raises the user's Attack and Speed by 1 stage.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass RedMoon(PokemonBase):\n    _species='Red-Moon'\n    _types=['Dragon','Flying']\n    _gender='Male'\n    _ability=['Intimidate']\n    _move_1=('Red Dragon',110,90,'Physical','Dragon',0,['contact'])\n    _move_2=('Brave Bird',120,100,'Physical','Flying',0,['contact'])\n    def __init__(self):\n        super().__init__()\n\n    def onswitch(self):\n        self.target.set_boost('atk',-1)\n    \n    def move_1(self): # Red Dragon\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100: self.target.set_status('BRN')\n    \n    def move_2(self): # Brave Bird\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if damage>0:\n                self.take_damage(int(0.33*damage),'recoil')\n\n@Increment(RedMoon,'_move_3')\ndef value():\n    return ('Dragon Dance',0,100000,'Status','Dragon',0,[])\n\n@Increment(RedMoon)\ndef move_3(self): # Dragon Dance\n    self.set_boost('atk',+1,'self')\n    self.set_boost('spe',+1,'self')\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Iron Head\": {\n    \"power\": 80,\n    \"accuracy\": 100,\n    \"category\": \"Physical\",\n    \"type\": \"Steel\",\n    \"effect\": \"Has a 30% chance to make the target flinch.\",\n    \"property\": [\n      \"contact\"\n    ]\n  }\n}\n```",
        "response": "```python\n@Increment(RedMoon,'_move_4')\ndef value():\n    return ('Iron Head',80,100,'Physical','Steel',0,['contact'])\n\n@Increment(RedMoon)\ndef move_4(self): # Iron Head\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint() and rnd()<30/100:\n            self.target.set_condition('FLINCH',counter=0)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Red-Moon\",\n  \"types\": [\n    \"Dragon\",\n    \"Flying\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Intimidate\": \"On switch-in, this Pokemon lowers the Attack of opponents by 1 stage.\"\n  },\n  \"moves\": {\n    \"Red Dragon\": {\n      \"power\": 110,\n      \"accuracy\": 90,\n      \"category\": \"Physical\",\n      \"type\": \"Dragon\",\n      \"effect\": \"Has a 30% chance to burn the target.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Brave Bird\": {\n      \"power\": 120,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Flying\",\n      \"effect\": \"If the target lost HP, the user takes recoil damage equal to 33% the HP lost by the target.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Dragon Dance\": {\n      \"power\": 0,\n      \"accuracy\": 100000,\n      \"category\": \"Status\",\n      \"type\": \"Dragon\",\n      \"effect\": \"Raises the user's Attack and Speed by 1 stage.\"\n    },\n    \"Iron Head\": {\n      \"power\": 80,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Steel\",\n      \"effect\": \"Has a 30% chance to make the target flinch.\",\n      \"property\": [\n        \"contact\"\n      ]\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass RedMoon(PokemonBase):\n    _species='Red-Moon'\n    _types=['Dragon','Flying']\n    _gender='Male'\n    _ability=['Intimidate']\n    _move_1=('Red Dragon',110,90,'Physical','Dragon',0,['contact'])\n    _move_2=('Brave Bird',120,100,'Physical','Flying',0,['contact'])\n    def __init__(self):\n        super().__init__()\n\n    def onswitch(self):\n        self.target.set_boost('atk',-1)\n    \n    def move_1(self): # Red Dragon\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100: self.target.set_status('BRN')\n    \n    def move_2(self): # Brave Bird\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if damage>0:\n                self.take_damage(int(0.33*damage),'recoil')\n\n@Increment(RedMoon,'_move_3')\ndef value():\n    return ('Dragon Dance',0,100000,'Status','Dragon',0,[])\n\n@Increment(RedMoon)\ndef move_3(self): # Dragon Dance\n    self.set_boost('atk',+1,'self')\n    self.set_boost('spe',+1,'self')\n\n@Increment(RedMoon,'_move_4')\ndef value():\n    return ('Iron Head',80,100,'Physical','Steel',0,['contact'])\n\n@Increment(RedMoon)\ndef move_4(self): # Iron Head\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint() and rnd()<30/100:\n            self.target.set_condition('FLINCH',counter=0)\n```\n\nThis role is gonna learn a new ability:\n```json\n{\n  \"Red-Moon Defense\": \"If this Pokemon receives damage from attack, the attacker loses 1/16 of its max HP. If the attcker is burned, further loses 1/16.\"\n}\n```",
        "response": "```python\n@Increment(RedMoon,'_ability')\ndef value():\n    return ['Intimidate','Red-Moon Defense']\n\n@Increment(RedMoon)\ndef _take_damage_attack(self,x):\n    self.register_act_taken()\n    self.state['hp']=max(0,self['hp']-x)\n    if self['hp']==0:\n        self.state['status']='FNT'\n        return\n    if self['act_taken']:\n        self.target.take_damage(self.target['max_hp']//8 if self.target.isstatus('BRN') else self.target['max_hp']//16,'loss')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Red-Moon\",\n  \"types\": [\n    \"Dragon\",\n    \"Flying\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Intimidate\": \"On switch-in, this Pokemon lowers the Attack of opponents by 1 stage.\",\n    \"Red-Moon Defense\": \"If this Pokemon receives damage from attack, the attacker loses 1/16 of its max HP. If the attcker is burned, further loses 1/16.\"\n  },\n  \"moves\": {\n    \"Red Dragon\": {\n      \"power\": 110,\n      \"accuracy\": 90,\n      \"category\": \"Physical\",\n      \"type\": \"Dragon\",\n      \"effect\": \"Has a 30% chance to burn the target.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Brave Bird\": {\n      \"power\": 120,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Flying\",\n      \"effect\": \"If the target lost HP, the user takes recoil damage equal to 33% the HP lost by the target.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Dragon Dance\": {\n      \"power\": 0,\n      \"accuracy\": 100000,\n      \"category\": \"Status\",\n      \"type\": \"Dragon\",\n      \"effect\": \"Raises the user's Attack and Speed by 1 stage.\"\n    },\n    \"Iron Head\": {\n      \"power\": 80,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Steel\",\n      \"effect\": \"Has a 30% chance to make the target flinch.\",\n      \"property\": [\n        \"contact\"\n      ]\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass RedMoon(PokemonBase):\n    _species='Red-Moon'\n    _types=['Dragon','Flying']\n    _gender='Male'\n    _ability=['Intimidate']\n    _move_1=('Red Dragon',110,90,'Physical','Dragon',0,['contact'])\n    _move_2=('Brave Bird',120,100,'Physical','Flying',0,['contact'])\n    def __init__(self):\n        super().__init__()\n\n    def onswitch(self):\n        self.target.set_boost('atk',-1)\n    \n    def move_1(self): # Red Dragon\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100: self.target.set_status('BRN')\n    \n    def move_2(self): # Brave Bird\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if damage>0:\n                self.take_damage(int(0.33*damage),'recoil')\n\n@Increment(RedMoon,'_move_3')\ndef value():\n    return ('Dragon Dance',0,100000,'Status','Dragon',0,[])\n\n@Increment(RedMoon)\ndef move_3(self): # Dragon Dance\n    self.set_boost('atk',+1,'self')\n    self.set_boost('spe',+1,'self')\n\n@Increment(RedMoon,'_move_4')\ndef value():\n    return ('Iron Head',80,100,'Physical','Steel',0,['contact'])\n\n@Increment(RedMoon)\ndef move_4(self): # Iron Head\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint() and rnd()<30/100:\n            self.target.set_condition('FLINCH',counter=0)\n\n@Increment(RedMoon,'_ability')\ndef value():\n    return ['Intimidate','Red-Moon Defense']\n\n@Increment(RedMoon)\ndef _take_damage_attack(self,x):\n    self.register_act_taken()\n    self.state['hp']=max(0,self['hp']-x)\n    if self['hp']==0:\n        self.state['status']='FNT'\n        return\n    if self['act_taken']:\n        self.target.take_damage(self.target['max_hp']//8 if self.target.isstatus('BRN') else self.target['max_hp']//16,'loss')\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Roost\": {\n    \"power\": 0,\n    \"accuracy\": 100000,\n    \"category\": \"Status\",\n    \"type\": \"Flying\",\n    \"effect\": \"The user restores 1/2 of its maximum HP.\"\n  }\n}\n```",
        "response": "```python\n@Increment(RedMoon,'_move_5')\ndef value():\n    return ('Roost',0,100000,'Status','Flying',0,[])\n\n@Increment(RedMoon)\ndef move_5(self): # Roost\n    self.restore(self['max_hp']//2,'heal')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Red-Moon\",\n  \"types\": [\n    \"Dragon\",\n    \"Flying\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Lunar Aura\": \"On switch-in, this Pokemon sets Lunar Aura on its side for 3 turns. Under Lunar aura, Lunar moves's has their secondary effect chance of 100%.\"\n  },\n  \"moves\": {\n    \"Lunar Slash\": {\n      \"power\": 85,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Dragon\",\n      \"effect\": \"Has a 30% chance to lower the target's Speed by 1 stage.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Lunar Flight\": {\n      \"power\": 90,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Flying\",\n      \"effect\": \"Has a 10% chance to raise the user's Speed by 1 stage.\"\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass RedMoon(PokemonBase):\n    _species='Red-Moon'\n    _types=['Dragon','Flying']\n    _gender='Male'\n    _ability=['Lunar Aura']\n    _move_1=('Lunar Slash',85,100,'Physical','Dragon',0,['contact'])\n    _move_2=('Lunar Flight',90,100,'Physical','Flying',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def onswitch(self):\n        self.set_side_condition('LUNAR_AURA',counter=0,max_count=3)\n\n    def move_1(self): # Lunar Slash\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint():\n                if self['side_conditions'].get('LUNAR_AURA'):\n                    self.target.set_boost('spe',-1)\n                elif rnd()<20/100:\n                    self.target.set_boost('spe',-1)\n\n    def move_2(self): # Moonlit Flight\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if self['side_conditions'].get('LUNAR_AURA'):\n                self.set_boost('spe',+1,'self')\n            elif rnd()<10/100:\n                self.set_boost('spe',+1,'self')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Red-Moon\",\n  \"types\": [\n    \"Dragon\",\n    \"Flying\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Lunar Aura\": \"On switch-in, this Pokemon sets Lunar Aura on its side for 3 turns. Under Lunar aura, Lunar moves's has their secondary effect chance of 100%.\"\n  },\n  \"moves\": {\n    \"Lunar Slash\": {\n      \"power\": 85,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Dragon\",\n      \"effect\": \"Has a 30% chance to lower the target's Speed by 1 stage.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Lunar Flight\": {\n      \"power\": 90,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Flying\",\n      \"effect\": \"Has a 10% chance to raise the user's Speed by 1 stage.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass RedMoon(PokemonBase):\n    _species='Red-Moon'\n    _types=['Dragon','Flying']\n    _gender='Male'\n    _ability=['Lunar Aura']\n    _move_1=('Lunar Slash',85,100,'Physical','Dragon',0,['contact'])\n    _move_2=('Lunar Flight',90,100,'Physical','Flying',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def onswitch(self):\n        self.set_side_condition('LUNAR_AURA',counter=0,max_count=3)\n\n    def move_1(self): # Lunar Slash\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint():\n                if self['side_conditions'].get('LUNAR_AURA'):\n                    self.target.set_boost('spe',-1)\n                elif rnd()<20/100:\n                    self.target.set_boost('spe',-1)\n\n    def move_2(self): # Moonlit Flight\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if self['side_conditions'].get('LUNAR_AURA'):\n                self.set_boost('spe',+1,'self')\n            elif rnd()<10/100:\n                self.set_boost('spe',+1,'self')\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Zen Headbutt\": {\n    \"power\": 80,\n    \"accuracy\": 90,\n    \"category\": \"Physical\",\n    \"type\": \"Psychic\",\n    \"effect\": \"Has a 20% chance to make the target flinch.\",\n    \"property\": [\n      \"contact\"\n    ]\n  }\n}\n```",
        "response": "```python\n@Increment(RedMoon,'_move_3')\ndef value():\n    return ('Zen Headbutt',80,90,'Physical','Psychic',0,['contact'])\n\n@Increment(RedMoon)\ndef move_3(self): # Zen Headbutt\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint() and rnd()<20/100:\n            self.target.set_condition('FLINCH',counter=0)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Red-Moon\",\n  \"types\": [\n    \"Dragon\",\n    \"Flying\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Pressure\": \"On switch-in, this Pokemon lowers the Defense and Special Defense of opponents by 1 stage.\"\n  },\n  \"moves\": {\n    \"Dragon Pulse\": {\n      \"power\": 85,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Dragon\",\n      \"effect\": \"Has a 20% chance to confuse the target.\"\n    },\n    \"Sky Attack\": {\n      \"power\": 140,\n      \"accuracy\": 90,\n      \"category\": \"Physical\",\n      \"type\": \"Flying\",\n      \"effect\": \"This attack charges on the first turn and executes on the second. On the first turn, the user raises its Defense and Special Defense by 1 stage. On the second, has a 30% chance to make the target flinch.\",\n      \"property\": [\n        \"contact\"\n      ]\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass RedMoon(PokemonBase):\n    _species='Red-Moon'\n    _types=['Dragon','Flying']\n    _gender='Male'\n    _ability=['Pressure']\n    _move_1=('Dragon Pulse',85,100,'Special','Dragon',0,[])\n    _move_2=('Sky Attack',140,90,'Physical','Flying',0,['contact'])\n    def __init__(self):\n        super().__init__()\n\n    def onswitch(self):\n        self.target.set_boost('def',-1)\n        self.target.set_boost('spd',-1)\n\n    def move_1(self): # Dragon Pulse\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<20/100:\n                self.target.set_condition('CONFUSION',counter=0)\n\n    def move_2(self): # Sky Attack\n        if not self['conditions'].get('SKY_ATTACK'):\n            self.set_condition('SKY_ATTACK',counter=0)\n            self.state['canact']=False\n            self.set_boost('def',+1,'self')\n            self.set_boost('spd',+1,'self')\n        else:\n            del self['conditions']['SKY_ATTACK']\n            self.state['canact']='Sky Attack'\n            damage_ret=self.get_damage()\n            if not damage_ret['miss']:\n                damage=damage_ret['damage']\n                self.target.take_damage(damage)\n                if not self.target.isfaint() and rnd()<30/100:\n                    self.target.set_condition('FLINCH',counter=0)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Red-Moon\",\n  \"types\": [\n    \"Dragon\",\n    \"Flying\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Tailwind\": \"On switch-in, this Pokemon sets up Tailwind, which increases its Speed for 3 turns.\"\n  },\n  \"moves\": {\n    \"Dragon Rush\": {\n      \"power\": 100,\n      \"accuracy\": 95,\n      \"category\": \"Physical\",\n      \"type\": \"Dragon\",\n      \"effect\": \"Has a 20% chance to make the target flinch. User receives recoil damage equal to 1/3 its max HP.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Fly\": {\n      \"power\": 90,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Flying\",\n      \"effect\": \"This attack charges on the first turn and executes on the second. On the first turn, the user avoids all attacks.\",\n      \"property\": [\n        \"contact\"\n      ]\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass RedMoon(PokemonBase):\n    _species='Red-Moon'\n    _types=['Dragon','Flying']\n    _gender='Male'\n    _ability=['Tailwind']\n    _move_1=('Dragon Rush',100,95,'Physical','Dragon',0,['contact'])\n    _move_2=('Fly',90,100,'Physical','Flying',0,['contact'])\n    def __init__(self):\n        super().__init__()\n\n    def onswitch(self):\n        self.set_side_condition('TAILWIND',counter=0,max_count=3)\n\n    def get_stat(self,key,boost=None):\n        stat=self['stats'][key]\n        boost=self['boosts'][key] if not boost else boost\n        stat_ratio={0:1,1:1.5,2:2,3:2.5,4:3,5:3.5,6:4}[min(6,abs(boost))]\n        if boost<0:\n            stat_ratio=1/stat_ratio\n        stat_ratio*=self.get_weather_stat_mult(key)\n        if key=='spe' and self.isstatus('PAR'):\n            stat_ratio*=0.5\n        if key=='spe' and self['side_conditions'].get('TAILWIND'):\n            stat_ratio*=2\n        return int(stat*stat_ratio)\n\n    def get_evasion(self):\n        if  self['conditions'].get('FLY'):\n            return 0\n        return 1\n\n    def move_1(self): # Dragon Rush\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<20/100: self.target.set_condition('FLINCH',counter=0)\n        recoil_damage=int(self['max_hp']//3)\n        self.take_damage(recoil_damage,'recoil')\n\n    def move_2(self): # Fly\n        if not self['conditions'].get('FLY'):\n            self.set_condition('FLY',counter=0)\n            self.state['canact']='Fly'\n        else:\n            del self['conditions']['FLY']\n            self.state['canact']=True\n            damage_ret=self.get_damage()\n            if not damage_ret['miss']:\n                damage=damage_ret['damage']\n                self.target.take_damage(damage)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Red-Moon\",\n  \"types\": [\n    \"Dragon\",\n    \"Flying\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Intimidate\": \"On switch-in, this Pokemon lowers the Attack of opponents by 1 stage and sets up Tailwind, which doubles its Speed for 3 turns.\"\n  },\n  \"moves\": {\n    \"Dragon Claw\": {\n      \"power\": 80,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Dragon\",\n      \"effect\": \"Has a 10% chance to make the target flinch.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Brave Bird\": {\n      \"power\": 120,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Flying\",\n      \"effect\": \"If the target lost HP, the user takes recoil damage equal to 33% the HP lost by the target. Then, the user has a 20% chance to raise its Defense by 1 stage.\",\n      \"property\": [\n        \"contact\"\n      ]\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass RedMoon(PokemonBase):\n    _species='Red-Moon'\n    _types=['Dragon','Flying']\n    _gender='Male'\n    _ability=['Intimidate']\n    _move_1=('Dragon Claw',80,100,'Physical','Dragon',0,['contact'])\n    _move_2=('Brave Bird',120,100,'Physical','Flying',0,['contact'])\n    def __init__(self):\n        super().__init__()\n\n    def onswitch(self):\n        self.target.set_boost('atk',-1)\n        self.set_side_condition('TAILWIND',counter=0,max_count=3)\n    \n    def get_stat(self,key,boost=None):\n        stat=self['stats'][key]\n        boost=self['boosts'][key] if not boost else boost\n        stat_ratio={0:1,1:1.5,2:2,3:2.5,4:3,5:3.5,6:4}[min(6,abs(boost))]\n        if boost<0:\n            stat_ratio=1/stat_ratio\n        stat_ratio*=self.get_weather_stat_mult(key)\n        if key=='spe' and self.isstatus('PAR'):\n            stat_ratio*=0.5\n        if key=='spe' and self['side_conditions'].get('TAILWIND'):\n            stat_ratio*=2\n        return int(stat*stat_ratio)\n\n    def move_1(self): # Dragon Claw\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<10/100:\n                self.target.set_condition('FLINCH',counter=0)\n    \n    def move_2(self): # Brave Bird  \n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            self.take_damage(int(0.33*damage),'recoil')\n            if not self.isfaint() and rnd()<20/100:\n                self.set_boost('def',1,'self')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Red-Moon\",\n  \"types\": [\n    \"Dragon\",\n    \"Flying\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Intimidate\": \"On switch-in, this Pokemon lowers the Attack of opponents by 1 stage and sets up Tailwind, which doubles its Speed for 3 turns.\"\n  },\n  \"moves\": {\n    \"Dragon Claw\": {\n      \"power\": 80,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Dragon\",\n      \"effect\": \"Has a 10% chance to make the target flinch.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Brave Bird\": {\n      \"power\": 120,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Flying\",\n      \"effect\": \"If the target lost HP, the user takes recoil damage equal to 33% the HP lost by the target. Then, the user has a 20% chance to raise its Defense by 1 stage.\",\n      \"property\": [\n        \"contact\"\n      ]\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass RedMoon(PokemonBase):\n    _species='Red-Moon'\n    _types=['Dragon','Flying']\n    _gender='Male'\n    _ability=['Intimidate']\n    _move_1=('Dragon Claw',80,100,'Physical','Dragon',0,['contact'])\n    _move_2=('Brave Bird',120,100,'Physical','Flying',0,['contact'])\n    def __init__(self):\n        super().__init__()\n\n    def onswitch(self):\n        self.target.set_boost('atk',-1)\n        self.set_side_condition('TAILWIND',counter=0,max_count=3)\n    \n    def get_stat(self,key,boost=None):\n        stat=self['stats'][key]\n        boost=self['boosts'][key] if not boost else boost\n        stat_ratio={0:1,1:1.5,2:2,3:2.5,4:3,5:3.5,6:4}[min(6,abs(boost))]\n        if boost<0:\n            stat_ratio=1/stat_ratio\n        stat_ratio*=self.get_weather_stat_mult(key)\n        if key=='spe' and self.isstatus('PAR'):\n            stat_ratio*=0.5\n        if key=='spe' and self['side_conditions'].get('TAILWIND'):\n            stat_ratio*=2\n        return int(stat*stat_ratio)\n\n    def move_1(self): # Dragon Claw\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<10/100:\n                self.target.set_condition('FLINCH',counter=0)\n    \n    def move_2(self): # Brave Bird  \n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            self.take_damage(int(0.33*damage),'recoil')\n            if not self.isfaint() and rnd()<20/100:\n                self.set_boost('def',1,'self')\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Lunar Strike\": {\n    \"power\": 90,\n    \"accuracy\": 90,\n    \"category\": \"Special\",\n    \"type\": \"Dragon\",\n    \"effect\": \"Has a 15% chance to confuse the target.\",\n    \"property\": []\n  }\n}\n```",
        "response": "```python\n@Increment(RedMoon,'_move_3')\ndef value():\n    return ('Lunar Strike',90,90,'Special','Dragon',0,[])\n\n@Increment(RedMoon)\ndef move_3(self): # Lunar Strike\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint() and rnd()<15/100:\n            self.target.set_condition('CONFUSION',counter=0)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Red-Moon\",\n  \"types\": [\n    \"Dragon\",\n    \"Flying\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Intimidate\": \"On switch-in, this Pokemon lowers the Attack of opponents by 1 stage and sets up Tailwind, which doubles its Speed for 3 turns.\"\n  },\n  \"moves\": {\n    \"Dragon Claw\": {\n      \"power\": 80,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Dragon\",\n      \"effect\": \"Has a 10% chance to make the target flinch.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Brave Bird\": {\n      \"power\": 120,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Flying\",\n      \"effect\": \"If the target lost HP, the user takes recoil damage equal to 33% the HP lost by the target. Then, the user has a 20% chance to raise its Defense by 1 stage.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Lunar Strike\": {\n      \"power\": 90,\n      \"accuracy\": 90,\n      \"category\": \"Special\",\n      \"type\": \"Dragon\",\n      \"effect\": \"Has a 15% chance to confuse the target.\",\n      \"property\": []\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass RedMoon(PokemonBase):\n    _species='Red-Moon'\n    _types=['Dragon','Flying']\n    _gender='Male'\n    _ability=['Intimidate']\n    _move_1=('Dragon Claw',80,100,'Physical','Dragon',0,['contact'])\n    _move_2=('Brave Bird',120,100,'Physical','Flying',0,['contact'])\n    def __init__(self):\n        super().__init__()\n\n    def onswitch(self):\n        self.target.set_boost('atk',-1)\n        self.set_side_condition('TAILWIND',counter=0,max_count=3)\n    \n    def get_stat(self,key,boost=None):\n        stat=self['stats'][key]\n        boost=self['boosts'][key] if not boost else boost\n        stat_ratio={0:1,1:1.5,2:2,3:2.5,4:3,5:3.5,6:4}[min(6,abs(boost))]\n        if boost<0:\n            stat_ratio=1/stat_ratio\n        stat_ratio*=self.get_weather_stat_mult(key)\n        if key=='spe' and self.isstatus('PAR'):\n            stat_ratio*=0.5\n        if key=='spe' and self['side_conditions'].get('TAILWIND'):\n            stat_ratio*=2\n        return int(stat*stat_ratio)\n\n    def move_1(self): # Dragon Claw\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<10/100:\n                self.target.set_condition('FLINCH',counter=0)\n    \n    def move_2(self): # Brave Bird  \n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            self.take_damage(int(0.33*damage),'recoil')\n            if not self.isfaint() and rnd()<20/100:\n                self.set_boost('def',1,'self')\n\n@Increment(RedMoon,'_move_3')\ndef value():\n    return ('Lunar Strike',90,90,'Special','Dragon',0,[])\n\n@Increment(RedMoon)\ndef move_3(self): # Lunar Strike\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint() and rnd()<15/100:\n            self.target.set_condition('CONFUSION',counter=0)\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Wind Cutter\": {\n    \"power\": 60,\n    \"accuracy\": 100,\n    \"category\": \"Physical\",\n    \"type\": \"Flying\",\n    \"effect\": \"Hits twice.\",\n    \"property\": [\n      \"contact\"\n    ]\n  }\n}\n```",
        "response": "```python\n@Increment(RedMoon,'_move_4')\ndef value():\n    return ('Wind Cutter',60,100,'Physical','Flying',0,['contact'])\n\n@Increment(RedMoon)\ndef move_4(self): # Wind Cutter\n    hit=True; i=0\n    while hit and i<2:\n        damage_ret=self.get_damage()\n        if damage_ret['miss']: break\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        i+=1; hit=False if self.target.isfaint() else True\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Red-Moon\",\n  \"types\": [\n    \"Dragon\",\n    \"Flying\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Intimidate\": \"On switch-in, this Pokemon lowers the Attack of opponents by 1 stage and sets up Tailwind, which doubles its Speed for 3 turns.\"\n  },\n  \"moves\": {\n    \"Dragon Claw\": {\n      \"power\": 80,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Dragon\",\n      \"effect\": \"Has a 10% chance to make the target flinch.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Brave Bird\": {\n      \"power\": 120,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Flying\",\n      \"effect\": \"If the target lost HP, the user takes recoil damage equal to 33% the HP lost by the target. Then, the user has a 20% chance to raise its Defense by 1 stage.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Lunar Strike\": {\n      \"power\": 90,\n      \"accuracy\": 90,\n      \"category\": \"Special\",\n      \"type\": \"Dragon\",\n      \"effect\": \"Has a 15% chance to confuse the target.\",\n      \"property\": []\n    },\n    \"Wind Cutter\": {\n      \"power\": 60,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Flying\",\n      \"effect\": \"Hits twice.\",\n      \"property\": [\n        \"contact\"\n      ]\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass RedMoon(PokemonBase):\n    _species='Red-Moon'\n    _types=['Dragon','Flying']\n    _gender='Male'\n    _ability=['Intimidate']\n    _move_1=('Dragon Claw',80,100,'Physical','Dragon',0,['contact'])\n    _move_2=('Brave Bird',120,100,'Physical','Flying',0,['contact'])\n    def __init__(self):\n        super().__init__()\n\n    def onswitch(self):\n        self.target.set_boost('atk',-1)\n        self.set_side_condition('TAILWIND',counter=0,max_count=3)\n    \n    def get_stat(self,key,boost=None):\n        stat=self['stats'][key]\n        boost=self['boosts'][key] if not boost else boost\n        stat_ratio={0:1,1:1.5,2:2,3:2.5,4:3,5:3.5,6:4}[min(6,abs(boost))]\n        if boost<0:\n            stat_ratio=1/stat_ratio\n        stat_ratio*=self.get_weather_stat_mult(key)\n        if key=='spe' and self.isstatus('PAR'):\n            stat_ratio*=0.5\n        if key=='spe' and self['side_conditions'].get('TAILWIND'):\n            stat_ratio*=2\n        return int(stat*stat_ratio)\n\n    def move_1(self): # Dragon Claw\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<10/100:\n                self.target.set_condition('FLINCH',counter=0)\n    \n    def move_2(self): # Brave Bird  \n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            self.take_damage(int(0.33*damage),'recoil')\n            if not self.isfaint() and rnd()<20/100:\n                self.set_boost('def',1,'self')\n\n@Increment(RedMoon,'_move_3')\ndef value():\n    return ('Lunar Strike',90,90,'Special','Dragon',0,[])\n\n@Increment(RedMoon)\ndef move_3(self): # Lunar Strike\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint() and rnd()<15/100:\n            self.target.set_condition('CONFUSION',counter=0)\n\n@Increment(RedMoon,'_move_4')\ndef value():\n    return ('Wind Cutter',60,100,'Physical','Flying',0,['contact'])\n\n@Increment(RedMoon)\ndef move_4(self): # Wind Cutter\n    hit=True; i=0\n    while hit and i<2:\n        damage_ret=self.get_damage()\n        if damage_ret['miss']: break\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        i+=1; hit=False if self.target.isfaint() else True\n```\n\nThis role is gonna learn a new ability:\n```json\n{\n  \"Eclipse Guard\": \"When HP is below half, reduces damage taken from Fairy-type moves by 50%.\"\n}\n```",
        "response": "```python\n@Increment(RedMoon,'_ability')\ndef value():\n    return ['Intimidate','Eclipse Guard']\n\n@Increment(RedMoon)\ndef _take_damage_attack(self,x):\n    self.register_act_taken()\n    if self['hp']<self['max_hp']//2 and self['act_taken']['type']=='Fairy':\n        x//=2\n    self.state['hp']=max(0,self['hp']-x)\n    if self['hp']==0:\n        self.state['status']='FNT'\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Red-Moon\",\n  \"types\": [\n    \"Dragon\",\n    \"Flying\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Intimidate\": \"On switch-in, this Pokemon lowers the Attack of opponents by 1 stage and sets up Tailwind, which doubles its Speed for 3 turns.\",\n    \"Eclipse Guard\": \"When HP is below half, reduces damage taken from Fairy-type moves by 50%.\"\n  },\n  \"moves\": {\n    \"Dragon Claw\": {\n      \"power\": 80,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Dragon\",\n      \"effect\": \"Has a 10% chance to make the target flinch.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Brave Bird\": {\n      \"power\": 120,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Flying\",\n      \"effect\": \"If the target lost HP, the user takes recoil damage equal to 33% the HP lost by the target. Then, the user has a 20% chance to raise its Defense by 1 stage.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Lunar Strike\": {\n      \"power\": 90,\n      \"accuracy\": 90,\n      \"category\": \"Special\",\n      \"type\": \"Dragon\",\n      \"effect\": \"Has a 15% chance to confuse the target.\",\n      \"property\": []\n    },\n    \"Wind Cutter\": {\n      \"power\": 60,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Flying\",\n      \"effect\": \"Hits twice.\",\n      \"property\": [\n        \"contact\"\n      ]\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass RedMoon(PokemonBase):\n    _species='Red-Moon'\n    _types=['Dragon','Flying']\n    _gender='Male'\n    _ability=['Intimidate']\n    _move_1=('Dragon Claw',80,100,'Physical','Dragon',0,['contact'])\n    _move_2=('Brave Bird',120,100,'Physical','Flying',0,['contact'])\n    def __init__(self):\n        super().__init__()\n\n    def onswitch(self):\n        self.target.set_boost('atk',-1)\n        self.set_side_condition('TAILWIND',counter=0,max_count=3)\n    \n    def get_stat(self,key,boost=None):\n        stat=self['stats'][key]\n        boost=self['boosts'][key] if not boost else boost\n        stat_ratio={0:1,1:1.5,2:2,3:2.5,4:3,5:3.5,6:4}[min(6,abs(boost))]\n        if boost<0:\n            stat_ratio=1/stat_ratio\n        stat_ratio*=self.get_weather_stat_mult(key)\n        if key=='spe' and self.isstatus('PAR'):\n            stat_ratio*=0.5\n        if key=='spe' and self['side_conditions'].get('TAILWIND'):\n            stat_ratio*=2\n        return int(stat*stat_ratio)\n\n    def move_1(self): # Dragon Claw\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<10/100:\n                self.target.set_condition('FLINCH',counter=0)\n    \n    def move_2(self): # Brave Bird  \n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            self.take_damage(int(0.33*damage),'recoil')\n            if not self.isfaint() and rnd()<20/100:\n                self.set_boost('def',1,'self')\n\n@Increment(RedMoon,'_move_3')\ndef value():\n    return ('Lunar Strike',90,90,'Special','Dragon',0,[])\n\n@Increment(RedMoon)\ndef move_3(self): # Lunar Strike\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint() and rnd()<15/100:\n            self.target.set_condition('CONFUSION',counter=0)\n\n@Increment(RedMoon,'_move_4')\ndef value():\n    return ('Wind Cutter',60,100,'Physical','Flying',0,['contact'])\n\n@Increment(RedMoon)\ndef move_4(self): # Wind Cutter\n    hit=True; i=0\n    while hit and i<2:\n        damage_ret=self.get_damage()\n        if damage_ret['miss']: break\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        i+=1; hit=False if self.target.isfaint() else True\n\n@Increment(RedMoon,'_ability')\ndef value():\n    return ['Intimidate','Eclipse Guard']\n\n@Increment(RedMoon)\ndef _take_damage_attack(self,x):\n    self.register_act_taken()\n    if self['hp']<self['max_hp']//2 and self['act_taken']['type']=='Fairy':\n        x//=2\n    self.state['hp']=max(0,self['hp']-x)\n    if self['hp']==0:\n        self.state['status']='FNT'\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Healing Roar\": {\n    \"power\": 0,\n    \"accuracy\": 100,\n    \"category\": \"Status\",\n    \"type\": \"Dragon\",\n    \"effect\": \"Restores 50% of its max HP, but lowers its Special Defense by 1 stage.\",\n    \"priority\": 1,\n    \"property\": []\n  }\n}\n```",
        "response": "```python\n@Increment(RedMoon,'_move_5')\ndef value():\n    return ('Healing Roar',0,100,'Status','Dragon',1,[])\n\n@Increment(RedMoon)\ndef move_5(self): # Healing Roar\n    self.restore(self['max_hp']//2,'heal')\n    self.set_boost('spd',-1)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Rhyperior\",\n  \"types\": [\n    \"Ground\",\n    \"Rock\"\n  ],\n  \"gender\": \"Female\",\n  \"ability\": {\n    \"Solid Fortification\": \"Reduces damage taken from super-effective (effect > 1) moves by 30%.\"\n  },\n  \"moves\": {\n    \"Quake Impact\": {\n      \"power\": 100,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Ground\",\n      \"effect\": \"Has a 20% chance to lower the target's Defense by 1 stage.\"\n    },\n    \"Protect\": {\n      \"power\": 0,\n      \"accuracy\": 100000,\n      \"category\": \"Status\",\n      \"priority\": 4,\n      \"type\": \"Normal\",\n      \"effect\": \"The user is protected from attacks made by other Pokemon in this turn. The effect ends at the end of the turn whether the user has been attacked or not. Fails if the user uses this move last turn.\"\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass Rhyperior(PokemonBase):\n    _species='Rhyperior'\n    _types=['Ground','Rock']\n    _gender='Female'\n    _ability=['Solid Fortification']\n    _move_1=('Quake Impact',100,100,'Physical','Ground',0,[])\n    _move_2=('Protect',0,100000,'Status','Normal',4,[])\n    def __init__(self):\n        super().__init__()\n\n    def _take_damage_attack(self,x):\n        if self['conditions'].get('PROTECT'):\n            del self['conditions']['PROTECT']\n            return\n        self.register_act_taken()\n        if self['act_taken']['type_efc']>1:\n            x=int(x*0.7)\n        self.state['hp']=max(0,self['hp']-x)\n        if self['hp']==0:\n            self.state['status']='FNT'\n\n    def move_1(self): # Quake Impact\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<20/100:\n                self.target.set_boost('def',-1)\n\n    def move_2(self): # Protect\n        if self['last_act'] and self['last_act']['id']=='Protect':\n            return\n        self.set_condition('PROTECT',counter=0)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Rhyperior\",\n  \"types\": [\n    \"Ground\",\n    \"Rock\"\n  ],\n  \"gender\": \"Female\",\n  \"ability\": {\n    \"Solid Fortification\": \"Reduces damage taken from super-effective (effect > 1) moves by 30%.\"\n  },\n  \"moves\": {\n    \"Quake Impact\": {\n      \"power\": 100,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Ground\",\n      \"effect\": \"Has a 20% chance to lower the target's Defense by 1 stage.\"\n    },\n    \"Protect\": {\n      \"power\": 0,\n      \"accuracy\": 100000,\n      \"category\": \"Status\",\n      \"priority\": 4,\n      \"type\": \"Normal\",\n      \"effect\": \"The user is protected from attacks made by other Pokemon in this turn. The effect ends at the end of the turn whether the user has been attacked or not. Fails if the user uses this move last turn.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Rhyperior(PokemonBase):\n    _species='Rhyperior'\n    _types=['Ground','Rock']\n    _gender='Female'\n    _ability=['Solid Fortification']\n    _move_1=('Quake Impact',100,100,'Physical','Ground',0,[])\n    _move_2=('Protect',0,100000,'Status','Normal',4,[])\n    def __init__(self):\n        super().__init__()\n\n    def _take_damage_attack(self,x):\n        if self['conditions'].get('PROTECT'):\n            del self['conditions']['PROTECT']\n            return\n        self.register_act_taken()\n        if self['act_taken']['type_efc']>1:\n            x=int(x*0.7)\n        self.state['hp']=max(0,self['hp']-x)\n        if self['hp']==0:\n            self.state['status']='FNT'\n\n    def move_1(self): # Quake Impact\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<20/100:\n                self.target.set_boost('def',-1)\n\n    def move_2(self): # Protect\n        if self['last_act'] and self['last_act']['id']=='Protect':\n            return\n        self.set_condition('PROTECT',counter=0)\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Rock Blast\": {\n    \"power\": 25,\n    \"accuracy\": 90,\n    \"category\": \"Physical\",\n    \"type\": \"Rock\",\n    \"effect\": \"Hits 2-5 times. Has a 35% chance to hit 2 or 3 times and a 15% chance to hit 4 or 5 times.\",\n    \"property\": [\n      \"contact\"\n    ]\n  }\n}\n```",
        "response": "```python\n@Increment(Rhyperior,'_move_3')\ndef value():\n    return ('Rock Blast',25,90,'Physical','Rock',0,['contact'])\n\n@Increment(Rhyperior)\ndef move_3(self): # Rock Blast\n    hit=True; i=0\n    r=rnd()\n    if r<0.35:\n        n_hits=2\n    elif r<0.7:\n        n_hits=3\n    elif r<0.85:\n        n_hits=4\n    else:\n        n_hits=5\n    while hit and i<n_hits:\n        damage_ret=self.get_damage()\n        if damage_ret['miss']: break\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        i+=1; hit=False if self.target.isfaint() else True\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Rhyperior\",\n  \"types\": [\n    \"Ground\",\n    \"Rock\"\n  ],\n  \"gender\": \"Female\",\n  \"ability\": {\n    \"Solid Fortification\": \"Reduces damage taken from super-effective (effect > 1) moves by 30%.\"\n  },\n  \"moves\": {\n    \"Quake Impact\": {\n      \"power\": 100,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Ground\",\n      \"effect\": \"Has a 20% chance to lower the target's Defense by 1 stage.\"\n    },\n    \"Protect\": {\n      \"power\": 0,\n      \"accuracy\": 100000,\n      \"category\": \"Status\",\n      \"priority\": 4,\n      \"type\": \"Normal\",\n      \"effect\": \"The user is protected from attacks made by other Pokemon in this turn. The effect ends at the end of the turn whether the user has been attacked or not. Fails if the user uses this move last turn.\"\n    },\n    \"Rock Blast\": {\n      \"power\": 25,\n      \"accuracy\": 90,\n      \"category\": \"Physical\",\n      \"type\": \"Rock\",\n      \"effect\": \"Hits 2-5 times. Has a 35% chance to hit 2 or 3 times and a 15% chance to hit 4 or 5 times.\",\n      \"property\": [\n        \"contact\"\n      ]\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Rhyperior(PokemonBase):\n    _species='Rhyperior'\n    _types=['Ground','Rock']\n    _gender='Female'\n    _ability=['Solid Fortification']\n    _move_1=('Quake Impact',100,100,'Physical','Ground',0,[])\n    _move_2=('Protect',0,100000,'Status','Normal',4,[])\n    def __init__(self):\n        super().__init__()\n\n    def _take_damage_attack(self,x):\n        if self['conditions'].get('PROTECT'):\n            del self['conditions']['PROTECT']\n            return\n        self.register_act_taken()\n        if self['act_taken']['type_efc']>1:\n            x=int(x*0.7)\n        self.state['hp']=max(0,self['hp']-x)\n        if self['hp']==0:\n            self.state['status']='FNT'\n\n    def move_1(self): # Quake Impact\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<20/100:\n                self.target.set_boost('def',-1)\n\n    def move_2(self): # Protect\n        if self['last_act'] and self['last_act']['id']=='Protect':\n            return\n        self.set_condition('PROTECT',counter=0)\n\n@Increment(Rhyperior,'_move_3')\ndef value():\n    return ('Rock Blast',25,90,'Physical','Rock',0,['contact'])\n\n@Increment(Rhyperior)\ndef move_3(self): # Rock Blast\n    hit=True; i=0\n    r=rnd()\n    if r<0.35:\n        n_hits=2\n    elif r<0.7:\n        n_hits=3\n    elif r<0.85:\n        n_hits=4\n    else:\n        n_hits=5\n    while hit and i<n_hits:\n        damage_ret=self.get_damage()\n        if damage_ret['miss']: break\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        i+=1; hit=False if self.target.isfaint() else True\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Earthen Barrier\": {\n    \"power\": 0,\n    \"accuracy\": 100000,\n    \"category\": \"Status\",\n    \"type\": \"Ground\",\n    \"effect\": \"Increases the user's Defense and Special Defense by 1 stage.\"\n  }\n}\n```",
        "response": "```python\n@Increment(Rhyperior,'_move_4')\ndef value():\n    return ('Earthen Barrier',0,100000,'Status','Ground',0,[])\n\n@Increment(Rhyperior)\ndef move_4(self): # Earthen Barrier\n    self.set_boost('def',+1,'self')\n    self.set_boost('spd',+1,'self')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Rhyperior\",\n  \"types\": [\n    \"Ground\",\n    \"Rock\"\n  ],\n  \"gender\": \"Female\",\n  \"ability\": {\n    \"Solid Fortification\": \"Reduces damage taken from super-effective (effect > 1) moves by 30%.\"\n  },\n  \"moves\": {\n    \"Quake Impact\": {\n      \"power\": 100,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Ground\",\n      \"effect\": \"Has a 20% chance to lower the target's Defense by 1 stage.\"\n    },\n    \"Protect\": {\n      \"power\": 0,\n      \"accuracy\": 100000,\n      \"category\": \"Status\",\n      \"priority\": 4,\n      \"type\": \"Normal\",\n      \"effect\": \"The user is protected from attacks made by other Pokemon in this turn. The effect ends at the end of the turn whether the user has been attacked or not. Fails if the user uses this move last turn.\"\n    },\n    \"Rock Blast\": {\n      \"power\": 25,\n      \"accuracy\": 90,\n      \"category\": \"Physical\",\n      \"type\": \"Rock\",\n      \"effect\": \"Hits 2-5 times. Has a 35% chance to hit 2 or 3 times and a 15% chance to hit 4 or 5 times.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Earthen Barrier\": {\n      \"power\": 0,\n      \"accuracy\": 100000,\n      \"category\": \"Status\",\n      \"type\": \"Ground\",\n      \"effect\": \"Increases the user's Defense and Special Defense by 1 stage.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Rhyperior(PokemonBase):\n    _species='Rhyperior'\n    _types=['Ground','Rock']\n    _gender='Female'\n    _ability=['Solid Fortification']\n    _move_1=('Quake Impact',100,100,'Physical','Ground',0,[])\n    _move_2=('Protect',0,100000,'Status','Normal',4,[])\n    def __init__(self):\n        super().__init__()\n\n    def _take_damage_attack(self,x):\n        if self['conditions'].get('PROTECT'):\n            del self['conditions']['PROTECT']\n            return\n        self.register_act_taken()\n        if self['act_taken']['type_efc']>1:\n            x=int(x*0.7)\n        self.state['hp']=max(0,self['hp']-x)\n        if self['hp']==0:\n            self.state['status']='FNT'\n\n    def move_1(self): # Quake Impact\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<20/100:\n                self.target.set_boost('def',-1)\n\n    def move_2(self): # Protect\n        if self['last_act'] and self['last_act']['id']=='Protect':\n            return\n        self.set_condition('PROTECT',counter=0)\n\n@Increment(Rhyperior,'_move_3')\ndef value():\n    return ('Rock Blast',25,90,'Physical','Rock',0,['contact'])\n\n@Increment(Rhyperior)\ndef move_3(self): # Rock Blast\n    hit=True; i=0\n    r=rnd()\n    if r<0.35:\n        n_hits=2\n    elif r<0.7:\n        n_hits=3\n    elif r<0.85:\n        n_hits=4\n    else:\n        n_hits=5\n    while hit and i<n_hits:\n        damage_ret=self.get_damage()\n        if damage_ret['miss']: break\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        i+=1; hit=False if self.target.isfaint() else True\n\n@Increment(Rhyperior,'_move_4')\ndef value():\n    return ('Earthen Barrier',0,100000,'Status','Ground',0,[])\n\n@Increment(Rhyperior)\ndef move_4(self): # Earthen Barrier\n    self.set_boost('def',+1,'self')\n    self.set_boost('spd',+1,'self')\n```\n\nThis role is gonna learn a new ability:\n```json\n{\n  \"Stone Resolve\": \"Boosts its Special Defense by 1 stage at the end of each turn if Standstorm is active.\"\n}\n```",
        "response": "```python\n@Increment(Rhyperior,'_ability')\ndef value():\n    return ['Solid Fortification','Stone Resolve']\n\n@Increment(Rhyperior)\ndef endturn(self):\n    if self.env.get('STANDSTORM'):\n        self.set_boost('spd',1,'self')\n    if self['conditions'].get('PROTECT'):\n        del self['conditions']['PROTECT']\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Rhyperior\",\n  \"types\": [\n    \"Ground\",\n    \"Rock\"\n  ],\n  \"gender\": \"Female\",\n  \"ability\": {\n    \"Solid Fortification\": \"Reduces damage taken from super-effective (effect > 1) moves by 30%.\",\n    \"Stone Resolve\": \"Boosts its Special Defense by 1 stage at the end of each turn if Standstorm is active.\"\n  },\n  \"moves\": {\n    \"Quake Impact\": {\n      \"power\": 100,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Ground\",\n      \"effect\": \"Has a 20% chance to lower the target's Defense by 1 stage.\"\n    },\n    \"Protect\": {\n      \"power\": 0,\n      \"accuracy\": 100000,\n      \"category\": \"Status\",\n      \"priority\": 4,\n      \"type\": \"Normal\",\n      \"effect\": \"The user is protected from attacks made by other Pokemon in this turn. The effect ends at the end of the turn whether the user has been attacked or not. Fails if the user uses this move last turn.\"\n    },\n    \"Rock Blast\": {\n      \"power\": 25,\n      \"accuracy\": 90,\n      \"category\": \"Physical\",\n      \"type\": \"Rock\",\n      \"effect\": \"Hits 2-5 times. Has a 35% chance to hit 2 or 3 times and a 15% chance to hit 4 or 5 times.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Earthen Barrier\": {\n      \"power\": 0,\n      \"accuracy\": 100000,\n      \"category\": \"Status\",\n      \"type\": \"Ground\",\n      \"effect\": \"Increases the user's Defense and Special Defense by 1 stage.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Rhyperior(PokemonBase):\n    _species='Rhyperior'\n    _types=['Ground','Rock']\n    _gender='Female'\n    _ability=['Solid Fortification']\n    _move_1=('Quake Impact',100,100,'Physical','Ground',0,[])\n    _move_2=('Protect',0,100000,'Status','Normal',4,[])\n    def __init__(self):\n        super().__init__()\n\n    def _take_damage_attack(self,x):\n        if self['conditions'].get('PROTECT'):\n            del self['conditions']['PROTECT']\n            return\n        self.register_act_taken()\n        if self['act_taken']['type_efc']>1:\n            x=int(x*0.7)\n        self.state['hp']=max(0,self['hp']-x)\n        if self['hp']==0:\n            self.state['status']='FNT'\n\n    def move_1(self): # Quake Impact\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<20/100:\n                self.target.set_boost('def',-1)\n\n    def move_2(self): # Protect\n        if self['last_act'] and self['last_act']['id']=='Protect':\n            return\n        self.set_condition('PROTECT',counter=0)\n\n@Increment(Rhyperior,'_move_3')\ndef value():\n    return ('Rock Blast',25,90,'Physical','Rock',0,['contact'])\n\n@Increment(Rhyperior)\ndef move_3(self): # Rock Blast\n    hit=True; i=0\n    r=rnd()\n    if r<0.35:\n        n_hits=2\n    elif r<0.7:\n        n_hits=3\n    elif r<0.85:\n        n_hits=4\n    else:\n        n_hits=5\n    while hit and i<n_hits:\n        damage_ret=self.get_damage()\n        if damage_ret['miss']: break\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        i+=1; hit=False if self.target.isfaint() else True\n\n@Increment(Rhyperior,'_move_4')\ndef value():\n    return ('Earthen Barrier',0,100000,'Status','Ground',0,[])\n\n@Increment(Rhyperior)\ndef move_4(self): # Earthen Barrier\n    self.set_boost('def',+1,'self')\n    self.set_boost('spd',+1,'self')\n\n@Increment(Rhyperior,'_ability')\ndef value():\n    return ['Solid Fortification','Stone Resolve']\n\n@Increment(Rhyperior)\ndef endturn(self):\n    if self.env.get('STANDSTORM'):\n        self.set_boost('spd',1,'self')\n    if self['conditions'].get('PROTECT'):\n        del self['conditions']['PROTECT']\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Ice Punch\": {\n    \"power\": 75,\n    \"accuracy\": 100,\n    \"category\": \"Physical\",\n    \"priority\": 0,\n    \"type\": \"Ice\",\n    \"effect\": \"Has a 10% chance to freeze the target.\",\n    \"property\": [\n      \"contact\"\n    ]\n  }\n}\n```",
        "response": "```python\n@Increment(Rhyperior,'_move_5')\ndef value():\n    return ('Ice Punch',75,100,'Physical','Ice',0,['contact'])\n\n@Increment(Rhyperior)\ndef move_5(self): # Ice Punch\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint() and rnd()<10/100:\n            self.target.set_status('FRZ')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Salamence\",\n  \"types\": [\n    \"Dragon\",\n    \"Flying\"\n  ],\n  \"gender\": \"Female\",\n  \"ability\": {\n    \"Intimidate\": \"On switch-in, this Pokemon lowers the Attack of opponents by 1 stage.\"\n  },\n  \"moves\": {\n    \"Dragon Pulse\": {\n      \"power\": 85,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Dragon\",\n      \"effect\": \"No additional effect.\"\n    },\n    \"Hurricane\": {\n      \"power\": 110,\n      \"accuracy\": 70,\n      \"category\": \"Special\",\n      \"type\": \"Flying\",\n      \"effect\": \"Has a 30% chance to confuse the target. If the weather is Rain Dance, this move does not check accuracy. If the weather is Sunny Day, this move's accuracy is 50%.\"\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass Salamence(PokemonBase):\n    _species='Salamence'\n    _types=['Dragon','Flying']\n    _gender='Female'\n    _ability=['Intimidate']\n    _move_1=('Dragon Pulse',85,100,'Special','Dragon',0,[])\n    _move_2=('Hurricane',110,70,'Special','Flying',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def onswitch(self):\n        self.target.set_boost('atk',-1)\n\n    def get_accuracy(self):\n        acc=self['act']['accuracy']\n        if self['act']['id']=='Hurricane':\n            if self.env.get('RAINDANCE'):\n                acc=1e5\n            elif self.env.get('SUNNYDAY'):\n                acc=50\n        acc_mult=[1.0,1.33,1.67,2.0]\n        if self['boosts']['accuracy']>=0:\n            acc*=acc_mult[self['boosts']['accuracy']]\n        else:\n            acc/=acc_mult[self['boosts']['accuracy']]\n        acc*=self.target.get_evasion()\n        return acc/100\n    \n    def move_1(self): # Dragon Pulse\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n    \n    def move_2(self): # Hurricane\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100:\n                self.target.set_condition('CONFUSION',counter=0)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Salamence\",\n  \"types\": [\n    \"Dragon\",\n    \"Flying\"\n  ],\n  \"gender\": \"Female\",\n  \"ability\": {\n    \"Fast Recovery\": \"If this Pokemon has taken 200 or more total damage without fainting, its Attack raises by 2 stages.\"\n  },\n  \"moves\": {\n    \"Dragon Claw\": {\n      \"power\": 80,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Dragon\",\n      \"effect\": \"No additional effect.\"\n    },\n    \"Dual Wingbeat\": {\n      \"power\": 40,\n      \"accuracy\": 90,\n      \"category\": \"Physical\",\n      \"type\": \"Flying\",\n      \"effect\": \"Hits twice.\",\n      \"property\": [\n        \"contact\"\n      ]\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass Salamence(PokemonBase):\n    _species='Salamence'\n    _types=['Dragon','Flying']\n    _gender='Female'\n    _ability=['Fast Recovery']\n    _move_1=('Dragon Claw',80,100,'Physical','Dragon',0,[])\n    _move_2=('Dual Wingbeat',40,90,'Physical','Flying',0,['contact'])\n    def __init__(self):\n        super().__init__()\n\n    def take_damage(self,x,from_='attack'):\n        if from_=='attack':\n            self._take_damage_attack(x)\n        elif from_=='loss':\n            self._take_damage_loss(x)\n        elif from_=='recoil':\n            self._take_damage_recoil(x)\n        if self['hp']>0 and x>=200:\n            self.set_boost('atk',2,'self')\n    \n    def move_1(self): # Dragon Claw\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n    \n    def move_2(self): # Dual Wingbeat\n        hit=True; i=0\n        while hit and i<2:\n            damage_ret=self.get_damage()\n            if damage_ret['miss']: break\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            i+=1; hit=False if self.target.isfaint() else True\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Sandslash\",\n  \"types\": [\n    \"Steel\",\n    \"Ice\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Slush Rush\": \"If Snow is active, this Pokemon's Speed is doubled.\"\n  },\n  \"moves\": {\n    \"Triple Axel\": {\n      \"power\": 20,\n      \"accuracy\": 90,\n      \"category\": \"Physical\",\n      \"priority\": 0,\n      \"type\": \"Ice\",\n      \"property\": [\n        \"contact\"\n      ],\n      \"effect\": \"Hits three times. Each hit increases the damage by 50%. This move checks accuracy for each hit, and the attack ends if the target avoids a hit.\"\n    },\n    \"Rapid Spin\": {\n      \"power\": 50,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Normal\",\n      \"effect\": \"If this move is successful and the user has not fainted, the effects of Leech Seed and Trap end for the user. Has a 100% chance to raise the user's Speed by 1 stage.\",\n      \"property\": [\n        \"contact\"\n      ]\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass Sandslash(PokemonBase):\n    _species='Sandslash'\n    _types=['Steel','Ice']\n    _gender='Male'\n    _ability=['Slush Rush']\n    _move_1=('Triple Axel',20,90,'Physical','Ice',0,[])\n    _move_2=('Rapid Spin',50,100,'Physical','Normal',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def get_stat(self,key,boost=None):\n        stat=self['stats'][key]\n        boost=self['boosts'][key] if not boost else boost\n        stat_ratio={0:1,1:1.5,2:2,3:2.5,4:3,5:3.5,6:4}[min(6,abs(boost))]\n        if boost<0:\n            stat_ratio=1/stat_ratio\n        stat_ratio*=self.get_weather_stat_mult(key)\n        if key=='spe' and self.isstatus('PAR'):\n            stat_ratio*=0.5\n        if key=='spe' and self.env.get('SNOW'):\n            stat_ratio*=2\n        return int(stat*stat_ratio)\n\n    def move_1(self): # Triple Axel\n        hit=True; i=0\n        while hit and i<3:\n            damage_ret=self.get_damage()\n            if damage_ret['miss']: break\n            damage=damage_ret['damage']\n            damage=int(damage*1.5**i)\n            self.target.take_damage(damage)\n            i+=1; hit=False if self.target.isfaint() else True\n\n    def move_2(self): # Rapid Spin\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if self['conditions'].get('LEECH_SEED'):\n                del self['conditions']['LEECH_SEED']\n            if self['conditions'].get('TRAP'):\n                del self['conditions']['TRAP']\n            self.set_boost('spe',+1,'self')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Sandslash\",\n  \"types\": [\n    \"Steel\",\n    \"Ice\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Slush Rush\": \"If Snow is active, this Pokemon's Speed is doubled.\"\n  },\n  \"moves\": {\n    \"Triple Axel\": {\n      \"power\": 20,\n      \"accuracy\": 90,\n      \"category\": \"Physical\",\n      \"priority\": 0,\n      \"type\": \"Ice\",\n      \"property\": [\n        \"contact\"\n      ],\n      \"effect\": \"Hits three times. Each hit increases the damage by 50%. This move checks accuracy for each hit, and the attack ends if the target avoids a hit.\"\n    },\n    \"Rapid Spin\": {\n      \"power\": 50,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Normal\",\n      \"effect\": \"If this move is successful and the user has not fainted, the effects of Leech Seed and Trap end for the user. Has a 100% chance to raise the user's Speed by 1 stage.\",\n      \"property\": [\n        \"contact\"\n      ]\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Sandslash(PokemonBase):\n    _species='Sandslash'\n    _types=['Steel','Ice']\n    _gender='Male'\n    _ability=['Slush Rush']\n    _move_1=('Triple Axel',20,90,'Physical','Ice',0,[])\n    _move_2=('Rapid Spin',50,100,'Physical','Normal',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def get_stat(self,key,boost=None):\n        stat=self['stats'][key]\n        boost=self['boosts'][key] if not boost else boost\n        stat_ratio={0:1,1:1.5,2:2,3:2.5,4:3,5:3.5,6:4}[min(6,abs(boost))]\n        if boost<0:\n            stat_ratio=1/stat_ratio\n        stat_ratio*=self.get_weather_stat_mult(key)\n        if key=='spe' and self.isstatus('PAR'):\n            stat_ratio*=0.5\n        if key=='spe' and self.env.get('SNOW'):\n            stat_ratio*=2\n        return int(stat*stat_ratio)\n\n    def move_1(self): # Triple Axel\n        hit=True; i=0\n        while hit and i<3:\n            damage_ret=self.get_damage()\n            if damage_ret['miss']: break\n            damage=damage_ret['damage']\n            damage=int(damage*1.5**i)\n            self.target.take_damage(damage)\n            i+=1; hit=False if self.target.isfaint() else True\n\n    def move_2(self): # Rapid Spin\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if self['conditions'].get('LEECH_SEED'):\n                del self['conditions']['LEECH_SEED']\n            if self['conditions'].get('TRAP'):\n                del self['conditions']['TRAP']\n            self.set_boost('spe',+1,'self')\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Iron Head\": {\n    \"power\": 80,\n    \"accuracy\": 100,\n    \"category\": \"Physical\",\n    \"type\": \"Steel\",\n    \"effect\": \"Has a 30% chance to make the target flinch.\",\n    \"property\": [\n      \"contact\"\n    ]\n  }\n}\n```",
        "response": "```python\n@Increment(Sandslash,'_move_3')\ndef value():\n    return ('Iron Head',80,100,'Physical','Steel',0,['contact'])\n\n@Increment(Sandslash)\ndef move_3(self): # Iron Head\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint() and rnd()<30/100:\n            self.target.set_condition('FLINCH',counter=0)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Sandslash\",\n  \"types\": [\n    \"Steel\",\n    \"Ice\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Slush Rush\": \"If Snow is active, this Pokemon's Speed is doubled.\"\n  },\n  \"moves\": {\n    \"Triple Axel\": {\n      \"power\": 20,\n      \"accuracy\": 90,\n      \"category\": \"Physical\",\n      \"priority\": 0,\n      \"type\": \"Ice\",\n      \"property\": [\n        \"contact\"\n      ],\n      \"effect\": \"Hits three times. Each hit increases the damage by 50%. This move checks accuracy for each hit, and the attack ends if the target avoids a hit.\"\n    },\n    \"Rapid Spin\": {\n      \"power\": 50,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Normal\",\n      \"effect\": \"If this move is successful and the user has not fainted, the effects of Leech Seed and Trap end for the user. Has a 100% chance to raise the user's Speed by 1 stage.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Iron Head\": {\n      \"power\": 80,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Steel\",\n      \"effect\": \"Has a 30% chance to make the target flinch.\",\n      \"property\": [\n        \"contact\"\n      ]\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Sandslash(PokemonBase):\n    _species='Sandslash'\n    _types=['Steel','Ice']\n    _gender='Male'\n    _ability=['Slush Rush']\n    _move_1=('Triple Axel',20,90,'Physical','Ice',0,[])\n    _move_2=('Rapid Spin',50,100,'Physical','Normal',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def get_stat(self,key,boost=None):\n        stat=self['stats'][key]\n        boost=self['boosts'][key] if not boost else boost\n        stat_ratio={0:1,1:1.5,2:2,3:2.5,4:3,5:3.5,6:4}[min(6,abs(boost))]\n        if boost<0:\n            stat_ratio=1/stat_ratio\n        stat_ratio*=self.get_weather_stat_mult(key)\n        if key=='spe' and self.isstatus('PAR'):\n            stat_ratio*=0.5\n        if key=='spe' and self.env.get('SNOW'):\n            stat_ratio*=2\n        return int(stat*stat_ratio)\n\n    def move_1(self): # Triple Axel\n        hit=True; i=0\n        while hit and i<3:\n            damage_ret=self.get_damage()\n            if damage_ret['miss']: break\n            damage=damage_ret['damage']\n            damage=int(damage*1.5**i)\n            self.target.take_damage(damage)\n            i+=1; hit=False if self.target.isfaint() else True\n\n    def move_2(self): # Rapid Spin\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if self['conditions'].get('LEECH_SEED'):\n                del self['conditions']['LEECH_SEED']\n            if self['conditions'].get('TRAP'):\n                del self['conditions']['TRAP']\n            self.set_boost('spe',+1,'self')\n\n@Increment(Sandslash,'_move_3')\ndef value():\n    return ('Iron Head',80,100,'Physical','Steel',0,['contact'])\n\n@Increment(Sandslash)\ndef move_3(self): # Iron Head\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint() and rnd()<30/100:\n            self.target.set_condition('FLINCH',counter=0)\n```\n\nThis role is gonna learn a new ability:\n```json\n{\n  \"Raging Spikes\": \"If this Pokemon's HP reaches to 1/2 or less of its max HP, its Triple Axel hits four times.\"\n}\n```",
        "response": "```python\n@Increment(Sandslash,'_ability')\ndef value():\n    return ['Slush Rush','Raging Spikes']\n\n@Increment(Sandslash)\ndef move_1(self): # Triple Axel\n    hit=True; i=0\n    n_hits=3 if self['hp']>self['max_hp']//2 else 4\n    while hit and i<n_hits:\n        damage_ret=self.get_damage()\n        if damage_ret['miss']: break\n        damage=damage_ret['damage']\n        damage=int(damage*1.5**i)\n        self.target.take_damage(damage)\n        i+=1; hit=False if self.target.isfaint() else True\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Scizor\",\n  \"types\": [\n    \"Bug\",\n    \"Steel\"\n  ],\n  \"gender\": \"Female\",\n  \"ability\": {\n    \"Technician\": \"This Pokemon's moves of 60 power or less have 1.5x power, including Struggle.\"\n  },\n  \"moves\": {\n    \"Bullet Punch\": {\n      \"power\": 40,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"priority\": 1,\n      \"type\": \"Steel\",\n      \"effect\": \"Usually goes first.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Bug Tangle\": {\n      \"power\": 15,\n      \"accuracy\": 90,\n      \"category\": \"Physical\",\n      \"type\": \"Bug\",\n      \"effect\": \"Hits four times.\"\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass Scizor(PokemonBase):\n    _species='Scizor'\n    _types=['Bug','Steel']\n    _gender='Female'\n    _ability=['Technician']\n    _move_1=('Bullet Punch',40,100,'Physical','Steel',1,['contact'])\n    _move_2=('Bug Tangle',15,90,'Physical','Bug',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def get_power(self):\n        power=self['act']['power']\n        if power<=60:\n            power=int(power*1.5)\n        return int(power*self.get_weather_power_mult())\n    \n    def move_1(self): # Bullet Punch\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n    \n    def move_2(self): # Bug Tangle\n        hit=True; i=0\n        while hit and i<4:\n            damage_ret=self.get_damage()\n            if damage_ret['miss']: break\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            i+=1; hit=False if self.target.isfaint() else True\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Scizor\",\n  \"types\": [\n    \"Bug\",\n    \"Steel\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Technician\": \"This Pokemon's moves of 60 power or less have 1.5x power, including Struggle.\"\n  },\n  \"moves\": {\n    \"Steel Cutter\": {\n      \"power\": 20,\n      \"accuracy\": 95,\n      \"category\": \"Physical\",\n      \"type\": \"Steel\",\n      \"effect\": \"Hits five times. Each hit has a 30% chance to lower the target's Defense by 1 stage.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Quik Pinch\": {\n      \"power\": 45,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"priority\": 1,\n      \"type\": \"Bug\",\n      \"effect\": \"Raises the user's Speed by 1 stage before attacking.\",\n      \"property\": [\n        \"contact\"\n      ]\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass Scizor(PokemonBase):\n    _species='Scizor'\n    _types=['Bug','Steel']\n    _gender='Male'\n    _ability=['Technician']\n    _move_1=('Steel Cutter',20,95,'Physical','Steel',0,['contact'])\n    _move_2=('Quik Pinch',45,100,'Physical','Bug',1,['contact'])\n    def __init__(self):\n        super().__init__()\n\n    def get_power(self):\n        power=self['act']['power']\n        if power<=60:\n            power=power*1.5\n        return int(power*self.get_weather_power_mult())\n\n    def move_1(self): # Steel Cutter\n        hit=True\n        i=0\n        while hit and i<5:\n            damage_ret=self.get_damage()\n            if damage_ret['miss']: break\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100:\n                self.target.set_boost('def',-1)\n            i+=1\n            hit=False if self.target.isfaint() else True\n            \n    def move_2(self): # Quik Pinch\n        self.set_boost('spe',1,'self')\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Scizor\",\n  \"types\": [\n    \"Bug\",\n    \"Steel\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Technician\": \"This Pokemon's moves of 60 power or less have 1.5x power, including Struggle.\"\n  },\n  \"moves\": {\n    \"Steel Cutter\": {\n      \"power\": 20,\n      \"accuracy\": 95,\n      \"category\": \"Physical\",\n      \"type\": \"Steel\",\n      \"effect\": \"Hits five times. Each hit has a 30% chance to lower the target's Defense by 1 stage.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Quik Pinch\": {\n      \"power\": 45,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"priority\": 1,\n      \"type\": \"Bug\",\n      \"effect\": \"Raises the user's Speed by 1 stage before attacking.\",\n      \"property\": [\n        \"contact\"\n      ]\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Scizor(PokemonBase):\n    _species='Scizor'\n    _types=['Bug','Steel']\n    _gender='Male'\n    _ability=['Technician']\n    _move_1=('Steel Cutter',20,95,'Physical','Steel',0,['contact'])\n    _move_2=('Quik Pinch',45,100,'Physical','Bug',1,['contact'])\n    def __init__(self):\n        super().__init__()\n\n    def get_power(self):\n        power=self['act']['power']\n        if power<=60:\n            power=power*1.5\n        return int(power*self.get_weather_power_mult())\n\n    def move_1(self): # Steel Cutter\n        hit=True\n        i=0\n        while hit and i<5:\n            damage_ret=self.get_damage()\n            if damage_ret['miss']: break\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100:\n                self.target.set_boost('def',-1)\n            i+=1\n            hit=False if self.target.isfaint() else True\n            \n    def move_2(self): # Quik Pinch\n        self.set_boost('spe',1,'self')\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Iron Buzz\": {\n    \"power\": 50,\n    \"accuracy\": 95,\n    \"category\": \"Special\",\n    \"type\": \"Steel\",\n    \"effect\": \"Has a 20% chance to confuse the target.\"\n  }\n}\n```",
        "response": "```python\n@Increment(Scizor,'_move_3')\ndef value():\n    return ('Iron Buzz',50,95,'Special','Steel',0,[])\n\n@Increment(Scizor)\ndef move_3(self): # Iron Buzz\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint() and rnd()<0.2:\n            self.target.set_condition('CONFUSION',counter=0)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Scizor\",\n  \"types\": [\n    \"Bug\",\n    \"Steel\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Technician\": \"This Pokemon's moves of 60 power or less have 1.5x power, including Struggle.\"\n  },\n  \"moves\": {\n    \"Steel Cutter\": {\n      \"power\": 20,\n      \"accuracy\": 95,\n      \"category\": \"Physical\",\n      \"type\": \"Steel\",\n      \"effect\": \"Hits five times. Each hit has a 30% chance to lower the target's Defense by 1 stage.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Quik Pinch\": {\n      \"power\": 45,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"priority\": 1,\n      \"type\": \"Bug\",\n      \"effect\": \"Raises the user's Speed by 1 stage before attacking.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Iron Buzz\": {\n      \"power\": 50,\n      \"accuracy\": 95,\n      \"category\": \"Special\",\n      \"type\": \"Steel\",\n      \"effect\": \"Has a 20% chance to confuse the target.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Scizor(PokemonBase):\n    _species='Scizor'\n    _types=['Bug','Steel']\n    _gender='Male'\n    _ability=['Technician']\n    _move_1=('Steel Cutter',20,95,'Physical','Steel',0,['contact'])\n    _move_2=('Quik Pinch',45,100,'Physical','Bug',1,['contact'])\n    def __init__(self):\n        super().__init__()\n\n    def get_power(self):\n        power=self['act']['power']\n        if power<=60:\n            power=power*1.5\n        return int(power*self.get_weather_power_mult())\n\n    def move_1(self): # Steel Cutter\n        hit=True\n        i=0\n        while hit and i<5:\n            damage_ret=self.get_damage()\n            if damage_ret['miss']: break\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100:\n                self.target.set_boost('def',-1)\n            i+=1\n            hit=False if self.target.isfaint() else True\n            \n    def move_2(self): # Quik Pinch\n        self.set_boost('spe',1,'self')\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n\n@Increment(Scizor,'_move_3')\ndef value():\n    return ('Iron Buzz',50,95,'Special','Steel',0,[])\n\n@Increment(Scizor)\ndef move_3(self): # Iron Buzz\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint() and rnd()<0.2:\n            self.target.set_condition('CONFUSION',counter=0)\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Bug Echo\": {\n    \"power\": 40,\n    \"accuracy\": 100,\n    \"category\": \"Special\",\n    \"priority\": 1,\n    \"type\": \"Bug\",\n    \"effect\": \"Always moves first.\"\n  }\n}\n```",
        "response": "```python\n@Increment(Scizor,'_move_4')\ndef value():\n    return ('Bug Echo',40,100,'Special','Bug',1,[])\n\n@Increment(Scizor)\ndef move_4(self): # Bug Echo\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Scizor\",\n  \"types\": [\n    \"Bug\",\n    \"Steel\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Technician\": \"This Pokemon's moves of 60 power or less have 1.5x power, including Struggle.\"\n  },\n  \"moves\": {\n    \"Steel Cutter\": {\n      \"power\": 20,\n      \"accuracy\": 95,\n      \"category\": \"Physical\",\n      \"type\": \"Steel\",\n      \"effect\": \"Hits five times. Each hit has a 30% chance to lower the target's Defense by 1 stage.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Quik Pinch\": {\n      \"power\": 45,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"priority\": 1,\n      \"type\": \"Bug\",\n      \"effect\": \"Raises the user's Speed by 1 stage before attacking.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Iron Buzz\": {\n      \"power\": 50,\n      \"accuracy\": 95,\n      \"category\": \"Special\",\n      \"type\": \"Steel\",\n      \"effect\": \"Has a 20% chance to confuse the target.\"\n    },\n    \"Bug Echo\": {\n      \"power\": 40,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"priority\": 1,\n      \"type\": \"Bug\",\n      \"effect\": \"Always moves first.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Scizor(PokemonBase):\n    _species='Scizor'\n    _types=['Bug','Steel']\n    _gender='Male'\n    _ability=['Technician']\n    _move_1=('Steel Cutter',20,95,'Physical','Steel',0,['contact'])\n    _move_2=('Quik Pinch',45,100,'Physical','Bug',1,['contact'])\n    def __init__(self):\n        super().__init__()\n\n    def get_power(self):\n        power=self['act']['power']\n        if power<=60:\n            power=power*1.5\n        return int(power*self.get_weather_power_mult())\n\n    def move_1(self): # Steel Cutter\n        hit=True\n        i=0\n        while hit and i<5:\n            damage_ret=self.get_damage()\n            if damage_ret['miss']: break\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100:\n                self.target.set_boost('def',-1)\n            i+=1\n            hit=False if self.target.isfaint() else True\n            \n    def move_2(self): # Quik Pinch\n        self.set_boost('spe',1,'self')\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n\n@Increment(Scizor,'_move_3')\ndef value():\n    return ('Iron Buzz',50,95,'Special','Steel',0,[])\n\n@Increment(Scizor)\ndef move_3(self): # Iron Buzz\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint() and rnd()<0.2:\n            self.target.set_condition('CONFUSION',counter=0)\n\n@Increment(Scizor,'_move_4')\ndef value():\n    return ('Bug Echo',40,100,'Special','Bug',1,[])\n\n@Increment(Scizor)\ndef move_4(self): # Bug Echo\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n```\n\nThis role is gonna learn a new ability:\n```json\n{\n  \"Metalic Surge\": \"When this Pokemon enters the battle, its Speed is increased by 1 stage.\"\n}\n```",
        "response": "```python\n@Increment(Scizor,'_ability')\ndef value():\n    return ['Technician','Metalic Surge']\n\n@Increment(Scizor)\ndef onswitch(self):\n    self.set_boost('spe',1,'self')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Scizor\",\n  \"types\": [\n    \"Bug\",\n    \"Steel\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Technician\": \"This Pokemon's moves of 60 power or less have 1.5x power, including Struggle.\",\n    \"Metalic Surge\": \"When this Pokemon enters the battle, its Speed is increased by 1 stage.\"\n  },\n  \"moves\": {\n    \"Steel Cutter\": {\n      \"power\": 20,\n      \"accuracy\": 95,\n      \"category\": \"Physical\",\n      \"type\": \"Steel\",\n      \"effect\": \"Hits five times. Each hit has a 30% chance to lower the target's Defense by 1 stage.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Quik Pinch\": {\n      \"power\": 45,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"priority\": 1,\n      \"type\": \"Bug\",\n      \"effect\": \"Raises the user's Speed by 1 stage before attacking.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Iron Buzz\": {\n      \"power\": 50,\n      \"accuracy\": 95,\n      \"category\": \"Special\",\n      \"type\": \"Steel\",\n      \"effect\": \"Has a 20% chance to confuse the target.\"\n    },\n    \"Bug Echo\": {\n      \"power\": 40,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"priority\": 1,\n      \"type\": \"Bug\",\n      \"effect\": \"Always moves first.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Scizor(PokemonBase):\n    _species='Scizor'\n    _types=['Bug','Steel']\n    _gender='Male'\n    _ability=['Technician']\n    _move_1=('Steel Cutter',20,95,'Physical','Steel',0,['contact'])\n    _move_2=('Quik Pinch',45,100,'Physical','Bug',1,['contact'])\n    def __init__(self):\n        super().__init__()\n\n    def get_power(self):\n        power=self['act']['power']\n        if power<=60:\n            power=power*1.5\n        return int(power*self.get_weather_power_mult())\n\n    def move_1(self): # Steel Cutter\n        hit=True\n        i=0\n        while hit and i<5:\n            damage_ret=self.get_damage()\n            if damage_ret['miss']: break\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100:\n                self.target.set_boost('def',-1)\n            i+=1\n            hit=False if self.target.isfaint() else True\n            \n    def move_2(self): # Quik Pinch\n        self.set_boost('spe',1,'self')\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n\n@Increment(Scizor,'_move_3')\ndef value():\n    return ('Iron Buzz',50,95,'Special','Steel',0,[])\n\n@Increment(Scizor)\ndef move_3(self): # Iron Buzz\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint() and rnd()<0.2:\n            self.target.set_condition('CONFUSION',counter=0)\n\n@Increment(Scizor,'_move_4')\ndef value():\n    return ('Bug Echo',40,100,'Special','Bug',1,[])\n\n@Increment(Scizor)\ndef move_4(self): # Bug Echo\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n\n@Increment(Scizor,'_ability')\ndef value():\n    return ['Technician','Metalic Surge']\n\n@Increment(Scizor)\ndef onswitch(self):\n    self.set_boost('spe',1,'self')\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Sharp Agility\": {\n    \"power\": 0,\n    \"accuracy\": 100000,\n    \"category\": \"Status\",\n    \"type\": \"Normal\",\n    \"effect\": \"Raises the user's Speed and Accuracy by 1 stage each.\"\n  }\n}\n```",
        "response": "```python\n@Increment(Scizor,'_move_5')\ndef value():\n    return ('Sharp Agility',0,100000,'Status','Normal',0,[])\n\n@Increment(Scizor)\ndef move_5(self): # Sharp Agility\n    self.set_boost('spe',1,'self')\n    self.set_boost('accuracy',1,'self')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Scizor\",\n  \"types\": [\n    \"Bug\",\n    \"Steel\"\n  ],\n  \"gender\": \"Female\",\n  \"ability\": {\n    \"Technician\": \"This Pokemon's moves of 60 power or less have 1.5x power, including Struggle.\"\n  },\n  \"moves\": {\n    \"Steel Wing\": {\n      \"power\": 70,\n      \"accuracy\": 90,\n      \"category\": \"Physical\",\n      \"type\": \"Steel\",\n      \"effect\": \"The ratio for critical hit +1 and has a 10% chance to raise the user's Defense by 1 stage.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"X-Scissor\": {\n      \"power\": 80,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Bug\",\n      \"effect\": \"Raises the user's Speed by 1 stage when its HP becomes 1/3 or less.\",\n      \"property\": [\n        \"contact\"\n      ]\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass Scizor(PokemonBase):\n    _species='Scizor'\n    _types=['Bug','Steel']\n    _gender='Female'\n    _ability=['Technician']\n    _move_1=('Steel Wing',70,90,'Physical','Steel',0,['contact'])\n    _move_2=('X-Scissor',80,100,'Physical','Bug',0,['contact'])\n    def __init__(self):\n        super().__init__()\n\n    def get_power(self):\n        power=self['act']['power']\n        if power<=60:\n            power=int(power*1.5)\n        return int(power*self.get_weather_power_mult())\n    \n    def get_crit(self):\n        crit_mult=[0,24,8,2,1]\n        crit_ratio=self['boosts']['crit']\n        if self['act']['id']=='Steel Wing':\n            crit_ratio=min(3,crit_ratio+1)\n        crit=False\n        if rnd()*crit_mult[crit_ratio+1]<1:\n            crit=True\n        return crit\n    \n    def move_1(self): # Steel Wing\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<10/100: \n                self.set_boost('def',1,'self')\n\n    def move_2(self): # X-Scissor\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n        if self['hp']<self['max_hp']//3:\n            self.set_boost('spe',1,'self')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Scizor\",\n  \"types\": [\n    \"Bug\",\n    \"Steel\"\n  ],\n  \"gender\": \"Female\",\n  \"ability\": {\n    \"Tough Armor\": \"This Pokemon's moves of 75 power or less have 1.2x power. If this Pokemon has taken 150 or more total damage without fainting, it heals 25% of the damage taken.\"\n  },\n  \"moves\": {\n    \"Steel Wing\": {\n      \"power\": 70,\n      \"accuracy\": 90,\n      \"category\": \"Physical\",\n      \"type\": \"Steel\",\n      \"effect\": \"Raises the user's Defense by 1 stage after being used 3 times in a battle.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Bug Rush\": {\n      \"power\": 10,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Bug\",\n      \"effect\": \"Hits five times.\"\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass Scizor(PokemonBase):\n    _species='Scizor'\n    _types=['Bug','Steel']\n    _gender='Female'\n    _ability=['Tough Armor']\n    _move_1=('Steel Wing',70,90,'Physical','Steel',0,['contact'])\n    _move_2=('Bug Rush',10,100,'Physical','Bug',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def onswitch(self):\n        self.set_condition('STEEL_WING',counter=0)\n\n    def get_power(self):\n        power=self['act']['power']\n        if power<=75:\n            power=int(power*1.2)\n        return int(power*self.get_weather_power_mult())\n    \n    def take_damage(self,x,from_='attack'):\n        if from_=='attack':\n            self._take_damage_attack(x)\n        elif from_=='loss':\n            self._take_damage_loss(x)\n        elif from_=='recoil':\n            self._take_damage_recoil(x)\n        if self['hp']>0 and x>=150:\n            self.restore(int(x*0.25),'heal')\n    \n    def move_1(self): # Steel Wing\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            self['conditions']['STEEL_WING']['counter']+=1\n            if self['conditions']['STEEL_WING']['counter']>=3:\n                self.set_boost('def',1,'self')\n    \n    def move_2(self): # Bug Rush\n        hit=True; i=0\n        while hit and i<5:\n            damage_ret=self.get_damage()\n            if damage_ret['miss']: break\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            i+=1; hit=False if self.target.isfaint() else True\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Shagaru\",\n  \"types\": [\n    \"Dragon\"\n  ],\n  \"gender\": \"Neutral\",\n  \"ability\": {\n    \"Frenzy Overload\": \"Immune to Dragon-type and Fairy-type attacks.\"\n  },\n  \"moves\": {\n    \"Frenzy Beam\": {\n      \"power\": 90,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Dragon\",\n      \"effect\": \"Has a 20% chance to inflict Frenzy condition to the target, for 3 turns, reducing the target's Defense by 1 stage each end of the turn.\"\n    },\n    \"Virus Eruption\": {\n      \"power\": 100,\n      \"accuracy\": 90,\n      \"category\": \"Special\",\n      \"type\": \"Dragon\",\n      \"effect\": \"Have a 20% chance to toxic the target.\"\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass Shagaru(PokemonBase):\n    _species='Shagaru'\n    _types=['Dragon']\n    _gender='Neutral'\n    _ability=['Frenzy Overload']\n    _move_1=('Frenzy Beam',90,100,'Special','Dragon',0,[])\n    _move_2=('Virus Eruption',100,90,'Special','Dragon',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def _take_damage_attack(self,x):\n        self.register_act_taken()\n        if self['act_taken']['type'] in ['Dragon','Fairy']:\n            return\n        self.state['hp']=max(0,self['hp']-x)\n        if self['hp']==0:\n            self.state['status']='FNT'\n\n    def endturn(self):\n        if self.target['conditions'].get('FRENZY'):\n            self.target.set_boost('def',-1)\n            self.target['conditions']['FRENZY']['counter']+=1\n            if self.target['conditions']['FRENZY']['counter']==self.target['conditions']['FRENZY']['max_count']:\n                del self.target['conditions']['FRENZY']\n\n    def move_1(self): # Frenzy Beam\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<20/100:\n                self.target.set_condition('FRENZY',counter=0,max_count=3)\n\n    def move_2(self): # Virus Eruption\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<20/100:\n                self.target.set_status('TOX')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Shagaru\",\n  \"types\": [\n    \"Dragon\"\n  ],\n  \"gender\": \"Neutral\",\n  \"ability\": {\n    \"Frenzy Overload\": \"Immune to Dragon-type and Fairy-type attacks.\"\n  },\n  \"moves\": {\n    \"Frenzy Beam\": {\n      \"power\": 90,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Dragon\",\n      \"effect\": \"Has a 20% chance to inflict Frenzy condition to the target, for 3 turns, reducing the target's Defense by 1 stage each end of the turn.\"\n    },\n    \"Virus Eruption\": {\n      \"power\": 100,\n      \"accuracy\": 90,\n      \"category\": \"Special\",\n      \"type\": \"Dragon\",\n      \"effect\": \"Have a 20% chance to toxic the target.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Shagaru(PokemonBase):\n    _species='Shagaru'\n    _types=['Dragon']\n    _gender='Neutral'\n    _ability=['Frenzy Overload']\n    _move_1=('Frenzy Beam',90,100,'Special','Dragon',0,[])\n    _move_2=('Virus Eruption',100,90,'Special','Dragon',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def _take_damage_attack(self,x):\n        self.register_act_taken()\n        if self['act_taken']['type'] in ['Dragon','Fairy']:\n            return\n        self.state['hp']=max(0,self['hp']-x)\n        if self['hp']==0:\n            self.state['status']='FNT'\n\n    def endturn(self):\n        if self.target['conditions'].get('FRENZY'):\n            self.target.set_boost('def',-1)\n            self.target['conditions']['FRENZY']['counter']+=1\n            if self.target['conditions']['FRENZY']['counter']==self.target['conditions']['FRENZY']['max_count']:\n                del self.target['conditions']['FRENZY']\n\n    def move_1(self): # Frenzy Beam\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<20/100:\n                self.target.set_condition('FRENZY',counter=0,max_count=3)\n\n    def move_2(self): # Virus Eruption\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<20/100:\n                self.target.set_status('TOX')\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Shadow Pummel\": {\n    \"power\": 80,\n    \"accuracy\": 100,\n    \"category\": \"Physical\",\n    \"type\": \"Dark\",\n    \"effect\": \"Has a 20% chance to confuse the target.\"\n  }\n}\n```",
        "response": "```python\n@Increment(Shagaru,'_move_3')\ndef value():\n    return ('Shadow Pummel',80,100,'Physical','Dark',0,[])\n\n@Increment(Shagaru)\ndef move_3(self): # Shadow Pummel\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if rnd()<20/100:\n            self.target.set_condition('CONFUSION',counter=0)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Shagaru\",\n  \"types\": [\n    \"Dragon\"\n  ],\n  \"gender\": \"Neutral\",\n  \"ability\": {\n    \"Frenzy Overload\": \"Immune to Dragon-type and Fairy-type attacks.\"\n  },\n  \"moves\": {\n    \"Frenzy Beam\": {\n      \"power\": 90,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Dragon\",\n      \"effect\": \"Has a 20% chance to inflict Frenzy condition to the target, for 3 turns, reducing the target's Defense by 1 stage each end of the turn.\"\n    },\n    \"Virus Eruption\": {\n      \"power\": 100,\n      \"accuracy\": 90,\n      \"category\": \"Special\",\n      \"type\": \"Dragon\",\n      \"effect\": \"Have a 20% chance to toxic the target.\"\n    },\n    \"Shadow Pummel\": {\n      \"power\": 80,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Dark\",\n      \"effect\": \"Has a 20% chance to confuse the target.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Shagaru(PokemonBase):\n    _species='Shagaru'\n    _types=['Dragon']\n    _gender='Neutral'\n    _ability=['Frenzy Overload']\n    _move_1=('Frenzy Beam',90,100,'Special','Dragon',0,[])\n    _move_2=('Virus Eruption',100,90,'Special','Dragon',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def _take_damage_attack(self,x):\n        self.register_act_taken()\n        if self['act_taken']['type'] in ['Dragon','Fairy']:\n            return\n        self.state['hp']=max(0,self['hp']-x)\n        if self['hp']==0:\n            self.state['status']='FNT'\n\n    def endturn(self):\n        if self.target['conditions'].get('FRENZY'):\n            self.target.set_boost('def',-1)\n            self.target['conditions']['FRENZY']['counter']+=1\n            if self.target['conditions']['FRENZY']['counter']==self.target['conditions']['FRENZY']['max_count']:\n                del self.target['conditions']['FRENZY']\n\n    def move_1(self): # Frenzy Beam\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<20/100:\n                self.target.set_condition('FRENZY',counter=0,max_count=3)\n\n    def move_2(self): # Virus Eruption\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<20/100:\n                self.target.set_status('TOX')\n\n@Increment(Shagaru,'_move_3')\ndef value():\n    return ('Shadow Pummel',80,100,'Physical','Dark',0,[])\n\n@Increment(Shagaru)\ndef move_3(self): # Shadow Pummel\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if rnd()<20/100:\n            self.target.set_condition('CONFUSION',counter=0)\n```\n\nThis role is gonna learn a new ability:\n```json\n{\n  \"Virus Mastery\": \"Dragon-type moves have their secondary effect chance increased to 100%.\"\n}\n```",
        "response": "```python\n@Increment(Shagaru,'_ability')\ndef value():\n    return ['Frenzy Overload','Virus Mastery']\n\n@Increment(Shagaru)\ndef move_1(self): # Frenzy Beam\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint():\n            self.target.set_condition('FRENZY',counter=0,max_count=3)\n\n@Increment(Shagaru)\ndef move_2(self): # Virus Eruption\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint():\n            self.target.set_status('TOX')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Sharpedo\",\n  \"types\": [\n    \"Water\",\n    \"Dark\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Speed Boost\": \"This Pokemon's Speed is raised by 1 stage at the end of each turn.\"\n  },\n  \"moves\": {\n    \"Crunch\": {\n      \"power\": 80,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Dark\",\n      \"effect\": \"Has a 20% chance to lower the target's Defense by 1 stage.\",\n      \"property\": [\n        \"bite\",\n        \"contact\"\n      ]\n    },\n    \"Liquidation\": {\n      \"power\": 85,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Water\",\n      \"effect\": \"Has a 20% chance to lower the target's Defense by 1 stage.\",\n      \"property\": [\n        \"contact\"\n      ]\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass Sharpedo(PokemonBase):\n    _species='Sharpedo'\n    _types=['Water','Dark']\n    _gender='Male'\n    _ability=['Speed Boost']\n    _move_1=('Crunch',80,100,'Physical','Dark',0,['bite','contact'])\n    _move_2=('Liquidation',85,100,'Physical','Water',0,['contact'])\n    def __init__(self):\n        super().__init__()\n    \n    def endturn(self):\n        self.set_boost('spe',1,'self')\n        \n    def move_1(self): # Crunch\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<20/100:\n                self.target.set_boost('def',-1)\n\n    def move_2(self): # Liquidation\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<20/100:\n                self.target.set_boost('def',-1)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Sharpedo\",\n  \"types\": [\n    \"Water\",\n    \"Dark\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Speed Boost\": \"This Pokemon's Speed is raised by 1 stage at the end of each turn.\"\n  },\n  \"moves\": {\n    \"Crunch\": {\n      \"power\": 80,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Dark\",\n      \"effect\": \"Has a 20% chance to lower the target's Defense by 1 stage.\",\n      \"property\": [\n        \"bite\",\n        \"contact\"\n      ]\n    },\n    \"Liquidation\": {\n      \"power\": 85,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Water\",\n      \"effect\": \"Has a 20% chance to lower the target's Defense by 1 stage.\",\n      \"property\": [\n        \"contact\"\n      ]\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Sharpedo(PokemonBase):\n    _species='Sharpedo'\n    _types=['Water','Dark']\n    _gender='Male'\n    _ability=['Speed Boost']\n    _move_1=('Crunch',80,100,'Physical','Dark',0,['bite','contact'])\n    _move_2=('Liquidation',85,100,'Physical','Water',0,['contact'])\n    def __init__(self):\n        super().__init__()\n    \n    def endturn(self):\n        self.set_boost('spe',1,'self')\n        \n    def move_1(self): # Crunch\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<20/100:\n                self.target.set_boost('def',-1)\n\n    def move_2(self): # Liquidation\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<20/100:\n                self.target.set_boost('def',-1)\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Aqua Jet\": {\n    \"power\": 40,\n    \"accuracy\": 100,\n    \"category\": \"Physical\",\n    \"priority\": 1,\n    \"type\": \"Water\",\n    \"effect\": \"Usually goes first.\",\n    \"property\": [\n      \"contact\"\n    ]\n  }\n}\n```",
        "response": "```python\n@Increment(Sharpedo,'_move_3')\ndef value():\n    return ('Aqua Jet',40,100,'Physical','Water',1,['contact'])\n\n@Increment(Sharpedo)\ndef move_3(self): # Aqua Jet\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Sharpedo\",\n  \"types\": [\n    \"Water\",\n    \"Dark\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Speed Boost\": \"This Pokemon's Speed is raised by 1 stage at the end of each turn.\"\n  },\n  \"moves\": {\n    \"Crunch\": {\n      \"power\": 80,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Dark\",\n      \"effect\": \"Has a 20% chance to lower the target's Defense by 1 stage.\",\n      \"property\": [\n        \"bite\",\n        \"contact\"\n      ]\n    },\n    \"Liquidation\": {\n      \"power\": 85,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Water\",\n      \"effect\": \"Has a 20% chance to lower the target's Defense by 1 stage.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Aqua Jet\": {\n      \"power\": 40,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"priority\": 1,\n      \"type\": \"Water\",\n      \"effect\": \"Usually goes first.\",\n      \"property\": [\n        \"contact\"\n      ]\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Sharpedo(PokemonBase):\n    _species='Sharpedo'\n    _types=['Water','Dark']\n    _gender='Male'\n    _ability=['Speed Boost']\n    _move_1=('Crunch',80,100,'Physical','Dark',0,['bite','contact'])\n    _move_2=('Liquidation',85,100,'Physical','Water',0,['contact'])\n    def __init__(self):\n        super().__init__()\n    \n    def endturn(self):\n        self.set_boost('spe',1,'self')\n        \n    def move_1(self): # Crunch\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<20/100:\n                self.target.set_boost('def',-1)\n\n    def move_2(self): # Liquidation\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<20/100:\n                self.target.set_boost('def',-1)\n\n@Increment(Sharpedo,'_move_3')\ndef value():\n    return ('Aqua Jet',40,100,'Physical','Water',1,['contact'])\n\n@Increment(Sharpedo)\ndef move_3(self): # Aqua Jet\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Fin Slash\": {\n    \"power\": 70,\n    \"accuracy\": 100,\n    \"category\": \"Physical\",\n    \"type\": \"Water\",\n    \"effect\": \"Has a 30% chance to make the target flinch.\",\n    \"property\": [\n      \"contact\"\n    ]\n  }\n}\n```",
        "response": "```python\n@Increment(Sharpedo,'_move_4')\ndef value():\n    return ('Fin Slash',70,100,'Physical','Water',0,['contact'])\n\n@Increment(Sharpedo)\ndef move_4(self): # Fin Slash\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint() and rnd()<30/100:\n            self.target.set_condition('FLINCH',counter=0)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Sharpedo\",\n  \"types\": [\n    \"Water\",\n    \"Dark\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Speed Boost\": \"This Pokemon's Speed is raised by 1 stage at the end of each turn.\"\n  },\n  \"moves\": {\n    \"Crunch\": {\n      \"power\": 80,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Dark\",\n      \"effect\": \"Has a 20% chance to lower the target's Defense by 1 stage.\",\n      \"property\": [\n        \"bite\",\n        \"contact\"\n      ]\n    },\n    \"Liquidation\": {\n      \"power\": 85,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Water\",\n      \"effect\": \"Has a 20% chance to lower the target's Defense by 1 stage.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Aqua Jet\": {\n      \"power\": 40,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"priority\": 1,\n      \"type\": \"Water\",\n      \"effect\": \"Usually goes first.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Fin Slash\": {\n      \"power\": 70,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Water\",\n      \"effect\": \"Has a 30% chance to make the target flinch.\",\n      \"property\": [\n        \"contact\"\n      ]\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Sharpedo(PokemonBase):\n    _species='Sharpedo'\n    _types=['Water','Dark']\n    _gender='Male'\n    _ability=['Speed Boost']\n    _move_1=('Crunch',80,100,'Physical','Dark',0,['bite','contact'])\n    _move_2=('Liquidation',85,100,'Physical','Water',0,['contact'])\n    def __init__(self):\n        super().__init__()\n    \n    def endturn(self):\n        self.set_boost('spe',1,'self')\n        \n    def move_1(self): # Crunch\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<20/100:\n                self.target.set_boost('def',-1)\n\n    def move_2(self): # Liquidation\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<20/100:\n                self.target.set_boost('def',-1)\n\n@Increment(Sharpedo,'_move_3')\ndef value():\n    return ('Aqua Jet',40,100,'Physical','Water',1,['contact'])\n\n@Increment(Sharpedo)\ndef move_3(self): # Aqua Jet\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n\n@Increment(Sharpedo,'_move_4')\ndef value():\n    return ('Fin Slash',70,100,'Physical','Water',0,['contact'])\n\n@Increment(Sharpedo)\ndef move_4(self): # Fin Slash\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint() and rnd()<30/100:\n            self.target.set_condition('FLINCH',counter=0)\n```\n\nThis role is gonna learn a new ability:\n```json\n{\n  \"Razor Fin\": \"This Pokemon's biting moves have their power increased by 50%.\"\n}\n```",
        "response": "```python\n@Increment(Sharpedo,'_ability')\ndef value():\n    return ['Speed Boost','Razor Fin']\n\n@Increment(Sharpedo)\ndef get_power(self):\n    power=self['act']['power']\n    if 'bite' in self['act']['property']:\n        power*=1.5\n    return int(power*self.get_weather_power_mult())\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Skarmory\",\n  \"types\": [\n    \"Steel\",\n    \"Flying\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Tinted Lens\": \"The power of not very effective moves is doubled.\"\n  },\n  \"moves\": {\n    \"Metal Claw\": {\n      \"power\": 50,\n      \"accuracy\": 95,\n      \"category\": \"Physical\",\n      \"type\": \"Steel\",\n      \"effect\": \"Has a 50% chance to raise the user's Attack by 1 stage.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Air Slash\": {\n      \"power\": 75,\n      \"accuracy\": 95,\n      \"category\": \"Special\",\n      \"type\": \"Flying\",\n      \"effect\": \"Has a 30% chance to make the target flinch.\"\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass Skarmory(PokemonBase):\n    _species='Skarmory'\n    _types=['Steel','Flying']\n    _gender='Male'\n    _ability=['Tinted Lens']\n    _move_1=('Metal Claw',50,95,'Physical','Steel',0,['contact'])\n    _move_2=('Air Slash',75,95,'Special','Flying',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def get_type_effect(self):\n        move_type=self['act']['type']\n        target_types=self.target['types']\n        effect=1\n        for tt in target_types:\n            effect*=TYPEEFFECTIVENESS[move_type][tt]\n        if effect<1:\n            effect*=2\n        return effect\n\n    def move_1(self): # Metal Claw\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if rnd()<50/100:\n                self.set_boost('atk',1,'self')\n\n    def move_2(self): # Air Slash\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100:\n                self.target.set_condition('FLINCH',counter=0)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Skeledirge\",\n  \"types\": [\n    \"Fire\",\n    \"Ghost\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Unaware\": \"This Pokemon ignores other Pokemon's def/spd stat stages when doing damage.\"\n  },\n  \"moves\": {\n    \"Torch Song\": {\n      \"power\": 80,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"priority\": 0,\n      \"type\": \"Fire\",\n      \"effect\": \"Has a 100% chance to raise the user's Special Attack by 1 stage.\"\n    },\n    \"Shadow Ball\": {\n      \"power\": 80,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"priority\": 0,\n      \"type\": \"Ghost\",\n      \"effect\": \"Has a 20% chance to lower the target's Special Defense by 1 stage.\"\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass Skeledirge(PokemonBase):\n    _species='Skeledirge'\n    _types=['Fire','Ghost']\n    _gender='Male'\n    _ability=['Unaware']\n    _move_1=('Torch Song',80,100,'Special','Fire',0,[])\n    _move_2=('Shadow Ball',80,100,'Special','Ghost',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def _get_base_damage(self,power,crit):\n        atk_boost=self['boosts']['atk'] if self['act']['category']=='Physical' else self['boosts']['spa']\n        def_boost=0\n        \n        if crit:\n            atk_boost=max(0,atk_boost)\n            def_boost=min(0,def_boost)\n\n        attack=self.get_stat('atk' if self['act']['category']=='Physical' else 'spa',atk_boost)\n        defense=self.target.get_stat('def' if self['act']['category']=='Physical' else 'spd',def_boost)\n\n        level=100\n        base_damage=int(int(int(int(2*level/5+2)*power*attack)/defense)/50)+2\n\n        return base_damage\n\n    def move_1(self): # Torch Song\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            self.set_boost('spa',1,'self')\n\n    def move_2(self): # Shadow Ball\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<20/100:\n                self.target.set_boost('spd',-1)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Skeledirge\",\n  \"types\": [\n    \"Fire\",\n    \"Ghost\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Unaware\": \"This Pokemon ignores other Pokemon's def/spd stat stages when doing damage.\"\n  },\n  \"moves\": {\n    \"Torch Song\": {\n      \"power\": 80,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"priority\": 0,\n      \"type\": \"Fire\",\n      \"effect\": \"Has a 100% chance to raise the user's Special Attack by 1 stage.\"\n    },\n    \"Shadow Ball\": {\n      \"power\": 80,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"priority\": 0,\n      \"type\": \"Ghost\",\n      \"effect\": \"Has a 20% chance to lower the target's Special Defense by 1 stage.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Skeledirge(PokemonBase):\n    _species='Skeledirge'\n    _types=['Fire','Ghost']\n    _gender='Male'\n    _ability=['Unaware']\n    _move_1=('Torch Song',80,100,'Special','Fire',0,[])\n    _move_2=('Shadow Ball',80,100,'Special','Ghost',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def _get_base_damage(self,power,crit):\n        atk_boost=self['boosts']['atk'] if self['act']['category']=='Physical' else self['boosts']['spa']\n        def_boost=0\n        \n        if crit:\n            atk_boost=max(0,atk_boost)\n            def_boost=min(0,def_boost)\n\n        attack=self.get_stat('atk' if self['act']['category']=='Physical' else 'spa',atk_boost)\n        defense=self.target.get_stat('def' if self['act']['category']=='Physical' else 'spd',def_boost)\n\n        level=100\n        base_damage=int(int(int(int(2*level/5+2)*power*attack)/defense)/50)+2\n\n        return base_damage\n\n    def move_1(self): # Torch Song\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            self.set_boost('spa',1,'self')\n\n    def move_2(self): # Shadow Ball\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<20/100:\n                self.target.set_boost('spd',-1)\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Substitute\": {\n    \"power\": 0,\n    \"accuracy\": 100000,\n    \"category\": \"Status\",\n    \"priority\": 0,\n    \"type\": \"Normal\",\n    \"effect\": \"The user loses 1/4 of its maximum HP and sets a substitute with the same amount of HP to take damage from attacks for it. The substitute is removed once enough damage (1/4 of max HP) is inflicted. Fails if the user does not have enough HP remaining, or if it already has a substitute.\"\n  }\n}\n```",
        "response": "```python\n@Increment(Skeledirge,'_move_3')\ndef value():\n    return ('Substitute',0,100000,'Status','Normal',0,[])\n\n@Increment(Skeledirge)\ndef move_3(self): # Substitute\n    if self['hp']>self['max_hp']//4 and not self['conditions'].get('SUBSTITUTE'):\n        self.take_damage(self['max_hp']//4,'loss')\n        self.set_condition('SUBSTITUTE',hp=self['max_hp']//4)\n\n@Increment(Skeledirge)\ndef _take_damage_attack(self,x):\n    self.register_act_taken()\n    if self['conditions'].get('SUBSTITUTE'):\n        self['conditions']['SUBSTITUTE']['hp']-=x\n        if self['conditions']['SUBSTITUTE']['hp']<1:\n            del self['conditions']['SUBSTITUTE']\n    else:\n        self.state['hp']=max(0,self['hp']-x)\n    if self['hp']==0:\n        self.state['status']='FNT'\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Skeledirge\",\n  \"types\": [\n    \"Fire\",\n    \"Ghost\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Unaware\": \"This Pokemon ignores other Pokemon's def/spd stat stages when doing damage.\"\n  },\n  \"moves\": {\n    \"Torch Song\": {\n      \"power\": 80,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"priority\": 0,\n      \"type\": \"Fire\",\n      \"effect\": \"Has a 100% chance to raise the user's Special Attack by 1 stage.\"\n    },\n    \"Shadow Ball\": {\n      \"power\": 80,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"priority\": 0,\n      \"type\": \"Ghost\",\n      \"effect\": \"Has a 20% chance to lower the target's Special Defense by 1 stage.\"\n    },\n    \"Substitute\": {\n      \"power\": 0,\n      \"accuracy\": 100000,\n      \"category\": \"Status\",\n      \"priority\": 0,\n      \"type\": \"Normal\",\n      \"effect\": \"The user loses 1/4 of its maximum HP and sets a substitute with the same amount of HP to take damage from attacks for it. The substitute is removed once enough damage (1/4 of max HP) is inflicted. Fails if the user does not have enough HP remaining, or if it already has a substitute.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Skeledirge(PokemonBase):\n    _species='Skeledirge'\n    _types=['Fire','Ghost']\n    _gender='Male'\n    _ability=['Unaware']\n    _move_1=('Torch Song',80,100,'Special','Fire',0,[])\n    _move_2=('Shadow Ball',80,100,'Special','Ghost',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def _get_base_damage(self,power,crit):\n        atk_boost=self['boosts']['atk'] if self['act']['category']=='Physical' else self['boosts']['spa']\n        def_boost=0\n        \n        if crit:\n            atk_boost=max(0,atk_boost)\n            def_boost=min(0,def_boost)\n\n        attack=self.get_stat('atk' if self['act']['category']=='Physical' else 'spa',atk_boost)\n        defense=self.target.get_stat('def' if self['act']['category']=='Physical' else 'spd',def_boost)\n\n        level=100\n        base_damage=int(int(int(int(2*level/5+2)*power*attack)/defense)/50)+2\n\n        return base_damage\n\n    def move_1(self): # Torch Song\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            self.set_boost('spa',1,'self')\n\n    def move_2(self): # Shadow Ball\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<20/100:\n                self.target.set_boost('spd',-1)\n\n@Increment(Skeledirge,'_move_3')\ndef value():\n    return ('Substitute',0,100000,'Status','Normal',0,[])\n\n@Increment(Skeledirge)\ndef move_3(self): # Substitute\n    if self['hp']>self['max_hp']//4 and not self['conditions'].get('SUBSTITUTE'):\n        self.take_damage(self['max_hp']//4,'loss')\n        self.set_condition('SUBSTITUTE',hp=self['max_hp']//4)\n\n@Increment(Skeledirge)\ndef _take_damage_attack(self,x):\n    self.register_act_taken()\n    if self['conditions'].get('SUBSTITUTE'):\n        self['conditions']['SUBSTITUTE']['hp']-=x\n        if self['conditions']['SUBSTITUTE']['hp']<1:\n            del self['conditions']['SUBSTITUTE']\n    else:\n        self.state['hp']=max(0,self['hp']-x)\n    if self['hp']==0:\n        self.state['status']='FNT'\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Slack Off\": {\n    \"power\": 0,\n    \"accuracy\": 100000,\n    \"category\": \"Status\",\n    \"priority\": 0,\n    \"type\": \"Normal\",\n    \"effect\": \"The user restores 1/2 of its maximum HP.\"\n  }\n}\n```",
        "response": "```python\n@Increment(Skeledirge,'_move_4')\ndef value():\n    return ('Slack Off',0,100000,'Status','Normal',0,[])\n\n@Increment(Skeledirge)\ndef move_4(self): # Slack Off\n    self.restore(self['max_hp']//2,'heal')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Skeledirge\",\n  \"types\": [\n    \"Fire\",\n    \"Ghost\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Unaware\": \"This Pokemon ignores other Pokemon's def/spd stat stages when doing damage.\"\n  },\n  \"moves\": {\n    \"Torch Song\": {\n      \"power\": 80,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"priority\": 0,\n      \"type\": \"Fire\",\n      \"effect\": \"Has a 100% chance to raise the user's Special Attack by 1 stage.\"\n    },\n    \"Shadow Ball\": {\n      \"power\": 80,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"priority\": 0,\n      \"type\": \"Ghost\",\n      \"effect\": \"Has a 20% chance to lower the target's Special Defense by 1 stage.\"\n    },\n    \"Substitute\": {\n      \"power\": 0,\n      \"accuracy\": 100000,\n      \"category\": \"Status\",\n      \"priority\": 0,\n      \"type\": \"Normal\",\n      \"effect\": \"The user loses 1/4 of its maximum HP and sets a substitute with the same amount of HP to take damage from attacks for it. The substitute is removed once enough damage (1/4 of max HP) is inflicted. Fails if the user does not have enough HP remaining, or if it already has a substitute.\"\n    },\n    \"Slack Off\": {\n      \"power\": 0,\n      \"accuracy\": 100000,\n      \"category\": \"Status\",\n      \"priority\": 0,\n      \"type\": \"Normal\",\n      \"effect\": \"The user restores 1/2 of its maximum HP.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Skeledirge(PokemonBase):\n    _species='Skeledirge'\n    _types=['Fire','Ghost']\n    _gender='Male'\n    _ability=['Unaware']\n    _move_1=('Torch Song',80,100,'Special','Fire',0,[])\n    _move_2=('Shadow Ball',80,100,'Special','Ghost',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def _get_base_damage(self,power,crit):\n        atk_boost=self['boosts']['atk'] if self['act']['category']=='Physical' else self['boosts']['spa']\n        def_boost=0\n        \n        if crit:\n            atk_boost=max(0,atk_boost)\n            def_boost=min(0,def_boost)\n\n        attack=self.get_stat('atk' if self['act']['category']=='Physical' else 'spa',atk_boost)\n        defense=self.target.get_stat('def' if self['act']['category']=='Physical' else 'spd',def_boost)\n\n        level=100\n        base_damage=int(int(int(int(2*level/5+2)*power*attack)/defense)/50)+2\n\n        return base_damage\n\n    def move_1(self): # Torch Song\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            self.set_boost('spa',1,'self')\n\n    def move_2(self): # Shadow Ball\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<20/100:\n                self.target.set_boost('spd',-1)\n\n@Increment(Skeledirge,'_move_3')\ndef value():\n    return ('Substitute',0,100000,'Status','Normal',0,[])\n\n@Increment(Skeledirge)\ndef move_3(self): # Substitute\n    if self['hp']>self['max_hp']//4 and not self['conditions'].get('SUBSTITUTE'):\n        self.take_damage(self['max_hp']//4,'loss')\n        self.set_condition('SUBSTITUTE',hp=self['max_hp']//4)\n\n@Increment(Skeledirge)\ndef _take_damage_attack(self,x):\n    self.register_act_taken()\n    if self['conditions'].get('SUBSTITUTE'):\n        self['conditions']['SUBSTITUTE']['hp']-=x\n        if self['conditions']['SUBSTITUTE']['hp']<1:\n            del self['conditions']['SUBSTITUTE']\n    else:\n        self.state['hp']=max(0,self['hp']-x)\n    if self['hp']==0:\n        self.state['status']='FNT'\n\n@Increment(Skeledirge,'_move_4')\ndef value():\n    return ('Slack Off',0,100000,'Status','Normal',0,[])\n\n@Increment(Skeledirge)\ndef move_4(self): # Slack Off\n    self.restore(self['max_hp']//2,'heal')\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Yawn\": {\n    \"power\": 0,\n    \"accuracy\": 100000,\n    \"category\": \"Status\",\n    \"priority\": 0,\n    \"type\": \"Normal\",\n    \"effect\": \"Causes the target to fall asleep at the end of the next turn. Fails if the target already has a non-volatile status condition.\"\n  }\n}\n```",
        "response": "```python\n@Increment(Skeledirge,'_move_5')\ndef value():\n    return ('Yawn',0,100000,'Status','Normal',0,[])\n\n@Increment(Skeledirge)\ndef move_5(self): # Yawn\n    if not self.target['status']:\n        self.target.set_condition('YAWN',counter=0)\n\n@Increment(Skeledirge)\ndef endturn(self):\n    if self.target['conditions'].get('YAWN'):\n       self.target['conditions']['YAWN']['counter']+=1\n       if self.target['conditions']['YAWN']['counter']==2:\n           self.target.set_status('SLP')\n           del self.target['conditions']['YAWN']\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Smilodon\",\n  \"types\": [\n    \"Fighting\",\n    \"Ice\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Precision Strike\": \"This Pokemon's moves ignore accuracy checks.\"\n  },\n  \"moves\": {\n    \"Ice Fang\": {\n      \"power\": 65,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Ice\",\n      \"effect\": \"Has a 10% chance to freeze the target and a 10% chance to make the target flinch.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Saber Slash\": {\n      \"power\": 100,\n      \"accuracy\": 90,\n      \"category\": \"Physical\",\n      \"type\": \"Fighting\",\n      \"effect\": \"Has a 20% chance to lower the target's Defense by 1 stage.\",\n      \"property\": [\n        \"contact\"\n      ]\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass Smilodon(PokemonBase):\n    _species='Smilodon'\n    _types=['Fighting','Ice']\n    _gender='Male'\n    _ability=['Precision Strike']\n    _move_1=('Ice Fang',65,100,'Physical','Ice',0,['contact'])\n    _move_2=('Saber Slash',100,90,'Physical','Fighting',0,['contact'])\n    def __init__(self):\n        super().__init__()\n\n    def get_accuracy(self):\n        return 100000\n\n    def move_1(self): # Ice Fang\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint():\n                if rnd()<0.1:\n                    self.target.set_status('FRZ')\n                if rnd()<0.1:\n                    self.target.set_condition('FLINCH',counter=0)\n\n    def move_2(self): # Saber Slash\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<0.2:\n                self.target.set_boost('def',-1)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Smilodon\",\n  \"types\": [\n    \"Fighting\",\n    \"Ice\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Precision Strike\": \"This Pokemon's moves ignore accuracy checks.\"\n  },\n  \"moves\": {\n    \"Ice Fang\": {\n      \"power\": 65,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Ice\",\n      \"effect\": \"Has a 10% chance to freeze the target and a 10% chance to make the target flinch.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Saber Slash\": {\n      \"power\": 100,\n      \"accuracy\": 90,\n      \"category\": \"Physical\",\n      \"type\": \"Fighting\",\n      \"effect\": \"Has a 20% chance to lower the target's Defense by 1 stage.\",\n      \"property\": [\n        \"contact\"\n      ]\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Smilodon(PokemonBase):\n    _species='Smilodon'\n    _types=['Fighting','Ice']\n    _gender='Male'\n    _ability=['Precision Strike']\n    _move_1=('Ice Fang',65,100,'Physical','Ice',0,['contact'])\n    _move_2=('Saber Slash',100,90,'Physical','Fighting',0,['contact'])\n    def __init__(self):\n        super().__init__()\n\n    def get_accuracy(self):\n        return 100000\n\n    def move_1(self): # Ice Fang\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint():\n                if rnd()<0.1:\n                    self.target.set_status('FRZ')\n                if rnd()<0.1:\n                    self.target.set_condition('FLINCH',counter=0)\n\n    def move_2(self): # Saber Slash\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<0.2:\n                self.target.set_boost('def',-1)\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Roar of Dominance\": {\n    \"power\": 0,\n    \"accuracy\": 100000,\n    \"category\": \"Status\",\n    \"type\": \"Normal\",\n    \"effect\": \"Raises the user's Attack by 1 stage.\",\n    \"priority\": 1\n  }\n}\n```",
        "response": "```python\n@Increment(Smilodon,'_move_3')\ndef value():\n    return ('Roar of Dominance',0,100000,'Status','Normal',1,[])\n\n@Increment(Smilodon)\ndef move_3(self): # Roar of Dominance\n    self.target.set_boost('atk', -1)\n    self.set_boost('atk', 1)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Smilodon\",\n  \"types\": [\n    \"Fighting\",\n    \"Ice\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Precision Strike\": \"This Pokemon's moves ignore accuracy checks.\"\n  },\n  \"moves\": {\n    \"Ice Fang\": {\n      \"power\": 65,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Ice\",\n      \"effect\": \"Has a 10% chance to freeze the target and a 10% chance to make the target flinch.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Saber Slash\": {\n      \"power\": 100,\n      \"accuracy\": 90,\n      \"category\": \"Physical\",\n      \"type\": \"Fighting\",\n      \"effect\": \"Has a 20% chance to lower the target's Defense by 1 stage.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Roar of Dominance\": {\n      \"power\": 0,\n      \"accuracy\": 100000,\n      \"category\": \"Status\",\n      \"type\": \"Normal\",\n      \"effect\": \"Raises the user's Attack by 1 stage.\",\n      \"priority\": 1\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Smilodon(PokemonBase):\n    _species='Smilodon'\n    _types=['Fighting','Ice']\n    _gender='Male'\n    _ability=['Precision Strike']\n    _move_1=('Ice Fang',65,100,'Physical','Ice',0,['contact'])\n    _move_2=('Saber Slash',100,90,'Physical','Fighting',0,['contact'])\n    def __init__(self):\n        super().__init__()\n\n    def get_accuracy(self):\n        return 100000\n\n    def move_1(self): # Ice Fang\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint():\n                if rnd()<0.1:\n                    self.target.set_status('FRZ')\n                if rnd()<0.1:\n                    self.target.set_condition('FLINCH',counter=0)\n\n    def move_2(self): # Saber Slash\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<0.2:\n                self.target.set_boost('def',-1)\n\n@Increment(Smilodon,'_move_3')\ndef value():\n    return ('Roar of Dominance',0,100000,'Status','Normal',1,[])\n\n@Increment(Smilodon)\ndef move_3(self): # Roar of Dominance\n    self.target.set_boost('atk', -1)\n    self.set_boost('atk', 1)\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Frozen Roar\": {\n    \"power\": 0,\n    \"accuracy\": 60,\n    \"category\": \"Status\",\n    \"type\": \"Ice\",\n    \"effect\": \"Freezes the target. If the target is already frozen, raises the user's Speed by 2 stages.\"\n  }\n}\n```",
        "response": "```python\n@Increment(Smilodon,'_move_4')\ndef value():\n    return ('Frozen Roar',0,60,'Status','Ice',0,[])\n\n@Increment(Smilodon)\ndef move_4(self): # Frozen Roar\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        if self.target.isstatus('FRZ'):\n            self.set_boost('spe',2)\n        else:\n            self.target.set_status('FRZ')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Smilodon\",\n  \"types\": [\n    \"Fighting\",\n    \"Ice\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Precision Strike\": \"This Pokemon's moves ignore accuracy checks.\"\n  },\n  \"moves\": {\n    \"Ice Fang\": {\n      \"power\": 65,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Ice\",\n      \"effect\": \"Has a 10% chance to freeze the target and a 10% chance to make the target flinch.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Saber Slash\": {\n      \"power\": 100,\n      \"accuracy\": 90,\n      \"category\": \"Physical\",\n      \"type\": \"Fighting\",\n      \"effect\": \"Has a 20% chance to lower the target's Defense by 1 stage.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Roar of Dominance\": {\n      \"power\": 0,\n      \"accuracy\": 100000,\n      \"category\": \"Status\",\n      \"type\": \"Normal\",\n      \"effect\": \"Raises the user's Attack by 1 stage.\",\n      \"priority\": 1\n    },\n    \"Frozen Roar\": {\n      \"power\": 0,\n      \"accuracy\": 60,\n      \"category\": \"Status\",\n      \"type\": \"Ice\",\n      \"effect\": \"Freezes the target. If the target is already frozen, raises the user's Speed by 2 stages.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Smilodon(PokemonBase):\n    _species='Smilodon'\n    _types=['Fighting','Ice']\n    _gender='Male'\n    _ability=['Precision Strike']\n    _move_1=('Ice Fang',65,100,'Physical','Ice',0,['contact'])\n    _move_2=('Saber Slash',100,90,'Physical','Fighting',0,['contact'])\n    def __init__(self):\n        super().__init__()\n\n    def get_accuracy(self):\n        return 100000\n\n    def move_1(self): # Ice Fang\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint():\n                if rnd()<0.1:\n                    self.target.set_status('FRZ')\n                if rnd()<0.1:\n                    self.target.set_condition('FLINCH',counter=0)\n\n    def move_2(self): # Saber Slash\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<0.2:\n                self.target.set_boost('def',-1)\n\n@Increment(Smilodon,'_move_3')\ndef value():\n    return ('Roar of Dominance',0,100000,'Status','Normal',1,[])\n\n@Increment(Smilodon)\ndef move_3(self): # Roar of Dominance\n    self.target.set_boost('atk', -1)\n    self.set_boost('atk', 1)\n\n@Increment(Smilodon,'_move_4')\ndef value():\n    return ('Frozen Roar',0,60,'Status','Ice',0,[])\n\n@Increment(Smilodon)\ndef move_4(self): # Frozen Roar\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        if self.target.isstatus('FRZ'):\n            self.set_boost('spe',2)\n        else:\n            self.target.set_status('FRZ')\n```\n\nThis role is gonna learn a new ability:\n```json\n{\n  \"Frost Armor\": \"When HP is below half, this Pokemon's Defense is 1.5x.\"\n}\n```",
        "response": "```python\n@Increment(Smilodon,'_ability')\ndef value():\n    return ['Precision Strike','Frost Armor']\n\n@Increment(Smilodon)\ndef get_stat(self,key,boost=None):\n    stat=self['stats'][key]\n    boost=self['boosts'][key] if not boost else boost\n    stat_ratio={0:1,1:1.5,2:2,3:2.5,4:3,5:3.5,6:4}[min(6,abs(boost))]\n    if boost<0:\n        stat_ratio=1/stat_ratio\n    stat_ratio*=self.get_weather_stat_mult(key)\n    if key=='spe' and self.isstatus('PAR'):\n        stat_ratio*=0.5\n    if key=='def' and self['hp']<self['max_hp']//2:\n        stat_ratio*=1.5\n    return int(stat*stat_ratio)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Smilodon\",\n  \"types\": [\n    \"Fighting\",\n    \"Ice\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Precision Strike\": \"This Pokemon's moves ignore accuracy checks.\",\n    \"Frost Armor\": \"When HP is below half, this Pokemon's Defense is 1.5x.\"\n  },\n  \"moves\": {\n    \"Ice Fang\": {\n      \"power\": 65,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Ice\",\n      \"effect\": \"Has a 10% chance to freeze the target and a 10% chance to make the target flinch.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Saber Slash\": {\n      \"power\": 100,\n      \"accuracy\": 90,\n      \"category\": \"Physical\",\n      \"type\": \"Fighting\",\n      \"effect\": \"Has a 20% chance to lower the target's Defense by 1 stage.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Roar of Dominance\": {\n      \"power\": 0,\n      \"accuracy\": 100000,\n      \"category\": \"Status\",\n      \"type\": \"Normal\",\n      \"effect\": \"Raises the user's Attack by 1 stage.\",\n      \"priority\": 1\n    },\n    \"Frozen Roar\": {\n      \"power\": 0,\n      \"accuracy\": 60,\n      \"category\": \"Status\",\n      \"type\": \"Ice\",\n      \"effect\": \"Freezes the target. If the target is already frozen, raises the user's Speed by 2 stages.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Smilodon(PokemonBase):\n    _species='Smilodon'\n    _types=['Fighting','Ice']\n    _gender='Male'\n    _ability=['Precision Strike']\n    _move_1=('Ice Fang',65,100,'Physical','Ice',0,['contact'])\n    _move_2=('Saber Slash',100,90,'Physical','Fighting',0,['contact'])\n    def __init__(self):\n        super().__init__()\n\n    def get_accuracy(self):\n        return 100000\n\n    def move_1(self): # Ice Fang\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint():\n                if rnd()<0.1:\n                    self.target.set_status('FRZ')\n                if rnd()<0.1:\n                    self.target.set_condition('FLINCH',counter=0)\n\n    def move_2(self): # Saber Slash\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<0.2:\n                self.target.set_boost('def',-1)\n\n@Increment(Smilodon,'_move_3')\ndef value():\n    return ('Roar of Dominance',0,100000,'Status','Normal',1,[])\n\n@Increment(Smilodon)\ndef move_3(self): # Roar of Dominance\n    self.target.set_boost('atk', -1)\n    self.set_boost('atk', 1)\n\n@Increment(Smilodon,'_move_4')\ndef value():\n    return ('Frozen Roar',0,60,'Status','Ice',0,[])\n\n@Increment(Smilodon)\ndef move_4(self): # Frozen Roar\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        if self.target.isstatus('FRZ'):\n            self.set_boost('spe',2)\n        else:\n            self.target.set_status('FRZ')\n\n@Increment(Smilodon,'_ability')\ndef value():\n    return ['Precision Strike','Frost Armor']\n\n@Increment(Smilodon)\ndef get_stat(self,key,boost=None):\n    stat=self['stats'][key]\n    boost=self['boosts'][key] if not boost else boost\n    stat_ratio={0:1,1:1.5,2:2,3:2.5,4:3,5:3.5,6:4}[min(6,abs(boost))]\n    if boost<0:\n        stat_ratio=1/stat_ratio\n    stat_ratio*=self.get_weather_stat_mult(key)\n    if key=='spe' and self.isstatus('PAR'):\n        stat_ratio*=0.5\n    if key=='def' and self['hp']<self['max_hp']//2:\n        stat_ratio*=1.5\n    return int(stat*stat_ratio)\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Bone Crush\": {\n    \"power\": 85,\n    \"accuracy\": 100,\n    \"category\": \"Physical\",\n    \"type\": \"Fighting\",\n    \"effect\": \"\",\n    \"property\": [\n      \"contact\"\n    ]\n  }\n}\n```",
        "response": "```python\n@Increment(Smilodon,'_move_5')\ndef value():\n    return ('Bone Crush',85,100,'Physical','Fighting',0,['contact'])\n\n@Increment(Smilodon)\ndef move_5(self): # Bone Crush\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Snorlax\",\n  \"types\": [\n    \"Normal\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Thick Fat\": \"Fire-/Ice-type attacks against this Pokemon deal halved damage.\"\n  },\n  \"moves\": {\n    \"Rest\": {\n      \"power\": 0,\n      \"accuracy\": 1000000,\n      \"category\": \"Status\",\n      \"type\": \"Psychic\",\n      \"effect\": \"The user goes to sleep, fully restoring HP and status.\"\n    },\n    \"Snore\": {\n      \"power\": 50,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Normal\",\n      \"effect\": \"Only usable if asleep. Has a 30% chance to make the target flinch.\"\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass Snorlax(PokemonBase):\n    _species='Snorlax'\n    _types=['Normal']\n    _gender='Male'\n    _ability=['Thick Fat']\n    _move_1=('Rest',0,1000000,'Status','Psychic',0,[])\n    _move_2=('Snore',50,100,'Special','Normal',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def _take_damage_attack(self,x):\n        self.register_act_taken()\n        if self['act_taken']['type'] in ['Ice','Fire']:\n            x//=2\n        self.state['hp']=max(0,self['hp']-x)\n        if self['hp']==0:\n            self.state['status']='FNT'\n\n    def move_1(self): # Rest  \n        self.state['status']=None\n        self.set_status('SLP')\n        self.state['hp']=self['max_hp']\n\n    def move_2(self): # Snore\n        if not isinstance(self['status'],dict) or not 'SLP' in self['status']: return\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100:\n                self.target.set_condition('FLINCH',counter=0)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Snorlax\",\n  \"types\": [\n    \"Normal\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Thick Fat\": \"Fire-/Ice-type attacks against this Pokemon deal halved damage.\"\n  },\n  \"moves\": {\n    \"Rest\": {\n      \"power\": 0,\n      \"accuracy\": 1000000,\n      \"category\": \"Status\",\n      \"type\": \"Psychic\",\n      \"effect\": \"The user goes to sleep, fully restoring HP and status.\"\n    },\n    \"Snore\": {\n      \"power\": 50,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Normal\",\n      \"effect\": \"Only usable if asleep. Has a 30% chance to make the target flinch.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Snorlax(PokemonBase):\n    _species='Snorlax'\n    _types=['Normal']\n    _gender='Male'\n    _ability=['Thick Fat']\n    _move_1=('Rest',0,1000000,'Status','Psychic',0,[])\n    _move_2=('Snore',50,100,'Special','Normal',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def _take_damage_attack(self,x):\n        self.register_act_taken()\n        if self['act_taken']['type'] in ['Ice','Fire']:\n            x//=2\n        self.state['hp']=max(0,self['hp']-x)\n        if self['hp']==0:\n            self.state['status']='FNT'\n\n    def move_1(self): # Rest  \n        self.state['status']=None\n        self.set_status('SLP')\n        self.state['hp']=self['max_hp']\n\n    def move_2(self): # Snore\n        if not isinstance(self['status'],dict) or not 'SLP' in self['status']: return\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100:\n                self.target.set_condition('FLINCH',counter=0)\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Body Slam\": {\n    \"power\": 85,\n    \"accuracy\": 100,\n    \"category\": \"Physical\",\n    \"type\": \"Normal\",\n    \"effect\": \"Has a 30% chance to paralyze the target.\",\n    \"property\": [\n      \"contact\"\n    ]\n  }\n}\n```",
        "response": "```python\n@Increment(Snorlax,'_move_3')\ndef value():\n    return ('Body Slam',85,100,'Physical','Normal',0,['contact'])\n\n@Increment(Snorlax)\ndef move_3(self): # Body Slam\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint() and rnd()<30/100:\n            self.target.set_status('PAR')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Snorlax\",\n  \"types\": [\n    \"Normal\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Thick Fat\": \"Fire-/Ice-type attacks against this Pokemon deal halved damage.\"\n  },\n  \"moves\": {\n    \"Rest\": {\n      \"power\": 0,\n      \"accuracy\": 1000000,\n      \"category\": \"Status\",\n      \"type\": \"Psychic\",\n      \"effect\": \"The user goes to sleep, fully restoring HP and status.\"\n    },\n    \"Snore\": {\n      \"power\": 50,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Normal\",\n      \"effect\": \"Only usable if asleep. Has a 30% chance to make the target flinch.\"\n    },\n    \"Body Slam\": {\n      \"power\": 85,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Normal\",\n      \"effect\": \"Has a 30% chance to paralyze the target.\",\n      \"property\": [\n        \"contact\"\n      ]\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Snorlax(PokemonBase):\n    _species='Snorlax'\n    _types=['Normal']\n    _gender='Male'\n    _ability=['Thick Fat']\n    _move_1=('Rest',0,1000000,'Status','Psychic',0,[])\n    _move_2=('Snore',50,100,'Special','Normal',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def _take_damage_attack(self,x):\n        self.register_act_taken()\n        if self['act_taken']['type'] in ['Ice','Fire']:\n            x//=2\n        self.state['hp']=max(0,self['hp']-x)\n        if self['hp']==0:\n            self.state['status']='FNT'\n\n    def move_1(self): # Rest  \n        self.state['status']=None\n        self.set_status('SLP')\n        self.state['hp']=self['max_hp']\n\n    def move_2(self): # Snore\n        if not isinstance(self['status'],dict) or not 'SLP' in self['status']: return\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100:\n                self.target.set_condition('FLINCH',counter=0)\n\n@Increment(Snorlax,'_move_3')\ndef value():\n    return ('Body Slam',85,100,'Physical','Normal',0,['contact'])\n\n@Increment(Snorlax)\ndef move_3(self): # Body Slam\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint() and rnd()<30/100:\n            self.target.set_status('PAR')\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Giga Impact\": {\n    \"power\": 150,\n    \"accuracy\": 90,\n    \"category\": \"Physical\",\n    \"type\": \"Normal\",\n    \"effect\": \"The user cannot act next turn, unless the target faints.\",\n    \"property\": [\n      \"contact\"\n    ]\n  }\n}\n```",
        "response": "```python\n@Increment(Snorlax,'_move_4')\ndef value():\n    return ('Giga Impact',150,90,'Physical','Normal',0,['contact'])\n\n@Increment(Snorlax)\ndef move_4(self): # Giga Impact\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n    if not self.target.isfaint():\n        self.set_condition('RECHARGE',counter=0)\n        self.state['canact']=False\n\n@Increment(Snorlax)\ndef endturn(self):\n    if self['conditions'].get('RECHARGE'):\n        if self['conditions']['RECHARGE']['counter']==0:\n            self['conditions']['RECHARGE']['counter']+=1\n        else:\n            del self['conditions']['RECHARGE']\n            self.state['canact']=True\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Snorlax\",\n  \"types\": [\n    \"Normal\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Thick Fat\": \"Fire-/Ice-type attacks against this Pokemon deal halved damage.\"\n  },\n  \"moves\": {\n    \"Rest\": {\n      \"power\": 0,\n      \"accuracy\": 1000000,\n      \"category\": \"Status\",\n      \"type\": \"Psychic\",\n      \"effect\": \"The user goes to sleep, fully restoring HP and status.\"\n    },\n    \"Snore\": {\n      \"power\": 50,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Normal\",\n      \"effect\": \"Only usable if asleep. Has a 30% chance to make the target flinch.\"\n    },\n    \"Body Slam\": {\n      \"power\": 85,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Normal\",\n      \"effect\": \"Has a 30% chance to paralyze the target.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Giga Impact\": {\n      \"power\": 150,\n      \"accuracy\": 90,\n      \"category\": \"Physical\",\n      \"type\": \"Normal\",\n      \"effect\": \"The user cannot act next turn, unless the target faints.\",\n      \"property\": [\n        \"contact\"\n      ]\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Snorlax(PokemonBase):\n    _species='Snorlax'\n    _types=['Normal']\n    _gender='Male'\n    _ability=['Thick Fat']\n    _move_1=('Rest',0,1000000,'Status','Psychic',0,[])\n    _move_2=('Snore',50,100,'Special','Normal',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def _take_damage_attack(self,x):\n        self.register_act_taken()\n        if self['act_taken']['type'] in ['Ice','Fire']:\n            x//=2\n        self.state['hp']=max(0,self['hp']-x)\n        if self['hp']==0:\n            self.state['status']='FNT'\n\n    def move_1(self): # Rest  \n        self.state['status']=None\n        self.set_status('SLP')\n        self.state['hp']=self['max_hp']\n\n    def move_2(self): # Snore\n        if not isinstance(self['status'],dict) or not 'SLP' in self['status']: return\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100:\n                self.target.set_condition('FLINCH',counter=0)\n\n@Increment(Snorlax,'_move_3')\ndef value():\n    return ('Body Slam',85,100,'Physical','Normal',0,['contact'])\n\n@Increment(Snorlax)\ndef move_3(self): # Body Slam\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint() and rnd()<30/100:\n            self.target.set_status('PAR')\n\n@Increment(Snorlax,'_move_4')\ndef value():\n    return ('Giga Impact',150,90,'Physical','Normal',0,['contact'])\n\n@Increment(Snorlax)\ndef move_4(self): # Giga Impact\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n    if not self.target.isfaint():\n        self.set_condition('RECHARGE',counter=0)\n        self.state['canact']=False\n\n@Increment(Snorlax)\ndef endturn(self):\n    if self['conditions'].get('RECHARGE'):\n        if self['conditions']['RECHARGE']['counter']==0:\n            self['conditions']['RECHARGE']['counter']+=1\n        else:\n            del self['conditions']['RECHARGE']\n            self.state['canact']=True\n```\n\nThis role is gonna learn a new ability:\n```json\n{\n  \"Heavy Sleeper\": \"While asleep, this Pokemon regenerates 1/8 of its maximum HP at the end of each turn.\"\n}\n```",
        "response": "```python\n@Increment(Snorlax,'_ability')\ndef value():\n    return ['Thick Fat','Heavy Sleeper']\n\n@Increment(Snorlax)\ndef endturn(self):\n    if self['conditions'].get('RECHARGE'):\n        if self['conditions']['RECHARGE']['counter']==0:\n            self['conditions']['RECHARGE']['counter']+=1\n        else:\n            del self['conditions']['RECHARGE']\n            self.state['canact']=True\n    if self['status']=='SLP':\n        self.restore(self['max_hp']//8,'heal')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Snorlax\",\n  \"types\": [\n    \"Normal\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Thick Fat\": \"Fire-/Ice-type attacks against this Pokemon deal halved damage.\",\n    \"Heavy Sleeper\": \"While asleep, this Pokemon regenerates 1/8 of its maximum HP at the end of each turn.\"\n  },\n  \"moves\": {\n    \"Rest\": {\n      \"power\": 0,\n      \"accuracy\": 1000000,\n      \"category\": \"Status\",\n      \"type\": \"Psychic\",\n      \"effect\": \"The user goes to sleep, fully restoring HP and status.\"\n    },\n    \"Snore\": {\n      \"power\": 50,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Normal\",\n      \"effect\": \"Only usable if asleep. Has a 30% chance to make the target flinch.\"\n    },\n    \"Body Slam\": {\n      \"power\": 85,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Normal\",\n      \"effect\": \"Has a 30% chance to paralyze the target.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Giga Impact\": {\n      \"power\": 150,\n      \"accuracy\": 90,\n      \"category\": \"Physical\",\n      \"type\": \"Normal\",\n      \"effect\": \"The user cannot act next turn, unless the target faints.\",\n      \"property\": [\n        \"contact\"\n      ]\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Snorlax(PokemonBase):\n    _species='Snorlax'\n    _types=['Normal']\n    _gender='Male'\n    _ability=['Thick Fat']\n    _move_1=('Rest',0,1000000,'Status','Psychic',0,[])\n    _move_2=('Snore',50,100,'Special','Normal',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def _take_damage_attack(self,x):\n        self.register_act_taken()\n        if self['act_taken']['type'] in ['Ice','Fire']:\n            x//=2\n        self.state['hp']=max(0,self['hp']-x)\n        if self['hp']==0:\n            self.state['status']='FNT'\n\n    def move_1(self): # Rest  \n        self.state['status']=None\n        self.set_status('SLP')\n        self.state['hp']=self['max_hp']\n\n    def move_2(self): # Snore\n        if not isinstance(self['status'],dict) or not 'SLP' in self['status']: return\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100:\n                self.target.set_condition('FLINCH',counter=0)\n\n@Increment(Snorlax,'_move_3')\ndef value():\n    return ('Body Slam',85,100,'Physical','Normal',0,['contact'])\n\n@Increment(Snorlax)\ndef move_3(self): # Body Slam\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint() and rnd()<30/100:\n            self.target.set_status('PAR')\n\n@Increment(Snorlax,'_move_4')\ndef value():\n    return ('Giga Impact',150,90,'Physical','Normal',0,['contact'])\n\n@Increment(Snorlax)\ndef move_4(self): # Giga Impact\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n    if not self.target.isfaint():\n        self.set_condition('RECHARGE',counter=0)\n        self.state['canact']=False\n\n@Increment(Snorlax)\ndef endturn(self):\n    if self['conditions'].get('RECHARGE'):\n        if self['conditions']['RECHARGE']['counter']==0:\n            self['conditions']['RECHARGE']['counter']+=1\n        else:\n            del self['conditions']['RECHARGE']\n            self.state['canact']=True\n\n@Increment(Snorlax,'_ability')\ndef value():\n    return ['Thick Fat','Heavy Sleeper']\n\n@Increment(Snorlax)\ndef endturn(self):\n    if self['conditions'].get('RECHARGE'):\n        if self['conditions']['RECHARGE']['counter']==0:\n            self['conditions']['RECHARGE']['counter']+=1\n        else:\n            del self['conditions']['RECHARGE']\n            self.state['canact']=True\n    if self['status']=='SLP':\n        self.restore(self['max_hp']//8,'heal')\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Sleep Talk\": {\n    \"power\": 0,\n    \"accuracy\": 1000000,\n    \"category\": \"Status\",\n    \"type\": \"Normal\",\n    \"effect\": \"The user randomly uses one of its known moves while asleep.\"\n  }\n}\n```",
        "response": "```python\n@Increment(Snorlax,'_move_5')\ndef value():\n    return ('Sleep Talk',0,1000000,'Status','Normal',0,[])\n\n@Increment(Snorlax)\ndef move_5(self): # Sleep Talk\n    if not self.isstatus('SLP'): return\n    move_id=rndc([m for m in self.get_moves() if m!='Sleep Talk'])\n    self.move2fct[move_id]()\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Solarzard\",\n  \"types\": [\n    \"Fire\",\n    \"Grass\"\n  ],\n  \"gender\": \"Female\",\n  \"ability\": {\n    \"Solar Flare\": \"If Sunny Day is active, this Pokemon's moves gain 30 additional power, losing 1/8 max HP at the end of each turn.\"\n  },\n  \"moves\": {\n    \"Fire Blast\": {\n      \"power\": 110,\n      \"accuracy\": 85,\n      \"category\": \"Special\",\n      \"type\": \"Fire\",\n      \"effect\": \"Has a 10% chance to burn the target.\"\n    },\n    \"Hurricane\": {\n      \"power\": 110,\n      \"accuracy\": 70,\n      \"category\": \"Special\",\n      \"type\": \"Flying\",\n      \"effect\": \"Has a 30% chance to confuse the target. If the weather is Rain Dance, this move does not check accuracy. If the weather is Sunny Day, this move's accuracy is 50%.\"\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass Solarzard(PokemonBase):\n    _species='Solarzard'\n    _types=['Fire','Grass']\n    _gender='Female'\n    _ability=['Solar Flare']\n    _move_1=('Fire Blast',110,85,'Special','Fire',0,[])\n    _move_2=('Hurricane',110,70,'Special','Flying',0,[])\n    def __init__(self):\n        super().__init__()\n    \n    def get_power(self):\n        power=self['act']['power']\n        if self.env.get('SUNNYDAY'):\n            power+=30\n        return int(power*self.get_weather_power_mult())\n    \n    def endturn(self):\n        if self.env.get('SUNNYDAY'):\n            self.take_damage(self['max_hp']//8,'loss')\n    \n    def get_accuracy(self):\n        acc=self['act']['accuracy']\n        if self['act']['id']=='Hurricane':\n            if self.env.get('RAINDANCE'):\n                acc=1e5\n            elif self.env.get('SUNNYDAY'):\n                acc=50\n        acc_mult=[1.0,1.33,1.67,2.0]\n        if self['boosts']['accuracy']>=0:\n            acc*=acc_mult[self['boosts']['accuracy']]\n        else:\n            acc/=acc_mult[self['boosts']['accuracy']]\n        acc*=self.target.get_evasion()\n        return acc/100\n\n    def move_1(self): # Fire Blast\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<10/100: self.target.set_status('BRN')\n    \n    def move_2(self): # Hurricane\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100:\n                self.target.set_condition('CONFUSION',counter=0)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Spectreon\",\n  \"types\": [\n    \"Ghost\",\n    \"Dark\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Spectral Aura\": \"This Pokemon receives less damage based on its Defense boosts: 1 stage for 10% damage.\"\n  },\n  \"moves\": {\n    \"Shadow Ball\": {\n      \"power\": 80,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Ghost\",\n      \"effect\": \"Has a 20% chance to lower the target's Special Defense by 1 stage.\"\n    },\n    \"Void Pulse\": {\n      \"power\": 90,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Dark\",\n      \"effect\": \"Has a 30% chance to lower the target's Attack by 1 stage.\"\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass Spectreon(PokemonBase):\n    _species='Spectreon'\n    _types=['Ghost','Dark']\n    _gender='Male'\n    _ability=['Spectral Aura']\n    _move_1=('Shadow Ball',80,100,'Special','Ghost',0,[])\n    _move_2=('Void Pulse',90,100,'Special','Dark',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def _take_damage_attack(self,x):\n        self.register_act_taken()\n        if self['boosts']['def']>=0:\n            x=int(x*(1-0.1*self['boosts']['def']))\n        self.state['hp']=max(0,self['hp']-x)\n        if self['hp']==0:\n            self.state['status']='FNT'\n\n    def move_1(self): # Shadow Ball\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<20/100:\n                self.target.set_boost('spd',-1)\n\n    def move_2(self): # Void Pulse\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100:\n                self.target.set_boost('atk',-1)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Steelix\",\n  \"types\": [\n    \"Steel\",\n    \"Ground\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Sturdy\": \"If this Pokemon is at full HP, it survives one hit with at least 1 HP.\"\n  },\n  \"moves\": {\n    \"Earthquake\": {\n      \"power\": 100,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Ground\",\n      \"effect\": \"\"\n    },\n    \"Heavy Slam\": {\n      \"power\": 120,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Steel\",\n      \"property\": [\n        \"contact\"\n      ],\n      \"effect\": \"Lowers the user's Defense and Speed by 1 stage.\"\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass Steelix(PokemonBase):\n    _species='Steelix'\n    _types=['Steel','Ground']\n    _gender='Male'\n    _ability=['Sturdy']\n    _move_1=('Earthquake',100,100,'Physical','Ground',0,[])\n    _move_2=('Heavy Slam',120,100,'Physical','Steel',0,['contact'])\n    def __init__(self):\n        super().__init__()\n    \n    def _take_damage_attack(self,x):\n        self.register_act_taken()\n        if self['hp']==self['max_hp']:\n            self.state['hp']=max(1,self['hp']-x)\n        else:\n            self.state['hp']=max(0,self['hp']-x)\n        if self['hp']==0:\n            self.state['status']='FNT'\n    \n    def move_1(self): # Earthquake\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n    \n    def move_2(self): # Heavy Slam\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            self.set_boost('def',-1)\n            self.set_boost('spd',-1)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Stormfury\",\n  \"types\": [\n    \"Electric\",\n    \"Flying\"\n  ],\n  \"gender\": \"Female\",\n  \"ability\": {\n    \"Storm Surge\": \"On switch-in, this Pokemon sets Storm Surge on its side for 3 turns. Under Storm Surge, Electric moves' accuracy is 100%.\"\n  },\n  \"moves\": {\n    \"Thunder Strike\": {\n      \"power\": 90,\n      \"accuracy\": 70,\n      \"category\": \"Special\",\n      \"type\": \"Electric\",\n      \"effect\": \"Has a 30% chance to paralyze the target.\"\n    },\n    \"Aerial Slash\": {\n      \"power\": 75,\n      \"accuracy\": 95,\n      \"category\": \"Physical\",\n      \"type\": \"Flying\",\n      \"effect\": \"Has a 20% chance to lower the target's Speed by 1 stage.\"\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass Stormfury(PokemonBase):\n    _species='Stormfury'\n    _types=['Electric','Flying']\n    _gender='Female'\n    _ability=['Storm Surge']\n    _move_1=('Thunder Strike',90,70,'Special','Electric',0,[])\n    _move_2=('Aerial Slash',75,95,'Physical','Flying',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def onswitch(self):\n        self.set_side_condition('STORM_SURGE',counter=0,max_count=3)\n\n    def get_accuracy(self):\n        acc=self['act']['accuracy']\n        if self['side_conditions'].get('STORM_SURGE') and self['act']['type']=='Electric':\n            acc=100\n        acc_mult=[1.0,1.33,1.67,2.0]\n        if self['boosts']['accuracy']>=0:\n            acc*=acc_mult[self['boosts']['accuracy']]\n        else:\n            acc/=acc_mult[self['boosts']['accuracy']]\n        acc*=self.target.get_evasion()\n        return acc/100\n\n    def move_1(self): # Thunder Strike\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100:\n                self.target.set_status('PAR')\n\n    def move_2(self): # Aerial Slash\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<20/100:\n                self.target.set_boost('spe',-1)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Stormfury\",\n  \"types\": [\n    \"Electric\",\n    \"Flying\"\n  ],\n  \"gender\": \"Female\",\n  \"ability\": {\n    \"Storm Surge\": \"On switch-in, this Pokemon sets Storm Surge on its side for 3 turns. Under Storm Surge, Electric moves' accuracy is 100%.\"\n  },\n  \"moves\": {\n    \"Thunder Strike\": {\n      \"power\": 90,\n      \"accuracy\": 70,\n      \"category\": \"Special\",\n      \"type\": \"Electric\",\n      \"effect\": \"Has a 30% chance to paralyze the target.\"\n    },\n    \"Aerial Slash\": {\n      \"power\": 75,\n      \"accuracy\": 95,\n      \"category\": \"Physical\",\n      \"type\": \"Flying\",\n      \"effect\": \"Has a 20% chance to lower the target's Speed by 1 stage.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Stormfury(PokemonBase):\n    _species='Stormfury'\n    _types=['Electric','Flying']\n    _gender='Female'\n    _ability=['Storm Surge']\n    _move_1=('Thunder Strike',90,70,'Special','Electric',0,[])\n    _move_2=('Aerial Slash',75,95,'Physical','Flying',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def onswitch(self):\n        self.set_side_condition('STORM_SURGE',counter=0,max_count=3)\n\n    def get_accuracy(self):\n        acc=self['act']['accuracy']\n        if self['side_conditions'].get('STORM_SURGE') and self['act']['type']=='Electric':\n            acc=100\n        acc_mult=[1.0,1.33,1.67,2.0]\n        if self['boosts']['accuracy']>=0:\n            acc*=acc_mult[self['boosts']['accuracy']]\n        else:\n            acc/=acc_mult[self['boosts']['accuracy']]\n        acc*=self.target.get_evasion()\n        return acc/100\n\n    def move_1(self): # Thunder Strike\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100:\n                self.target.set_status('PAR')\n\n    def move_2(self): # Aerial Slash\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<20/100:\n                self.target.set_boost('spe',-1)\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Storm Burst\": {\n    \"power\": 100,\n    \"accuracy\": 80,\n    \"category\": \"Special\",\n    \"type\": \"Electric\",\n    \"effect\": \"Has a 20% chance to cause confusion.\"\n  }\n}\n```",
        "response": "```python\n@Increment(Stormfury,'_move_3')\ndef value():\n    return ('Storm Burst',100,80,'Special','Electric',0,[])\n\n@Increment(Stormfury)\ndef move_3(self): # Storm Burst\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint() and rnd()<20/100:\n            self.target.set_condition('CONFUSION',counter=0)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Stormfury\",\n  \"types\": [\n    \"Electric\",\n    \"Flying\"\n  ],\n  \"gender\": \"Female\",\n  \"ability\": {\n    \"Storm Surge\": \"On switch-in, this Pokemon sets Storm Surge on its side for 3 turns. Under Storm Surge, Electric moves' accuracy is 100%.\"\n  },\n  \"moves\": {\n    \"Thunder Strike\": {\n      \"power\": 90,\n      \"accuracy\": 70,\n      \"category\": \"Special\",\n      \"type\": \"Electric\",\n      \"effect\": \"Has a 30% chance to paralyze the target.\"\n    },\n    \"Aerial Slash\": {\n      \"power\": 75,\n      \"accuracy\": 95,\n      \"category\": \"Physical\",\n      \"type\": \"Flying\",\n      \"effect\": \"Has a 20% chance to lower the target's Speed by 1 stage.\"\n    },\n    \"Storm Burst\": {\n      \"power\": 100,\n      \"accuracy\": 80,\n      \"category\": \"Special\",\n      \"type\": \"Electric\",\n      \"effect\": \"Has a 20% chance to cause confusion.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Stormfury(PokemonBase):\n    _species='Stormfury'\n    _types=['Electric','Flying']\n    _gender='Female'\n    _ability=['Storm Surge']\n    _move_1=('Thunder Strike',90,70,'Special','Electric',0,[])\n    _move_2=('Aerial Slash',75,95,'Physical','Flying',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def onswitch(self):\n        self.set_side_condition('STORM_SURGE',counter=0,max_count=3)\n\n    def get_accuracy(self):\n        acc=self['act']['accuracy']\n        if self['side_conditions'].get('STORM_SURGE') and self['act']['type']=='Electric':\n            acc=100\n        acc_mult=[1.0,1.33,1.67,2.0]\n        if self['boosts']['accuracy']>=0:\n            acc*=acc_mult[self['boosts']['accuracy']]\n        else:\n            acc/=acc_mult[self['boosts']['accuracy']]\n        acc*=self.target.get_evasion()\n        return acc/100\n\n    def move_1(self): # Thunder Strike\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100:\n                self.target.set_status('PAR')\n\n    def move_2(self): # Aerial Slash\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<20/100:\n                self.target.set_boost('spe',-1)\n\n@Increment(Stormfury,'_move_3')\ndef value():\n    return ('Storm Burst',100,80,'Special','Electric',0,[])\n\n@Increment(Stormfury)\ndef move_3(self): # Storm Burst\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint() and rnd()<20/100:\n            self.target.set_condition('CONFUSION',counter=0)\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Gale Wing\": {\n    \"power\": 85,\n    \"accuracy\": 90,\n    \"category\": \"Special\",\n    \"type\": \"Flying\",\n    \"effect\": \"Has a 10% chance to cause flinching.\"\n  }\n}\n```",
        "response": "```python\n@Increment(Stormfury,'_move_4')\ndef value():\n    return ('Gale Wing',85,90,'Special','Flying',0,[])\n\n@Increment(Stormfury)\ndef move_4(self): # Gale Wing\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint() and rnd()<10/100:\n            self.target.set_condition('FLINCH',counter=0)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Stormfury\",\n  \"types\": [\n    \"Electric\",\n    \"Flying\"\n  ],\n  \"gender\": \"Female\",\n  \"ability\": {\n    \"Storm Surge\": \"On switch-in, this Pokemon sets Storm Surge on its side for 3 turns. Under Storm Surge, Electric moves' accuracy is 100%.\"\n  },\n  \"moves\": {\n    \"Thunder Strike\": {\n      \"power\": 90,\n      \"accuracy\": 70,\n      \"category\": \"Special\",\n      \"type\": \"Electric\",\n      \"effect\": \"Has a 30% chance to paralyze the target.\"\n    },\n    \"Aerial Slash\": {\n      \"power\": 75,\n      \"accuracy\": 95,\n      \"category\": \"Physical\",\n      \"type\": \"Flying\",\n      \"effect\": \"Has a 20% chance to lower the target's Speed by 1 stage.\"\n    },\n    \"Storm Burst\": {\n      \"power\": 100,\n      \"accuracy\": 80,\n      \"category\": \"Special\",\n      \"type\": \"Electric\",\n      \"effect\": \"Has a 20% chance to cause confusion.\"\n    },\n    \"Gale Wing\": {\n      \"power\": 85,\n      \"accuracy\": 90,\n      \"category\": \"Special\",\n      \"type\": \"Flying\",\n      \"effect\": \"Has a 10% chance to cause flinching.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Stormfury(PokemonBase):\n    _species='Stormfury'\n    _types=['Electric','Flying']\n    _gender='Female'\n    _ability=['Storm Surge']\n    _move_1=('Thunder Strike',90,70,'Special','Electric',0,[])\n    _move_2=('Aerial Slash',75,95,'Physical','Flying',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def onswitch(self):\n        self.set_side_condition('STORM_SURGE',counter=0,max_count=3)\n\n    def get_accuracy(self):\n        acc=self['act']['accuracy']\n        if self['side_conditions'].get('STORM_SURGE') and self['act']['type']=='Electric':\n            acc=100\n        acc_mult=[1.0,1.33,1.67,2.0]\n        if self['boosts']['accuracy']>=0:\n            acc*=acc_mult[self['boosts']['accuracy']]\n        else:\n            acc/=acc_mult[self['boosts']['accuracy']]\n        acc*=self.target.get_evasion()\n        return acc/100\n\n    def move_1(self): # Thunder Strike\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100:\n                self.target.set_status('PAR')\n\n    def move_2(self): # Aerial Slash\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<20/100:\n                self.target.set_boost('spe',-1)\n\n@Increment(Stormfury,'_move_3')\ndef value():\n    return ('Storm Burst',100,80,'Special','Electric',0,[])\n\n@Increment(Stormfury)\ndef move_3(self): # Storm Burst\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint() and rnd()<20/100:\n            self.target.set_condition('CONFUSION',counter=0)\n\n@Increment(Stormfury,'_move_4')\ndef value():\n    return ('Gale Wing',85,90,'Special','Flying',0,[])\n\n@Increment(Stormfury)\ndef move_4(self): # Gale Wing\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint() and rnd()<10/100:\n            self.target.set_condition('FLINCH',counter=0)\n```\n\nThis role is gonna learn a new ability:\n```json\n{\n  \"Aircurrent\": \"This Pokemon's Flying-type moves gain 20% additional power.\"\n}\n```",
        "response": "```python\n@Increment(Stormfury,'_ability')\ndef value():\n    return ['Storm Surge','Aircurrent']\n\n@Increment(Stormfury)\ndef get_power(self):\n    power=self['act']['power']\n    if self['act']['type']=='Flying':\n        power*=1.2\n    return int(power*self.get_weather_power_mult())\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Stormfury\",\n  \"types\": [\n    \"Electric\",\n    \"Flying\"\n  ],\n  \"gender\": \"Female\",\n  \"ability\": {\n    \"Storm Surge\": \"On switch-in, this Pokemon sets Storm Surge on its side for 3 turns. Under Storm Surge, Electric moves' accuracy is 100%.\",\n    \"Aircurrent\": \"This Pokemon's Flying-type moves gain 20% additional power.\"\n  },\n  \"moves\": {\n    \"Thunder Strike\": {\n      \"power\": 90,\n      \"accuracy\": 70,\n      \"category\": \"Special\",\n      \"type\": \"Electric\",\n      \"effect\": \"Has a 30% chance to paralyze the target.\"\n    },\n    \"Aerial Slash\": {\n      \"power\": 75,\n      \"accuracy\": 95,\n      \"category\": \"Physical\",\n      \"type\": \"Flying\",\n      \"effect\": \"Has a 20% chance to lower the target's Speed by 1 stage.\"\n    },\n    \"Storm Burst\": {\n      \"power\": 100,\n      \"accuracy\": 80,\n      \"category\": \"Special\",\n      \"type\": \"Electric\",\n      \"effect\": \"Has a 20% chance to cause confusion.\"\n    },\n    \"Gale Wing\": {\n      \"power\": 85,\n      \"accuracy\": 90,\n      \"category\": \"Special\",\n      \"type\": \"Flying\",\n      \"effect\": \"Has a 10% chance to cause flinching.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Stormfury(PokemonBase):\n    _species='Stormfury'\n    _types=['Electric','Flying']\n    _gender='Female'\n    _ability=['Storm Surge']\n    _move_1=('Thunder Strike',90,70,'Special','Electric',0,[])\n    _move_2=('Aerial Slash',75,95,'Physical','Flying',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def onswitch(self):\n        self.set_side_condition('STORM_SURGE',counter=0,max_count=3)\n\n    def get_accuracy(self):\n        acc=self['act']['accuracy']\n        if self['side_conditions'].get('STORM_SURGE') and self['act']['type']=='Electric':\n            acc=100\n        acc_mult=[1.0,1.33,1.67,2.0]\n        if self['boosts']['accuracy']>=0:\n            acc*=acc_mult[self['boosts']['accuracy']]\n        else:\n            acc/=acc_mult[self['boosts']['accuracy']]\n        acc*=self.target.get_evasion()\n        return acc/100\n\n    def move_1(self): # Thunder Strike\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100:\n                self.target.set_status('PAR')\n\n    def move_2(self): # Aerial Slash\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<20/100:\n                self.target.set_boost('spe',-1)\n\n@Increment(Stormfury,'_move_3')\ndef value():\n    return ('Storm Burst',100,80,'Special','Electric',0,[])\n\n@Increment(Stormfury)\ndef move_3(self): # Storm Burst\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint() and rnd()<20/100:\n            self.target.set_condition('CONFUSION',counter=0)\n\n@Increment(Stormfury,'_move_4')\ndef value():\n    return ('Gale Wing',85,90,'Special','Flying',0,[])\n\n@Increment(Stormfury)\ndef move_4(self): # Gale Wing\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint() and rnd()<10/100:\n            self.target.set_condition('FLINCH',counter=0)\n\n@Increment(Stormfury,'_ability')\ndef value():\n    return ['Storm Surge','Aircurrent']\n\n@Increment(Stormfury)\ndef get_power(self):\n    power=self['act']['power']\n    if self['act']['type']=='Flying':\n        power*=1.2\n    return int(power*self.get_weather_power_mult())\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Volt Shield\": {\n    \"power\": 0,\n    \"accuracy\": 100,\n    \"category\": \"Status\",\n    \"type\": \"Electric\",\n    \"effect\": \"Raises the user's Defense by 1 stage.\"\n  }\n}\n```",
        "response": "```python\n@Increment(Stormfury,'_move_5')\ndef value():\n    return ('Volt Shield',0,100,'Status','Electric',0,[])\n\n@Increment(Stormfury)\ndef move_5(self): # Volt Shield\n    self.set_boost('def',1,'self')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Suanyu\",\n  \"types\": [\n    \"Dragon\",\n    \"Flying\"\n  ],\n  \"gender\": \"Neutral\",\n  \"ability\": {\n    \"Terrifying Presence\": \"Upon entry, lowers the target's Attack by 1 stage.\"\n  },\n  \"moves\": {\n    \"Jade Shard\": {\n      \"power\": 90,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Dragon\",\n      \"effect\": \"Has a 20% chance to lower the target's Special Defense by 1 stage.\"\n    },\n    \"Serpent Dance\": {\n      \"power\": 0,\n      \"accuracy\": 100000,\n      \"category\": \"Status\",\n      \"type\": \"Flying\",\n      \"effect\": \"Raises the user's Speed by 2 stages.\"\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass Suanyu(PokemonBase):\n    _species='Suanyu'\n    _types=['Dragon','Flying']\n    _gender='Neutral'\n    _ability=['Terrifying Presence']\n    _move_1=('Jade Shard',90,100,'Special','Dragon',0,[])\n    _move_2=('Serpent Dance',0,100000,'Status','Flying',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def onswitch(self):\n        self.target.set_boost('atk',-1)\n\n    def move_1(self): # Jade Shard\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<0.2:\n                self.target.set_boost('spd',-1)\n\n    def move_2(self): # Serpent Dance\n        self.set_boost('spe',+2,'self')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Suanyu\",\n  \"types\": [\n    \"Dragon\",\n    \"Flying\"\n  ],\n  \"gender\": \"Neutral\",\n  \"ability\": {\n    \"Terrifying Presence\": \"Upon entry, lowers the target's Attack by 1 stage.\"\n  },\n  \"moves\": {\n    \"Jade Shard\": {\n      \"power\": 90,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Dragon\",\n      \"effect\": \"Has a 20% chance to lower the target's Special Defense by 1 stage.\"\n    },\n    \"Serpent Dance\": {\n      \"power\": 0,\n      \"accuracy\": 100000,\n      \"category\": \"Status\",\n      \"type\": \"Flying\",\n      \"effect\": \"Raises the user's Speed by 2 stages.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Suanyu(PokemonBase):\n    _species='Suanyu'\n    _types=['Dragon','Flying']\n    _gender='Neutral'\n    _ability=['Terrifying Presence']\n    _move_1=('Jade Shard',90,100,'Special','Dragon',0,[])\n    _move_2=('Serpent Dance',0,100000,'Status','Flying',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def onswitch(self):\n        self.target.set_boost('atk',-1)\n\n    def move_1(self): # Jade Shard\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<0.2:\n                self.target.set_boost('spd',-1)\n\n    def move_2(self): # Serpent Dance\n        self.set_boost('spe',+2,'self')\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Echoing Cry\": {\n    \"power\": 100,\n    \"accuracy\": 90,\n    \"category\": \"Special\",\n    \"type\": \"Dragon\",\n    \"effect\": \"Has a 30% chance to confuse the target and is always critical if the target is already confused.\"\n  }\n}\n```",
        "response": "```python\n@Increment(Suanyu,'_move_3')\ndef value():\n    return ('Echoing Cry',100,90,'Special','Dragon',0,[])\n\n@Increment(Suanyu)\ndef move_3(self): # Echoing Cry\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint() and rnd()<0.3:\n            self.target.set_condition('CONFUSION',counter=0)\n\n@Increment(Suanyu)\ndef get_crit(self):\n    if self['act']['id']=='Echoing Cry' and self.target['conditions'].get('CONFUSION'):\n        return True\n    crit_mult=[0,24,8,2,1]\n    crit_ratio=self['boosts']['crit']\n    crit=False\n    if rnd()*crit_mult[crit_ratio+1]<1:\n        crit=True\n    return crit\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Suanyu\",\n  \"types\": [\n    \"Dragon\",\n    \"Flying\"\n  ],\n  \"gender\": \"Neutral\",\n  \"ability\": {\n    \"Terrifying Presence\": \"Upon entry, lowers the target's Attack by 1 stage.\"\n  },\n  \"moves\": {\n    \"Jade Shard\": {\n      \"power\": 90,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Dragon\",\n      \"effect\": \"Has a 20% chance to lower the target's Special Defense by 1 stage.\"\n    },\n    \"Serpent Dance\": {\n      \"power\": 0,\n      \"accuracy\": 100000,\n      \"category\": \"Status\",\n      \"type\": \"Flying\",\n      \"effect\": \"Raises the user's Speed by 2 stages.\"\n    },\n    \"Echoing Cry\": {\n      \"power\": 100,\n      \"accuracy\": 90,\n      \"category\": \"Special\",\n      \"type\": \"Dragon\",\n      \"effect\": \"Has a 30% chance to confuse the target and is always critical if the target is already confused.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Suanyu(PokemonBase):\n    _species='Suanyu'\n    _types=['Dragon','Flying']\n    _gender='Neutral'\n    _ability=['Terrifying Presence']\n    _move_1=('Jade Shard',90,100,'Special','Dragon',0,[])\n    _move_2=('Serpent Dance',0,100000,'Status','Flying',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def onswitch(self):\n        self.target.set_boost('atk',-1)\n\n    def move_1(self): # Jade Shard\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<0.2:\n                self.target.set_boost('spd',-1)\n\n    def move_2(self): # Serpent Dance\n        self.set_boost('spe',+2,'self')\n\n@Increment(Suanyu,'_move_3')\ndef value():\n    return ('Echoing Cry',100,90,'Special','Dragon',0,[])\n\n@Increment(Suanyu)\ndef move_3(self): # Echoing Cry\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint() and rnd()<0.3:\n            self.target.set_condition('CONFUSION',counter=0)\n\n@Increment(Suanyu)\ndef get_crit(self):\n    if self['act']['id']=='Echoing Cry' and self.target['conditions'].get('CONFUSION'):\n        return True\n    crit_mult=[0,24,8,2,1]\n    crit_ratio=self['boosts']['crit']\n    crit=False\n    if rnd()*crit_mult[crit_ratio+1]<1:\n        crit=True\n    return crit\n```\n\nThis role is gonna learn a new ability:\n```json\n{\n  \"Mystic Cry\": \"Has a 30% chance to confuse the attacker when this Pokemon is hit by a move.\"\n}\n```",
        "response": "```python\n@Increment(Suanyu,'_ability')\ndef value():\n    return ['Terrifying Presence','Mystic Cry']\n\n@Increment(Suanyu)\ndef _take_damage_attack(self,x):\n    self.register_act_taken()\n    self.state['hp']=max(0,self['hp']-x)\n    if rnd()<0.3:\n        self.target.set_condition('CONFUSION',counter=0)\n    if self['hp']==0:\n        self.state['status']='FNT'\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Swampert\",\n  \"types\": [\n    \"Water\",\n    \"Ground\"\n  ],\n  \"gender\": \"Female\",\n  \"ability\": {\n    \"Torrent\": \"At 1/3 or less of its max HP, this Pokemon's offensive stat is 1.5x with Water attacks.\"\n  },\n  \"moves\": {\n    \"Liquidation\": {\n      \"power\": 85,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Water\",\n      \"effect\": \"Has a 20% chance to lower the target's Defense by 1 stage.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Earthquake\": {\n      \"power\": 100,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Ground\",\n      \"effect\": \"\"\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass Swampert(PokemonBase):\n    _species='Swampert'\n    _types=['Water','Ground']\n    _gender='Female'\n    _ability=['Torrent']\n    _move_1=('Liquidation',85,100,'Physical','Water',0,['contact'])\n    _move_2=('Earthquake',100,100,'Physical','Ground',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def get_stat(self,key,boost=None):\n        stat=self['stats'][key]\n        boost=self['boosts'][key] if not boost else boost\n        stat_ratio={0:1,1:1.5,2:2,3:2.5,4:3,5:3.5,6:4}[min(6,abs(boost))]\n        if boost<0:\n            stat_ratio=1/stat_ratio\n        stat_ratio*=self.get_weather_stat_mult(key)\n        if key=='spe' and self.isstatus('PAR'):\n            stat_ratio*=0.5\n        if key=='atk' or key=='spa' and self.move['type']=='Water' and self['hp']<self['max_hp']//3:\n            stat_ratio*=1.5\n        return int(stat*stat_ratio)\n\n    def move_1(self): # Liquidation\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<20/100: self.target.set_boost('def',-1)\n    \n    def move_2(self): # Earthquake\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Swampert\",\n  \"types\": [\n    \"Water\",\n    \"Ground\"\n  ],\n  \"gender\": \"Female\",\n  \"ability\": {\n    \"Torrent\": \"If this Pokemon's HP is above 1/2 and below its max HP before it uses a Water-type move, the move raises its atk and spa by 1 stage and removes all of its stats change.\"\n  },\n  \"moves\": {\n    \"Liquidation\": {\n      \"power\": 85,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Water\",\n      \"effect\": \"Has a 20% chance to lower the target's Defense by 1 stage.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Earthquake\": {\n      \"power\": 100,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Ground\",\n      \"effect\": \"\"\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass Swampert(PokemonBase):\n    _species='Swampert'\n    _types=['Water','Ground']\n    _gender='Female'\n    _ability=['Torrent']\n    _move_1=('Liquidation',85,100,'Physical','Water',0,['contact'])\n    _move_2=('Earthquake',100,100,'Physical','Ground',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def clear_boost(self):\n        for key in ['atk','def','spa','spd','spe','accuracy','crit']:\n            self['boosts'][key]=0\n\n    def start_move(self):\n        if self['act']['type']=='Water' and self['max_hp']//2<self['hp']<self['max_hp']:\n            self.clear_boost()\n            self.set_boost('atk',1,'self')\n            self.set_boost('spa',1,'self')\n    \n    def move_1(self): # Liquidation\n        self.start_move()\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<20/100: self.target.set_boost('def',-1)\n    \n    def move_2(self): # Earthquake\n        self.start_move()\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Swampert\",\n  \"types\": [\n    \"Water\",\n    \"Ground\"\n  ],\n  \"gender\": \"Female\",\n  \"ability\": {\n    \"Mist Mirage\": \"On switch-in, summons Mist Mirage on the user's side for 3 turns. Restores 1/16 HP every turn during Mist Mirage.\"\n  },\n  \"moves\": {\n    \"Aqua Jet\": {\n      \"power\": 40,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"priority\": 1,\n      \"type\": \"Water\",\n      \"effect\": \"Has a 30% chance to raise the user's Speed by 1 stage.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Mud Bomb\": {\n      \"power\": 65,\n      \"accuracy\": 85,\n      \"category\": \"Special\",\n      \"type\": \"Ground\",\n      \"effect\": \"Has a 20% chance to lower the target's Accuracy by 1 stage.\"\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass Swampert(PokemonBase):\n    _species='Swampert'\n    _types=['Water','Ground']\n    _gender='Female'\n    _ability=['Mist Mirage']\n    _move_1=('Aqua Jet',40,100,'Physical','Water',1,['contact'])\n    _move_2=('Mud Bomb',65,85,'Special','Ground',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def onswitch(self):\n        self.set_side_condition('MIST_MIRAGE',counter=0,max_count=3)\n\n    def endturn(self):\n        if self['side_conditions'].get('MIST_MIRAGE'):\n            self.restore(self['max_hp']//16,'heal')\n\n    def move_1(self): # Aqua Jet\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if rnd()<30/100:  # 30% chance to increase Speed by 1 stage\n                self.set_boost('spe',1,'self')\n    \n    def move_2(self): # Mud Bomb\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<20/100:  # 20% chance to lower target's Accuracy by 1 stage\n                self.target.set_boost('accuracy',-1)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Taotaur\",\n  \"types\": [\n    \"Dark\",\n    \"Normal\"\n  ],\n  \"gender\": \"Neutral\",\n  \"ability\": {\n    \"Insatiable Hunger\": \"Boosts Attack and Special Attack by 1 stage whenever it was hit by the opponent.\"\n  },\n  \"moves\": {\n    \"Devouring Bite\": {\n      \"power\": 90,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Dark\",\n      \"effect\": \"Has a 20% chance to make the target flinch.\"\n    },\n    \"Ancient Power\": {\n      \"power\": 60,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Rock\",\n      \"effect\": \"Has a 10% chance to make the target sleep.\"\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass Taotaur(PokemonBase):\n    _species='Taotaur'\n    _types=['Dark','Normal']\n    _gender='Neutral'\n    _ability=['Insatiable Hunger']\n    _move_1=('Devouring Bite',90,100,'Physical','Dark',0,[])\n    _move_2=('Ancient Power',60,100,'Special','Rock',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def _take_damage_attack(self,x):\n        self.register_act_taken()\n        self.state['hp']=max(0,self['hp']-x)\n        if self['hp']==0:\n            self.state['status']='FNT'\n            return\n        self.set_boost('atk',+1,'self')\n        self.set_boost('spa',+1,'self')\n\n    def move_1(self): # Devouring Bite\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<20/100:\n                self.target.set_condition('FLINCH',counter=0)\n    \n    def move_2(self): # Ancient Power\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<10/100:\n                self.target.set_status('SLP')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Taotaur\",\n  \"types\": [\n    \"Dark\",\n    \"Normal\"\n  ],\n  \"gender\": \"Neutral\",\n  \"ability\": {\n    \"Insatiable Hunger\": \"Boosts Attack and Special Attack by 1 stage whenever it was hit by the opponent.\"\n  },\n  \"moves\": {\n    \"Devouring Bite\": {\n      \"power\": 90,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Dark\",\n      \"effect\": \"Has a 20% chance to make the target flinch.\"\n    },\n    \"Ancient Power\": {\n      \"power\": 60,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Rock\",\n      \"effect\": \"Has a 10% chance to make the target sleep.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Taotaur(PokemonBase):\n    _species='Taotaur'\n    _types=['Dark','Normal']\n    _gender='Neutral'\n    _ability=['Insatiable Hunger']\n    _move_1=('Devouring Bite',90,100,'Physical','Dark',0,[])\n    _move_2=('Ancient Power',60,100,'Special','Rock',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def _take_damage_attack(self,x):\n        self.register_act_taken()\n        self.state['hp']=max(0,self['hp']-x)\n        if self['hp']==0:\n            self.state['status']='FNT'\n            return\n        self.set_boost('atk',+1,'self')\n        self.set_boost('spa',+1,'self')\n\n    def move_1(self): # Devouring Bite\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<20/100:\n                self.target.set_condition('FLINCH',counter=0)\n    \n    def move_2(self): # Ancient Power\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<10/100:\n                self.target.set_status('SLP')\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Ritual Stomp\": {\n    \"power\": 80,\n    \"accuracy\": 95,\n    \"category\": \"Physical\",\n    \"type\": \"Normal\",\n    \"effect\": \"Lowers the target's Defense by 1 stage.\"\n  }\n}\n```",
        "response": "```python\n@Increment(Taotaur,'_move_3')\ndef value():\n    return ('Ritual Stomp',80,95,'Physical','Normal',0,[])\n\n@Increment(Taotaur)\ndef move_3(self): # Ritual Stomp\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        self.target.set_boost('def',-1)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Taotaur\",\n  \"types\": [\n    \"Dark\",\n    \"Normal\"\n  ],\n  \"gender\": \"Neutral\",\n  \"ability\": {\n    \"Insatiable Hunger\": \"Boosts Attack and Special Attack by 1 stage whenever it was hit by the opponent.\"\n  },\n  \"moves\": {\n    \"Devouring Bite\": {\n      \"power\": 90,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Dark\",\n      \"effect\": \"Has a 20% chance to make the target flinch.\"\n    },\n    \"Ancient Power\": {\n      \"power\": 60,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Rock\",\n      \"effect\": \"Has a 10% chance to make the target sleep.\"\n    },\n    \"Ritual Stomp\": {\n      \"power\": 80,\n      \"accuracy\": 95,\n      \"category\": \"Physical\",\n      \"type\": \"Normal\",\n      \"effect\": \"Lowers the target's Defense by 1 stage.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Taotaur(PokemonBase):\n    _species='Taotaur'\n    _types=['Dark','Normal']\n    _gender='Neutral'\n    _ability=['Insatiable Hunger']\n    _move_1=('Devouring Bite',90,100,'Physical','Dark',0,[])\n    _move_2=('Ancient Power',60,100,'Special','Rock',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def _take_damage_attack(self,x):\n        self.register_act_taken()\n        self.state['hp']=max(0,self['hp']-x)\n        if self['hp']==0:\n            self.state['status']='FNT'\n            return\n        self.set_boost('atk',+1,'self')\n        self.set_boost('spa',+1,'self')\n\n    def move_1(self): # Devouring Bite\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<20/100:\n                self.target.set_condition('FLINCH',counter=0)\n    \n    def move_2(self): # Ancient Power\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<10/100:\n                self.target.set_status('SLP')\n\n@Increment(Taotaur,'_move_3')\ndef value():\n    return ('Ritual Stomp',80,95,'Physical','Normal',0,[])\n\n@Increment(Taotaur)\ndef move_3(self): # Ritual Stomp\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        self.target.set_boost('def',-1)\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Gluttonous Maw\": {\n    \"power\": 0,\n    \"accuracy\": 100000,\n    \"category\": \"Status\",\n    \"type\": \"Dark\",\n    \"effect\": \"The user heals 50% of its max HP and raises its Attack by 1 stage.\"\n  }\n}\n```",
        "response": "```python\n@Increment(Taotaur,'_move_4')\ndef value():\n    return ('Gluttonous Maw',0,100000,'Status','Dark',0,[])\n\n@Increment(Taotaur)\ndef move_4(self): # Gluttonous Maw\n    self.restore(self['max_hp']//2,'heal')\n    self.set_boost('atk',+1,'self')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Taotaur\",\n  \"types\": [\n    \"Dark\",\n    \"Normal\"\n  ],\n  \"gender\": \"Neutral\",\n  \"ability\": {\n    \"Insatiable Hunger\": \"Boosts Attack and Special Attack by 1 stage whenever it was hit by the opponent.\"\n  },\n  \"moves\": {\n    \"Devouring Bite\": {\n      \"power\": 90,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Dark\",\n      \"effect\": \"Has a 20% chance to make the target flinch.\"\n    },\n    \"Ancient Power\": {\n      \"power\": 60,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Rock\",\n      \"effect\": \"Has a 10% chance to make the target sleep.\"\n    },\n    \"Ritual Stomp\": {\n      \"power\": 80,\n      \"accuracy\": 95,\n      \"category\": \"Physical\",\n      \"type\": \"Normal\",\n      \"effect\": \"Lowers the target's Defense by 1 stage.\"\n    },\n    \"Gluttonous Maw\": {\n      \"power\": 0,\n      \"accuracy\": 100000,\n      \"category\": \"Status\",\n      \"type\": \"Dark\",\n      \"effect\": \"The user heals 50% of its max HP and raises its Attack by 1 stage.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Taotaur(PokemonBase):\n    _species='Taotaur'\n    _types=['Dark','Normal']\n    _gender='Neutral'\n    _ability=['Insatiable Hunger']\n    _move_1=('Devouring Bite',90,100,'Physical','Dark',0,[])\n    _move_2=('Ancient Power',60,100,'Special','Rock',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def _take_damage_attack(self,x):\n        self.register_act_taken()\n        self.state['hp']=max(0,self['hp']-x)\n        if self['hp']==0:\n            self.state['status']='FNT'\n            return\n        self.set_boost('atk',+1,'self')\n        self.set_boost('spa',+1,'self')\n\n    def move_1(self): # Devouring Bite\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<20/100:\n                self.target.set_condition('FLINCH',counter=0)\n    \n    def move_2(self): # Ancient Power\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<10/100:\n                self.target.set_status('SLP')\n\n@Increment(Taotaur,'_move_3')\ndef value():\n    return ('Ritual Stomp',80,95,'Physical','Normal',0,[])\n\n@Increment(Taotaur)\ndef move_3(self): # Ritual Stomp\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        self.target.set_boost('def',-1)\n\n@Increment(Taotaur,'_move_4')\ndef value():\n    return ('Gluttonous Maw',0,100000,'Status','Dark',0,[])\n\n@Increment(Taotaur)\ndef move_4(self): # Gluttonous Maw\n    self.restore(self['max_hp']//2,'heal')\n    self.set_boost('atk',+1,'self')\n```\n\nThis role is gonna learn a new ability:\n```json\n{\n  \"Intimidating Gaze\": \"On switch-in, Lowers the Attack of the opponent by 1 stage.\"\n}\n```",
        "response": "```python\n@Increment(Taotaur,'_ability')\ndef value():\n    return ['Insatiable Hunger','Intimidating Gaze']\n\n@Increment(Taotaur)\ndef onswitch(self):\n    self.target.set_boost('atk',-1)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Tianma\",\n  \"types\": [\n    \"Flying\",\n    \"Fairy\"\n  ],\n  \"gender\": \"Neutral\",\n  \"ability\": {\n    \"Heavenly Speed\": \"Doubles the user's Speed during the first 5 turns of battle.\"\n  },\n  \"moves\": {\n    \"Skybound Rush\": {\n      \"power\": 100,\n      \"accuracy\": 100000,\n      \"category\": \"Physical\",\n      \"type\": \"Flying\",\n      \"effect\": \"Has a 20% chance to increase the user's Speed by 1 stage.\"\n    },\n    \"Jade Strike\": {\n      \"power\": 90,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Rock\",\n      \"effect\": \"Has a 30% chance to make the target dizzy, 50% chance to fall asleep in the next turn.\"\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass Tianma(PokemonBase):\n    _species='Tianma'\n    _types=['Flying','Fairy']\n    _gender='Neutral'\n    _ability=['Heavenly Speed']\n    _move_1=('Skybound Rush',100,100000,'Physical','Flying',0,[])\n    _move_2=('Jade Strike',90,100,'Physical','Rock',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def onswitch(self):\n        self.set_condition('HEAVENLY_SPEED',counter=0)\n\n    def endturn(self):\n        if self['conditions'].get('HEAVENLY_SPEED'):\n            self['conditions']['HEAVENLY_SPEED']['counter']+=1\n            if self['conditions']['HEAVENLY_SPEED']['counter']==5:\n                del self['conditions']['HEAVENLY_SPEED']\n        if self.target['conditions'].get('DIZZY'):\n            self.target['conditions']['DIZZY']['counter']+=1\n            if self.target['conditions']['DIZZY']['counter']==2:\n                if rnd()<0.3:\n                   self.target.set_status('SLP')\n                del self.target['conditions']['DIZZY']\n\n    def get_stat(self,key,boost=None):\n        stat=self['stats'][key]\n        boost=self['boosts'][key] if boost is None else boost\n        stat_ratio={0:1,1:1.5,2:2,3:2.5,4:3,5:3.5,6:4}[min(6,abs(boost))]\n        if boost<0:\n            stat_ratio=1/stat_ratio\n        stat_ratio*=self.get_weather_stat_mult(key)\n        if key=='spe' and self.isstatus('PAR'):\n            stat_ratio*=0.5\n        if key=='spe' and self['conditions'].get('HEAVENLY_SPEED'):\n            stat_ratio*=2\n        return int(stat*stat_ratio)\n\n    def move_1(self): # Skybound Rush\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if rnd()<0.2:\n                self.set_boost('spe',+1,'self')\n\n    def move_2(self): # Jade Strike\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint():\n                if rnd()<0.3:\n                    self.target.set_condition('DIZZY',counter=0)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Tianma\",\n  \"types\": [\n    \"Flying\",\n    \"Fairy\"\n  ],\n  \"gender\": \"Neutral\",\n  \"ability\": {\n    \"Heavenly Speed\": \"Doubles the user's Speed during the first 5 turns of battle.\"\n  },\n  \"moves\": {\n    \"Skybound Rush\": {\n      \"power\": 100,\n      \"accuracy\": 100000,\n      \"category\": \"Physical\",\n      \"type\": \"Flying\",\n      \"effect\": \"Has a 20% chance to increase the user's Speed by 1 stage.\"\n    },\n    \"Jade Strike\": {\n      \"power\": 90,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Rock\",\n      \"effect\": \"Has a 30% chance to make the target dizzy, 50% chance to fall asleep in the next turn.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Tianma(PokemonBase):\n    _species='Tianma'\n    _types=['Flying','Fairy']\n    _gender='Neutral'\n    _ability=['Heavenly Speed']\n    _move_1=('Skybound Rush',100,100000,'Physical','Flying',0,[])\n    _move_2=('Jade Strike',90,100,'Physical','Rock',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def onswitch(self):\n        self.set_condition('HEAVENLY_SPEED',counter=0)\n\n    def endturn(self):\n        if self['conditions'].get('HEAVENLY_SPEED'):\n            self['conditions']['HEAVENLY_SPEED']['counter']+=1\n            if self['conditions']['HEAVENLY_SPEED']['counter']==5:\n                del self['conditions']['HEAVENLY_SPEED']\n        if self.target['conditions'].get('DIZZY'):\n            self.target['conditions']['DIZZY']['counter']+=1\n            if self.target['conditions']['DIZZY']['counter']==2:\n                if rnd()<0.3:\n                   self.target.set_status('SLP')\n                del self.target['conditions']['DIZZY']\n\n    def get_stat(self,key,boost=None):\n        stat=self['stats'][key]\n        boost=self['boosts'][key] if boost is None else boost\n        stat_ratio={0:1,1:1.5,2:2,3:2.5,4:3,5:3.5,6:4}[min(6,abs(boost))]\n        if boost<0:\n            stat_ratio=1/stat_ratio\n        stat_ratio*=self.get_weather_stat_mult(key)\n        if key=='spe' and self.isstatus('PAR'):\n            stat_ratio*=0.5\n        if key=='spe' and self['conditions'].get('HEAVENLY_SPEED'):\n            stat_ratio*=2\n        return int(stat*stat_ratio)\n\n    def move_1(self): # Skybound Rush\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if rnd()<0.2:\n                self.set_boost('spe',+1,'self')\n\n    def move_2(self): # Jade Strike\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint():\n                if rnd()<0.3:\n                    self.target.set_condition('DIZZY',counter=0)\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Celestial Barrier\": {\n    \"power\": 0,\n    \"accuracy\": 100000,\n    \"category\": \"Status\",\n    \"type\": \"Fairy\",\n    \"effect\": \"Raises the user's Defense and Special Defense by 2 stages.\"\n  }\n}\n```",
        "response": "```python\n@Increment(Tianma,'_move_3')\ndef value():\n    return ('Celestial Barrier',0,100000,'Status','Fairy',0,[])\n\n@Increment(Tianma)\ndef move_3(self): # Celestial Barrier\n    self.set_boost('def',+2,'self')\n    self.set_boost('spd',+2,'self')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Tianma\",\n  \"types\": [\n    \"Flying\",\n    \"Fairy\"\n  ],\n  \"gender\": \"Neutral\",\n  \"ability\": {\n    \"Heavenly Speed\": \"Doubles the user's Speed during the first 5 turns of battle.\"\n  },\n  \"moves\": {\n    \"Skybound Rush\": {\n      \"power\": 100,\n      \"accuracy\": 100000,\n      \"category\": \"Physical\",\n      \"type\": \"Flying\",\n      \"effect\": \"Has a 20% chance to increase the user's Speed by 1 stage.\"\n    },\n    \"Jade Strike\": {\n      \"power\": 90,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Rock\",\n      \"effect\": \"Has a 30% chance to make the target dizzy, 50% chance to fall asleep in the next turn.\"\n    },\n    \"Celestial Barrier\": {\n      \"power\": 0,\n      \"accuracy\": 100000,\n      \"category\": \"Status\",\n      \"type\": \"Fairy\",\n      \"effect\": \"Raises the user's Defense and Special Defense by 2 stages.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Tianma(PokemonBase):\n    _species='Tianma'\n    _types=['Flying','Fairy']\n    _gender='Neutral'\n    _ability=['Heavenly Speed']\n    _move_1=('Skybound Rush',100,100000,'Physical','Flying',0,[])\n    _move_2=('Jade Strike',90,100,'Physical','Rock',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def onswitch(self):\n        self.set_condition('HEAVENLY_SPEED',counter=0)\n\n    def endturn(self):\n        if self['conditions'].get('HEAVENLY_SPEED'):\n            self['conditions']['HEAVENLY_SPEED']['counter']+=1\n            if self['conditions']['HEAVENLY_SPEED']['counter']==5:\n                del self['conditions']['HEAVENLY_SPEED']\n        if self.target['conditions'].get('DIZZY'):\n            self.target['conditions']['DIZZY']['counter']+=1\n            if self.target['conditions']['DIZZY']['counter']==2:\n                if rnd()<0.3:\n                   self.target.set_status('SLP')\n                del self.target['conditions']['DIZZY']\n\n    def get_stat(self,key,boost=None):\n        stat=self['stats'][key]\n        boost=self['boosts'][key] if boost is None else boost\n        stat_ratio={0:1,1:1.5,2:2,3:2.5,4:3,5:3.5,6:4}[min(6,abs(boost))]\n        if boost<0:\n            stat_ratio=1/stat_ratio\n        stat_ratio*=self.get_weather_stat_mult(key)\n        if key=='spe' and self.isstatus('PAR'):\n            stat_ratio*=0.5\n        if key=='spe' and self['conditions'].get('HEAVENLY_SPEED'):\n            stat_ratio*=2\n        return int(stat*stat_ratio)\n\n    def move_1(self): # Skybound Rush\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if rnd()<0.2:\n                self.set_boost('spe',+1,'self')\n\n    def move_2(self): # Jade Strike\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint():\n                if rnd()<0.3:\n                    self.target.set_condition('DIZZY',counter=0)\n\n@Increment(Tianma,'_move_3')\ndef value():\n    return ('Celestial Barrier',0,100000,'Status','Fairy',0,[])\n\n@Increment(Tianma)\ndef move_3(self): # Celestial Barrier\n    self.set_boost('def',+2,'self')\n    self.set_boost('spd',+2,'self')\n```\n\nThis role is gonna learn a new ability:\n```json\n{\n  \"Divine Flight\": \"Grants immunity to Ground-type moves and raises evasion by 20%.\"\n}\n```",
        "response": "```python\n@Increment(Tianma,'_ability')\ndef value():\n    return ['Heavenly Speed','Divine Flight']\n\n@Increment(Tianma)\ndef _take_damage_attack(self,x):\n    self.register_act_taken()\n    if self['act_taken']['type']=='Ground':\n        return\n    self.state['hp']=max(0,self['hp']-x)\n    if self['hp']==0:\n        self.state['status']='FNT'\n\n@Increment(Tianma)\ndef get_evasion(self):\n    return 1.2\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Ting-Lu\",\n  \"types\": [\n    \"Dark\",\n    \"Ground\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Vessel of Ruin\": \"Target Pokemon have their Special Attack multiplied by 0.75.\"\n  },\n  \"moves\": {\n    \"Ruination\": {\n      \"power\": 0,\n      \"accuracy\": 90,\n      \"category\": \"Special\",\n      \"type\": \"Dark\",\n      \"effect\": \"Deals damage to the target equal to half of its current HP.\"\n    },\n    \"Earthquake\": {\n      \"power\": 100,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Ground\",\n      \"effect\": \"\"\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass TingLu(PokemonBase):\n    _species='Ting-Lu'\n    _types=['Dark','Ground']\n    _gender='Male'\n    _ability=['Vessel of Ruin']\n    _move_1=('Ruination',0,90,'Special','Dark',0,[])\n    _move_2=('Earthquake',100,100,'Physical','Ground',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def onswitch(self):\n        self.target.set_stat('spa',0.75)\n\n    def move_1(self): # Ruination\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=int(0.5*self.target['hp'])\n            self.target.take_damage(damage)\n    \n    def move_2(self): # Earthquake\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Togekiss\",\n  \"types\": [\n    \"Fairy\",\n    \"Flying\"\n  ],\n  \"gender\": \"Female\",\n  \"ability\": {\n    \"Serene Grace\": \"This Pokemon's moves have their secondary effect chance doubled.\"\n  },\n  \"moves\": {\n    \"Air Slash\": {\n      \"power\": 75,\n      \"accuracy\": 95,\n      \"category\": \"Special\",\n      \"type\": \"Flying\",\n      \"effect\": \"Has a 30% chance to make the target flinch.\"\n    },\n    \"Dazzling Gleam\": {\n      \"power\": 80,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Fairy\",\n      \"effect\": \"\"\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass Togekiss(PokemonBase):\n    _species='Togekiss'\n    _types=['Fairy','Flying']\n    _gender='Female'\n    _ability=['Serene Grace']\n    _move_1=('Air Slash',75,95,'Special','Flying',0,[])\n    _move_2=('Dazzling Gleam',80,100,'Special','Fairy',0,[])\n    def __init__(self):\n        super().__init__()\n    \n    def get_effect_chance(self,effect):\n        return 2*effect if effect<=0.5 else 1\n    \n    def move_1(self): # Air Slash\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<self.get_effect_chance(30/100):\n                self.target.set_condition('FLINCH',counter=0)\n    \n    def move_2(self): # Dazzling Gleam\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Torterra\",\n  \"types\": [\n    \"Grass\",\n    \"Ground\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Anger Shell\": \"At 1/2 or less of this Pokemon's max HP: Atk, Sp. Atk, Spe x1.25, and Def, Sp. Def x0.75.\"\n  },\n  \"moves\": {\n    \"Earth Power\": {\n      \"power\": 90,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Ground\",\n      \"effect\": \"Has a 10% chance to lower the target's Sp. Def by 1 stage.\"\n    },\n    \"Giga Drain\": {\n      \"power\": 75,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Grass\",\n      \"effect\": \"The user recovers 1/2 the HP lost by the target.\"\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass Torterra(PokemonBase):\n    _species='Torterra'\n    _types=['Grass','Ground']\n    _gender='Male'\n    _ability=['Anger Shell']\n    _move_1=('Earth Power',90,100,'Special','Ground',0,[])\n    _move_2=('Giga Drain',75,100,'Special','Grass',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def get_stat(self,key,boost=None):\n        stat=self['stats'][key]\n        boost=self['boosts'][key] if not boost else boost\n        stat_ratio={0:1,1:1.5,2:2,3:2.5,4:3,5:3.5,6:4}[min(6,abs(boost))]\n        if boost<0:\n            stat_ratio=1/stat_ratio\n        stat_ratio*=self.get_weather_stat_mult(key)\n        if key=='spe' and self.isstatus('PAR'):\n            stat_ratio*=0.5\n        if self['hp']<=self['max_hp']//2:\n            if key in ['atk','spa','spe']:\n                stat_ratio*=1.25\n            elif key in ['def','spd']:\n                stat_ratio*=0.75\n        return int(stat*stat_ratio)\n\n    def take_damage(self,x,from_='attack'):\n        if from_=='attack':\n            self._take_damage_attack(x)\n        elif from_=='loss':\n            self._take_damage_loss(x)\n        elif from_=='recoil':\n            self._take_damage_recoil(x)\n        if self['hp']<=self['max_hp']//2:\n            self.set_boost('atk',+1,'self')\n            self.set_boost('spa',+1,'self')\n            self.set_boost('spe',+1,'self')\n            self.set_boost('def',-1)\n            self.set_boost('spd',-1)\n\n    def move_1(self): # Earth Power\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<10/100:\n                self.target.set_boost('spd',-1)\n\n    def move_2(self): # Giga Drain\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            self.restore(int(1/2*damage),'drain')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Tyranitar\",\n  \"types\": [\n    \"Rock\",\n    \"Dark\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Sand Stream\": \"On switch-in, this Pokemon summons Sandstorm.\"\n  },\n  \"moves\": {\n    \"Rock Slide\": {\n      \"power\": 75,\n      \"accuracy\": 90,\n      \"category\": \"Physical\",\n      \"type\": \"Rock\",\n      \"effect\": \"Has a 30% chance to make the target flinch.\"\n    },\n    \"Crunch\": {\n      \"power\": 80,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Dark\",\n      \"effect\": \"Has a 20% chance to lower the target's Defense by 1 stage.\",\n      \"property\": [\n        \"contact\"\n      ]\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass Tyranitar(PokemonBase):\n    _species='Tyranitar'\n    _types=['Rock','Dark']\n    _gender='Male'\n    _ability=['Sand Stream']\n    _move_1=('Rock Slide',75,90,'Physical','Rock',0,[])\n    _move_2=('Crunch',80,100,'Physical','Dark',0,['contact'])\n    def __init__(self):\n        super().__init__()\n\n    def onswitch(self):\n        self.set_env('SANDSTORM')\n\n    def move_1(self): # Rock Slide\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100:\n                self.target.set_condition('FLINCH',counter=0)\n    \n    def move_2(self): # Crunch\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<20/100: self.target.set_boost('def',-1)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Tyranitar\",\n  \"types\": [\n    \"Rock\",\n    \"Dark\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Sand Stream\": \"Summons a sandstorm for five turns when it enters the battle.\"\n  },\n  \"moves\": {\n    \"Roar of Rock\": {\n      \"power\": 120,\n      \"accuracy\": 90,\n      \"category\": \"Physical\",\n      \"type\": \"Rock\",\n      \"effect\": \"Fighting and Fairy-type Pokemon are not immue to this move. Rather, it deals x2 effect to them.\"\n    },\n    \"Earthquake\": {\n      \"power\": 100,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Ground\",\n      \"effect\": \"No additional effect\"\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass Tyranitar(PokemonBase):\n    _species='Tyranitar'\n    _types=['Rock','Dark']\n    _gender='Male'\n    _ability=['Sand Stream']\n    _move_1=('Roar of Rock',120,90,'Physical','Rock',0,[])\n    _move_2=('Earthquake',100,100,'Physical','Ground',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def onswitch(self):\n        self.set_env('SANDSTORM')\n\n    def get_type_effect(self):\n        move_type=self['act']['type']\n        target_types=self.target['types']\n        effect=1\n        for tt in target_types:\n            if tt in ['Fighting','Fairy'] and self['act']['id']=='Roar of Rock':\n                effect*=2\n            else:\n                effect*=TYPEEFFECTIVENESS[move_type][tt]\n        return effect\n\n    def move_1(self): # Roar of Rock\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n    \n    def move_2(self): # Earthquake\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Tyranitar\",\n  \"types\": [\n    \"Rock\",\n    \"Dark\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Sand Stream\": \"Summons a sandstorm for five turns when it enters the battle.\"\n  },\n  \"moves\": {\n    \"Roar of Rock\": {\n      \"power\": 120,\n      \"accuracy\": 90,\n      \"category\": \"Physical\",\n      \"type\": \"Rock\",\n      \"effect\": \"Fighting and Fairy-type Pokemon are not immue to this move. Rather, it deals x2 effect to them.\"\n    },\n    \"Earthquake\": {\n      \"power\": 100,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Ground\",\n      \"effect\": \"No additional effect\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Tyranitar(PokemonBase):\n    _species='Tyranitar'\n    _types=['Rock','Dark']\n    _gender='Male'\n    _ability=['Sand Stream']\n    _move_1=('Roar of Rock',120,90,'Physical','Rock',0,[])\n    _move_2=('Earthquake',100,100,'Physical','Ground',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def onswitch(self):\n        self.set_env('SANDSTORM')\n\n    def get_type_effect(self):\n        move_type=self['act']['type']\n        target_types=self.target['types']\n        effect=1\n        for tt in target_types:\n            if tt in ['Fighting','Fairy'] and self['act']['id']=='Roar of Rock':\n                effect*=2\n            else:\n                effect*=TYPEEFFECTIVENESS[move_type][tt]\n        return effect\n\n    def move_1(self): # Roar of Rock\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n    \n    def move_2(self): # Earthquake\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Wild Release\": {\n    \"power\": 0,\n    \"accuracy\": 100000,\n    \"category\": \"Status\",\n    \"type\": \"Dark\",\n    \"effect\": \"Raises the user's attack and speed by 1 stage. If in Sandstorm, raises the user's attack and speed by 2 stages.\"\n  }\n}\n```",
        "response": "```python\n@Increment(Tyranitar,'_move_3')\ndef value():\n    return ('Wild Release',0,100000,'Status','Dark',0,[])\n\n@Increment(Tyranitar)\ndef move_3(self): # Wild Release\n    self.set_boost('atk',1,'self')\n    self.set_boost('spe',1,'self')\n    if self.env.get('SANDSTORM'):\n        self.set_boost('atk',1,'self')\n        self.set_boost('spe',1,'self')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Tyranitar\",\n  \"types\": [\n    \"Rock\",\n    \"Dark\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Sand Stream\": \"Summons a sandstorm for five turns when it enters the battle.\"\n  },\n  \"moves\": {\n    \"Roar of Rock\": {\n      \"power\": 120,\n      \"accuracy\": 90,\n      \"category\": \"Physical\",\n      \"type\": \"Rock\",\n      \"effect\": \"Fighting and Fairy-type Pokemon are not immue to this move. Rather, it deals x2 effect to them.\"\n    },\n    \"Earthquake\": {\n      \"power\": 100,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Ground\",\n      \"effect\": \"No additional effect\"\n    },\n    \"Wild Release\": {\n      \"power\": 0,\n      \"accuracy\": 100000,\n      \"category\": \"Status\",\n      \"type\": \"Dark\",\n      \"effect\": \"Raises the user's attack and speed by 1 stage. If in Sandstorm, raises the user's attack and speed by 2 stages.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Tyranitar(PokemonBase):\n    _species='Tyranitar'\n    _types=['Rock','Dark']\n    _gender='Male'\n    _ability=['Sand Stream']\n    _move_1=('Roar of Rock',120,90,'Physical','Rock',0,[])\n    _move_2=('Earthquake',100,100,'Physical','Ground',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def onswitch(self):\n        self.set_env('SANDSTORM')\n\n    def get_type_effect(self):\n        move_type=self['act']['type']\n        target_types=self.target['types']\n        effect=1\n        for tt in target_types:\n            if tt in ['Fighting','Fairy'] and self['act']['id']=='Roar of Rock':\n                effect*=2\n            else:\n                effect*=TYPEEFFECTIVENESS[move_type][tt]\n        return effect\n\n    def move_1(self): # Roar of Rock\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n    \n    def move_2(self): # Earthquake\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n\n@Increment(Tyranitar,'_move_3')\ndef value():\n    return ('Wild Release',0,100000,'Status','Dark',0,[])\n\n@Increment(Tyranitar)\ndef move_3(self): # Wild Release\n    self.set_boost('atk',1,'self')\n    self.set_boost('spe',1,'self')\n    if self.env.get('SANDSTORM'):\n        self.set_boost('atk',1,'self')\n        self.set_boost('spe',1,'self')\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Fire Fang\": {\n    \"power\": 65,\n    \"accuracy\": 95,\n    \"category\": \"Physical\",\n    \"type\": \"Fire\",\n    \"effect\": \"Has a 10% chance to burn the target and a 10% chance to make it flinch.\",\n    \"property\": [\n      \"contact\"\n    ]\n  }\n}\n```",
        "response": "```python\n@Increment(Tyranitar,'_move_4')\ndef value():\n    return ('Fire Fang',65,95,'Physical','Fire',0,['contact'])\n\n@Increment(Tyranitar)\ndef move_4(self): # Fire Fang\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint():\n            if rnd()<0.1:\n                self.target.set_status('BRN')\n            if rnd()<0.1:\n                self.target.set_condition('FLINCH',counter=0)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Tyranitar\",\n  \"types\": [\n    \"Rock\",\n    \"Dark\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Sand Stream\": \"Summons a sandstorm for five turns when it enters the battle.\"\n  },\n  \"moves\": {\n    \"Roar of Rock\": {\n      \"power\": 120,\n      \"accuracy\": 90,\n      \"category\": \"Physical\",\n      \"type\": \"Rock\",\n      \"effect\": \"Fighting and Fairy-type Pokemon are not immue to this move. Rather, it deals x2 effect to them.\"\n    },\n    \"Earthquake\": {\n      \"power\": 100,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Ground\",\n      \"effect\": \"No additional effect\"\n    },\n    \"Wild Release\": {\n      \"power\": 0,\n      \"accuracy\": 100000,\n      \"category\": \"Status\",\n      \"type\": \"Dark\",\n      \"effect\": \"Raises the user's attack and speed by 1 stage. If in Sandstorm, raises the user's attack and speed by 2 stages.\"\n    },\n    \"Fire Fang\": {\n      \"power\": 65,\n      \"accuracy\": 95,\n      \"category\": \"Physical\",\n      \"type\": \"Fire\",\n      \"effect\": \"Has a 10% chance to burn the target and a 10% chance to make it flinch.\",\n      \"property\": [\n        \"contact\"\n      ]\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Tyranitar(PokemonBase):\n    _species='Tyranitar'\n    _types=['Rock','Dark']\n    _gender='Male'\n    _ability=['Sand Stream']\n    _move_1=('Roar of Rock',120,90,'Physical','Rock',0,[])\n    _move_2=('Earthquake',100,100,'Physical','Ground',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def onswitch(self):\n        self.set_env('SANDSTORM')\n\n    def get_type_effect(self):\n        move_type=self['act']['type']\n        target_types=self.target['types']\n        effect=1\n        for tt in target_types:\n            if tt in ['Fighting','Fairy'] and self['act']['id']=='Roar of Rock':\n                effect*=2\n            else:\n                effect*=TYPEEFFECTIVENESS[move_type][tt]\n        return effect\n\n    def move_1(self): # Roar of Rock\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n    \n    def move_2(self): # Earthquake\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n\n@Increment(Tyranitar,'_move_3')\ndef value():\n    return ('Wild Release',0,100000,'Status','Dark',0,[])\n\n@Increment(Tyranitar)\ndef move_3(self): # Wild Release\n    self.set_boost('atk',1,'self')\n    self.set_boost('spe',1,'self')\n    if self.env.get('SANDSTORM'):\n        self.set_boost('atk',1,'self')\n        self.set_boost('spe',1,'self')\n\n@Increment(Tyranitar,'_move_4')\ndef value():\n    return ('Fire Fang',65,95,'Physical','Fire',0,['contact'])\n\n@Increment(Tyranitar)\ndef move_4(self): # Fire Fang\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint():\n            if rnd()<0.1:\n                self.target.set_status('BRN')\n            if rnd()<0.1:\n                self.target.set_condition('FLINCH',counter=0)\n```\n\nThis role is gonna learn a new ability:\n```json\n{\n  \"Sturdy\": \"The Pokemon endures the one-hit knockout move with 1 HP left.\"\n}\n```",
        "response": "```python\n@Increment(Tyranitar,'_ability')\ndef value():\n    return ['Sand Stream','Sturdy']\n\n@Increment(Tyranitar)\ndef _take_damage_attack(self,x):\n    self.register_act_taken()\n    if self['hp']==self['max_hp'] and x>=self['hp']:\n        self.state['hp']=max(1,self['hp']-x)\n    else:\n        self.state['hp']=max(0,self['hp']-x)\n    if self['hp']==0:\n        self.state['status']='FNT'\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Tyranitar\",\n  \"types\": [\n    \"Rock\",\n    \"Dark\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Sand Stream\": \"Summons a sandstorm for five turns when it enters the battle.\",\n    \"Sturdy\": \"The Pokemon endures the one-hit knockout move with 1 HP left.\"\n  },\n  \"moves\": {\n    \"Roar of Rock\": {\n      \"power\": 120,\n      \"accuracy\": 90,\n      \"category\": \"Physical\",\n      \"type\": \"Rock\",\n      \"effect\": \"Fighting and Fairy-type Pokemon are not immue to this move. Rather, it deals x2 effect to them.\"\n    },\n    \"Earthquake\": {\n      \"power\": 100,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Ground\",\n      \"effect\": \"No additional effect\"\n    },\n    \"Wild Release\": {\n      \"power\": 0,\n      \"accuracy\": 100000,\n      \"category\": \"Status\",\n      \"type\": \"Dark\",\n      \"effect\": \"Raises the user's attack and speed by 1 stage. If in Sandstorm, raises the user's attack and speed by 2 stages.\"\n    },\n    \"Fire Fang\": {\n      \"power\": 65,\n      \"accuracy\": 95,\n      \"category\": \"Physical\",\n      \"type\": \"Fire\",\n      \"effect\": \"Has a 10% chance to burn the target and a 10% chance to make it flinch.\",\n      \"property\": [\n        \"contact\"\n      ]\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Tyranitar(PokemonBase):\n    _species='Tyranitar'\n    _types=['Rock','Dark']\n    _gender='Male'\n    _ability=['Sand Stream']\n    _move_1=('Roar of Rock',120,90,'Physical','Rock',0,[])\n    _move_2=('Earthquake',100,100,'Physical','Ground',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def onswitch(self):\n        self.set_env('SANDSTORM')\n\n    def get_type_effect(self):\n        move_type=self['act']['type']\n        target_types=self.target['types']\n        effect=1\n        for tt in target_types:\n            if tt in ['Fighting','Fairy'] and self['act']['id']=='Roar of Rock':\n                effect*=2\n            else:\n                effect*=TYPEEFFECTIVENESS[move_type][tt]\n        return effect\n\n    def move_1(self): # Roar of Rock\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n    \n    def move_2(self): # Earthquake\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n\n@Increment(Tyranitar,'_move_3')\ndef value():\n    return ('Wild Release',0,100000,'Status','Dark',0,[])\n\n@Increment(Tyranitar)\ndef move_3(self): # Wild Release\n    self.set_boost('atk',1,'self')\n    self.set_boost('spe',1,'self')\n    if self.env.get('SANDSTORM'):\n        self.set_boost('atk',1,'self')\n        self.set_boost('spe',1,'self')\n\n@Increment(Tyranitar,'_move_4')\ndef value():\n    return ('Fire Fang',65,95,'Physical','Fire',0,['contact'])\n\n@Increment(Tyranitar)\ndef move_4(self): # Fire Fang\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint():\n            if rnd()<0.1:\n                self.target.set_status('BRN')\n            if rnd()<0.1:\n                self.target.set_condition('FLINCH',counter=0)\n\n@Increment(Tyranitar,'_ability')\ndef value():\n    return ['Sand Stream','Sturdy']\n\n@Increment(Tyranitar)\ndef _take_damage_attack(self,x):\n    self.register_act_taken()\n    if self['hp']==self['max_hp'] and x>=self['hp']:\n        self.state['hp']=max(1,self['hp']-x)\n    else:\n        self.state['hp']=max(0,self['hp']-x)\n    if self['hp']==0:\n        self.state['status']='FNT'\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Taunt\": {\n    \"power\": 0,\n    \"accuracy\": 100,\n    \"category\": \"Status\",\n    \"type\": \"Dark\",\n    \"effect\": \"Prevents the target from using status moves for its next three turns.\"\n  }\n}\n```",
        "response": "```python\n@Increment(Tyranitar,'_move_5')\ndef value():\n    return ('Taunt',0,100,'Status','Dark',0,[])\n\n@Increment(Tyranitar)\ndef move_5(self): # Taunt\n    self.target.set_condition('TAUNT',counter=0)\n\n@Increment(Tyranitar)\ndef disable_moves(self,moves):\n    disabled=[]\n    for m in moves:\n        if self.target['conditions'].get('TAUNT') and moves[m]['category']=='Status':\n            disabled+=[m]\n    return disabled\n\n@Increment(Tyranitar)\ndef endturn(self):\n    if self.target['conditions'].get('TAUNT'):\n        self.target['conditions']['TAUNT']['counter']+=1\n        if self.target['conditions']['TAUNT']['counter']==3:\n            del self.target['conditions']['TAUNT']\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Tyranitar\",\n  \"types\": [\n    \"Rock\",\n    \"Dark\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Sand Stream\": \"On switch-in, this Pokemon summons Sandstorm and raises its Defense and Special Defense by 1 stage.\"\n  },\n  \"moves\": {\n    \"Stone Edge\": {\n      \"power\": 100,\n      \"accuracy\": 80,\n      \"category\": \"Physical\",\n      \"type\": \"Rock\",\n      \"effect\": \"The ratio for critical hit +1.\"\n    },\n    \"Dark Pulse\": {\n      \"power\": 80,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Dark\",\n      \"effect\": \"Has a 20% chance to make the target flinch.\"\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass Tyranitar(PokemonBase):\n    _species='Tyranitar'\n    _types=['Rock','Dark']\n    _gender='Male'\n    _ability=['Sand Stream']\n    _move_1=('Stone Edge',100,80,'Physical','Rock',0,[])\n    _move_2=('Dark Pulse',80,100,'Special','Dark',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def onswitch(self):\n        self.set_env('SANDSTORM')\n        self.set_boost('def',1,'self')\n        self.set_boost('spd',1,'self')\n\n    def get_crit(self):\n        crit_mult=[0,24,8,2,1]\n        crit_ratio=self['boosts']['crit']\n        if self['act']['id']=='Stone Edge':\n            crit_ratio=min(3,crit_ratio+1)\n        crit=False\n        if rnd()*crit_mult[crit_ratio+1]<1:\n            crit=True\n        return crit\n\n    def move_1(self): # Stone Edge\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n    \n    def move_2(self): # Dark Pulse\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<20/100: self.target.set_condition('FLINCH',counter=0)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Tyranitar\",\n  \"types\": [\n    \"Rock\",\n    \"Dark\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Inner Health\": \"At the end of each turn, this Pokemon restores 10% of its max HP.\"\n  },\n  \"moves\": {\n    \"Rock Slide\": {\n      \"power\": 75,\n      \"accuracy\": 90,\n      \"category\": \"Physical\",\n      \"type\": \"Rock\",\n      \"effect\": \"Has a 30% chance to make the target flinch.\"\n    },\n    \"Crunch\": {\n      \"power\": 80,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Dark\",\n      \"effect\": \"Has a 20% chance to lower the target's Defense by 1 stage.\",\n      \"property\": [\n        \"contact\"\n      ]\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass Tyranitar(PokemonBase):\n    _species='Tyranitar'\n    _types=['Rock','Dark']\n    _gender='Male'\n    _ability=['Inner Health']\n    _move_1=('Rock Slide',75,90,'Physical','Rock',0,[])\n    _move_2=('Crunch',80,100,'Physical','Dark',0,['contact'])\n    def __init__(self):\n        super().__init__()\n\n    def endturn(self):\n        self.restore(int(self['max_hp']/10),'heal')\n\n    def move_1(self): # Rock Slide\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100:\n                self.target.set_condition('FLINCH',counter=0)\n    \n    def move_2(self): # Crunch\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<20/100:self.target.set_boost('def',-1)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Tyranotor\",\n  \"types\": [\n    \"Dragon\",\n    \"Dark\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Apex Predator\": \"Increases attack and speed stats by 50% if the opponent is below 50% HP.\"\n  },\n  \"moves\": {\n    \"Savage Bite\": {\n      \"power\": 90,\n      \"accuracy\": 95,\n      \"category\": \"Physical\",\n      \"type\": \"Dark\",\n      \"effect\": \"+1 critical hit ratio.\",\n      \"property\": [\n        \"contact\",\n        \"bite\"\n      ]\n    },\n    \"Rend\": {\n      \"power\": 85,\n      \"accuracy\": 95,\n      \"category\": \"Physical\",\n      \"type\": \"Dark\",\n      \"effect\": \"The user recovers 30% the HP lost by the target.\"\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass Tyranotor(PokemonBase):\n    _species='Tyranotor'\n    _types=['Dragon','Dark']\n    _gender='Male'\n    _ability=['Apex Predator']\n    _move_1=('Savage Bite',90,95,'Physical','Dark',0,['contact','bite'])\n    _move_2=('Rend',85,95,'Physical','Dark',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def get_stat(self,key,boost=None):\n        stat=self['stats'][key]\n        boost=self['boosts'][key] if not boost else boost\n        stat_ratio={0:1,1:1.5,2:2,3:2.5,4:3,5:3.5,6:4}[min(6,abs(boost))]\n        if boost<0:\n            stat_ratio=1/stat_ratio\n        stat_ratio*=self.get_weather_stat_mult(key)\n        if key=='spe' and self.isstatus('PAR'):\n            stat_ratio*=0.5\n        if (key=='atk' or key=='spe') and self.target['hp']<self.target['max_hp']//2:\n            stat_ratio*=1.5\n        return int(stat*stat_ratio)\n\n    def get_crit(self):\n        crit_mult=[0,24,8,2,1]\n        crit_ratio=self['boosts']['crit']\n        if self['act']['id']=='Savage Bite':\n            crit_ratio=min(3,crit_ratio+1)\n        crit=False\n        if rnd()*crit_mult[crit_ratio+1]<1:\n            crit=True\n        return crit\n\n    def move_1(self): # Savage Bite\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n\n    def move_2(self): # Rend\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            self.restore(int(30/100*damage),'drain')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Tyranotor\",\n  \"types\": [\n    \"Dragon\",\n    \"Dark\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Apex Predator\": \"Increases attack and speed stats by 50% if the opponent is below 50% HP.\"\n  },\n  \"moves\": {\n    \"Savage Bite\": {\n      \"power\": 90,\n      \"accuracy\": 95,\n      \"category\": \"Physical\",\n      \"type\": \"Dark\",\n      \"effect\": \"+1 critical hit ratio.\",\n      \"property\": [\n        \"contact\",\n        \"bite\"\n      ]\n    },\n    \"Rend\": {\n      \"power\": 85,\n      \"accuracy\": 95,\n      \"category\": \"Physical\",\n      \"type\": \"Dark\",\n      \"effect\": \"The user recovers 30% the HP lost by the target.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Tyranotor(PokemonBase):\n    _species='Tyranotor'\n    _types=['Dragon','Dark']\n    _gender='Male'\n    _ability=['Apex Predator']\n    _move_1=('Savage Bite',90,95,'Physical','Dark',0,['contact','bite'])\n    _move_2=('Rend',85,95,'Physical','Dark',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def get_stat(self,key,boost=None):\n        stat=self['stats'][key]\n        boost=self['boosts'][key] if not boost else boost\n        stat_ratio={0:1,1:1.5,2:2,3:2.5,4:3,5:3.5,6:4}[min(6,abs(boost))]\n        if boost<0:\n            stat_ratio=1/stat_ratio\n        stat_ratio*=self.get_weather_stat_mult(key)\n        if key=='spe' and self.isstatus('PAR'):\n            stat_ratio*=0.5\n        if (key=='atk' or key=='spe') and self.target['hp']<self.target['max_hp']//2:\n            stat_ratio*=1.5\n        return int(stat*stat_ratio)\n\n    def get_crit(self):\n        crit_mult=[0,24,8,2,1]\n        crit_ratio=self['boosts']['crit']\n        if self['act']['id']=='Savage Bite':\n            crit_ratio=min(3,crit_ratio+1)\n        crit=False\n        if rnd()*crit_mult[crit_ratio+1]<1:\n            crit=True\n        return crit\n\n    def move_1(self): # Savage Bite\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n\n    def move_2(self): # Rend\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            self.restore(int(30/100*damage),'drain')\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Devastating Roar\": {\n    \"power\": 0,\n    \"accuracy\": 100,\n    \"category\": \"Status\",\n    \"type\": \"Dragon\",\n    \"effect\": \"Lowers the Attack and Special Attack of all targets by 1 stage.\"\n  }\n}\n```",
        "response": "```python\n@Increment(Tyranotor,'_move_3')\ndef value():\n    return ('Devastating Roar',0,100,'Status','Dragon',0,[])\n\n@Increment(Tyranotor)\ndef move_3(self): # Devastating Roar\n    self.target.set_boost('atk',-1)\n    self.target.set_boost('spa',-1)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Tyranotor\",\n  \"types\": [\n    \"Dragon\",\n    \"Dark\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Apex Predator\": \"Increases attack and speed stats by 50% if the opponent is below 50% HP.\"\n  },\n  \"moves\": {\n    \"Savage Bite\": {\n      \"power\": 90,\n      \"accuracy\": 95,\n      \"category\": \"Physical\",\n      \"type\": \"Dark\",\n      \"effect\": \"+1 critical hit ratio.\",\n      \"property\": [\n        \"contact\",\n        \"bite\"\n      ]\n    },\n    \"Rend\": {\n      \"power\": 85,\n      \"accuracy\": 95,\n      \"category\": \"Physical\",\n      \"type\": \"Dark\",\n      \"effect\": \"The user recovers 30% the HP lost by the target.\"\n    },\n    \"Devastating Roar\": {\n      \"power\": 0,\n      \"accuracy\": 100,\n      \"category\": \"Status\",\n      \"type\": \"Dragon\",\n      \"effect\": \"Lowers the Attack and Special Attack of all targets by 1 stage.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Tyranotor(PokemonBase):\n    _species='Tyranotor'\n    _types=['Dragon','Dark']\n    _gender='Male'\n    _ability=['Apex Predator']\n    _move_1=('Savage Bite',90,95,'Physical','Dark',0,['contact','bite'])\n    _move_2=('Rend',85,95,'Physical','Dark',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def get_stat(self,key,boost=None):\n        stat=self['stats'][key]\n        boost=self['boosts'][key] if not boost else boost\n        stat_ratio={0:1,1:1.5,2:2,3:2.5,4:3,5:3.5,6:4}[min(6,abs(boost))]\n        if boost<0:\n            stat_ratio=1/stat_ratio\n        stat_ratio*=self.get_weather_stat_mult(key)\n        if key=='spe' and self.isstatus('PAR'):\n            stat_ratio*=0.5\n        if (key=='atk' or key=='spe') and self.target['hp']<self.target['max_hp']//2:\n            stat_ratio*=1.5\n        return int(stat*stat_ratio)\n\n    def get_crit(self):\n        crit_mult=[0,24,8,2,1]\n        crit_ratio=self['boosts']['crit']\n        if self['act']['id']=='Savage Bite':\n            crit_ratio=min(3,crit_ratio+1)\n        crit=False\n        if rnd()*crit_mult[crit_ratio+1]<1:\n            crit=True\n        return crit\n\n    def move_1(self): # Savage Bite\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n\n    def move_2(self): # Rend\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            self.restore(int(30/100*damage),'drain')\n\n@Increment(Tyranotor,'_move_3')\ndef value():\n    return ('Devastating Roar',0,100,'Status','Dragon',0,[])\n\n@Increment(Tyranotor)\ndef move_3(self): # Devastating Roar\n    self.target.set_boost('atk',-1)\n    self.target.set_boost('spa',-1)\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Tail Smash\": {\n    \"power\": 120,\n    \"accuracy\": 75,\n    \"category\": \"Physical\",\n    \"type\": \"Dragon\",\n    \"effect\": \"Has a 20% chance to paralyze the target.\",\n    \"property\": [\n      \"contact\"\n    ]\n  }\n}\n```",
        "response": "```python\n@Increment(Tyranotor,'_move_4')\ndef value():\n    return ('Tail Smash',120,75,'Physical','Dragon',0,['contact'])\n\n@Increment(Tyranotor)\ndef move_4(self): # Tail Smash\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint() and rnd()<0.2:\n            self.target.set_status('PAR')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Tyranotor\",\n  \"types\": [\n    \"Dragon\",\n    \"Dark\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Apex Predator\": \"Increases attack and speed stats by 50% if the opponent is below 50% HP.\"\n  },\n  \"moves\": {\n    \"Savage Bite\": {\n      \"power\": 90,\n      \"accuracy\": 95,\n      \"category\": \"Physical\",\n      \"type\": \"Dark\",\n      \"effect\": \"+1 critical hit ratio.\",\n      \"property\": [\n        \"contact\",\n        \"bite\"\n      ]\n    },\n    \"Rend\": {\n      \"power\": 85,\n      \"accuracy\": 95,\n      \"category\": \"Physical\",\n      \"type\": \"Dark\",\n      \"effect\": \"The user recovers 30% the HP lost by the target.\"\n    },\n    \"Devastating Roar\": {\n      \"power\": 0,\n      \"accuracy\": 100,\n      \"category\": \"Status\",\n      \"type\": \"Dragon\",\n      \"effect\": \"Lowers the Attack and Special Attack of all targets by 1 stage.\"\n    },\n    \"Tail Smash\": {\n      \"power\": 120,\n      \"accuracy\": 75,\n      \"category\": \"Physical\",\n      \"type\": \"Dragon\",\n      \"effect\": \"Has a 20% chance to paralyze the target.\",\n      \"property\": [\n        \"contact\"\n      ]\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Tyranotor(PokemonBase):\n    _species='Tyranotor'\n    _types=['Dragon','Dark']\n    _gender='Male'\n    _ability=['Apex Predator']\n    _move_1=('Savage Bite',90,95,'Physical','Dark',0,['contact','bite'])\n    _move_2=('Rend',85,95,'Physical','Dark',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def get_stat(self,key,boost=None):\n        stat=self['stats'][key]\n        boost=self['boosts'][key] if not boost else boost\n        stat_ratio={0:1,1:1.5,2:2,3:2.5,4:3,5:3.5,6:4}[min(6,abs(boost))]\n        if boost<0:\n            stat_ratio=1/stat_ratio\n        stat_ratio*=self.get_weather_stat_mult(key)\n        if key=='spe' and self.isstatus('PAR'):\n            stat_ratio*=0.5\n        if (key=='atk' or key=='spe') and self.target['hp']<self.target['max_hp']//2:\n            stat_ratio*=1.5\n        return int(stat*stat_ratio)\n\n    def get_crit(self):\n        crit_mult=[0,24,8,2,1]\n        crit_ratio=self['boosts']['crit']\n        if self['act']['id']=='Savage Bite':\n            crit_ratio=min(3,crit_ratio+1)\n        crit=False\n        if rnd()*crit_mult[crit_ratio+1]<1:\n            crit=True\n        return crit\n\n    def move_1(self): # Savage Bite\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n\n    def move_2(self): # Rend\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            self.restore(int(30/100*damage),'drain')\n\n@Increment(Tyranotor,'_move_3')\ndef value():\n    return ('Devastating Roar',0,100,'Status','Dragon',0,[])\n\n@Increment(Tyranotor)\ndef move_3(self): # Devastating Roar\n    self.target.set_boost('atk',-1)\n    self.target.set_boost('spa',-1)\n\n@Increment(Tyranotor,'_move_4')\ndef value():\n    return ('Tail Smash',120,75,'Physical','Dragon',0,['contact'])\n\n@Increment(Tyranotor)\ndef move_4(self): # Tail Smash\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint() and rnd()<0.2:\n            self.target.set_status('PAR')\n```\n\nThis role is gonna learn a new ability:\n```json\n{\n  \"Titan Bite\": \"If this Pokemon uses a biting move, it has a 42% chance to flinch the target.\"\n}\n```",
        "response": "```python\n@Increment(Tyranotor,'_ability')\ndef value():\n    return ['Apex Predator','Titan Bite']\n\n@Increment(Tyranotor)\ndef move_1(self): # Savage Bite\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint() and rnd()<0.42:\n            self.target.set_condition('FLINCH',counter=0)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Tyranotor\",\n  \"types\": [\n    \"Dragon\",\n    \"Dark\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Apex Predator\": \"Increases attack and speed stats by 50% if the opponent is below 50% HP.\",\n    \"Titan Bite\": \"If this Pokemon uses a biting move, it has a 42% chance to flinch the target.\"\n  },\n  \"moves\": {\n    \"Savage Bite\": {\n      \"power\": 90,\n      \"accuracy\": 95,\n      \"category\": \"Physical\",\n      \"type\": \"Dark\",\n      \"effect\": \"+1 critical hit ratio.\",\n      \"property\": [\n        \"contact\",\n        \"bite\"\n      ]\n    },\n    \"Rend\": {\n      \"power\": 85,\n      \"accuracy\": 95,\n      \"category\": \"Physical\",\n      \"type\": \"Dark\",\n      \"effect\": \"The user recovers 30% the HP lost by the target.\"\n    },\n    \"Devastating Roar\": {\n      \"power\": 0,\n      \"accuracy\": 100,\n      \"category\": \"Status\",\n      \"type\": \"Dragon\",\n      \"effect\": \"Lowers the Attack and Special Attack of all targets by 1 stage.\"\n    },\n    \"Tail Smash\": {\n      \"power\": 120,\n      \"accuracy\": 75,\n      \"category\": \"Physical\",\n      \"type\": \"Dragon\",\n      \"effect\": \"Has a 20% chance to paralyze the target.\",\n      \"property\": [\n        \"contact\"\n      ]\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Tyranotor(PokemonBase):\n    _species='Tyranotor'\n    _types=['Dragon','Dark']\n    _gender='Male'\n    _ability=['Apex Predator']\n    _move_1=('Savage Bite',90,95,'Physical','Dark',0,['contact','bite'])\n    _move_2=('Rend',85,95,'Physical','Dark',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def get_stat(self,key,boost=None):\n        stat=self['stats'][key]\n        boost=self['boosts'][key] if not boost else boost\n        stat_ratio={0:1,1:1.5,2:2,3:2.5,4:3,5:3.5,6:4}[min(6,abs(boost))]\n        if boost<0:\n            stat_ratio=1/stat_ratio\n        stat_ratio*=self.get_weather_stat_mult(key)\n        if key=='spe' and self.isstatus('PAR'):\n            stat_ratio*=0.5\n        if (key=='atk' or key=='spe') and self.target['hp']<self.target['max_hp']//2:\n            stat_ratio*=1.5\n        return int(stat*stat_ratio)\n\n    def get_crit(self):\n        crit_mult=[0,24,8,2,1]\n        crit_ratio=self['boosts']['crit']\n        if self['act']['id']=='Savage Bite':\n            crit_ratio=min(3,crit_ratio+1)\n        crit=False\n        if rnd()*crit_mult[crit_ratio+1]<1:\n            crit=True\n        return crit\n\n    def move_1(self): # Savage Bite\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n\n    def move_2(self): # Rend\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            self.restore(int(30/100*damage),'drain')\n\n@Increment(Tyranotor,'_move_3')\ndef value():\n    return ('Devastating Roar',0,100,'Status','Dragon',0,[])\n\n@Increment(Tyranotor)\ndef move_3(self): # Devastating Roar\n    self.target.set_boost('atk',-1)\n    self.target.set_boost('spa',-1)\n\n@Increment(Tyranotor,'_move_4')\ndef value():\n    return ('Tail Smash',120,75,'Physical','Dragon',0,['contact'])\n\n@Increment(Tyranotor)\ndef move_4(self): # Tail Smash\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint() and rnd()<0.2:\n            self.target.set_status('PAR')\n\n@Increment(Tyranotor,'_ability')\ndef value():\n    return ['Apex Predator','Titan Bite']\n\n@Increment(Tyranotor)\ndef move_1(self): # Savage Bite\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint() and rnd()<0.42:\n            self.target.set_condition('FLINCH',counter=0)\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Ice Fang\": {\n    \"power\": 65,\n    \"accuracy\": 95,\n    \"category\": \"Physical\",\n    \"priority\": 0,\n    \"type\": \"Ice\",\n    \"effect\": \"Has a 10% chance to freeze the target and a 10% chance to make it flinch.\",\n    \"property\": [\n      \"contact\",\n      \"bite\"\n    ]\n  }\n}\n```",
        "response": "```python\n@Increment(Tyranotor,'_move_5')\ndef value():\n    return ('Ice Fang',65,95,'Physical','Ice',0,['contact','bite'])\n\n@Increment(Tyranotor)\ndef move_5(self): # Ice Fang\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint():\n            if rnd()<0.1:\n                self.target.set_status('FRZ')\n            if rnd()<0.42:\n                self.target.set_condition('FLINCH',counter=0)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Tyrantrum\",\n  \"types\": [\n    \"Rock\",\n    \"Dragon\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Rock Head\": \"This Pokemon does not take recoil damage.\"\n  },\n  \"moves\": {\n    \"Head Smash\": {\n      \"power\": 150,\n      \"accuracy\": 80,\n      \"category\": \"Physical\",\n      \"type\": \"Rock\",\n      \"effect\": \"Deals recoil damage to the user equal to 50% the damage dealt.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Dragon Claw\": {\n      \"power\": 80,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Dragon\",\n      \"effect\": \"No additional effect.\",\n      \"property\": [\n        \"contact\"\n      ]\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass Tyrantrum(PokemonBase):\n    _species='Tyrantrum'\n    _types=['Rock','Dragon']\n    _gender='Male'\n    _ability=['Rock Head']\n    _move_1=('Head Smash',150,80,'Physical','Rock',0,['contact'])\n    _move_2=('Dragon Claw',80,100,'Physical','Dragon',0,['contact'])\n    def __init__(self):\n        super().__init__()\n\n    def move_1(self): # Head Smash\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n\n    def move_2(self): # Dragon Claw\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Tyrantrum\",\n  \"types\": [\n    \"Rock\",\n    \"Dragon\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Rock Head\": \"This Pokemon does not take recoil damage.\"\n  },\n  \"moves\": {\n    \"Head Smash\": {\n      \"power\": 150,\n      \"accuracy\": 80,\n      \"category\": \"Physical\",\n      \"type\": \"Rock\",\n      \"effect\": \"Deals recoil damage to the user equal to 50% the damage dealt.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Dragon Claw\": {\n      \"power\": 80,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Dragon\",\n      \"effect\": \"No additional effect.\",\n      \"property\": [\n        \"contact\"\n      ]\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Tyrantrum(PokemonBase):\n    _species='Tyrantrum'\n    _types=['Rock','Dragon']\n    _gender='Male'\n    _ability=['Rock Head']\n    _move_1=('Head Smash',150,80,'Physical','Rock',0,['contact'])\n    _move_2=('Dragon Claw',80,100,'Physical','Dragon',0,['contact'])\n    def __init__(self):\n        super().__init__()\n\n    def move_1(self): # Head Smash\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n\n    def move_2(self): # Dragon Claw\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Psychic Fangs\": {\n    \"power\": 85,\n    \"accuracy\": 100,\n    \"category\": \"Physical\",\n    \"type\": \"Psychic\",\n    \"effect\": \"Destroys the effects of Reflect, Light Screen, and Aurora Veil on the target side of the field.\",\n    \"property\": [\n      \"contact\"\n    ]\n  }\n}\n```",
        "response": "```python\n@Increment(Tyrantrum,'_move_3')\ndef value():\n    return ('Psychic Fangs',85,100,'Physical','Psychic',0,['contact'])\n\n@Increment(Tyrantrum)\ndef move_3(self): # Psychic Fangs\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        for t in ['REFLECT','LIGHT_SCREEN','AURORA_VEIL']:\n            if self.target['side_conditions'].get(t):\n                del self.target['side_conditions'][t]\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Valstrax\",\n  \"types\": [\n    \"Dragon\",\n    \"Fire\"\n  ],\n  \"gender\": \"Neutral\",\n  \"ability\": {\n    \"Energy Overflow\": \"Each turn, this Pokemon's Speed increases by 1 stage. If its HP drops below 1/3, its Special Attack increases by 2 stages instead.\"\n  },\n  \"moves\": {\n    \"Dragon Laser\": {\n      \"power\": 120,\n      \"accuracy\": 90,\n      \"category\": \"Special\",\n      \"type\": \"Dragon\",\n      \"effect\": \"Has a 30% chance to lower the target's Special Defense by 2 stages.\"\n    },\n    \"Explosive Blast\": {\n      \"power\": 100,\n      \"accuracy\": 85,\n      \"category\": \"Special\",\n      \"type\": \"Fire\",\n      \"effect\": \"Has a 20% chance to burn the target.\"\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass Valstrax(PokemonBase):\n    _species='Valstrax'\n    _types=['Dragon','Fire']\n    _gender='Neutral'\n    _ability=['Energy Overflow']\n    _move_1=('Dragon Laser',120,90,'Special','Dragon',0,[])\n    _move_2=('Explosive Blast',100,85,'Special','Fire',0,[])\n    def __init__(self):\n        super().__init__()\n    \n    def endturn(self):\n        if self['hp']<self['max_hp']//3:\n            self.set_boost('spa',2,'self')\n        else:\n            self.set_boost('spe',1,'self')\n\n    def move_1(self): # Dragon Laser\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100:\n                self.target.set_boost('spd',-2)\n\n    def move_2(self): # Explosive Blast\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<20/100:\n                self.target.set_status('BRN')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Valstrax\",\n  \"types\": [\n    \"Dragon\",\n    \"Fire\"\n  ],\n  \"gender\": \"Neutral\",\n  \"ability\": {\n    \"Energy Overflow\": \"Each turn, this Pokemon's Speed increases by 1 stage. If its HP drops below 1/3, its Special Attack increases by 2 stages instead.\"\n  },\n  \"moves\": {\n    \"Dragon Laser\": {\n      \"power\": 120,\n      \"accuracy\": 90,\n      \"category\": \"Special\",\n      \"type\": \"Dragon\",\n      \"effect\": \"Has a 30% chance to lower the target's Special Defense by 2 stages.\"\n    },\n    \"Explosive Blast\": {\n      \"power\": 100,\n      \"accuracy\": 85,\n      \"category\": \"Special\",\n      \"type\": \"Fire\",\n      \"effect\": \"Has a 20% chance to burn the target.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Valstrax(PokemonBase):\n    _species='Valstrax'\n    _types=['Dragon','Fire']\n    _gender='Neutral'\n    _ability=['Energy Overflow']\n    _move_1=('Dragon Laser',120,90,'Special','Dragon',0,[])\n    _move_2=('Explosive Blast',100,85,'Special','Fire',0,[])\n    def __init__(self):\n        super().__init__()\n    \n    def endturn(self):\n        if self['hp']<self['max_hp']//3:\n            self.set_boost('spa',2,'self')\n        else:\n            self.set_boost('spe',1,'self')\n\n    def move_1(self): # Dragon Laser\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100:\n                self.target.set_boost('spd',-2)\n\n    def move_2(self): # Explosive Blast\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<20/100:\n                self.target.set_status('BRN')\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Roost\": {\n    \"power\": 0,\n    \"accuracy\": 100000,\n    \"category\": \"Status\",\n    \"type\": \"Flying\",\n    \"effect\": \"The user restores 1/2 of its maximum HP.\"\n  }\n}\n```",
        "response": "```python\n@Increment(Valstrax,'_move_3')\ndef value():\n    return ('Roost',0,100000,'Status','Flying',0,[])\n\n@Increment(Valstrax)\ndef move_3(self): # Roost\n    self.restore(self['max_hp']//2,'heal')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Valstrax\",\n  \"types\": [\n    \"Dragon\",\n    \"Fire\"\n  ],\n  \"gender\": \"Neutral\",\n  \"ability\": {\n    \"Energy Overflow\": \"Each turn, this Pokemon's Speed increases by 1 stage. If its HP drops below 1/3, its Special Attack increases by 2 stages instead.\"\n  },\n  \"moves\": {\n    \"Dragon Laser\": {\n      \"power\": 120,\n      \"accuracy\": 90,\n      \"category\": \"Special\",\n      \"type\": \"Dragon\",\n      \"effect\": \"Has a 30% chance to lower the target's Special Defense by 2 stages.\"\n    },\n    \"Explosive Blast\": {\n      \"power\": 100,\n      \"accuracy\": 85,\n      \"category\": \"Special\",\n      \"type\": \"Fire\",\n      \"effect\": \"Has a 20% chance to burn the target.\"\n    },\n    \"Roost\": {\n      \"power\": 0,\n      \"accuracy\": 100000,\n      \"category\": \"Status\",\n      \"type\": \"Flying\",\n      \"effect\": \"The user restores 1/2 of its maximum HP.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Valstrax(PokemonBase):\n    _species='Valstrax'\n    _types=['Dragon','Fire']\n    _gender='Neutral'\n    _ability=['Energy Overflow']\n    _move_1=('Dragon Laser',120,90,'Special','Dragon',0,[])\n    _move_2=('Explosive Blast',100,85,'Special','Fire',0,[])\n    def __init__(self):\n        super().__init__()\n    \n    def endturn(self):\n        if self['hp']<self['max_hp']//3:\n            self.set_boost('spa',2,'self')\n        else:\n            self.set_boost('spe',1,'self')\n\n    def move_1(self): # Dragon Laser\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100:\n                self.target.set_boost('spd',-2)\n\n    def move_2(self): # Explosive Blast\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<20/100:\n                self.target.set_status('BRN')\n\n@Increment(Valstrax,'_move_3')\ndef value():\n    return ('Roost',0,100000,'Status','Flying',0,[])\n\n@Increment(Valstrax)\ndef move_3(self): # Roost\n    self.restore(self['max_hp']//2,'heal')\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Flare Cascade\": {\n    \"power\": 80,\n    \"accuracy\": 100,\n    \"category\": \"Special\",\n    \"type\": \"Fire\",\n    \"effect\": \"Has a 30% chance to burn the target and a 10% chance to paralyze the target.\"\n  }\n}\n```",
        "response": "```python\n@Increment(Valstrax,'_move_4')\ndef value():\n    return ('Flare Cascade',80,100,'Special','Fire',0,[])\n\n@Increment(Valstrax)\ndef move_4(self): # Flare Cascade\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint():\n            if rnd()<30/100:\n                self.target.set_status('BRN')\n            if rnd()<10/100:\n                self.target.set_status('PAR')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Valstrax\",\n  \"types\": [\n    \"Dragon\",\n    \"Fire\"\n  ],\n  \"gender\": \"Neutral\",\n  \"ability\": {\n    \"Energy Overflow\": \"Each turn, this Pokemon's Speed increases by 1 stage. If its HP drops below 1/3, its Special Attack increases by 2 stages instead.\"\n  },\n  \"moves\": {\n    \"Dragon Laser\": {\n      \"power\": 120,\n      \"accuracy\": 90,\n      \"category\": \"Special\",\n      \"type\": \"Dragon\",\n      \"effect\": \"Has a 30% chance to lower the target's Special Defense by 2 stages.\"\n    },\n    \"Explosive Blast\": {\n      \"power\": 100,\n      \"accuracy\": 85,\n      \"category\": \"Special\",\n      \"type\": \"Fire\",\n      \"effect\": \"Has a 20% chance to burn the target.\"\n    },\n    \"Roost\": {\n      \"power\": 0,\n      \"accuracy\": 100000,\n      \"category\": \"Status\",\n      \"type\": \"Flying\",\n      \"effect\": \"The user restores 1/2 of its maximum HP.\"\n    },\n    \"Flare Cascade\": {\n      \"power\": 80,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Fire\",\n      \"effect\": \"Has a 30% chance to burn the target and a 10% chance to paralyze the target.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Valstrax(PokemonBase):\n    _species='Valstrax'\n    _types=['Dragon','Fire']\n    _gender='Neutral'\n    _ability=['Energy Overflow']\n    _move_1=('Dragon Laser',120,90,'Special','Dragon',0,[])\n    _move_2=('Explosive Blast',100,85,'Special','Fire',0,[])\n    def __init__(self):\n        super().__init__()\n    \n    def endturn(self):\n        if self['hp']<self['max_hp']//3:\n            self.set_boost('spa',2,'self')\n        else:\n            self.set_boost('spe',1,'self')\n\n    def move_1(self): # Dragon Laser\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100:\n                self.target.set_boost('spd',-2)\n\n    def move_2(self): # Explosive Blast\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<20/100:\n                self.target.set_status('BRN')\n\n@Increment(Valstrax,'_move_3')\ndef value():\n    return ('Roost',0,100000,'Status','Flying',0,[])\n\n@Increment(Valstrax)\ndef move_3(self): # Roost\n    self.restore(self['max_hp']//2,'heal')\n\n@Increment(Valstrax,'_move_4')\ndef value():\n    return ('Flare Cascade',80,100,'Special','Fire',0,[])\n\n@Increment(Valstrax)\ndef move_4(self): # Flare Cascade\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint():\n            if rnd()<30/100:\n                self.target.set_status('BRN')\n            if rnd()<10/100:\n                self.target.set_status('PAR')\n```\n\nThis role is gonna learn a new ability:\n```json\n{\n  \"Guts\": \"If this Pokemon is statused, its Special Attack is 1.5x; ignores burn halving physical damage.\"\n}\n```",
        "response": "```python\n@Increment(Valstrax,'_ability')\ndef value():\n    return ['Energy Overflow','Guts']\n\n@Increment(Valstrax)\ndef get_stat(self,key,boost=None):\n    stat=self['stats'][key]\n    boost=self['boosts'][key] if not boost else boost\n    stat_ratio={0:1,1:1.5,2:2,3:2.5,4:3,5:3.5,6:4}[min(6,abs(boost))]\n    if boost<0:\n        stat_ratio=1/stat_ratio\n    stat_ratio*=self.get_weather_stat_mult(key)\n    if key=='spe' and self.isstatus('PAR'):\n        stat_ratio*=0.5\n    if key=='spa' and self['status']:\n        stat_ratio*=1.5\n    return int(stat*stat_ratio)\n\n@Increment(Valstrax)\ndef get_other_mult(self):\n    return 1.\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Velkhana\",\n  \"types\": [\n    \"Ice\",\n    \"Dragon\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Frost Armor\": \"At the start of battle, the Pokemon creates a layer of ice armor, reducing damage from physical moves by 25%. If hit by a physical move, the armor breaks and deals damage to the attacker of 1/8 of its max HP.\"\n  },\n  \"moves\": {\n    \"Flash Freeze Breath\": {\n      \"power\": 90,\n      \"accuracy\": 95,\n      \"category\": \"Special\",\n      \"type\": \"Ice\",\n      \"effect\": \"Has a 30% chance to freeze the target.\"\n    },\n    \"Icy Wall\": {\n      \"power\": 0,\n      \"accuracy\": 100000,\n      \"category\": \"Status\",\n      \"type\": \"Ice\",\n      \"effect\": \"Creates a wall of ice that reduces damage from the next three attacks by 50%.\"\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass Velkhana(PokemonBase):\n    _species='Velkhana'\n    _types=['Ice','Dragon']\n    _gender='Male'\n    _ability=['Frost Armor']\n    _move_1=('Flash Freeze Breath',90,95,'Special','Ice',0,[])\n    _move_2=('Icy Wall',0,100000,'Status','Ice',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def onswitch(self):\n        self.set_condition('ICE_ARMOR',counter=0)\n    \n    def _take_damage_attack(self,x):\n        self.register_act_taken()\n        if self['conditions'].get('ICE_ARMOR'):\n            if self['act_taken']['category']=='Physical':\n                x=int(x*0.75)\n                del self['conditions']['ICE_ARMOR']\n                self.target.take_damage(self['max_hp']//8,'loss')\n        if self['conditions'].get('ICY_WALL'):\n            x=int(x*0.5)\n            self['conditions']['ICY_WALL']['counter']+=1\n            if self['conditions']['ICY_WALL']['counter']==3:\n                del self['conditions']['ICY_WALL']\n        self.state['hp']=max(0,self['hp']-x)\n        if self['hp']==0:\n            self.state['status']='FNT'\n\n    def move_1(self): # Flash Freeze Breath\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100:\n                self.target.set_status('FRZ')\n    \n    def move_2(self): # Icy Wall\n        self.set_condition('ICY_WALL',counter=0)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Velkhana\",\n  \"types\": [\n    \"Ice\",\n    \"Dragon\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Frost Armor\": \"At the start of battle, the Pokemon creates a layer of ice armor, reducing damage from physical moves by 25%. If hit by a physical move, the armor breaks and deals damage to the attacker of 1/8 of its max HP.\"\n  },\n  \"moves\": {\n    \"Flash Freeze Breath\": {\n      \"power\": 90,\n      \"accuracy\": 95,\n      \"category\": \"Special\",\n      \"type\": \"Ice\",\n      \"effect\": \"Has a 30% chance to freeze the target.\"\n    },\n    \"Icy Wall\": {\n      \"power\": 0,\n      \"accuracy\": 100000,\n      \"category\": \"Status\",\n      \"type\": \"Ice\",\n      \"effect\": \"Creates a wall of ice that reduces damage from the next three attacks by 50%.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Velkhana(PokemonBase):\n    _species='Velkhana'\n    _types=['Ice','Dragon']\n    _gender='Male'\n    _ability=['Frost Armor']\n    _move_1=('Flash Freeze Breath',90,95,'Special','Ice',0,[])\n    _move_2=('Icy Wall',0,100000,'Status','Ice',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def onswitch(self):\n        self.set_condition('ICE_ARMOR',counter=0)\n    \n    def _take_damage_attack(self,x):\n        self.register_act_taken()\n        if self['conditions'].get('ICE_ARMOR'):\n            if self['act_taken']['category']=='Physical':\n                x=int(x*0.75)\n                del self['conditions']['ICE_ARMOR']\n                self.target.take_damage(self['max_hp']//8,'loss')\n        if self['conditions'].get('ICY_WALL'):\n            x=int(x*0.5)\n            self['conditions']['ICY_WALL']['counter']+=1\n            if self['conditions']['ICY_WALL']['counter']==3:\n                del self['conditions']['ICY_WALL']\n        self.state['hp']=max(0,self['hp']-x)\n        if self['hp']==0:\n            self.state['status']='FNT'\n\n    def move_1(self): # Flash Freeze Breath\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100:\n                self.target.set_status('FRZ')\n    \n    def move_2(self): # Icy Wall\n        self.set_condition('ICY_WALL',counter=0)\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Tail Lance\": {\n    \"power\": 70,\n    \"accuracy\": 100,\n    \"category\": \"Physical\",\n    \"type\": \"Dragon\",\n    \"effect\": \"Clears the user's all stat changes.\"\n  }\n}\n```",
        "response": "```python\n@Increment(Velkhana,'_move_3')\ndef value():\n    return ('Tail Lance',70,100,'Physical','Dragon',0,[])\n\n@Increment(Velkhana)\ndef move_3(self): # Tail Lance\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        for key in ['atk','def','spa','spd','spe','crit','accuracy']:\n            self['boosts'][key]=0\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Velkhana\",\n  \"types\": [\n    \"Ice\",\n    \"Dragon\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Frost Armor\": \"At the start of battle, the Pokemon creates a layer of ice armor, reducing damage from physical moves by 25%. If hit by a physical move, the armor breaks and deals damage to the attacker of 1/8 of its max HP.\"\n  },\n  \"moves\": {\n    \"Flash Freeze Breath\": {\n      \"power\": 90,\n      \"accuracy\": 95,\n      \"category\": \"Special\",\n      \"type\": \"Ice\",\n      \"effect\": \"Has a 30% chance to freeze the target.\"\n    },\n    \"Icy Wall\": {\n      \"power\": 0,\n      \"accuracy\": 100000,\n      \"category\": \"Status\",\n      \"type\": \"Ice\",\n      \"effect\": \"Creates a wall of ice that reduces damage from the next three attacks by 50%.\"\n    },\n    \"Tail Lance\": {\n      \"power\": 70,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Dragon\",\n      \"effect\": \"Clears the user's all stat changes.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Velkhana(PokemonBase):\n    _species='Velkhana'\n    _types=['Ice','Dragon']\n    _gender='Male'\n    _ability=['Frost Armor']\n    _move_1=('Flash Freeze Breath',90,95,'Special','Ice',0,[])\n    _move_2=('Icy Wall',0,100000,'Status','Ice',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def onswitch(self):\n        self.set_condition('ICE_ARMOR',counter=0)\n    \n    def _take_damage_attack(self,x):\n        self.register_act_taken()\n        if self['conditions'].get('ICE_ARMOR'):\n            if self['act_taken']['category']=='Physical':\n                x=int(x*0.75)\n                del self['conditions']['ICE_ARMOR']\n                self.target.take_damage(self['max_hp']//8,'loss')\n        if self['conditions'].get('ICY_WALL'):\n            x=int(x*0.5)\n            self['conditions']['ICY_WALL']['counter']+=1\n            if self['conditions']['ICY_WALL']['counter']==3:\n                del self['conditions']['ICY_WALL']\n        self.state['hp']=max(0,self['hp']-x)\n        if self['hp']==0:\n            self.state['status']='FNT'\n\n    def move_1(self): # Flash Freeze Breath\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100:\n                self.target.set_status('FRZ')\n    \n    def move_2(self): # Icy Wall\n        self.set_condition('ICY_WALL',counter=0)\n\n@Increment(Velkhana,'_move_3')\ndef value():\n    return ('Tail Lance',70,100,'Physical','Dragon',0,[])\n\n@Increment(Velkhana)\ndef move_3(self): # Tail Lance\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        for key in ['atk','def','spa','spd','spe','crit','accuracy']:\n            self['boosts'][key]=0\n```\n\nThis role is gonna learn a new ability:\n```json\n{\n  \"Frozen Surge\": \"When this Pokemon uses Flash Freeze Breath, it creates a freezing cloud on itself. The next Ice-type move used by Frostana will deal double damage and consume the cloud.\"\n}\n```",
        "response": "```python\n@Increment(Velkhana,'_ability')\ndef value():\n    return ['Frost Armor','Frozen Surge']\n\n@Increment(Velkhana)\ndef move_1(self): # Flash Freeze Breath\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint() and rnd()<30/100:\n            self.target.set_status('FRZ')\n        self.set_condition('FREEZING_CLOUD',counter=0)\n\n@Increment(Velkhana)\ndef get_other_mult(self):\n    mult=1\n    if self.isstatus('BRN') and self['act']['category']=='Physical':\n        mult*=0.5\n    if self['act']['type']=='Ice' and self['conditions'].get('FREEZING_CLOUD'):\n        mult*=2\n        del self['conditions']['FREEZING_CLOUD']\n    return mult\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Volcanion\",\n  \"types\": [\n    \"Fire\",\n    \"Water\"\n  ],\n  \"gender\": \"Female\",\n  \"ability\": {\n    \"Water Absorb\": \"This Pokemon is immune to Water moves and heals 1/4 of its max HP when hit by Water moves.\"\n  },\n  \"moves\": {\n    \"Steam Eruption\": {\n      \"power\": 110,\n      \"accuracy\": 95,\n      \"category\": \"Special\",\n      \"type\": \"Water\",\n      \"effect\": \"Has a 30% chance to burn the target. The target thaws out if it is frozen.\"\n    },\n    \"Fire Blast\": {\n      \"power\": 110,\n      \"accuracy\": 85,\n      \"category\": \"Special\",\n      \"type\": \"Fire\",\n      \"effect\": \"Has a 10% chance to burn the target.\"\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass Volcanion(PokemonBase):\n    _species='Volcanion'\n    _types=['Fire','Water']\n    _gender='Female'\n    _ability=['Water Absorb']\n    _move_1=('Steam Eruption',110,95,'Special','Water',0,[])\n    _move_2=('Fire Blast',110,85,'Special','Fire',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def _take_damage_attack(self,x):\n        self.register_act_taken()\n        if self['act_taken']['type']=='Water':\n            self.state['hp']=min(self['max_hp'],self['hp']+self['max_hp']//4)\n            return\n        self.state['hp']=max(0,self['hp']-x)\n        if self['hp']==0:\n            self.state['status']='FNT'\n    \n    def move_1(self): # Steam Eruption\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100: self.target.set_status('BRN')\n            if self['status']=='FRZ': self.state['status']=None\n\n    def move_2(self): # Fire Blast\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<10/100: self.target.set_status('BRN')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Volcanion\",\n  \"types\": [\n    \"Fire\",\n    \"Water\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Water Absorb\": \"This Pokemon is immune to Water moves and heals 1/4 of its max HP when hit by Water moves. When hit by Fire moves, Eruption Boost is triggered for 2 turns. When Eruption Boost is active, Special Attack is 1.5x and Steam Eruption deals 33% more damage to the target.\"\n  },\n  \"moves\": {\n    \"Steam Eruption\": {\n      \"power\": 110,\n      \"accuracy\": 95,\n      \"category\": \"Special\",\n      \"type\": \"Water\",\n      \"effect\": \"Has a 30% chance to burn the target. The target thaws out if it is frozen. When Eruption Boost is active, deals 33% more damage to the target.\"\n    },\n    \"Fire Blast\": {\n      \"power\": 110,\n      \"accuracy\": 85,\n      \"category\": \"Special\",\n      \"type\": \"Fire\",\n      \"effect\": \"Has a 10% chance to burn the target.\"\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass Volcanion(PokemonBase):\n    _species='Volcanion'\n    _types=['Fire','Water']\n    _gender='Male'\n    _ability=['Water Absorb']\n    _move_1=('Steam Eruption',110,95,'Special','Water',0,[])\n    _move_2=('Fire Blast',110,85,'Special','Fire',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def _take_damage_attack(self,x):\n        self.register_act_taken()\n        if self['act_taken']['type']=='Water':\n            self.state['hp']=min(self['max_hp'],self['hp']+self['max_hp']//4)\n            return\n        self.state['hp']=max(0,self['hp']-x)\n        if self['hp']==0:\n            self.state['status']='FNT'\n            return\n        if self['act_taken']['type']=='Fire':\n            self.set_condition('ERUPTION_BOOST',counter=0)\n\n    def get_stat(self,key,boost=None):\n        stat=self['stats'][key]\n        boost=self['boosts'][key] if not boost else boost\n        stat_ratio={0:1,1:1.5,2:2,3:2.5,4:3,5:3.5,6:4}[min(6,abs(boost))]\n        if boost<0:\n            stat_ratio=1/stat_ratio\n        stat_ratio*=self.get_weather_stat_mult(key)\n        if key=='spe' and self.isstatus('PAR'):\n            stat_ratio*=0.5\n        if key=='spa' and self['conditions'].get('ERUPTION_BOOST'):\n            stat_ratio*=1.5\n        return int(stat*stat_ratio)\n\n    def endturn(self):\n        if self['conditions'].get('ERUPTION_BOOST'):\n            self['conditions']['ERUPTION_BOOST']['counter']+=1\n            if self['conditions']['ERUPTION_BOOST']['counter']==2:\n                del self['conditions']['ERUPTION_BOOST']\n\n    def move_1(self): # Steam Eruption\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if self['conditions'].get('ERUPTION_BOOST'):\n                damage=int(damage*1.3)\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100: self.target.set_status('BRN')\n            if self['status']=='FRZ': self.state['status']=None\n\n    def move_2(self): # Fire Blast\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<10/100: self.target.set_status('BRN')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Walking Wake\",\n  \"types\": [\n    \"Dragon\",\n    \"Water\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Protosynthesis\": \"On switch-in, if Sunny Day is active, this Pokemon's highest stat is 1.3x, or 1.5x if Speed.\"\n  },\n  \"moves\": {\n    \"Hydro Steam\": {\n      \"power\": 80,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"priority\": 0,\n      \"type\": \"Water\",\n      \"effect\": \"This move's damage is multiplied by 1.5 instead of halved for being Water type in Sunny Day.\"\n    },\n    \"Draco Meteor\": {\n      \"power\": 130,\n      \"accuracy\": 90,\n      \"category\": \"Special\",\n      \"priority\": 0,\n      \"type\": \"Dragon\",\n      \"effect\": \"Lowers the user's Special Attack by 2 stages.\"\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass Walking_Wake(PokemonBase):\n    _species='Walking Wake'\n    _types=['Dragon','Water']\n    _gender='Male'\n    _ability=['Protosynthesis']\n    _move_1=('Hydro Steam',80,100,'Special','Water',0,[])\n    _move_2=('Draco Meteor',130,90,'Special','Dragon',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def onswitch(self):\n        if self.env.get('SUNNYDAY'):\n            t=max([(k,v) for k,v in self['stats'].items()],key=lambda x:x[1])[0]\n            self.set_stat(t,1.5 if t=='spe' else 1.3)\n\n    def get_weather_power_mult(self):\n        if self.env.get('SUNNYDAY'):\n            if self['act']['id']=='Hydro Steam':\n                return 1.5\n            if self['act']['type'] in ['Fire','Water']:\n                return {'Fire':1.5,'Water':0.5}[self['act']['type']]\n        if self.env.get('RAINDANCE'):\n            if self['act']['type'] in ['Fire','Water']:\n                return {'Fire':0.5,'Water':1.5}[self['act']['type']]\n        if self.env.get('ELECTRIC_TERRAIN'):\n            if self['act']['type']=='Electric':\n                return 1.3\n        if self.env.get('GRASSY_TERRAIN'):\n            if self['act']['type']=='Grass':\n                return 1.3\n        if self.env.get('PSYCHIC_TERRAIN'):\n            if self['act']['type']=='Psychic':\n                return 1.3\n        if self.env.get('MISTY_TERRAIN'):\n            if self['act']['type']=='Dragon':\n                return 0.5\n        return 1.\n\n    def move_1(self): # Hydro Steam\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n\n    def move_2(self): # Draco Meteor\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            self.set_boost('spa',-2,'self')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Walking Wake\",\n  \"types\": [\n    \"Dragon\",\n    \"Water\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Protosynthesis\": \"On switch-in, if Sunny Day is active, this Pokemon's highest stat is 1.3x, or 1.5x if Speed.\"\n  },\n  \"moves\": {\n    \"Hydro Steam\": {\n      \"power\": 80,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"priority\": 0,\n      \"type\": \"Water\",\n      \"effect\": \"This move's damage is multiplied by 1.5 instead of halved for being Water type in Sunny Day.\"\n    },\n    \"Draco Meteor\": {\n      \"power\": 130,\n      \"accuracy\": 90,\n      \"category\": \"Special\",\n      \"priority\": 0,\n      \"type\": \"Dragon\",\n      \"effect\": \"Lowers the user's Special Attack by 2 stages.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Walking_Wake(PokemonBase):\n    _species='Walking Wake'\n    _types=['Dragon','Water']\n    _gender='Male'\n    _ability=['Protosynthesis']\n    _move_1=('Hydro Steam',80,100,'Special','Water',0,[])\n    _move_2=('Draco Meteor',130,90,'Special','Dragon',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def onswitch(self):\n        if self.env.get('SUNNYDAY'):\n            t=max([(k,v) for k,v in self['stats'].items()],key=lambda x:x[1])[0]\n            self.set_stat(t,1.5 if t=='spe' else 1.3)\n\n    def get_weather_power_mult(self):\n        if self.env.get('SUNNYDAY'):\n            if self['act']['id']=='Hydro Steam':\n                return 1.5\n            if self['act']['type'] in ['Fire','Water']:\n                return {'Fire':1.5,'Water':0.5}[self['act']['type']]\n        if self.env.get('RAINDANCE'):\n            if self['act']['type'] in ['Fire','Water']:\n                return {'Fire':0.5,'Water':1.5}[self['act']['type']]\n        if self.env.get('ELECTRIC_TERRAIN'):\n            if self['act']['type']=='Electric':\n                return 1.3\n        if self.env.get('GRASSY_TERRAIN'):\n            if self['act']['type']=='Grass':\n                return 1.3\n        if self.env.get('PSYCHIC_TERRAIN'):\n            if self['act']['type']=='Psychic':\n                return 1.3\n        if self.env.get('MISTY_TERRAIN'):\n            if self['act']['type']=='Dragon':\n                return 0.5\n        return 1.\n\n    def move_1(self): # Hydro Steam\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n\n    def move_2(self): # Draco Meteor\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            self.set_boost('spa',-2,'self')\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Flamethrower\": {\n    \"power\": 90,\n    \"accuracy\": 100,\n    \"category\": \"Special\",\n    \"priority\": 0,\n    \"type\": \"Fire\",\n    \"effect\": \"Has a 10% chance to burn the target.\"\n  }\n}\n```",
        "response": "```python\n@Increment(Walking_Wake,'_move_3')\ndef value():\n    return ('Flamethrower',90,100,'Special','Fire',0,[])\n\n@Increment(Walking_Wake)\ndef move_3(self): # Flamethrower\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint() and rnd()<10/100:\n            self.target.set_status('BRN')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Walking Wake\",\n  \"types\": [\n    \"Dragon\",\n    \"Water\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Protosynthesis\": \"On switch-in, if Sunny Day is active, this Pokemon's highest stat is 1.3x, or 1.5x if Speed.\"\n  },\n  \"moves\": {\n    \"Hydro Steam\": {\n      \"power\": 80,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"priority\": 0,\n      \"type\": \"Water\",\n      \"effect\": \"This move's damage is multiplied by 1.5 instead of halved for being Water type in Sunny Day.\"\n    },\n    \"Draco Meteor\": {\n      \"power\": 130,\n      \"accuracy\": 90,\n      \"category\": \"Special\",\n      \"priority\": 0,\n      \"type\": \"Dragon\",\n      \"effect\": \"Lowers the user's Special Attack by 2 stages.\"\n    },\n    \"Flamethrower\": {\n      \"power\": 90,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"priority\": 0,\n      \"type\": \"Fire\",\n      \"effect\": \"Has a 10% chance to burn the target.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Walking_Wake(PokemonBase):\n    _species='Walking Wake'\n    _types=['Dragon','Water']\n    _gender='Male'\n    _ability=['Protosynthesis']\n    _move_1=('Hydro Steam',80,100,'Special','Water',0,[])\n    _move_2=('Draco Meteor',130,90,'Special','Dragon',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def onswitch(self):\n        if self.env.get('SUNNYDAY'):\n            t=max([(k,v) for k,v in self['stats'].items()],key=lambda x:x[1])[0]\n            self.set_stat(t,1.5 if t=='spe' else 1.3)\n\n    def get_weather_power_mult(self):\n        if self.env.get('SUNNYDAY'):\n            if self['act']['id']=='Hydro Steam':\n                return 1.5\n            if self['act']['type'] in ['Fire','Water']:\n                return {'Fire':1.5,'Water':0.5}[self['act']['type']]\n        if self.env.get('RAINDANCE'):\n            if self['act']['type'] in ['Fire','Water']:\n                return {'Fire':0.5,'Water':1.5}[self['act']['type']]\n        if self.env.get('ELECTRIC_TERRAIN'):\n            if self['act']['type']=='Electric':\n                return 1.3\n        if self.env.get('GRASSY_TERRAIN'):\n            if self['act']['type']=='Grass':\n                return 1.3\n        if self.env.get('PSYCHIC_TERRAIN'):\n            if self['act']['type']=='Psychic':\n                return 1.3\n        if self.env.get('MISTY_TERRAIN'):\n            if self['act']['type']=='Dragon':\n                return 0.5\n        return 1.\n\n    def move_1(self): # Hydro Steam\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n\n    def move_2(self): # Draco Meteor\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            self.set_boost('spa',-2,'self')\n\n@Increment(Walking_Wake,'_move_3')\ndef value():\n    return ('Flamethrower',90,100,'Special','Fire',0,[])\n\n@Increment(Walking_Wake)\ndef move_3(self): # Flamethrower\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint() and rnd()<10/100:\n            self.target.set_status('BRN')\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Substitute\": {\n    \"power\": 0,\n    \"accuracy\": 100000,\n    \"category\": \"Status\",\n    \"priority\": 0,\n    \"type\": \"Normal\",\n    \"effect\": \"The user loses 1/4 of its maximum HP and sets a substitute with the same amount of HP to take damage from attacks for it. The substitute is removed once enough damage (1/4 of max HP) is inflicted. Fails if the user does not have enough HP remaining, or if it already has a substitute.\"\n  }\n}\n```",
        "response": "```python\n@Increment(Walking_Wake,'_move_4')\ndef value():\n    return ('Substitute',0,100000,'Status','Normal',0,[])\n\n@Increment(Walking_Wake)\ndef move_4(self): # Substitute\n    if self['hp']>self['max_hp']//4 and not self['conditions'].get('SUBSTITUTE'):\n        self.take_damage(self['max_hp']//4,'loss')\n        self.set_condition('SUBSTITUTE',hp=self['max_hp']//4)\n\n@Increment(Walking_Wake)\ndef _take_damage_attack(self,x):\n    self.register_act_taken()\n    if self['conditions'].get('SUBSTITUTE'):\n        self['conditions']['SUBSTITUTE']['hp']-=x\n        if self['conditions']['SUBSTITUTE']['hp']<1:\n            del self['conditions']['SUBSTITUTE']\n    else:\n        self.state['hp']=max(0,self['hp']-x)\n    if self['hp']==0:\n        self.state['status']='FNT'\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Wangtianhou\",\n  \"types\": [\n    \"Dark\",\n    \"Dragon\"\n  ],\n  \"gender\": \"Neutral\",\n  \"ability\": {\n    \"Dragon Bane\": \"This Pokemon's moves deal 1.3x damage to Fairy-type Pokemon.\"\n  },\n  \"moves\": {\n    \"Heavenly Bite\": {\n      \"power\": 100,\n      \"accuracy\": 90,\n      \"category\": \"Physical\",\n      \"type\": \"Dark\",\n      \"effect\": \"Has a 20% chance to lower the target's Special Defense by 1 stage.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Dragon Fury\": {\n      \"power\": 120,\n      \"accuracy\": 85,\n      \"category\": \"Special\",\n      \"type\": \"Dragon\",\n      \"effect\": \"Has a 30% chance to confuse the target.\"\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass Wangtianhou(PokemonBase):\n    _species='Wangtianhou'\n    _types=['Dark','Dragon']\n    _gender='Neutral'\n    _ability=['Dragon Bane']\n    _move_1=('Heavenly Bite',100,90,'Physical','Dark',0,['contact'])\n    _move_2=('Dragon Fury',120,85,'Special','Dragon',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def get_other_mult(self):\n        mult=1\n        if self.target['type']=='Fairy':\n            mult*=1.3\n        return mult\n\n    def move_1(self): # Heavenly Bite\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<20/100:\n                self.target.set_boost('spd',-1)\n\n    def move_2(self): # Dragon Fury\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100:\n                self.target.set_condition('CONFUSION',counter=0)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Wangtianhou\",\n  \"types\": [\n    \"Dark\",\n    \"Dragon\"\n  ],\n  \"gender\": \"Neutral\",\n  \"ability\": {\n    \"Dragon Bane\": \"This Pokemon's moves deal 1.3x damage to Fairy-type Pokemon.\"\n  },\n  \"moves\": {\n    \"Heavenly Bite\": {\n      \"power\": 100,\n      \"accuracy\": 90,\n      \"category\": \"Physical\",\n      \"type\": \"Dark\",\n      \"effect\": \"Has a 20% chance to lower the target's Special Defense by 1 stage.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Dragon Fury\": {\n      \"power\": 120,\n      \"accuracy\": 85,\n      \"category\": \"Special\",\n      \"type\": \"Dragon\",\n      \"effect\": \"Has a 30% chance to confuse the target.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Wangtianhou(PokemonBase):\n    _species='Wangtianhou'\n    _types=['Dark','Dragon']\n    _gender='Neutral'\n    _ability=['Dragon Bane']\n    _move_1=('Heavenly Bite',100,90,'Physical','Dark',0,['contact'])\n    _move_2=('Dragon Fury',120,85,'Special','Dragon',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def get_other_mult(self):\n        mult=1\n        if self.target['type']=='Fairy':\n            mult*=1.3\n        return mult\n\n    def move_1(self): # Heavenly Bite\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<20/100:\n                self.target.set_boost('spd',-1)\n\n    def move_2(self): # Dragon Fury\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100:\n                self.target.set_condition('CONFUSION',counter=0)\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Celestial Roar\": {\n    \"power\": 0,\n    \"accuracy\": 100,\n    \"category\": \"Status\",\n    \"type\": \"Dark\",\n    \"effect\": \"Intimidates the opponents, lowering their Attack by 1 stage.\"\n  }\n}\n```",
        "response": "```python\n@Increment(Wangtianhou,'_move_3')\ndef value():\n    return ('Celestial Roar',0,100,'Status','Dark',0,[])\n\n@Increment(Wangtianhou)\ndef move_3(self): # Celestial Roar\n    self.target.set_boost('atk',-1)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Wangtianhou\",\n  \"types\": [\n    \"Dark\",\n    \"Dragon\"\n  ],\n  \"gender\": \"Neutral\",\n  \"ability\": {\n    \"Dragon Bane\": \"This Pokemon's moves deal 1.3x damage to Fairy-type Pokemon.\"\n  },\n  \"moves\": {\n    \"Heavenly Bite\": {\n      \"power\": 100,\n      \"accuracy\": 90,\n      \"category\": \"Physical\",\n      \"type\": \"Dark\",\n      \"effect\": \"Has a 20% chance to lower the target's Special Defense by 1 stage.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Dragon Fury\": {\n      \"power\": 120,\n      \"accuracy\": 85,\n      \"category\": \"Special\",\n      \"type\": \"Dragon\",\n      \"effect\": \"Has a 30% chance to confuse the target.\"\n    },\n    \"Celestial Roar\": {\n      \"power\": 0,\n      \"accuracy\": 100,\n      \"category\": \"Status\",\n      \"type\": \"Dark\",\n      \"effect\": \"Intimidates the opponents, lowering their Attack by 1 stage.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Wangtianhou(PokemonBase):\n    _species='Wangtianhou'\n    _types=['Dark','Dragon']\n    _gender='Neutral'\n    _ability=['Dragon Bane']\n    _move_1=('Heavenly Bite',100,90,'Physical','Dark',0,['contact'])\n    _move_2=('Dragon Fury',120,85,'Special','Dragon',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def get_other_mult(self):\n        mult=1\n        if self.target['type']=='Fairy':\n            mult*=1.3\n        return mult\n\n    def move_1(self): # Heavenly Bite\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<20/100:\n                self.target.set_boost('spd',-1)\n\n    def move_2(self): # Dragon Fury\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100:\n                self.target.set_condition('CONFUSION',counter=0)\n\n@Increment(Wangtianhou,'_move_3')\ndef value():\n    return ('Celestial Roar',0,100,'Status','Dark',0,[])\n\n@Increment(Wangtianhou)\ndef move_3(self): # Celestial Roar\n    self.target.set_boost('atk',-1)\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Heaven Shield\": {\n    \"power\": 0,\n    \"accuracy\": 100000,\n    \"category\": \"Status\",\n    \"type\": \"Dragon\",\n    \"effect\": \"Raises the user's Defense and Special Defense by 1 stage each.\"\n  }\n}\n```",
        "response": "```python\n@Increment(Wangtianhou,'_move_4')\ndef value():\n    return ('Heaven Shield',0,100000,'Status','Dragon',0,[])\n\n@Increment(Wangtianhou)\ndef move_4(self): # Heaven Shield\n    self.set_boost('def',+1,'self')\n    self.set_boost('spd',+1,'self')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Wangtianhou\",\n  \"types\": [\n    \"Dark\",\n    \"Dragon\"\n  ],\n  \"gender\": \"Neutral\",\n  \"ability\": {\n    \"Dragon Bane\": \"This Pokemon's moves deal 1.3x damage to Fairy-type Pokemon.\"\n  },\n  \"moves\": {\n    \"Heavenly Bite\": {\n      \"power\": 100,\n      \"accuracy\": 90,\n      \"category\": \"Physical\",\n      \"type\": \"Dark\",\n      \"effect\": \"Has a 20% chance to lower the target's Special Defense by 1 stage.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Dragon Fury\": {\n      \"power\": 120,\n      \"accuracy\": 85,\n      \"category\": \"Special\",\n      \"type\": \"Dragon\",\n      \"effect\": \"Has a 30% chance to confuse the target.\"\n    },\n    \"Celestial Roar\": {\n      \"power\": 0,\n      \"accuracy\": 100,\n      \"category\": \"Status\",\n      \"type\": \"Dark\",\n      \"effect\": \"Intimidates the opponents, lowering their Attack by 1 stage.\"\n    },\n    \"Heaven Shield\": {\n      \"power\": 0,\n      \"accuracy\": 100000,\n      \"category\": \"Status\",\n      \"type\": \"Dragon\",\n      \"effect\": \"Raises the user's Defense and Special Defense by 1 stage each.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Wangtianhou(PokemonBase):\n    _species='Wangtianhou'\n    _types=['Dark','Dragon']\n    _gender='Neutral'\n    _ability=['Dragon Bane']\n    _move_1=('Heavenly Bite',100,90,'Physical','Dark',0,['contact'])\n    _move_2=('Dragon Fury',120,85,'Special','Dragon',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def get_other_mult(self):\n        mult=1\n        if self.target['type']=='Fairy':\n            mult*=1.3\n        return mult\n\n    def move_1(self): # Heavenly Bite\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<20/100:\n                self.target.set_boost('spd',-1)\n\n    def move_2(self): # Dragon Fury\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100:\n                self.target.set_condition('CONFUSION',counter=0)\n\n@Increment(Wangtianhou,'_move_3')\ndef value():\n    return ('Celestial Roar',0,100,'Status','Dark',0,[])\n\n@Increment(Wangtianhou)\ndef move_3(self): # Celestial Roar\n    self.target.set_boost('atk',-1)\n\n@Increment(Wangtianhou,'_move_4')\ndef value():\n    return ('Heaven Shield',0,100000,'Status','Dragon',0,[])\n\n@Increment(Wangtianhou)\ndef move_4(self): # Heaven Shield\n    self.set_boost('def',+1,'self')\n    self.set_boost('spd',+1,'self')\n```\n\nThis role is gonna learn a new ability:\n```json\n{\n  \"Celestial Watch\": \"This Pokemon will never be affected by any status effect.\"\n}\n```",
        "response": "```python\n@Increment(Wangtianhou,'_ability')\ndef value():\n    return ['Dragon Bane','Celestial Watch']\n\n@Increment(Wangtianhou)\ndef set_status(self,x):\n    return\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Xenonova\",\n  \"types\": [\n    \"Dragon\",\n    \"Fire\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Reckless Power\": \"Increases the power of all moves by 30% but the user takes recoil damage equal to 15% of the damage dealt.\"\n  },\n  \"moves\": {\n    \"Explosive Beam\": {\n      \"power\": 100,\n      \"accuracy\": 90,\n      \"category\": \"Special\",\n      \"type\": \"Fire\",\n      \"effect\": \"Deals damage to the target and has a 30% chance to burn it.\"\n    },\n    \"Trample\": {\n      \"power\": 120,\n      \"accuracy\": 95,\n      \"category\": \"Physical\",\n      \"type\": \"Dragon\",\n      \"effect\": \"Deals damage to the target and has a 20% chance to make the target flinch.\"\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass Xenonova(PokemonBase):\n    _species='Xenonova'\n    _types=['Dragon','Fire']\n    _gender='Male'\n    _ability=['Reckless Power']\n    _move_1=('Explosive Beam',100,90,'Special','Fire',0,[])\n    _move_2=('Trample',120,95,'Physical','Dragon',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def get_power(self):        \n        power=self['act']['power']\n        power*=1.3\n        return int(power*self.get_weather_power_mult())\n\n    def move_1(self): # Explosive Beam\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if rnd()<30/100:\n                self.target.set_status('BRN')\n            self.take_damage(int(0.15*damage),'recoil')\n    \n    def move_2(self): # Trample\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if rnd()<20/100:\n                self.target.set_condition('FLINCH',counter=0)\n            self.take_damage(int(0.15*damage),'recoil')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Xenonova\",\n  \"types\": [\n    \"Dragon\",\n    \"Fire\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Reckless Power\": \"Increases the power of all moves by 30% but the user takes recoil damage equal to 15% of the damage dealt.\"\n  },\n  \"moves\": {\n    \"Explosive Beam\": {\n      \"power\": 100,\n      \"accuracy\": 90,\n      \"category\": \"Special\",\n      \"type\": \"Fire\",\n      \"effect\": \"Deals damage to the target and has a 30% chance to burn it.\"\n    },\n    \"Trample\": {\n      \"power\": 120,\n      \"accuracy\": 95,\n      \"category\": \"Physical\",\n      \"type\": \"Dragon\",\n      \"effect\": \"Deals damage to the target and has a 20% chance to make the target flinch.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Xenonova(PokemonBase):\n    _species='Xenonova'\n    _types=['Dragon','Fire']\n    _gender='Male'\n    _ability=['Reckless Power']\n    _move_1=('Explosive Beam',100,90,'Special','Fire',0,[])\n    _move_2=('Trample',120,95,'Physical','Dragon',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def get_power(self):        \n        power=self['act']['power']\n        power*=1.3\n        return int(power*self.get_weather_power_mult())\n\n    def move_1(self): # Explosive Beam\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if rnd()<30/100:\n                self.target.set_status('BRN')\n            self.take_damage(int(0.15*damage),'recoil')\n    \n    def move_2(self): # Trample\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if rnd()<20/100:\n                self.target.set_condition('FLINCH',counter=0)\n            self.take_damage(int(0.15*damage),'recoil')\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Will-O-Wisp\": {\n    \"power\": 0,\n    \"accuracy\": 85,\n    \"category\": \"Status\",\n    \"type\": \"Fire\",\n    \"effect\": \"Burns the target.\"\n  }\n}\n```",
        "response": "```python\n@Increment(Xenonova,'_move_3')\ndef value():\n    return ('Will-O-Wisp',0,85,'Status','Fire',0,[])\n\n@Increment(Xenonova)\ndef move_3(self): # Will-O-Wisp\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        self.target.set_status('BRN')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Xenonova\",\n  \"types\": [\n    \"Dragon\",\n    \"Fire\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Reckless Power\": \"Increases the power of all moves by 30% but the user takes recoil damage equal to 15% of the damage dealt.\"\n  },\n  \"moves\": {\n    \"Explosive Beam\": {\n      \"power\": 100,\n      \"accuracy\": 90,\n      \"category\": \"Special\",\n      \"type\": \"Fire\",\n      \"effect\": \"Deals damage to the target and has a 30% chance to burn it.\"\n    },\n    \"Trample\": {\n      \"power\": 120,\n      \"accuracy\": 95,\n      \"category\": \"Physical\",\n      \"type\": \"Dragon\",\n      \"effect\": \"Deals damage to the target and has a 20% chance to make the target flinch.\"\n    },\n    \"Will-O-Wisp\": {\n      \"power\": 0,\n      \"accuracy\": 85,\n      \"category\": \"Status\",\n      \"type\": \"Fire\",\n      \"effect\": \"Burns the target.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Xenonova(PokemonBase):\n    _species='Xenonova'\n    _types=['Dragon','Fire']\n    _gender='Male'\n    _ability=['Reckless Power']\n    _move_1=('Explosive Beam',100,90,'Special','Fire',0,[])\n    _move_2=('Trample',120,95,'Physical','Dragon',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def get_power(self):        \n        power=self['act']['power']\n        power*=1.3\n        return int(power*self.get_weather_power_mult())\n\n    def move_1(self): # Explosive Beam\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if rnd()<30/100:\n                self.target.set_status('BRN')\n            self.take_damage(int(0.15*damage),'recoil')\n    \n    def move_2(self): # Trample\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if rnd()<20/100:\n                self.target.set_condition('FLINCH',counter=0)\n            self.take_damage(int(0.15*damage),'recoil')\n\n@Increment(Xenonova,'_move_3')\ndef value():\n    return ('Will-O-Wisp',0,85,'Status','Fire',0,[])\n\n@Increment(Xenonova)\ndef move_3(self): # Will-O-Wisp\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        self.target.set_status('BRN')\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Dragon Dance\": {\n    \"power\": 0,\n    \"accuracy\": 100000,\n    \"category\": \"Status\",\n    \"type\": \"Dragon\",\n    \"effect\": \"Raises the user's Attack and Speed by 1 stage.\"\n  }\n}\n```",
        "response": "```python\n@Increment(Xenonova,'_move_4')\ndef value():\n    return ('Dragon Dance',0,100000,'Status','Dragon',0,[])\n\n@Increment(Xenonova)\ndef move_4(self): # Dragon Dance\n    self.set_boost('atk',+1,'self')\n    self.set_boost('spe',+1,'self')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Xenonova\",\n  \"types\": [\n    \"Dragon\",\n    \"Fire\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Reckless Power\": \"Increases the power of all moves by 30% but the user takes recoil damage equal to 15% of the damage dealt.\"\n  },\n  \"moves\": {\n    \"Explosive Beam\": {\n      \"power\": 100,\n      \"accuracy\": 90,\n      \"category\": \"Special\",\n      \"type\": \"Fire\",\n      \"effect\": \"Deals damage to the target and has a 30% chance to burn it.\"\n    },\n    \"Trample\": {\n      \"power\": 120,\n      \"accuracy\": 95,\n      \"category\": \"Physical\",\n      \"type\": \"Dragon\",\n      \"effect\": \"Deals damage to the target and has a 20% chance to make the target flinch.\"\n    },\n    \"Will-O-Wisp\": {\n      \"power\": 0,\n      \"accuracy\": 85,\n      \"category\": \"Status\",\n      \"type\": \"Fire\",\n      \"effect\": \"Burns the target.\"\n    },\n    \"Dragon Dance\": {\n      \"power\": 0,\n      \"accuracy\": 100000,\n      \"category\": \"Status\",\n      \"type\": \"Dragon\",\n      \"effect\": \"Raises the user's Attack and Speed by 1 stage.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Xenonova(PokemonBase):\n    _species='Xenonova'\n    _types=['Dragon','Fire']\n    _gender='Male'\n    _ability=['Reckless Power']\n    _move_1=('Explosive Beam',100,90,'Special','Fire',0,[])\n    _move_2=('Trample',120,95,'Physical','Dragon',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def get_power(self):        \n        power=self['act']['power']\n        power*=1.3\n        return int(power*self.get_weather_power_mult())\n\n    def move_1(self): # Explosive Beam\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if rnd()<30/100:\n                self.target.set_status('BRN')\n            self.take_damage(int(0.15*damage),'recoil')\n    \n    def move_2(self): # Trample\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if rnd()<20/100:\n                self.target.set_condition('FLINCH',counter=0)\n            self.take_damage(int(0.15*damage),'recoil')\n\n@Increment(Xenonova,'_move_3')\ndef value():\n    return ('Will-O-Wisp',0,85,'Status','Fire',0,[])\n\n@Increment(Xenonova)\ndef move_3(self): # Will-O-Wisp\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        self.target.set_status('BRN')\n\n@Increment(Xenonova,'_move_4')\ndef value():\n    return ('Dragon Dance',0,100000,'Status','Dragon',0,[])\n\n@Increment(Xenonova)\ndef move_4(self): # Dragon Dance\n    self.set_boost('atk',+1,'self')\n    self.set_boost('spe',+1,'self')\n```\n\nThis role is gonna learn a new ability:\n```json\n{\n  \"Unstable Energy\": \"Has a 20% chance to cause the target to become confused at the end of each turn.\"\n}\n```",
        "response": "```python\n@Increment(Xenonova,'_ability')\ndef value():\n    return ['Reckless Power','Unstable Energy']\n\n@Increment(Xenonova)\ndef endturn(self):\n    if rnd()<20/100:\n        self.target.set_condition('CONFUSION',counter=0)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Zamazenta\",\n  \"types\": [\n    \"Steel\",\n    \"Fighting\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Dauntless Shield\": \"On switch-in, this Pokemon's Defense is raised by 1 stage.\"\n  },\n  \"moves\": {\n    \"Behemoth Bash\": {\n      \"power\": 100,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Steel\",\n      \"effect\": \"No additional effect.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Play Rough\": {\n      \"power\": 90,\n      \"accuracy\": 90,\n      \"category\": \"Physical\",\n      \"type\": \"Fairy\",\n      \"effect\": \"Has a 10% chance to lower the target's Attack by 1 stage.\",\n      \"property\": [\n        \"contact\"\n      ]\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass Zamazenta(PokemonBase):\n    _species='Zamazenta'\n    _types=['Steel','Fighting']\n    _gender='Male'\n    _ability=['Dauntless Shield']\n    _move_1=('Behemoth Bash',100,100,'Physical','Steel',0,['contact'])\n    _move_2=('Play Rough',90,90,'Physical','Fairy',0,['contact'])\n    def __init__(self):\n        super().__init__()\n\n    def onswitch(self):\n        self.set_boost('def',1,'self')\n\n    def _get_base_damage(self,power,crit):\n        if self['act']['id']=='Body Press':\n            atk_boost=self['boosts']['def']\n        else:\n            atk_boost=self['boosts']['atk'] if self['act']['category']=='Physical' else self['boosts']['spa']\n        def_boost=self.target['boosts']['def'] if self['act']['category']=='Physical' else self.target['boosts']['spd']\n        \n        if crit:\n            atk_boost=max(0,atk_boost)\n            def_boost=min(0,def_boost)\n\n        if self['act']['id']=='Body Press':\n            attack=self.get_stat('def',atk_boost)\n        else:\n            attack=self.get_stat('atk' if self['act']['category']=='Physical' else 'spa',atk_boost)\n        defense=self.target.get_stat('def' if self['act']['category']=='Physical' else 'spd',def_boost)\n\n        level=100\n        base_damage=int(int(int(int(2*level/5+2)*power*attack)/defense)/50)+2\n\n        return base_damage\n    \n    def move_1(self): # Behemoth Bash\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n\n    def move_2(self): # Body Press\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Zamazenta\",\n  \"types\": [\n    \"Steel\",\n    \"Fighting\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Dauntless Shield\": \"On switch-in, this Pokemon's Defense is raised by 1 stage.\"\n  },\n  \"moves\": {\n    \"Behemoth Bash\": {\n      \"power\": 100,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Steel\",\n      \"effect\": \"No additional effect.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Play Rough\": {\n      \"power\": 90,\n      \"accuracy\": 90,\n      \"category\": \"Physical\",\n      \"type\": \"Fairy\",\n      \"effect\": \"Has a 10% chance to lower the target's Attack by 1 stage.\",\n      \"property\": [\n        \"contact\"\n      ]\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Zamazenta(PokemonBase):\n    _species='Zamazenta'\n    _types=['Steel','Fighting']\n    _gender='Male'\n    _ability=['Dauntless Shield']\n    _move_1=('Behemoth Bash',100,100,'Physical','Steel',0,['contact'])\n    _move_2=('Play Rough',90,90,'Physical','Fairy',0,['contact'])\n    def __init__(self):\n        super().__init__()\n\n    def onswitch(self):\n        self.set_boost('def',1,'self')\n\n    def _get_base_damage(self,power,crit):\n        if self['act']['id']=='Body Press':\n            atk_boost=self['boosts']['def']\n        else:\n            atk_boost=self['boosts']['atk'] if self['act']['category']=='Physical' else self['boosts']['spa']\n        def_boost=self.target['boosts']['def'] if self['act']['category']=='Physical' else self.target['boosts']['spd']\n        \n        if crit:\n            atk_boost=max(0,atk_boost)\n            def_boost=min(0,def_boost)\n\n        if self['act']['id']=='Body Press':\n            attack=self.get_stat('def',atk_boost)\n        else:\n            attack=self.get_stat('atk' if self['act']['category']=='Physical' else 'spa',atk_boost)\n        defense=self.target.get_stat('def' if self['act']['category']=='Physical' else 'spd',def_boost)\n\n        level=100\n        base_damage=int(int(int(int(2*level/5+2)*power*attack)/defense)/50)+2\n\n        return base_damage\n    \n    def move_1(self): # Behemoth Bash\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n\n    def move_2(self): # Body Press\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Iron Defense\": {\n    \"power\": 0,\n    \"accuracy\": 100000,\n    \"category\": \"Status\",\n    \"type\": \"Steel\",\n    \"effect\": \"Raises the user's Defense by 2 stages.\"\n  }\n}\n```",
        "response": "```python\n@Increment(Zamazenta,'_move_3')\ndef value():\n    return ('Iron Defense',0,100000,'Status','Steel',0,[])\n\n@Increment(Zamazenta)\ndef move_3(self): # Play Rough\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint() and rnd()<10/100: self.target.set_boost('atk',-1)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Zamazenta\",\n  \"types\": [\n    \"Steel\",\n    \"Fighting\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Dauntless Shield\": \"On switch-in, this Pokemon's Defense is raised by 1 stage.\"\n  },\n  \"moves\": {\n    \"Behemoth Bash\": {\n      \"power\": 100,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Steel\",\n      \"effect\": \"No additional effect.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Play Rough\": {\n      \"power\": 90,\n      \"accuracy\": 90,\n      \"category\": \"Physical\",\n      \"type\": \"Fairy\",\n      \"effect\": \"Has a 10% chance to lower the target's Attack by 1 stage.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Iron Defense\": {\n      \"power\": 0,\n      \"accuracy\": 100000,\n      \"category\": \"Status\",\n      \"type\": \"Steel\",\n      \"effect\": \"Raises the user's Defense by 2 stages.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Zamazenta(PokemonBase):\n    _species='Zamazenta'\n    _types=['Steel','Fighting']\n    _gender='Male'\n    _ability=['Dauntless Shield']\n    _move_1=('Behemoth Bash',100,100,'Physical','Steel',0,['contact'])\n    _move_2=('Play Rough',90,90,'Physical','Fairy',0,['contact'])\n    def __init__(self):\n        super().__init__()\n\n    def onswitch(self):\n        self.set_boost('def',1,'self')\n\n    def _get_base_damage(self,power,crit):\n        if self['act']['id']=='Body Press':\n            atk_boost=self['boosts']['def']\n        else:\n            atk_boost=self['boosts']['atk'] if self['act']['category']=='Physical' else self['boosts']['spa']\n        def_boost=self.target['boosts']['def'] if self['act']['category']=='Physical' else self.target['boosts']['spd']\n        \n        if crit:\n            atk_boost=max(0,atk_boost)\n            def_boost=min(0,def_boost)\n\n        if self['act']['id']=='Body Press':\n            attack=self.get_stat('def',atk_boost)\n        else:\n            attack=self.get_stat('atk' if self['act']['category']=='Physical' else 'spa',atk_boost)\n        defense=self.target.get_stat('def' if self['act']['category']=='Physical' else 'spd',def_boost)\n\n        level=100\n        base_damage=int(int(int(int(2*level/5+2)*power*attack)/defense)/50)+2\n\n        return base_damage\n    \n    def move_1(self): # Behemoth Bash\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n\n    def move_2(self): # Body Press\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n\n@Increment(Zamazenta,'_move_3')\ndef value():\n    return ('Iron Defense',0,100000,'Status','Steel',0,[])\n\n@Increment(Zamazenta)\ndef move_3(self): # Play Rough\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint() and rnd()<10/100: self.target.set_boost('atk',-1)\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Body Press\": {\n    \"power\": 80,\n    \"accuracy\": 100,\n    \"category\": \"Physical\",\n    \"type\": \"Fighting\",\n    \"effect\": \"Damage is calculated using the user's Defense stat as its Attack, including stat stage changes.\",\n    \"property\": [\n      \"contact\"\n    ]\n  }\n}\n```",
        "response": "```python\n@Increment(Zamazenta,'_move_4')\ndef value():\n    return ('Body Press',80,100,'Physical','Fighting',0,['contact'])\n\n@Increment(Zamazenta)\ndef move_4(self): # Iron Defense\n    self.set_boost('def',2,'self')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Zamazenta\",\n  \"types\": [\n    \"Steel\",\n    \"Fighting\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Dauntless Shield\": \"On switch-in, this Pokemon's Defense is raised by 1 stage.\"\n  },\n  \"moves\": {\n    \"Behemoth Bash\": {\n      \"power\": 100,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Steel\",\n      \"effect\": \"No additional effect.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Play Rough\": {\n      \"power\": 90,\n      \"accuracy\": 90,\n      \"category\": \"Physical\",\n      \"type\": \"Fairy\",\n      \"effect\": \"Has a 10% chance to lower the target's Attack by 1 stage.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Iron Defense\": {\n      \"power\": 0,\n      \"accuracy\": 100000,\n      \"category\": \"Status\",\n      \"type\": \"Steel\",\n      \"effect\": \"Raises the user's Defense by 2 stages.\"\n    },\n    \"Body Press\": {\n      \"power\": 80,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Fighting\",\n      \"effect\": \"Damage is calculated using the user's Defense stat as its Attack, including stat stage changes.\",\n      \"property\": [\n        \"contact\"\n      ]\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Zamazenta(PokemonBase):\n    _species='Zamazenta'\n    _types=['Steel','Fighting']\n    _gender='Male'\n    _ability=['Dauntless Shield']\n    _move_1=('Behemoth Bash',100,100,'Physical','Steel',0,['contact'])\n    _move_2=('Play Rough',90,90,'Physical','Fairy',0,['contact'])\n    def __init__(self):\n        super().__init__()\n\n    def onswitch(self):\n        self.set_boost('def',1,'self')\n\n    def _get_base_damage(self,power,crit):\n        if self['act']['id']=='Body Press':\n            atk_boost=self['boosts']['def']\n        else:\n            atk_boost=self['boosts']['atk'] if self['act']['category']=='Physical' else self['boosts']['spa']\n        def_boost=self.target['boosts']['def'] if self['act']['category']=='Physical' else self.target['boosts']['spd']\n        \n        if crit:\n            atk_boost=max(0,atk_boost)\n            def_boost=min(0,def_boost)\n\n        if self['act']['id']=='Body Press':\n            attack=self.get_stat('def',atk_boost)\n        else:\n            attack=self.get_stat('atk' if self['act']['category']=='Physical' else 'spa',atk_boost)\n        defense=self.target.get_stat('def' if self['act']['category']=='Physical' else 'spd',def_boost)\n\n        level=100\n        base_damage=int(int(int(int(2*level/5+2)*power*attack)/defense)/50)+2\n\n        return base_damage\n    \n    def move_1(self): # Behemoth Bash\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n\n    def move_2(self): # Body Press\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n\n@Increment(Zamazenta,'_move_3')\ndef value():\n    return ('Iron Defense',0,100000,'Status','Steel',0,[])\n\n@Increment(Zamazenta)\ndef move_3(self): # Play Rough\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint() and rnd()<10/100: self.target.set_boost('atk',-1)\n\n@Increment(Zamazenta,'_move_4')\ndef value():\n    return ('Body Press',80,100,'Physical','Fighting',0,['contact'])\n\n@Increment(Zamazenta)\ndef move_4(self): # Iron Defense\n    self.set_boost('def',2,'self')\n```\n\nThis role is gonna learn a new ability:\n```json\n{\n  \"Shield Bash\": \"Each time this Pokemon's defense stat increases by 1, it recovers 1/10 of its maximum HP.\"\n}\n```",
        "response": "```python\n@Increment(Zamazenta,'_ability')\ndef value():\n    return ['Dauntless Shield','Shield Bash']\n\n@Increment(Zamazenta)\ndef set_boost(self,key,x,from_='target'):\n    bar=6 if key in ['atk','def','spa','spd','spe'] else 3\n    if x>0:\n        self['boosts'][key]=min(bar,self['boosts'][key]+x)\n        if key=='def':\n            for _ in range(x):\n                self.restore(self['max_hp']//10,'heal')\n    else:\n        self['boosts'][key]=max(-bar,self['boosts'][key]+x)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Zamazenta\",\n  \"types\": [\n    \"Steel\",\n    \"Fighting\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Dauntless Shield\": \"On switch-in, this Pokemon's Defense is raised by 1 stage.\",\n    \"Shield Bash\": \"Each time this Pokemon's defense stat increases by 1, it recovers 1/10 of its maximum HP.\"\n  },\n  \"moves\": {\n    \"Behemoth Bash\": {\n      \"power\": 100,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Steel\",\n      \"effect\": \"No additional effect.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Play Rough\": {\n      \"power\": 90,\n      \"accuracy\": 90,\n      \"category\": \"Physical\",\n      \"type\": \"Fairy\",\n      \"effect\": \"Has a 10% chance to lower the target's Attack by 1 stage.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Iron Defense\": {\n      \"power\": 0,\n      \"accuracy\": 100000,\n      \"category\": \"Status\",\n      \"type\": \"Steel\",\n      \"effect\": \"Raises the user's Defense by 2 stages.\"\n    },\n    \"Body Press\": {\n      \"power\": 80,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Fighting\",\n      \"effect\": \"Damage is calculated using the user's Defense stat as its Attack, including stat stage changes.\",\n      \"property\": [\n        \"contact\"\n      ]\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Zamazenta(PokemonBase):\n    _species='Zamazenta'\n    _types=['Steel','Fighting']\n    _gender='Male'\n    _ability=['Dauntless Shield']\n    _move_1=('Behemoth Bash',100,100,'Physical','Steel',0,['contact'])\n    _move_2=('Play Rough',90,90,'Physical','Fairy',0,['contact'])\n    def __init__(self):\n        super().__init__()\n\n    def onswitch(self):\n        self.set_boost('def',1,'self')\n\n    def _get_base_damage(self,power,crit):\n        if self['act']['id']=='Body Press':\n            atk_boost=self['boosts']['def']\n        else:\n            atk_boost=self['boosts']['atk'] if self['act']['category']=='Physical' else self['boosts']['spa']\n        def_boost=self.target['boosts']['def'] if self['act']['category']=='Physical' else self.target['boosts']['spd']\n        \n        if crit:\n            atk_boost=max(0,atk_boost)\n            def_boost=min(0,def_boost)\n\n        if self['act']['id']=='Body Press':\n            attack=self.get_stat('def',atk_boost)\n        else:\n            attack=self.get_stat('atk' if self['act']['category']=='Physical' else 'spa',atk_boost)\n        defense=self.target.get_stat('def' if self['act']['category']=='Physical' else 'spd',def_boost)\n\n        level=100\n        base_damage=int(int(int(int(2*level/5+2)*power*attack)/defense)/50)+2\n\n        return base_damage\n    \n    def move_1(self): # Behemoth Bash\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n\n    def move_2(self): # Body Press\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n\n@Increment(Zamazenta,'_move_3')\ndef value():\n    return ('Iron Defense',0,100000,'Status','Steel',0,[])\n\n@Increment(Zamazenta)\ndef move_3(self): # Play Rough\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint() and rnd()<10/100: self.target.set_boost('atk',-1)\n\n@Increment(Zamazenta,'_move_4')\ndef value():\n    return ('Body Press',80,100,'Physical','Fighting',0,['contact'])\n\n@Increment(Zamazenta)\ndef move_4(self): # Iron Defense\n    self.set_boost('def',2,'self')\n\n@Increment(Zamazenta,'_ability')\ndef value():\n    return ['Dauntless Shield','Shield Bash']\n\n@Increment(Zamazenta)\ndef set_boost(self,key,x,from_='target'):\n    bar=6 if key in ['atk','def','spa','spd','spe'] else 3\n    if x>0:\n        self['boosts'][key]=min(bar,self['boosts'][key]+x)\n        if key=='def':\n            for _ in range(x):\n                self.restore(self['max_hp']//10,'heal')\n    else:\n        self['boosts'][key]=max(-bar,self['boosts'][key]+x)\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Rest\": {\n    \"power\": 0,\n    \"accuracy\": 100000,\n    \"category\": \"Status\",\n    \"type\": \"Psychic\",\n    \"effect\": \"The user falls asleep and restores all of its HP, curing itself of any non-volatile status in the process. Fails if the user has full HP, or is already asleep.\"\n  }\n}\n```",
        "response": "```python\n@Increment(Zamazenta,'_move_5')\ndef value():\n    return ('Rest',0,100000,'Status','Psychic',0,[])\n\n@Increment(Zamazenta)\ndef move_5(self): # Rest\n    if not self.isstatus('SLP') and self['hp']<self['max_hp']:\n        self.state['status']=None\n        self.set_status('SLP')\n        self.state['hp']=self['max_hp']\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Zaochi\",\n  \"types\": [\n    \"Ground\",\n    \"Steel\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Chisel Guard\": \"This Pokemon's Defense is increased by 1 stage when hit by a Physical move.\"\n  },\n  \"moves\": {\n    \"Gleaming Spear\": {\n      \"power\": 90,\n      \"accuracy\": 95,\n      \"category\": \"Physical\",\n      \"type\": \"Steel\",\n      \"effect\": \"Has a 20% chance to cause the target to flinch.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Shield Bash\": {\n      \"power\": 80,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Steel\",\n      \"effect\": \"Raises the user's Defense by 1 stage after dealing damage.\",\n      \"property\": [\n        \"contact\"\n      ]\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass Zaochi(PokemonBase):\n    _species='Zaochi'\n    _types=['Ground','Steel']\n    _gender='Male'\n    _ability=['Chisel Guard']\n    _move_1=('Gleaming Spear',90,95,'Physical','Steel',0,['contact'])\n    _move_2=('Shield Bash',80,100,'Physical','Steel',0,['contact'])\n    def __init__(self):\n        super().__init__()\n\n    def _take_damage_attack(self,x):\n        self.register_act_taken()\n        self.state['hp']=max(0,self['hp']-x)\n        if self['hp']==0:\n            self.state['status']='FNT'\n            return\n        if self['act_taken'] and self['act_taken']['category']=='Physical':\n            self.set_boost('def',1,'self')\n    \n    def move_1(self): # Gleaming Spear\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<20/100:\n                self.target.set_condition('FLINCH')\n    \n    def move_2(self): # Shield Bash\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Zaochi\",\n  \"types\": [\n    \"Ground\",\n    \"Steel\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Chisel Guard\": \"This Pokemon's Defense is increased by 1 stage when hit by a Physical move.\"\n  },\n  \"moves\": {\n    \"Gleaming Spear\": {\n      \"power\": 90,\n      \"accuracy\": 95,\n      \"category\": \"Physical\",\n      \"type\": \"Steel\",\n      \"effect\": \"Has a 20% chance to cause the target to flinch.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Shield Bash\": {\n      \"power\": 80,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Steel\",\n      \"effect\": \"Raises the user's Defense by 1 stage after dealing damage.\",\n      \"property\": [\n        \"contact\"\n      ]\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Zaochi(PokemonBase):\n    _species='Zaochi'\n    _types=['Ground','Steel']\n    _gender='Male'\n    _ability=['Chisel Guard']\n    _move_1=('Gleaming Spear',90,95,'Physical','Steel',0,['contact'])\n    _move_2=('Shield Bash',80,100,'Physical','Steel',0,['contact'])\n    def __init__(self):\n        super().__init__()\n\n    def _take_damage_attack(self,x):\n        self.register_act_taken()\n        self.state['hp']=max(0,self['hp']-x)\n        if self['hp']==0:\n            self.state['status']='FNT'\n            return\n        if self['act_taken'] and self['act_taken']['category']=='Physical':\n            self.set_boost('def',1,'self')\n    \n    def move_1(self): # Gleaming Spear\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<20/100:\n                self.target.set_condition('FLINCH')\n    \n    def move_2(self): # Shield Bash\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Muddy Assault\": {\n    \"power\": 100,\n    \"accuracy\": 85,\n    \"category\": \"Special\",\n    \"type\": \"Ground\",\n    \"effect\": \"Has a 20% chance to lower the target's Speed by 1 stage.\"\n  }\n}\n```",
        "response": "```python\n@Increment(Zaochi,'_move_3')\ndef value():\n    return ('Muddy Assault',100,85,'Special','Ground',0,[])\n\n@Increment(Zaochi)\ndef move_3(self): # Muddy Assault\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint() and rnd()<20/100:\n            self.target.set_boost('spe',-1)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Zaochi\",\n  \"types\": [\n    \"Ground\",\n    \"Steel\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Chisel Guard\": \"This Pokemon's Defense is increased by 1 stage when hit by a Physical move.\"\n  },\n  \"moves\": {\n    \"Gleaming Spear\": {\n      \"power\": 90,\n      \"accuracy\": 95,\n      \"category\": \"Physical\",\n      \"type\": \"Steel\",\n      \"effect\": \"Has a 20% chance to cause the target to flinch.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Shield Bash\": {\n      \"power\": 80,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Steel\",\n      \"effect\": \"Raises the user's Defense by 1 stage after dealing damage.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Muddy Assault\": {\n      \"power\": 100,\n      \"accuracy\": 85,\n      \"category\": \"Special\",\n      \"type\": \"Ground\",\n      \"effect\": \"Has a 20% chance to lower the target's Speed by 1 stage.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Zaochi(PokemonBase):\n    _species='Zaochi'\n    _types=['Ground','Steel']\n    _gender='Male'\n    _ability=['Chisel Guard']\n    _move_1=('Gleaming Spear',90,95,'Physical','Steel',0,['contact'])\n    _move_2=('Shield Bash',80,100,'Physical','Steel',0,['contact'])\n    def __init__(self):\n        super().__init__()\n\n    def _take_damage_attack(self,x):\n        self.register_act_taken()\n        self.state['hp']=max(0,self['hp']-x)\n        if self['hp']==0:\n            self.state['status']='FNT'\n            return\n        if self['act_taken'] and self['act_taken']['category']=='Physical':\n            self.set_boost('def',1,'self')\n    \n    def move_1(self): # Gleaming Spear\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<20/100:\n                self.target.set_condition('FLINCH')\n    \n    def move_2(self): # Shield Bash\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n\n@Increment(Zaochi,'_move_3')\ndef value():\n    return ('Muddy Assault',100,85,'Special','Ground',0,[])\n\n@Increment(Zaochi)\ndef move_3(self): # Muddy Assault\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint() and rnd()<20/100:\n            self.target.set_boost('spe',-1)\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Feral Roar\": {\n    \"power\": 0,\n    \"accuracy\": 100,\n    \"category\": \"Status\",\n    \"type\": \"Ground\",\n    \"effect\": \"Lowers the Attack of the target by 1 stage each in the next three turns.\"\n  }\n}\n```",
        "response": "```python\n@Increment(Zaochi,'_move_4')\ndef value():\n    return ('Feral Roar',0,100,'Status','Ground',0,[])\n\n@Increment(Zaochi)\ndef move_4(self): # Feral Roar\n    self.target.set_condition('LOWER_ATTACKS',counter=0)\n\n@Increment(Zaochi)\ndef endturn(self):\n    if self.target['conditions'].get('LOWER_ATTACKS'):\n        self.target.set_boost('atk',-1)\n        self.target['conditions']['LOWER_ATTACKS']['counter']+=1\n        if self.target['conditions']['LOWER_ATTACKS']['counter']==3:\n           del self.target['conditions']['LOWER_ATTACKS']\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Zaochi\",\n  \"types\": [\n    \"Ground\",\n    \"Steel\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Chisel Guard\": \"This Pokemon's Defense is increased by 1 stage when hit by a Physical move.\"\n  },\n  \"moves\": {\n    \"Gleaming Spear\": {\n      \"power\": 90,\n      \"accuracy\": 95,\n      \"category\": \"Physical\",\n      \"type\": \"Steel\",\n      \"effect\": \"Has a 20% chance to cause the target to flinch.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Shield Bash\": {\n      \"power\": 80,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Steel\",\n      \"effect\": \"Raises the user's Defense by 1 stage after dealing damage.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Muddy Assault\": {\n      \"power\": 100,\n      \"accuracy\": 85,\n      \"category\": \"Special\",\n      \"type\": \"Ground\",\n      \"effect\": \"Has a 20% chance to lower the target's Speed by 1 stage.\"\n    },\n    \"Feral Roar\": {\n      \"power\": 0,\n      \"accuracy\": 100,\n      \"category\": \"Status\",\n      \"type\": \"Ground\",\n      \"effect\": \"Lowers the Attack of the target by 1 stage each in the next three turns.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Zaochi(PokemonBase):\n    _species='Zaochi'\n    _types=['Ground','Steel']\n    _gender='Male'\n    _ability=['Chisel Guard']\n    _move_1=('Gleaming Spear',90,95,'Physical','Steel',0,['contact'])\n    _move_2=('Shield Bash',80,100,'Physical','Steel',0,['contact'])\n    def __init__(self):\n        super().__init__()\n\n    def _take_damage_attack(self,x):\n        self.register_act_taken()\n        self.state['hp']=max(0,self['hp']-x)\n        if self['hp']==0:\n            self.state['status']='FNT'\n            return\n        if self['act_taken'] and self['act_taken']['category']=='Physical':\n            self.set_boost('def',1,'self')\n    \n    def move_1(self): # Gleaming Spear\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<20/100:\n                self.target.set_condition('FLINCH')\n    \n    def move_2(self): # Shield Bash\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n\n@Increment(Zaochi,'_move_3')\ndef value():\n    return ('Muddy Assault',100,85,'Special','Ground',0,[])\n\n@Increment(Zaochi)\ndef move_3(self): # Muddy Assault\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint() and rnd()<20/100:\n            self.target.set_boost('spe',-1)\n\n@Increment(Zaochi,'_move_4')\ndef value():\n    return ('Feral Roar',0,100,'Status','Ground',0,[])\n\n@Increment(Zaochi)\ndef move_4(self): # Feral Roar\n    self.target.set_condition('LOWER_ATTACKS',counter=0)\n\n@Increment(Zaochi)\ndef endturn(self):\n    if self.target['conditions'].get('LOWER_ATTACKS'):\n        self.target.set_boost('atk',-1)\n        self.target['conditions']['LOWER_ATTACKS']['counter']+=1\n        if self.target['conditions']['LOWER_ATTACKS']['counter']==3:\n           del self.target['conditions']['LOWER_ATTACKS']\n```\n\nThis role is gonna learn a new ability:\n```json\n{\n  \"Spear Strike\": \"Has a 30% chance to lower the target's Defense by 1 stage when this Pokemon attacks with a Physical move.\"\n}\n```",
        "response": "```python\n@Increment(Zaochi,'_ability')\ndef value():\n    return ['Chisel Guard','Spear Strike']\n\n@Increment(Zaochi)\ndef move_1(self): # Gleaming Spear\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint():\n            if rnd()<20/100:\n                self.target.set_condition('FLINCH')\n            if rnd()<30/100:\n                self.target.set_boost('def',-1)\n\n@Increment(Zaochi)\ndef move_2(self): # Shield Bash\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        self.set_boost('def',1,'self')\n        if not self.target.isfaint() and rnd()<30/100:\n            self.target.set_boost('def',-1)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Zapdos\",\n  \"types\": [\n    \"Electric\",\n    \"Flying\"\n  ],\n  \"gender\": \"Neutral\",\n  \"ability\": {\n    \"Laser Eye\": \"This Pokemon' moves of 70 accuracy or less have 1.5x accuracy.\"\n  },\n  \"moves\": {\n    \"Hurricane\": {\n      \"power\": 110,\n      \"accuracy\": 70,\n      \"category\": \"Special\",\n      \"type\": \"Flying\",\n      \"effect\": \"Has a 30% chance to confuse the target. If the weather is Rain Dance, this move does not check accuracy. If the weather is Sunny Day, this move's accuracy is 50%.\"\n    },\n    \"Zap Cannon\": {\n      \"power\": 120,\n      \"accuracy\": 50,\n      \"category\": \"Special\",\n      \"type\": \"Electric\",\n      \"effect\": \"Has a 100% chance to paralyze the target.\"\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass Zapdos(PokemonBase):\n    _species='Zapdos'\n    _types=['Electric','Flying']\n    _gender='Neutral'\n    _ability=['Laser Eye']\n    _move_1=('Hurricane',110,70,'Special','Flying',0,[])\n    _move_2=('Zap Cannon',120,50,'Special','Electric',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def get_accuracy(self):\n        acc=self['act']['accuracy']\n        if self.env.get('RAINDANCE') and self['act']['id']=='Hurricane':\n            acc=1e5\n        elif self.env.get('SUNNYDAY') and self['act']['id']=='Hurricane':\n            acc=50\n        if acc<=70:\n            acc=int(acc*1.5)\n        acc_mult=[1.0,1.33,1.67,2.0]\n        if self['boosts']['accuracy']>=0:\n            acc*=acc_mult[self['boosts']['accuracy']]\n        else:\n            acc/=acc_mult[self['boosts']['accuracy']]\n        acc*=self.target.get_evasion()\n        return acc/100\n\n    def move_1(self): # Hurricane\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100:\n                self.target.set_condition('CONFUSION',counter=0)\n\n    def move_2(self): # Zap Cannon\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint():\n                self.target.set_status('PAR')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Zapdos\",\n  \"types\": [\n    \"Electric\",\n    \"Flying\"\n  ],\n  \"gender\": \"Neutral\",\n  \"ability\": {\n    \"Laser Eye\": \"This Pokemon' moves of 70 accuracy or less have 1.5x accuracy.\"\n  },\n  \"moves\": {\n    \"Hurricane\": {\n      \"power\": 110,\n      \"accuracy\": 70,\n      \"category\": \"Special\",\n      \"type\": \"Flying\",\n      \"effect\": \"Has a 30% chance to confuse the target. If the weather is Rain Dance, this move does not check accuracy. If the weather is Sunny Day, this move's accuracy is 50%.\"\n    },\n    \"Zap Cannon\": {\n      \"power\": 120,\n      \"accuracy\": 50,\n      \"category\": \"Special\",\n      \"type\": \"Electric\",\n      \"effect\": \"Has a 100% chance to paralyze the target.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Zapdos(PokemonBase):\n    _species='Zapdos'\n    _types=['Electric','Flying']\n    _gender='Neutral'\n    _ability=['Laser Eye']\n    _move_1=('Hurricane',110,70,'Special','Flying',0,[])\n    _move_2=('Zap Cannon',120,50,'Special','Electric',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def get_accuracy(self):\n        acc=self['act']['accuracy']\n        if self.env.get('RAINDANCE') and self['act']['id']=='Hurricane':\n            acc=1e5\n        elif self.env.get('SUNNYDAY') and self['act']['id']=='Hurricane':\n            acc=50\n        if acc<=70:\n            acc=int(acc*1.5)\n        acc_mult=[1.0,1.33,1.67,2.0]\n        if self['boosts']['accuracy']>=0:\n            acc*=acc_mult[self['boosts']['accuracy']]\n        else:\n            acc/=acc_mult[self['boosts']['accuracy']]\n        acc*=self.target.get_evasion()\n        return acc/100\n\n    def move_1(self): # Hurricane\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100:\n                self.target.set_condition('CONFUSION',counter=0)\n\n    def move_2(self): # Zap Cannon\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint():\n                self.target.set_status('PAR')\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Focus Blast\": {\n    \"power\": 120,\n    \"accuracy\": 70,\n    \"category\": \"Special\",\n    \"type\": \"Fighting\",\n    \"effect\": \"Has a 10% chance to lower the target's Special Defense by 1 stage.\"\n  }\n}\n```",
        "response": "```python\n@Increment(Zapdos,'_move_3')\ndef value():\n    return ('Focus Blast',120,70,'Special','Fighting',0,[])\n\n@Increment(Zapdos)\ndef move_3(self): # Focus Blast\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint() and rnd()<10/100:\n            self.target.set_boost('spd',-1)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Zapdos\",\n  \"types\": [\n    \"Electric\",\n    \"Flying\"\n  ],\n  \"gender\": \"Neutral\",\n  \"ability\": {\n    \"Laser Eye\": \"This Pokemon' moves of 70 accuracy or less have 1.5x accuracy.\"\n  },\n  \"moves\": {\n    \"Hurricane\": {\n      \"power\": 110,\n      \"accuracy\": 70,\n      \"category\": \"Special\",\n      \"type\": \"Flying\",\n      \"effect\": \"Has a 30% chance to confuse the target. If the weather is Rain Dance, this move does not check accuracy. If the weather is Sunny Day, this move's accuracy is 50%.\"\n    },\n    \"Zap Cannon\": {\n      \"power\": 120,\n      \"accuracy\": 50,\n      \"category\": \"Special\",\n      \"type\": \"Electric\",\n      \"effect\": \"Has a 100% chance to paralyze the target.\"\n    },\n    \"Focus Blast\": {\n      \"power\": 120,\n      \"accuracy\": 70,\n      \"category\": \"Special\",\n      \"type\": \"Fighting\",\n      \"effect\": \"Has a 10% chance to lower the target's Special Defense by 1 stage.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Zapdos(PokemonBase):\n    _species='Zapdos'\n    _types=['Electric','Flying']\n    _gender='Neutral'\n    _ability=['Laser Eye']\n    _move_1=('Hurricane',110,70,'Special','Flying',0,[])\n    _move_2=('Zap Cannon',120,50,'Special','Electric',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def get_accuracy(self):\n        acc=self['act']['accuracy']\n        if self.env.get('RAINDANCE') and self['act']['id']=='Hurricane':\n            acc=1e5\n        elif self.env.get('SUNNYDAY') and self['act']['id']=='Hurricane':\n            acc=50\n        if acc<=70:\n            acc=int(acc*1.5)\n        acc_mult=[1.0,1.33,1.67,2.0]\n        if self['boosts']['accuracy']>=0:\n            acc*=acc_mult[self['boosts']['accuracy']]\n        else:\n            acc/=acc_mult[self['boosts']['accuracy']]\n        acc*=self.target.get_evasion()\n        return acc/100\n\n    def move_1(self): # Hurricane\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100:\n                self.target.set_condition('CONFUSION',counter=0)\n\n    def move_2(self): # Zap Cannon\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint():\n                self.target.set_status('PAR')\n\n@Increment(Zapdos,'_move_3')\ndef value():\n    return ('Focus Blast',120,70,'Special','Fighting',0,[])\n\n@Increment(Zapdos)\ndef move_3(self): # Focus Blast\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint() and rnd()<10/100:\n            self.target.set_boost('spd',-1)\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Energy recovery\": {\n    \"power\": 0,\n    \"accuracy\": 100000,\n    \"category\": \"Status\",\n    \"type\": \"Electric\",\n    \"effect\": \"Fail if the last move is not Electric-type. Improves the user's Special Attack, Special Defense, and Speed by 1 stage.\"\n  }\n}\n```",
        "response": "```python\n@Increment(Zapdos,'_move_4')\ndef value():\n    return ('Energy recovery',0,100000,'Status','Electric',0,[])\n\n@Increment(Zapdos)\ndef move_4(self): # Energy recovery\n    if self['last_act'] and self['last_act']['type']=='Electric':\n        self.set_boost('spa',1,'self')\n        self.set_boost('spd',1,'self')\n        self.set_boost('spe',1,'self')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Zapdos\",\n  \"types\": [\n    \"Electric\",\n    \"Flying\"\n  ],\n  \"gender\": \"Neutral\",\n  \"ability\": {\n    \"Laser Eye\": \"This Pokemon' moves of 70 accuracy or less have 1.5x accuracy.\"\n  },\n  \"moves\": {\n    \"Hurricane\": {\n      \"power\": 110,\n      \"accuracy\": 70,\n      \"category\": \"Special\",\n      \"type\": \"Flying\",\n      \"effect\": \"Has a 30% chance to confuse the target. If the weather is Rain Dance, this move does not check accuracy. If the weather is Sunny Day, this move's accuracy is 50%.\"\n    },\n    \"Zap Cannon\": {\n      \"power\": 120,\n      \"accuracy\": 50,\n      \"category\": \"Special\",\n      \"type\": \"Electric\",\n      \"effect\": \"Has a 100% chance to paralyze the target.\"\n    },\n    \"Focus Blast\": {\n      \"power\": 120,\n      \"accuracy\": 70,\n      \"category\": \"Special\",\n      \"type\": \"Fighting\",\n      \"effect\": \"Has a 10% chance to lower the target's Special Defense by 1 stage.\"\n    },\n    \"Energy recovery\": {\n      \"power\": 0,\n      \"accuracy\": 100000,\n      \"category\": \"Status\",\n      \"type\": \"Electric\",\n      \"effect\": \"Fail if the last move is not Electric-type. Improves the user's Special Attack, Special Defense, and Speed by 1 stage.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Zapdos(PokemonBase):\n    _species='Zapdos'\n    _types=['Electric','Flying']\n    _gender='Neutral'\n    _ability=['Laser Eye']\n    _move_1=('Hurricane',110,70,'Special','Flying',0,[])\n    _move_2=('Zap Cannon',120,50,'Special','Electric',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def get_accuracy(self):\n        acc=self['act']['accuracy']\n        if self.env.get('RAINDANCE') and self['act']['id']=='Hurricane':\n            acc=1e5\n        elif self.env.get('SUNNYDAY') and self['act']['id']=='Hurricane':\n            acc=50\n        if acc<=70:\n            acc=int(acc*1.5)\n        acc_mult=[1.0,1.33,1.67,2.0]\n        if self['boosts']['accuracy']>=0:\n            acc*=acc_mult[self['boosts']['accuracy']]\n        else:\n            acc/=acc_mult[self['boosts']['accuracy']]\n        acc*=self.target.get_evasion()\n        return acc/100\n\n    def move_1(self): # Hurricane\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100:\n                self.target.set_condition('CONFUSION',counter=0)\n\n    def move_2(self): # Zap Cannon\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint():\n                self.target.set_status('PAR')\n\n@Increment(Zapdos,'_move_3')\ndef value():\n    return ('Focus Blast',120,70,'Special','Fighting',0,[])\n\n@Increment(Zapdos)\ndef move_3(self): # Focus Blast\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint() and rnd()<10/100:\n            self.target.set_boost('spd',-1)\n\n@Increment(Zapdos,'_move_4')\ndef value():\n    return ('Energy recovery',0,100000,'Status','Electric',0,[])\n\n@Increment(Zapdos)\ndef move_4(self): # Energy recovery\n    if self['last_act'] and self['last_act']['type']=='Electric':\n        self.set_boost('spa',1,'self')\n        self.set_boost('spd',1,'self')\n        self.set_boost('spe',1,'self')\n```\n\nThis role is gonna learn a new ability:\n```json\n{\n  \"Competitive\": \"This Pokemon's Sp. Atk is raised by 2 for each of its stats that is lowered by a foe.\"\n}\n```",
        "response": "```python\n@Increment(Zapdos,'_ability')\ndef value():\n    return ['Laser Eye','Competitive']\n\n@Increment(Zapdos)\ndef set_boost(self,key,x,from_='target'):\n    bar=6 if key in ['atk','def','spa','spd','spe'] else 3\n    if x>0:\n        self['boosts'][key]=min(bar,self['boosts'][key]+x)\n    else:\n        self['boosts'][key]=max(-bar,self['boosts'][key]+x)\n        if from_=='target':\n            for _ in range(x):\n                self['boosts']['spa']=min(bar,self['boosts'][key]+2)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Zapdos\",\n  \"types\": [\n    \"Electric\",\n    \"Flying\"\n  ],\n  \"gender\": \"Neutral\",\n  \"ability\": {\n    \"Laser Eye\": \"This Pokemon' moves of 70 accuracy or less have 1.5x accuracy.\",\n    \"Competitive\": \"This Pokemon's Sp. Atk is raised by 2 for each of its stats that is lowered by a foe.\"\n  },\n  \"moves\": {\n    \"Hurricane\": {\n      \"power\": 110,\n      \"accuracy\": 70,\n      \"category\": \"Special\",\n      \"type\": \"Flying\",\n      \"effect\": \"Has a 30% chance to confuse the target. If the weather is Rain Dance, this move does not check accuracy. If the weather is Sunny Day, this move's accuracy is 50%.\"\n    },\n    \"Zap Cannon\": {\n      \"power\": 120,\n      \"accuracy\": 50,\n      \"category\": \"Special\",\n      \"type\": \"Electric\",\n      \"effect\": \"Has a 100% chance to paralyze the target.\"\n    },\n    \"Focus Blast\": {\n      \"power\": 120,\n      \"accuracy\": 70,\n      \"category\": \"Special\",\n      \"type\": \"Fighting\",\n      \"effect\": \"Has a 10% chance to lower the target's Special Defense by 1 stage.\"\n    },\n    \"Energy recovery\": {\n      \"power\": 0,\n      \"accuracy\": 100000,\n      \"category\": \"Status\",\n      \"type\": \"Electric\",\n      \"effect\": \"Fail if the last move is not Electric-type. Improves the user's Special Attack, Special Defense, and Speed by 1 stage.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Zapdos(PokemonBase):\n    _species='Zapdos'\n    _types=['Electric','Flying']\n    _gender='Neutral'\n    _ability=['Laser Eye']\n    _move_1=('Hurricane',110,70,'Special','Flying',0,[])\n    _move_2=('Zap Cannon',120,50,'Special','Electric',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def get_accuracy(self):\n        acc=self['act']['accuracy']\n        if self.env.get('RAINDANCE') and self['act']['id']=='Hurricane':\n            acc=1e5\n        elif self.env.get('SUNNYDAY') and self['act']['id']=='Hurricane':\n            acc=50\n        if acc<=70:\n            acc=int(acc*1.5)\n        acc_mult=[1.0,1.33,1.67,2.0]\n        if self['boosts']['accuracy']>=0:\n            acc*=acc_mult[self['boosts']['accuracy']]\n        else:\n            acc/=acc_mult[self['boosts']['accuracy']]\n        acc*=self.target.get_evasion()\n        return acc/100\n\n    def move_1(self): # Hurricane\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint() and rnd()<30/100:\n                self.target.set_condition('CONFUSION',counter=0)\n\n    def move_2(self): # Zap Cannon\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint():\n                self.target.set_status('PAR')\n\n@Increment(Zapdos,'_move_3')\ndef value():\n    return ('Focus Blast',120,70,'Special','Fighting',0,[])\n\n@Increment(Zapdos)\ndef move_3(self): # Focus Blast\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint() and rnd()<10/100:\n            self.target.set_boost('spd',-1)\n\n@Increment(Zapdos,'_move_4')\ndef value():\n    return ('Energy recovery',0,100000,'Status','Electric',0,[])\n\n@Increment(Zapdos)\ndef move_4(self): # Energy recovery\n    if self['last_act'] and self['last_act']['type']=='Electric':\n        self.set_boost('spa',1,'self')\n        self.set_boost('spd',1,'self')\n        self.set_boost('spe',1,'self')\n\n@Increment(Zapdos,'_ability')\ndef value():\n    return ['Laser Eye','Competitive']\n\n@Increment(Zapdos)\ndef set_boost(self,key,x,from_='target'):\n    bar=6 if key in ['atk','def','spa','spd','spe'] else 3\n    if x>0:\n        self['boosts'][key]=min(bar,self['boosts'][key]+x)\n    else:\n        self['boosts'][key]=max(-bar,self['boosts'][key]+x)\n        if from_=='target':\n            for _ in range(x):\n                self['boosts']['spa']=min(bar,self['boosts'][key]+2)\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Inferno\": {\n    \"power\": 100,\n    \"accuracy\": 50,\n    \"category\": \"Special\",\n    \"type\": \"Fire\",\n    \"effect\": \"Has a 100% chance to burn the target.\"\n  }\n}\n```",
        "response": "```python\n@Increment(Zapdos,'_move_5')\ndef value():\n    return ('Inferno',100,50,'Special','Fire',0,[])\n\n@Increment(Zapdos)\ndef move_5(self): # Inferno\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint():\n            self.target.set_status('BRN')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Zephyra\",\n  \"types\": [\n    \"Flying\"\n  ],\n  \"gender\": \"Mele\",\n  \"ability\": {\n    \"Speedy Recovery\": \"At the end of each turn, if this Pokemon's HP is below 1/3, its Speed is raised by 2 stages and it heals 1/6 of its max HP.\"\n  },\n  \"moves\": {\n    \"Brave Bird\": {\n      \"power\": 120,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Flying\",\n      \"effect\": \"If the target lost HP, the user takes recoil damage equal to 33% the HP lost by the target.\",\n      \"property\": [\n        \"contact\"\n      ]\n    },\n    \"Steel Wing\": {\n      \"power\": 70,\n      \"accuracy\": 90,\n      \"category\": \"Physical\",\n      \"type\": \"Steel\",\n      \"effect\": \"Has a 10% chance to raise the user's Defense by 1 stage.\",\n      \"property\": [\n        \"contact\"\n      ]\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass Zephyra(PokemonBase):\n    _species='Zephyra'\n    _types=['Flying']\n    _gender='Mele'\n    _ability=['Speedy Recovery']\n    _move_1=('Brave Bird',120,100,'Physical','Flying',0,['contact'])\n    _move_2=('Steel Wing',70,90,'Physical','Steel',0,['contact'])\n    def __init__(self):\n        super().__init__()\n    \n    def endturn(self):\n        if self['hp']<self['max_hp']//3:\n            self.set_boost('spe',2)\n            self.restore(self['max_hp']//6,'heal')\n    \n    def move_1(self): # Brave Bird\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if damage>0:\n                self.take_damage(int(0.33*damage),'recoil')\n    \n    def move_2(self): # Steel Wing\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if rnd()<10/100:\n                self.set_boost('def',1,'self')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Zhuqian\",\n  \"types\": [\n    \"Dark\",\n    \"Steel\"\n  ],\n  \"gender\": \"Neutral\",\n  \"ability\": {\n    \"Eclipse Guard\": \"Increases Defense by 1 stage when hit by a Dark-type move.\"\n  },\n  \"moves\": {\n    \"Thunder Lash\": {\n      \"power\": 90,\n      \"accuracy\": 95,\n      \"category\": \"Physical\",\n      \"type\": \"Electric\",\n      \"effect\": \"It will cause paralysis. If the target is already paralyzed, the power of this move has a 30% chance to increase by 50%.\"\n    },\n    \"Shadow Coils\": {\n      \"power\": 70,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Dark\",\n      \"effect\": \"Traps the target for four turns. Damages the target with each turn equal to 1/8 of its maximum HP.\"\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass Zhuqian(PokemonBase):\n    _species='Zhuqian'\n    _types=['Dark','Steel']\n    _gender='Neutral'\n    _ability=['Eclipse Guard']\n    _move_1=('Thunder Lash',90,95,'Physical','Electric',0,[])\n    _move_2=('Shadow Coils',70,100,'Special','Dark',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def _take_damage_attack(self,x):\n        self.register_act_taken()\n        if self['act_taken']['type']=='Dark':\n            self.set_boost('def',1,'self')\n        self.state['hp']=max(0,self['hp']-x)\n        if self['hp']==0:\n            self.state['status']='FNT'\n\n    def get_power(self):\n        power=self['act']['power']\n        if self['act']['id']=='Thunder Lash' and self.target.isstatus('PAR') and rnd()<30/100:\n            power*=1.5\n        return int(power*self.get_weather_power_mult())\n    \n    def endturn(self):\n        if self.target['conditions'].get('TRAP'):\n            self.target.take_damage(self.target['max_hp']//8,'loss')\n            self.target['conditions']['TRAP']['counter']+=1\n            if self.target['conditions']['TRAP']['counter']==4:\n                del self.target['conditions']['TRAP']\n\n    def move_1(self): # Thunder Lash\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            self.target.set_status('PAR')\n\n    def move_2(self): # Shadow Coils\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint():\n                self.target.set_condition('TRAP',counter=0)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Zhuqian\",\n  \"types\": [\n    \"Dark\",\n    \"Steel\"\n  ],\n  \"gender\": \"Neutral\",\n  \"ability\": {\n    \"Eclipse Guard\": \"Increases Defense by 1 stage when hit by a Dark-type move.\"\n  },\n  \"moves\": {\n    \"Thunder Lash\": {\n      \"power\": 90,\n      \"accuracy\": 95,\n      \"category\": \"Physical\",\n      \"type\": \"Electric\",\n      \"effect\": \"It will cause paralysis. If the target is already paralyzed, the power of this move has a 30% chance to increase by 50%.\"\n    },\n    \"Shadow Coils\": {\n      \"power\": 70,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Dark\",\n      \"effect\": \"Traps the target for four turns. Damages the target with each turn equal to 1/8 of its maximum HP.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Zhuqian(PokemonBase):\n    _species='Zhuqian'\n    _types=['Dark','Steel']\n    _gender='Neutral'\n    _ability=['Eclipse Guard']\n    _move_1=('Thunder Lash',90,95,'Physical','Electric',0,[])\n    _move_2=('Shadow Coils',70,100,'Special','Dark',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def _take_damage_attack(self,x):\n        self.register_act_taken()\n        if self['act_taken']['type']=='Dark':\n            self.set_boost('def',1,'self')\n        self.state['hp']=max(0,self['hp']-x)\n        if self['hp']==0:\n            self.state['status']='FNT'\n\n    def get_power(self):\n        power=self['act']['power']\n        if self['act']['id']=='Thunder Lash' and self.target.isstatus('PAR') and rnd()<30/100:\n            power*=1.5\n        return int(power*self.get_weather_power_mult())\n    \n    def endturn(self):\n        if self.target['conditions'].get('TRAP'):\n            self.target.take_damage(self.target['max_hp']//8,'loss')\n            self.target['conditions']['TRAP']['counter']+=1\n            if self.target['conditions']['TRAP']['counter']==4:\n                del self.target['conditions']['TRAP']\n\n    def move_1(self): # Thunder Lash\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            self.target.set_status('PAR')\n\n    def move_2(self): # Shadow Coils\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint():\n                self.target.set_condition('TRAP',counter=0)\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Steel Howl\": {\n    \"power\": 60,\n    \"accuracy\": 100000,\n    \"category\": \"Special\",\n    \"type\": \"Steel\",\n    \"effect\": \"Raises the user's Special Attack and Special Defense by 1 stage.\"\n  }\n}\n```",
        "response": "```python\n@Increment(Zhuqian,'_move_3')\ndef value():\n    return ('Steel Howl',60,100000,'Special','Steel',0,[])\n\n@Increment(Zhuqian)\ndef move_3(self): # Steel Howl\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        self.set_boost('spa',1,'self')\n        self.set_boost('spd',1,'self')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Zhuqian\",\n  \"types\": [\n    \"Dark\",\n    \"Steel\"\n  ],\n  \"gender\": \"Neutral\",\n  \"ability\": {\n    \"Eclipse Guard\": \"Increases Defense by 1 stage when hit by a Dark-type move.\"\n  },\n  \"moves\": {\n    \"Thunder Lash\": {\n      \"power\": 90,\n      \"accuracy\": 95,\n      \"category\": \"Physical\",\n      \"type\": \"Electric\",\n      \"effect\": \"It will cause paralysis. If the target is already paralyzed, the power of this move has a 30% chance to increase by 50%.\"\n    },\n    \"Shadow Coils\": {\n      \"power\": 70,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Dark\",\n      \"effect\": \"Traps the target for four turns. Damages the target with each turn equal to 1/8 of its maximum HP.\"\n    },\n    \"Steel Howl\": {\n      \"power\": 60,\n      \"accuracy\": 100000,\n      \"category\": \"Special\",\n      \"type\": \"Steel\",\n      \"effect\": \"Raises the user's Special Attack and Special Defense by 1 stage.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Zhuqian(PokemonBase):\n    _species='Zhuqian'\n    _types=['Dark','Steel']\n    _gender='Neutral'\n    _ability=['Eclipse Guard']\n    _move_1=('Thunder Lash',90,95,'Physical','Electric',0,[])\n    _move_2=('Shadow Coils',70,100,'Special','Dark',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def _take_damage_attack(self,x):\n        self.register_act_taken()\n        if self['act_taken']['type']=='Dark':\n            self.set_boost('def',1,'self')\n        self.state['hp']=max(0,self['hp']-x)\n        if self['hp']==0:\n            self.state['status']='FNT'\n\n    def get_power(self):\n        power=self['act']['power']\n        if self['act']['id']=='Thunder Lash' and self.target.isstatus('PAR') and rnd()<30/100:\n            power*=1.5\n        return int(power*self.get_weather_power_mult())\n    \n    def endturn(self):\n        if self.target['conditions'].get('TRAP'):\n            self.target.take_damage(self.target['max_hp']//8,'loss')\n            self.target['conditions']['TRAP']['counter']+=1\n            if self.target['conditions']['TRAP']['counter']==4:\n                del self.target['conditions']['TRAP']\n\n    def move_1(self): # Thunder Lash\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            self.target.set_status('PAR')\n\n    def move_2(self): # Shadow Coils\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint():\n                self.target.set_condition('TRAP',counter=0)\n\n@Increment(Zhuqian,'_move_3')\ndef value():\n    return ('Steel Howl',60,100000,'Special','Steel',0,[])\n\n@Increment(Zhuqian)\ndef move_3(self): # Steel Howl\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        self.set_boost('spa',1,'self')\n        self.set_boost('spd',1,'self')\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Coiling Guard\": {\n    \"power\": 0,\n    \"accuracy\": 100000,\n    \"category\": \"Status\",\n    \"type\": \"Steel\",\n    \"effect\": \"Increases the user's Defense by 2 stages and heals 1/4 of its maximum HP.\"\n  }\n}\n```",
        "response": "```python\n@Increment(Zhuqian,'_move_4')\ndef value():\n    return ('Coiling Guard',0,100000,'Status','Steel',0,[])\n\n@Increment(Zhuqian)\ndef move_4(self): # Coiling Guard\n    self.set_boost('def',2,'self')\n    self.restore(self['max_hp']//4,'heal')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Zhuqian\",\n  \"types\": [\n    \"Dark\",\n    \"Steel\"\n  ],\n  \"gender\": \"Neutral\",\n  \"ability\": {\n    \"Eclipse Guard\": \"Increases Defense by 1 stage when hit by a Dark-type move.\"\n  },\n  \"moves\": {\n    \"Thunder Lash\": {\n      \"power\": 90,\n      \"accuracy\": 95,\n      \"category\": \"Physical\",\n      \"type\": \"Electric\",\n      \"effect\": \"It will cause paralysis. If the target is already paralyzed, the power of this move has a 30% chance to increase by 50%.\"\n    },\n    \"Shadow Coils\": {\n      \"power\": 70,\n      \"accuracy\": 100,\n      \"category\": \"Special\",\n      \"type\": \"Dark\",\n      \"effect\": \"Traps the target for four turns. Damages the target with each turn equal to 1/8 of its maximum HP.\"\n    },\n    \"Steel Howl\": {\n      \"power\": 60,\n      \"accuracy\": 100000,\n      \"category\": \"Special\",\n      \"type\": \"Steel\",\n      \"effect\": \"Raises the user's Special Attack and Special Defense by 1 stage.\"\n    },\n    \"Coiling Guard\": {\n      \"power\": 0,\n      \"accuracy\": 100000,\n      \"category\": \"Status\",\n      \"type\": \"Steel\",\n      \"effect\": \"Increases the user's Defense by 2 stages and heals 1/4 of its maximum HP.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Zhuqian(PokemonBase):\n    _species='Zhuqian'\n    _types=['Dark','Steel']\n    _gender='Neutral'\n    _ability=['Eclipse Guard']\n    _move_1=('Thunder Lash',90,95,'Physical','Electric',0,[])\n    _move_2=('Shadow Coils',70,100,'Special','Dark',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def _take_damage_attack(self,x):\n        self.register_act_taken()\n        if self['act_taken']['type']=='Dark':\n            self.set_boost('def',1,'self')\n        self.state['hp']=max(0,self['hp']-x)\n        if self['hp']==0:\n            self.state['status']='FNT'\n\n    def get_power(self):\n        power=self['act']['power']\n        if self['act']['id']=='Thunder Lash' and self.target.isstatus('PAR') and rnd()<30/100:\n            power*=1.5\n        return int(power*self.get_weather_power_mult())\n    \n    def endturn(self):\n        if self.target['conditions'].get('TRAP'):\n            self.target.take_damage(self.target['max_hp']//8,'loss')\n            self.target['conditions']['TRAP']['counter']+=1\n            if self.target['conditions']['TRAP']['counter']==4:\n                del self.target['conditions']['TRAP']\n\n    def move_1(self): # Thunder Lash\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            self.target.set_status('PAR')\n\n    def move_2(self): # Shadow Coils\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n            if not self.target.isfaint():\n                self.target.set_condition('TRAP',counter=0)\n\n@Increment(Zhuqian,'_move_3')\ndef value():\n    return ('Steel Howl',60,100000,'Special','Steel',0,[])\n\n@Increment(Zhuqian)\ndef move_3(self): # Steel Howl\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        self.set_boost('spa',1,'self')\n        self.set_boost('spd',1,'self')\n\n@Increment(Zhuqian,'_move_4')\ndef value():\n    return ('Coiling Guard',0,100000,'Status','Steel',0,[])\n\n@Increment(Zhuqian)\ndef move_4(self): # Coiling Guard\n    self.set_boost('def',2,'self')\n    self.restore(self['max_hp']//4,'heal')\n```\n\nThis role is gonna learn a new ability:\n```json\n{\n  \"Thunder Roar\": \"Has a 30% chance to paralyze the attacker when Zhuqian is hit by an attack.\"\n}\n```",
        "response": "```python\n@Increment(Zhuqian,'_ability')\ndef value():\n    return ['Eclipse Guard','Thunder Roar']\n\n@Increment(Zhuqian)\ndef _take_damage_attack(self,x):\n    self.register_act_taken()\n    if self['act_taken']['type']=='Dark':\n        self.set_boost('def',1,'self')\n    self.state['hp']=max(0,self['hp']-x)\n    if self['hp']==0:\n        self.state['status']='FNT'\n        return\n    if self['act_taken'] and rnd()<30/100:\n        self.target.set_status('PAR')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Zinorgeon\",\n  \"types\": [\n    \"Electric\",\n    \"Dragon\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Thunder Surge\": \"On switch-in, this Pokemon summons Electric Terrain for 5 turns.\"\n  },\n  \"moves\": {\n    \"Volt Slam\": {\n      \"power\": 100,\n      \"accuracy\": 90,\n      \"category\": \"Physical\",\n      \"type\": \"Electric\",\n      \"effect\": \"No additional effect.\"\n    },\n    \"Dragon Claw\": {\n      \"power\": 80,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Dragon\",\n      \"effect\": \"No additional effect.\"\n    }\n  }\n}\n```",
        "response": "```python\nfrom engine import *\n\n\nclass Zinorgeon(PokemonBase):\n    _species='Zinorgeon'\n    _types=['Electric','Dragon']\n    _gender='Male'\n    _ability=['Thunder Surge']\n    _move_1=('Volt Slam',100,90,'Physical','Electric',0,[])\n    _move_2=('Dragon Claw',80,100,'Physical','Dragon',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def onswitch(self):\n        self.set_env('ELECTRIC_TERRAIN',max_count=5)\n\n    def move_1(self): # Volt Slam\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n\n    def move_2(self): # Dragon Claw\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Zinorgeon\",\n  \"types\": [\n    \"Electric\",\n    \"Dragon\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Thunder Surge\": \"On switch-in, this Pokemon summons Electric Terrain for 5 turns.\"\n  },\n  \"moves\": {\n    \"Volt Slam\": {\n      \"power\": 100,\n      \"accuracy\": 90,\n      \"category\": \"Physical\",\n      \"type\": \"Electric\",\n      \"effect\": \"No additional effect.\"\n    },\n    \"Dragon Claw\": {\n      \"power\": 80,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Dragon\",\n      \"effect\": \"No additional effect.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Zinorgeon(PokemonBase):\n    _species='Zinorgeon'\n    _types=['Electric','Dragon']\n    _gender='Male'\n    _ability=['Thunder Surge']\n    _move_1=('Volt Slam',100,90,'Physical','Electric',0,[])\n    _move_2=('Dragon Claw',80,100,'Physical','Dragon',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def onswitch(self):\n        self.set_env('ELECTRIC_TERRAIN',max_count=5)\n\n    def move_1(self): # Volt Slam\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n\n    def move_2(self): # Dragon Claw\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Electric Orb\": {\n    \"power\": 60,\n    \"accuracy\": 95,\n    \"category\": \"Special\",\n    \"type\": \"Electric\",\n    \"effect\": \"Hit 3 times.\"\n  }\n}\n```",
        "response": "```python\n@Increment(Zinorgeon,'_move_3')\ndef value():\n    return ('Electric Orb',60,95,'Special','Electric',0,[])\n\n@Increment(Zinorgeon)\ndef move_3(self): # Electric Orb\n    hit=True; i=0\n    while hit and i<3:\n        damage_ret=self.get_damage()\n        if damage_ret['miss']: break\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        i+=1; hit=False if self.target.isfaint() else True\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Zinorgeon\",\n  \"types\": [\n    \"Electric\",\n    \"Dragon\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Thunder Surge\": \"On switch-in, this Pokemon summons Electric Terrain for 5 turns.\"\n  },\n  \"moves\": {\n    \"Volt Slam\": {\n      \"power\": 100,\n      \"accuracy\": 90,\n      \"category\": \"Physical\",\n      \"type\": \"Electric\",\n      \"effect\": \"No additional effect.\"\n    },\n    \"Dragon Claw\": {\n      \"power\": 80,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Dragon\",\n      \"effect\": \"No additional effect.\"\n    },\n    \"Electric Orb\": {\n      \"power\": 60,\n      \"accuracy\": 95,\n      \"category\": \"Special\",\n      \"type\": \"Electric\",\n      \"effect\": \"Hit 3 times.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Zinorgeon(PokemonBase):\n    _species='Zinorgeon'\n    _types=['Electric','Dragon']\n    _gender='Male'\n    _ability=['Thunder Surge']\n    _move_1=('Volt Slam',100,90,'Physical','Electric',0,[])\n    _move_2=('Dragon Claw',80,100,'Physical','Dragon',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def onswitch(self):\n        self.set_env('ELECTRIC_TERRAIN',max_count=5)\n\n    def move_1(self): # Volt Slam\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n\n    def move_2(self): # Dragon Claw\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n\n@Increment(Zinorgeon,'_move_3')\ndef value():\n    return ('Electric Orb',60,95,'Special','Electric',0,[])\n\n@Increment(Zinorgeon)\ndef move_3(self): # Electric Orb\n    hit=True; i=0\n    while hit and i<3:\n        damage_ret=self.get_damage()\n        if damage_ret['miss']: break\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        i+=1; hit=False if self.target.isfaint() else True\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Thunder Howl\": {\n    \"power\": 0,\n    \"accuracy\": 1000000,\n    \"category\": \"Status\",\n    \"type\": \"Electric\",\n    \"effect\": \"Raises the user's Attack and Speed by 1 stage.\"\n  }\n}\n```",
        "response": "```python\n@Increment(Zinorgeon,'_move_4')\ndef value():\n    return ('Thunder Howl',0,1000000,'Status','Electric',0,[])\n\n@Increment(Zinorgeon)\ndef move_4(self): # Thunder Howl\n    self.set_boost('atk',+1,'self')\n    self.set_boost('spe',+1,'self')\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Zinorgeon\",\n  \"types\": [\n    \"Electric\",\n    \"Dragon\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Thunder Surge\": \"On switch-in, this Pokemon summons Electric Terrain for 5 turns.\"\n  },\n  \"moves\": {\n    \"Volt Slam\": {\n      \"power\": 100,\n      \"accuracy\": 90,\n      \"category\": \"Physical\",\n      \"type\": \"Electric\",\n      \"effect\": \"No additional effect.\"\n    },\n    \"Dragon Claw\": {\n      \"power\": 80,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Dragon\",\n      \"effect\": \"No additional effect.\"\n    },\n    \"Electric Orb\": {\n      \"power\": 60,\n      \"accuracy\": 95,\n      \"category\": \"Special\",\n      \"type\": \"Electric\",\n      \"effect\": \"Hit 3 times.\"\n    },\n    \"Thunder Howl\": {\n      \"power\": 0,\n      \"accuracy\": 1000000,\n      \"category\": \"Status\",\n      \"type\": \"Electric\",\n      \"effect\": \"Raises the user's Attack and Speed by 1 stage.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Zinorgeon(PokemonBase):\n    _species='Zinorgeon'\n    _types=['Electric','Dragon']\n    _gender='Male'\n    _ability=['Thunder Surge']\n    _move_1=('Volt Slam',100,90,'Physical','Electric',0,[])\n    _move_2=('Dragon Claw',80,100,'Physical','Dragon',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def onswitch(self):\n        self.set_env('ELECTRIC_TERRAIN',max_count=5)\n\n    def move_1(self): # Volt Slam\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n\n    def move_2(self): # Dragon Claw\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n\n@Increment(Zinorgeon,'_move_3')\ndef value():\n    return ('Electric Orb',60,95,'Special','Electric',0,[])\n\n@Increment(Zinorgeon)\ndef move_3(self): # Electric Orb\n    hit=True; i=0\n    while hit and i<3:\n        damage_ret=self.get_damage()\n        if damage_ret['miss']: break\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        i+=1; hit=False if self.target.isfaint() else True\n\n@Increment(Zinorgeon,'_move_4')\ndef value():\n    return ('Thunder Howl',0,1000000,'Status','Electric',0,[])\n\n@Increment(Zinorgeon)\ndef move_4(self): # Thunder Howl\n    self.set_boost('atk',+1,'self')\n    self.set_boost('spe',+1,'self')\n```\n\nThis role is gonna learn a new ability:\n```json\n{\n  \"Apex Fury\": \"This Pokemon's each Electric-type attack has a 20% chance to paralyze the target. If the target is already paralyzed, damage from Electric-type moves is doubled.\"\n}\n```",
        "response": "```python\n@Increment(Zinorgeon,'_ability')\ndef value():\n    return ['Thunder Surge','Apex Fury']\n\n@Increment(Zinorgeon)\ndef move_1(self): # Volt Slam\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint() and rnd()<20/100:\n            self.target.set_condition('PAR',counter=0)\n\n@Increment(Zinorgeon)\ndef move_3(self): # Electric Orb\n    hit=True; i=0\n    while hit and i<3:\n        damage_ret=self.get_damage()\n        if damage_ret['miss']: break\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        i+=1; hit=False if self.target.isfaint() else True\n        if not self.target.isfaint() and rnd()<20/100:\n            self.target.set_condition('PAR',counter=0)\n\n@Increment(Zinorgeon)\ndef get_other_mult(self):\n    mult=1\n    if self.isstatus('BRN') and self['act']['category']=='Physical':\n        mult*=0.5\n    if self.target.isstatus('PAR') and self['act']['type']=='Electric':\n        mult*=2.0\n    return mult\n```"
    },
    {
        "system": "You are a game programmer for Pokemon. You will be given either of following two tasks.\n1. I will give you a json script that details a pokemon role. Generate its python implementation.\n2. I will give you a json script that details a pokemon role as well as its python implementation. This pokemon is gonna learn a new move or ability. Generate the incremental code based on the previous implementation. You can overload previous methods or add new ones.",
        "query": "Role script:\n```json\n{\n  \"species\": \"Zinorgeon\",\n  \"types\": [\n    \"Electric\",\n    \"Dragon\"\n  ],\n  \"gender\": \"Male\",\n  \"ability\": {\n    \"Thunder Surge\": \"On switch-in, this Pokemon summons Electric Terrain for 5 turns.\",\n    \"Apex Fury\": \"This Pokemon's each Electric-type attack has a 20% chance to paralyze the target. If the target is already paralyzed, damage from Electric-type moves is doubled.\"\n  },\n  \"moves\": {\n    \"Volt Slam\": {\n      \"power\": 100,\n      \"accuracy\": 90,\n      \"category\": \"Physical\",\n      \"type\": \"Electric\",\n      \"effect\": \"No additional effect.\"\n    },\n    \"Dragon Claw\": {\n      \"power\": 80,\n      \"accuracy\": 100,\n      \"category\": \"Physical\",\n      \"type\": \"Dragon\",\n      \"effect\": \"No additional effect.\"\n    },\n    \"Electric Orb\": {\n      \"power\": 60,\n      \"accuracy\": 95,\n      \"category\": \"Special\",\n      \"type\": \"Electric\",\n      \"effect\": \"Hit 3 times.\"\n    },\n    \"Thunder Howl\": {\n      \"power\": 0,\n      \"accuracy\": 1000000,\n      \"category\": \"Status\",\n      \"type\": \"Electric\",\n      \"effect\": \"Raises the user's Attack and Speed by 1 stage.\"\n    }\n  }\n}\n```\n\nPrevious implementation:\n```python\nfrom engine import *\n\n\nclass Zinorgeon(PokemonBase):\n    _species='Zinorgeon'\n    _types=['Electric','Dragon']\n    _gender='Male'\n    _ability=['Thunder Surge']\n    _move_1=('Volt Slam',100,90,'Physical','Electric',0,[])\n    _move_2=('Dragon Claw',80,100,'Physical','Dragon',0,[])\n    def __init__(self):\n        super().__init__()\n\n    def onswitch(self):\n        self.set_env('ELECTRIC_TERRAIN',max_count=5)\n\n    def move_1(self): # Volt Slam\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n\n    def move_2(self): # Dragon Claw\n        damage_ret=self.get_damage()\n        if not damage_ret['miss']:\n            damage=damage_ret['damage']\n            self.target.take_damage(damage)\n\n@Increment(Zinorgeon,'_move_3')\ndef value():\n    return ('Electric Orb',60,95,'Special','Electric',0,[])\n\n@Increment(Zinorgeon)\ndef move_3(self): # Electric Orb\n    hit=True; i=0\n    while hit and i<3:\n        damage_ret=self.get_damage()\n        if damage_ret['miss']: break\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        i+=1; hit=False if self.target.isfaint() else True\n\n@Increment(Zinorgeon,'_move_4')\ndef value():\n    return ('Thunder Howl',0,1000000,'Status','Electric',0,[])\n\n@Increment(Zinorgeon)\ndef move_4(self): # Thunder Howl\n    self.set_boost('atk',+1,'self')\n    self.set_boost('spe',+1,'self')\n\n@Increment(Zinorgeon,'_ability')\ndef value():\n    return ['Thunder Surge','Apex Fury']\n\n@Increment(Zinorgeon)\ndef move_1(self): # Volt Slam\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        if not self.target.isfaint() and rnd()<20/100:\n            self.target.set_condition('PAR',counter=0)\n\n@Increment(Zinorgeon)\ndef move_3(self): # Electric Orb\n    hit=True; i=0\n    while hit and i<3:\n        damage_ret=self.get_damage()\n        if damage_ret['miss']: break\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n        i+=1; hit=False if self.target.isfaint() else True\n        if not self.target.isfaint() and rnd()<20/100:\n            self.target.set_condition('PAR',counter=0)\n\n@Increment(Zinorgeon)\ndef get_other_mult(self):\n    mult=1\n    if self.isstatus('BRN') and self['act']['category']=='Physical':\n        mult*=0.5\n    if self.target.isstatus('PAR') and self['act']['type']=='Electric':\n        mult*=2.0\n    return mult\n```\n\nThis role is gonna learn a new move:\n```json\n{\n  \"Earthquake\": {\n    \"power\": 100,\n    \"accuracy\": 100,\n    \"category\": \"Physical\",\n    \"type\": \"Ground\",\n    \"effect\": \"No additional effect.\"\n  }\n}\n```",
        "response": "```python\n@Increment(Zinorgeon,'_move_5')\ndef value():\n    return ('Earthquake',100,100,'Physical','Ground',0,[])\n\n@Increment(Zinorgeon)\ndef move_5(self): # Earthquake\n    damage_ret=self.get_damage()\n    if not damage_ret['miss']:\n        damage=damage_ret['damage']\n        self.target.take_damage(damage)\n```"
    }
]